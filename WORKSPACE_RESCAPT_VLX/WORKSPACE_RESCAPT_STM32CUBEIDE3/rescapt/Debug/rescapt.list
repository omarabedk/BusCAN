
rescapt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b30c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000bbc  0800b418  0800b418  0001b418  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800bfd4  0800bfd4  0001bfd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800bfd8  0800bfd8  0001bfd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000017c  20000000  0800bfdc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000540  2000017c  0800c158  0002017c  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  200006bc  0800c158  000206bc  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  0002017c  2**0
                  CONTENTS, READONLY
  9 .debug_info   0001afa0  00000000  00000000  000201a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 000042cb  00000000  00000000  0003b145  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00001648  00000000  00000000  0003f410  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00001480  00000000  00000000  00040a58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  000201ca  00000000  00000000  00041ed8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   00021e97  00000000  00000000  000620a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    0008fe46  00000000  00000000  00083f39  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000050  00000000  00000000  00113d7f  2**0
                  CONTENTS, READONLY
 17 .debug_frame  000061c4  00000000  00000000  00113dd0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000017c 	.word	0x2000017c
 8000128:	00000000 	.word	0x00000000
 800012c:	0800b400 	.word	0x0800b400

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000180 	.word	0x20000180
 8000148:	0800b400 	.word	0x0800b400

0800014c <__aeabi_drsub>:
 800014c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000150:	e002      	b.n	8000158 <__adddf3>
 8000152:	bf00      	nop

08000154 <__aeabi_dsub>:
 8000154:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000158 <__adddf3>:
 8000158:	b530      	push	{r4, r5, lr}
 800015a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800015e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000162:	ea94 0f05 	teq	r4, r5
 8000166:	bf08      	it	eq
 8000168:	ea90 0f02 	teqeq	r0, r2
 800016c:	bf1f      	itttt	ne
 800016e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000172:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000176:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800017e:	f000 80e2 	beq.w	8000346 <__adddf3+0x1ee>
 8000182:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000186:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018a:	bfb8      	it	lt
 800018c:	426d      	neglt	r5, r5
 800018e:	dd0c      	ble.n	80001aa <__adddf3+0x52>
 8000190:	442c      	add	r4, r5
 8000192:	ea80 0202 	eor.w	r2, r0, r2
 8000196:	ea81 0303 	eor.w	r3, r1, r3
 800019a:	ea82 0000 	eor.w	r0, r2, r0
 800019e:	ea83 0101 	eor.w	r1, r3, r1
 80001a2:	ea80 0202 	eor.w	r2, r0, r2
 80001a6:	ea81 0303 	eor.w	r3, r1, r3
 80001aa:	2d36      	cmp	r5, #54	; 0x36
 80001ac:	bf88      	it	hi
 80001ae:	bd30      	pophi	{r4, r5, pc}
 80001b0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001b8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001bc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c0:	d002      	beq.n	80001c8 <__adddf3+0x70>
 80001c2:	4240      	negs	r0, r0
 80001c4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001c8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001cc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x84>
 80001d6:	4252      	negs	r2, r2
 80001d8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001dc:	ea94 0f05 	teq	r4, r5
 80001e0:	f000 80a7 	beq.w	8000332 <__adddf3+0x1da>
 80001e4:	f1a4 0401 	sub.w	r4, r4, #1
 80001e8:	f1d5 0e20 	rsbs	lr, r5, #32
 80001ec:	db0d      	blt.n	800020a <__adddf3+0xb2>
 80001ee:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f2:	fa22 f205 	lsr.w	r2, r2, r5
 80001f6:	1880      	adds	r0, r0, r2
 80001f8:	f141 0100 	adc.w	r1, r1, #0
 80001fc:	fa03 f20e 	lsl.w	r2, r3, lr
 8000200:	1880      	adds	r0, r0, r2
 8000202:	fa43 f305 	asr.w	r3, r3, r5
 8000206:	4159      	adcs	r1, r3
 8000208:	e00e      	b.n	8000228 <__adddf3+0xd0>
 800020a:	f1a5 0520 	sub.w	r5, r5, #32
 800020e:	f10e 0e20 	add.w	lr, lr, #32
 8000212:	2a01      	cmp	r2, #1
 8000214:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000218:	bf28      	it	cs
 800021a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800021e:	fa43 f305 	asr.w	r3, r3, r5
 8000222:	18c0      	adds	r0, r0, r3
 8000224:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000228:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800022c:	d507      	bpl.n	800023e <__adddf3+0xe6>
 800022e:	f04f 0e00 	mov.w	lr, #0
 8000232:	f1dc 0c00 	rsbs	ip, ip, #0
 8000236:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023a:	eb6e 0101 	sbc.w	r1, lr, r1
 800023e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000242:	d31b      	bcc.n	800027c <__adddf3+0x124>
 8000244:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000248:	d30c      	bcc.n	8000264 <__adddf3+0x10c>
 800024a:	0849      	lsrs	r1, r1, #1
 800024c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000250:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000254:	f104 0401 	add.w	r4, r4, #1
 8000258:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800025c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000260:	f080 809a 	bcs.w	8000398 <__adddf3+0x240>
 8000264:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000268:	bf08      	it	eq
 800026a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800026e:	f150 0000 	adcs.w	r0, r0, #0
 8000272:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000276:	ea41 0105 	orr.w	r1, r1, r5
 800027a:	bd30      	pop	{r4, r5, pc}
 800027c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000280:	4140      	adcs	r0, r0
 8000282:	eb41 0101 	adc.w	r1, r1, r1
 8000286:	3c01      	subs	r4, #1
 8000288:	bf28      	it	cs
 800028a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800028e:	d2e9      	bcs.n	8000264 <__adddf3+0x10c>
 8000290:	f091 0f00 	teq	r1, #0
 8000294:	bf04      	itt	eq
 8000296:	4601      	moveq	r1, r0
 8000298:	2000      	moveq	r0, #0
 800029a:	fab1 f381 	clz	r3, r1
 800029e:	bf08      	it	eq
 80002a0:	3320      	addeq	r3, #32
 80002a2:	f1a3 030b 	sub.w	r3, r3, #11
 80002a6:	f1b3 0220 	subs.w	r2, r3, #32
 80002aa:	da0c      	bge.n	80002c6 <__adddf3+0x16e>
 80002ac:	320c      	adds	r2, #12
 80002ae:	dd08      	ble.n	80002c2 <__adddf3+0x16a>
 80002b0:	f102 0c14 	add.w	ip, r2, #20
 80002b4:	f1c2 020c 	rsb	r2, r2, #12
 80002b8:	fa01 f00c 	lsl.w	r0, r1, ip
 80002bc:	fa21 f102 	lsr.w	r1, r1, r2
 80002c0:	e00c      	b.n	80002dc <__adddf3+0x184>
 80002c2:	f102 0214 	add.w	r2, r2, #20
 80002c6:	bfd8      	it	le
 80002c8:	f1c2 0c20 	rsble	ip, r2, #32
 80002cc:	fa01 f102 	lsl.w	r1, r1, r2
 80002d0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d4:	bfdc      	itt	le
 80002d6:	ea41 010c 	orrle.w	r1, r1, ip
 80002da:	4090      	lslle	r0, r2
 80002dc:	1ae4      	subs	r4, r4, r3
 80002de:	bfa2      	ittt	ge
 80002e0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e4:	4329      	orrge	r1, r5
 80002e6:	bd30      	popge	{r4, r5, pc}
 80002e8:	ea6f 0404 	mvn.w	r4, r4
 80002ec:	3c1f      	subs	r4, #31
 80002ee:	da1c      	bge.n	800032a <__adddf3+0x1d2>
 80002f0:	340c      	adds	r4, #12
 80002f2:	dc0e      	bgt.n	8000312 <__adddf3+0x1ba>
 80002f4:	f104 0414 	add.w	r4, r4, #20
 80002f8:	f1c4 0220 	rsb	r2, r4, #32
 80002fc:	fa20 f004 	lsr.w	r0, r0, r4
 8000300:	fa01 f302 	lsl.w	r3, r1, r2
 8000304:	ea40 0003 	orr.w	r0, r0, r3
 8000308:	fa21 f304 	lsr.w	r3, r1, r4
 800030c:	ea45 0103 	orr.w	r1, r5, r3
 8000310:	bd30      	pop	{r4, r5, pc}
 8000312:	f1c4 040c 	rsb	r4, r4, #12
 8000316:	f1c4 0220 	rsb	r2, r4, #32
 800031a:	fa20 f002 	lsr.w	r0, r0, r2
 800031e:	fa01 f304 	lsl.w	r3, r1, r4
 8000322:	ea40 0003 	orr.w	r0, r0, r3
 8000326:	4629      	mov	r1, r5
 8000328:	bd30      	pop	{r4, r5, pc}
 800032a:	fa21 f004 	lsr.w	r0, r1, r4
 800032e:	4629      	mov	r1, r5
 8000330:	bd30      	pop	{r4, r5, pc}
 8000332:	f094 0f00 	teq	r4, #0
 8000336:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033a:	bf06      	itte	eq
 800033c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000340:	3401      	addeq	r4, #1
 8000342:	3d01      	subne	r5, #1
 8000344:	e74e      	b.n	80001e4 <__adddf3+0x8c>
 8000346:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034a:	bf18      	it	ne
 800034c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000350:	d029      	beq.n	80003a6 <__adddf3+0x24e>
 8000352:	ea94 0f05 	teq	r4, r5
 8000356:	bf08      	it	eq
 8000358:	ea90 0f02 	teqeq	r0, r2
 800035c:	d005      	beq.n	800036a <__adddf3+0x212>
 800035e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000362:	bf04      	itt	eq
 8000364:	4619      	moveq	r1, r3
 8000366:	4610      	moveq	r0, r2
 8000368:	bd30      	pop	{r4, r5, pc}
 800036a:	ea91 0f03 	teq	r1, r3
 800036e:	bf1e      	ittt	ne
 8000370:	2100      	movne	r1, #0
 8000372:	2000      	movne	r0, #0
 8000374:	bd30      	popne	{r4, r5, pc}
 8000376:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037a:	d105      	bne.n	8000388 <__adddf3+0x230>
 800037c:	0040      	lsls	r0, r0, #1
 800037e:	4149      	adcs	r1, r1
 8000380:	bf28      	it	cs
 8000382:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000386:	bd30      	pop	{r4, r5, pc}
 8000388:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800038c:	bf3c      	itt	cc
 800038e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000392:	bd30      	popcc	{r4, r5, pc}
 8000394:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000398:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800039c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a0:	f04f 0000 	mov.w	r0, #0
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003aa:	bf1a      	itte	ne
 80003ac:	4619      	movne	r1, r3
 80003ae:	4610      	movne	r0, r2
 80003b0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b4:	bf1c      	itt	ne
 80003b6:	460b      	movne	r3, r1
 80003b8:	4602      	movne	r2, r0
 80003ba:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003be:	bf06      	itte	eq
 80003c0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c4:	ea91 0f03 	teqeq	r1, r3
 80003c8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	bf00      	nop

080003d0 <__aeabi_ui2d>:
 80003d0:	f090 0f00 	teq	r0, #0
 80003d4:	bf04      	itt	eq
 80003d6:	2100      	moveq	r1, #0
 80003d8:	4770      	bxeq	lr
 80003da:	b530      	push	{r4, r5, lr}
 80003dc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e4:	f04f 0500 	mov.w	r5, #0
 80003e8:	f04f 0100 	mov.w	r1, #0
 80003ec:	e750      	b.n	8000290 <__adddf3+0x138>
 80003ee:	bf00      	nop

080003f0 <__aeabi_i2d>:
 80003f0:	f090 0f00 	teq	r0, #0
 80003f4:	bf04      	itt	eq
 80003f6:	2100      	moveq	r1, #0
 80003f8:	4770      	bxeq	lr
 80003fa:	b530      	push	{r4, r5, lr}
 80003fc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000400:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000404:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000408:	bf48      	it	mi
 800040a:	4240      	negmi	r0, r0
 800040c:	f04f 0100 	mov.w	r1, #0
 8000410:	e73e      	b.n	8000290 <__adddf3+0x138>
 8000412:	bf00      	nop

08000414 <__aeabi_f2d>:
 8000414:	0042      	lsls	r2, r0, #1
 8000416:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041a:	ea4f 0131 	mov.w	r1, r1, rrx
 800041e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000422:	bf1f      	itttt	ne
 8000424:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000428:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800042c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000430:	4770      	bxne	lr
 8000432:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000436:	bf08      	it	eq
 8000438:	4770      	bxeq	lr
 800043a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800043e:	bf04      	itt	eq
 8000440:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000444:	4770      	bxeq	lr
 8000446:	b530      	push	{r4, r5, lr}
 8000448:	f44f 7460 	mov.w	r4, #896	; 0x380
 800044c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000450:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000454:	e71c      	b.n	8000290 <__adddf3+0x138>
 8000456:	bf00      	nop

08000458 <__aeabi_ul2d>:
 8000458:	ea50 0201 	orrs.w	r2, r0, r1
 800045c:	bf08      	it	eq
 800045e:	4770      	bxeq	lr
 8000460:	b530      	push	{r4, r5, lr}
 8000462:	f04f 0500 	mov.w	r5, #0
 8000466:	e00a      	b.n	800047e <__aeabi_l2d+0x16>

08000468 <__aeabi_l2d>:
 8000468:	ea50 0201 	orrs.w	r2, r0, r1
 800046c:	bf08      	it	eq
 800046e:	4770      	bxeq	lr
 8000470:	b530      	push	{r4, r5, lr}
 8000472:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000476:	d502      	bpl.n	800047e <__aeabi_l2d+0x16>
 8000478:	4240      	negs	r0, r0
 800047a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800047e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000482:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000486:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048a:	f43f aed8 	beq.w	800023e <__adddf3+0xe6>
 800048e:	f04f 0203 	mov.w	r2, #3
 8000492:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000496:	bf18      	it	ne
 8000498:	3203      	addne	r2, #3
 800049a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049e:	bf18      	it	ne
 80004a0:	3203      	addne	r2, #3
 80004a2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004a6:	f1c2 0320 	rsb	r3, r2, #32
 80004aa:	fa00 fc03 	lsl.w	ip, r0, r3
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 fe03 	lsl.w	lr, r1, r3
 80004b6:	ea40 000e 	orr.w	r0, r0, lr
 80004ba:	fa21 f102 	lsr.w	r1, r1, r2
 80004be:	4414      	add	r4, r2
 80004c0:	e6bd      	b.n	800023e <__adddf3+0xe6>
 80004c2:	bf00      	nop

080004c4 <__aeabi_dmul>:
 80004c4:	b570      	push	{r4, r5, r6, lr}
 80004c6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ca:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004ce:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d2:	bf1d      	ittte	ne
 80004d4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004d8:	ea94 0f0c 	teqne	r4, ip
 80004dc:	ea95 0f0c 	teqne	r5, ip
 80004e0:	f000 f8de 	bleq	80006a0 <__aeabi_dmul+0x1dc>
 80004e4:	442c      	add	r4, r5
 80004e6:	ea81 0603 	eor.w	r6, r1, r3
 80004ea:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004ee:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004f6:	bf18      	it	ne
 80004f8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80004fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000500:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000504:	d038      	beq.n	8000578 <__aeabi_dmul+0xb4>
 8000506:	fba0 ce02 	umull	ip, lr, r0, r2
 800050a:	f04f 0500 	mov.w	r5, #0
 800050e:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000512:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000516:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051a:	f04f 0600 	mov.w	r6, #0
 800051e:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000522:	f09c 0f00 	teq	ip, #0
 8000526:	bf18      	it	ne
 8000528:	f04e 0e01 	orrne.w	lr, lr, #1
 800052c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000530:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000534:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000538:	d204      	bcs.n	8000544 <__aeabi_dmul+0x80>
 800053a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800053e:	416d      	adcs	r5, r5
 8000540:	eb46 0606 	adc.w	r6, r6, r6
 8000544:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000548:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 800054c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000550:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000554:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000558:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800055c:	bf88      	it	hi
 800055e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000562:	d81e      	bhi.n	80005a2 <__aeabi_dmul+0xde>
 8000564:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000568:	bf08      	it	eq
 800056a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800056e:	f150 0000 	adcs.w	r0, r0, #0
 8000572:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000576:	bd70      	pop	{r4, r5, r6, pc}
 8000578:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 800057c:	ea46 0101 	orr.w	r1, r6, r1
 8000580:	ea40 0002 	orr.w	r0, r0, r2
 8000584:	ea81 0103 	eor.w	r1, r1, r3
 8000588:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 800058c:	bfc2      	ittt	gt
 800058e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000592:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000596:	bd70      	popgt	{r4, r5, r6, pc}
 8000598:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800059c:	f04f 0e00 	mov.w	lr, #0
 80005a0:	3c01      	subs	r4, #1
 80005a2:	f300 80ab 	bgt.w	80006fc <__aeabi_dmul+0x238>
 80005a6:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005aa:	bfde      	ittt	le
 80005ac:	2000      	movle	r0, #0
 80005ae:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b2:	bd70      	pople	{r4, r5, r6, pc}
 80005b4:	f1c4 0400 	rsb	r4, r4, #0
 80005b8:	3c20      	subs	r4, #32
 80005ba:	da35      	bge.n	8000628 <__aeabi_dmul+0x164>
 80005bc:	340c      	adds	r4, #12
 80005be:	dc1b      	bgt.n	80005f8 <__aeabi_dmul+0x134>
 80005c0:	f104 0414 	add.w	r4, r4, #20
 80005c4:	f1c4 0520 	rsb	r5, r4, #32
 80005c8:	fa00 f305 	lsl.w	r3, r0, r5
 80005cc:	fa20 f004 	lsr.w	r0, r0, r4
 80005d0:	fa01 f205 	lsl.w	r2, r1, r5
 80005d4:	ea40 0002 	orr.w	r0, r0, r2
 80005d8:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e4:	fa21 f604 	lsr.w	r6, r1, r4
 80005e8:	eb42 0106 	adc.w	r1, r2, r6
 80005ec:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f0:	bf08      	it	eq
 80005f2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005f6:	bd70      	pop	{r4, r5, r6, pc}
 80005f8:	f1c4 040c 	rsb	r4, r4, #12
 80005fc:	f1c4 0520 	rsb	r5, r4, #32
 8000600:	fa00 f304 	lsl.w	r3, r0, r4
 8000604:	fa20 f005 	lsr.w	r0, r0, r5
 8000608:	fa01 f204 	lsl.w	r2, r1, r4
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000614:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000618:	f141 0100 	adc.w	r1, r1, #0
 800061c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000620:	bf08      	it	eq
 8000622:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000626:	bd70      	pop	{r4, r5, r6, pc}
 8000628:	f1c4 0520 	rsb	r5, r4, #32
 800062c:	fa00 f205 	lsl.w	r2, r0, r5
 8000630:	ea4e 0e02 	orr.w	lr, lr, r2
 8000634:	fa20 f304 	lsr.w	r3, r0, r4
 8000638:	fa01 f205 	lsl.w	r2, r1, r5
 800063c:	ea43 0302 	orr.w	r3, r3, r2
 8000640:	fa21 f004 	lsr.w	r0, r1, r4
 8000644:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000648:	fa21 f204 	lsr.w	r2, r1, r4
 800064c:	ea20 0002 	bic.w	r0, r0, r2
 8000650:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000654:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000658:	bf08      	it	eq
 800065a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800065e:	bd70      	pop	{r4, r5, r6, pc}
 8000660:	f094 0f00 	teq	r4, #0
 8000664:	d10f      	bne.n	8000686 <__aeabi_dmul+0x1c2>
 8000666:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066a:	0040      	lsls	r0, r0, #1
 800066c:	eb41 0101 	adc.w	r1, r1, r1
 8000670:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000674:	bf08      	it	eq
 8000676:	3c01      	subeq	r4, #1
 8000678:	d0f7      	beq.n	800066a <__aeabi_dmul+0x1a6>
 800067a:	ea41 0106 	orr.w	r1, r1, r6
 800067e:	f095 0f00 	teq	r5, #0
 8000682:	bf18      	it	ne
 8000684:	4770      	bxne	lr
 8000686:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068a:	0052      	lsls	r2, r2, #1
 800068c:	eb43 0303 	adc.w	r3, r3, r3
 8000690:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000694:	bf08      	it	eq
 8000696:	3d01      	subeq	r5, #1
 8000698:	d0f7      	beq.n	800068a <__aeabi_dmul+0x1c6>
 800069a:	ea43 0306 	orr.w	r3, r3, r6
 800069e:	4770      	bx	lr
 80006a0:	ea94 0f0c 	teq	r4, ip
 80006a4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006a8:	bf18      	it	ne
 80006aa:	ea95 0f0c 	teqne	r5, ip
 80006ae:	d00c      	beq.n	80006ca <__aeabi_dmul+0x206>
 80006b0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b4:	bf18      	it	ne
 80006b6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ba:	d1d1      	bne.n	8000660 <__aeabi_dmul+0x19c>
 80006bc:	ea81 0103 	eor.w	r1, r1, r3
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	f04f 0000 	mov.w	r0, #0
 80006c8:	bd70      	pop	{r4, r5, r6, pc}
 80006ca:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006ce:	bf06      	itte	eq
 80006d0:	4610      	moveq	r0, r2
 80006d2:	4619      	moveq	r1, r3
 80006d4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006d8:	d019      	beq.n	800070e <__aeabi_dmul+0x24a>
 80006da:	ea94 0f0c 	teq	r4, ip
 80006de:	d102      	bne.n	80006e6 <__aeabi_dmul+0x222>
 80006e0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e4:	d113      	bne.n	800070e <__aeabi_dmul+0x24a>
 80006e6:	ea95 0f0c 	teq	r5, ip
 80006ea:	d105      	bne.n	80006f8 <__aeabi_dmul+0x234>
 80006ec:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f0:	bf1c      	itt	ne
 80006f2:	4610      	movne	r0, r2
 80006f4:	4619      	movne	r1, r3
 80006f6:	d10a      	bne.n	800070e <__aeabi_dmul+0x24a>
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000700:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000704:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000708:	f04f 0000 	mov.w	r0, #0
 800070c:	bd70      	pop	{r4, r5, r6, pc}
 800070e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000712:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000716:	bd70      	pop	{r4, r5, r6, pc}

08000718 <__aeabi_ddiv>:
 8000718:	b570      	push	{r4, r5, r6, lr}
 800071a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800071e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000722:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000726:	bf1d      	ittte	ne
 8000728:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800072c:	ea94 0f0c 	teqne	r4, ip
 8000730:	ea95 0f0c 	teqne	r5, ip
 8000734:	f000 f8a7 	bleq	8000886 <__aeabi_ddiv+0x16e>
 8000738:	eba4 0405 	sub.w	r4, r4, r5
 800073c:	ea81 0e03 	eor.w	lr, r1, r3
 8000740:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000744:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000748:	f000 8088 	beq.w	800085c <__aeabi_ddiv+0x144>
 800074c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000750:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000754:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000758:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 800075c:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000760:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000764:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000768:	ea4f 2600 	mov.w	r6, r0, lsl #8
 800076c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000770:	429d      	cmp	r5, r3
 8000772:	bf08      	it	eq
 8000774:	4296      	cmpeq	r6, r2
 8000776:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077a:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800077e:	d202      	bcs.n	8000786 <__aeabi_ddiv+0x6e>
 8000780:	085b      	lsrs	r3, r3, #1
 8000782:	ea4f 0232 	mov.w	r2, r2, rrx
 8000786:	1ab6      	subs	r6, r6, r2
 8000788:	eb65 0503 	sbc.w	r5, r5, r3
 800078c:	085b      	lsrs	r3, r3, #1
 800078e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000792:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000796:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079a:	ebb6 0e02 	subs.w	lr, r6, r2
 800079e:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a2:	bf22      	ittt	cs
 80007a4:	1ab6      	subcs	r6, r6, r2
 80007a6:	4675      	movcs	r5, lr
 80007a8:	ea40 000c 	orrcs.w	r0, r0, ip
 80007ac:	085b      	lsrs	r3, r3, #1
 80007ae:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ba:	bf22      	ittt	cs
 80007bc:	1ab6      	subcs	r6, r6, r2
 80007be:	4675      	movcs	r5, lr
 80007c0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c4:	085b      	lsrs	r3, r3, #1
 80007c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ca:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ce:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d2:	bf22      	ittt	cs
 80007d4:	1ab6      	subcs	r6, r6, r2
 80007d6:	4675      	movcs	r5, lr
 80007d8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007dc:	085b      	lsrs	r3, r3, #1
 80007de:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ea:	bf22      	ittt	cs
 80007ec:	1ab6      	subcs	r6, r6, r2
 80007ee:	4675      	movcs	r5, lr
 80007f0:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f4:	ea55 0e06 	orrs.w	lr, r5, r6
 80007f8:	d018      	beq.n	800082c <__aeabi_ddiv+0x114>
 80007fa:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80007fe:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000802:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000806:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800080e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000812:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000816:	d1c0      	bne.n	800079a <__aeabi_ddiv+0x82>
 8000818:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800081c:	d10b      	bne.n	8000836 <__aeabi_ddiv+0x11e>
 800081e:	ea41 0100 	orr.w	r1, r1, r0
 8000822:	f04f 0000 	mov.w	r0, #0
 8000826:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082a:	e7b6      	b.n	800079a <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	bf04      	itt	eq
 8000832:	4301      	orreq	r1, r0
 8000834:	2000      	moveq	r0, #0
 8000836:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083a:	bf88      	it	hi
 800083c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000840:	f63f aeaf 	bhi.w	80005a2 <__aeabi_dmul+0xde>
 8000844:	ebb5 0c03 	subs.w	ip, r5, r3
 8000848:	bf04      	itt	eq
 800084a:	ebb6 0c02 	subseq.w	ip, r6, r2
 800084e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000852:	f150 0000 	adcs.w	r0, r0, #0
 8000856:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085a:	bd70      	pop	{r4, r5, r6, pc}
 800085c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000860:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000864:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000868:	bfc2      	ittt	gt
 800086a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800086e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000872:	bd70      	popgt	{r4, r5, r6, pc}
 8000874:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000878:	f04f 0e00 	mov.w	lr, #0
 800087c:	3c01      	subs	r4, #1
 800087e:	e690      	b.n	80005a2 <__aeabi_dmul+0xde>
 8000880:	ea45 0e06 	orr.w	lr, r5, r6
 8000884:	e68d      	b.n	80005a2 <__aeabi_dmul+0xde>
 8000886:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088a:	ea94 0f0c 	teq	r4, ip
 800088e:	bf08      	it	eq
 8000890:	ea95 0f0c 	teqeq	r5, ip
 8000894:	f43f af3b 	beq.w	800070e <__aeabi_dmul+0x24a>
 8000898:	ea94 0f0c 	teq	r4, ip
 800089c:	d10a      	bne.n	80008b4 <__aeabi_ddiv+0x19c>
 800089e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a2:	f47f af34 	bne.w	800070e <__aeabi_dmul+0x24a>
 80008a6:	ea95 0f0c 	teq	r5, ip
 80008aa:	f47f af25 	bne.w	80006f8 <__aeabi_dmul+0x234>
 80008ae:	4610      	mov	r0, r2
 80008b0:	4619      	mov	r1, r3
 80008b2:	e72c      	b.n	800070e <__aeabi_dmul+0x24a>
 80008b4:	ea95 0f0c 	teq	r5, ip
 80008b8:	d106      	bne.n	80008c8 <__aeabi_ddiv+0x1b0>
 80008ba:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008be:	f43f aefd 	beq.w	80006bc <__aeabi_dmul+0x1f8>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e722      	b.n	800070e <__aeabi_dmul+0x24a>
 80008c8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008cc:	bf18      	it	ne
 80008ce:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d2:	f47f aec5 	bne.w	8000660 <__aeabi_dmul+0x19c>
 80008d6:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008da:	f47f af0d 	bne.w	80006f8 <__aeabi_dmul+0x234>
 80008de:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e2:	f47f aeeb 	bne.w	80006bc <__aeabi_dmul+0x1f8>
 80008e6:	e712      	b.n	800070e <__aeabi_dmul+0x24a>

080008e8 <__aeabi_d2f>:
 80008e8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80008ec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80008f0:	bf24      	itt	cs
 80008f2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80008f6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80008fa:	d90d      	bls.n	8000918 <__aeabi_d2f+0x30>
 80008fc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000900:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000904:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000908:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 800090c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000910:	bf08      	it	eq
 8000912:	f020 0001 	biceq.w	r0, r0, #1
 8000916:	4770      	bx	lr
 8000918:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 800091c:	d121      	bne.n	8000962 <__aeabi_d2f+0x7a>
 800091e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000922:	bfbc      	itt	lt
 8000924:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000928:	4770      	bxlt	lr
 800092a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800092e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000932:	f1c2 0218 	rsb	r2, r2, #24
 8000936:	f1c2 0c20 	rsb	ip, r2, #32
 800093a:	fa10 f30c 	lsls.w	r3, r0, ip
 800093e:	fa20 f002 	lsr.w	r0, r0, r2
 8000942:	bf18      	it	ne
 8000944:	f040 0001 	orrne.w	r0, r0, #1
 8000948:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800094c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000950:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000954:	ea40 000c 	orr.w	r0, r0, ip
 8000958:	fa23 f302 	lsr.w	r3, r3, r2
 800095c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000960:	e7cc      	b.n	80008fc <__aeabi_d2f+0x14>
 8000962:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000966:	d107      	bne.n	8000978 <__aeabi_d2f+0x90>
 8000968:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 800096c:	bf1e      	ittt	ne
 800096e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000972:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000976:	4770      	bxne	lr
 8000978:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 800097c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000980:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_frsub>:
 8000988:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 800098c:	e002      	b.n	8000994 <__addsf3>
 800098e:	bf00      	nop

08000990 <__aeabi_fsub>:
 8000990:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000994 <__addsf3>:
 8000994:	0042      	lsls	r2, r0, #1
 8000996:	bf1f      	itttt	ne
 8000998:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 800099c:	ea92 0f03 	teqne	r2, r3
 80009a0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80009a4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80009a8:	d06a      	beq.n	8000a80 <__addsf3+0xec>
 80009aa:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80009ae:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80009b2:	bfc1      	itttt	gt
 80009b4:	18d2      	addgt	r2, r2, r3
 80009b6:	4041      	eorgt	r1, r0
 80009b8:	4048      	eorgt	r0, r1
 80009ba:	4041      	eorgt	r1, r0
 80009bc:	bfb8      	it	lt
 80009be:	425b      	neglt	r3, r3
 80009c0:	2b19      	cmp	r3, #25
 80009c2:	bf88      	it	hi
 80009c4:	4770      	bxhi	lr
 80009c6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80009ca:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80009ce:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80009d2:	bf18      	it	ne
 80009d4:	4240      	negne	r0, r0
 80009d6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80009da:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80009de:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80009e2:	bf18      	it	ne
 80009e4:	4249      	negne	r1, r1
 80009e6:	ea92 0f03 	teq	r2, r3
 80009ea:	d03f      	beq.n	8000a6c <__addsf3+0xd8>
 80009ec:	f1a2 0201 	sub.w	r2, r2, #1
 80009f0:	fa41 fc03 	asr.w	ip, r1, r3
 80009f4:	eb10 000c 	adds.w	r0, r0, ip
 80009f8:	f1c3 0320 	rsb	r3, r3, #32
 80009fc:	fa01 f103 	lsl.w	r1, r1, r3
 8000a00:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000a04:	d502      	bpl.n	8000a0c <__addsf3+0x78>
 8000a06:	4249      	negs	r1, r1
 8000a08:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000a0c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000a10:	d313      	bcc.n	8000a3a <__addsf3+0xa6>
 8000a12:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000a16:	d306      	bcc.n	8000a26 <__addsf3+0x92>
 8000a18:	0840      	lsrs	r0, r0, #1
 8000a1a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000a1e:	f102 0201 	add.w	r2, r2, #1
 8000a22:	2afe      	cmp	r2, #254	; 0xfe
 8000a24:	d251      	bcs.n	8000aca <__addsf3+0x136>
 8000a26:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000a2a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000a2e:	bf08      	it	eq
 8000a30:	f020 0001 	biceq.w	r0, r0, #1
 8000a34:	ea40 0003 	orr.w	r0, r0, r3
 8000a38:	4770      	bx	lr
 8000a3a:	0049      	lsls	r1, r1, #1
 8000a3c:	eb40 0000 	adc.w	r0, r0, r0
 8000a40:	3a01      	subs	r2, #1
 8000a42:	bf28      	it	cs
 8000a44:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000a48:	d2ed      	bcs.n	8000a26 <__addsf3+0x92>
 8000a4a:	fab0 fc80 	clz	ip, r0
 8000a4e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000a52:	ebb2 020c 	subs.w	r2, r2, ip
 8000a56:	fa00 f00c 	lsl.w	r0, r0, ip
 8000a5a:	bfaa      	itet	ge
 8000a5c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000a60:	4252      	neglt	r2, r2
 8000a62:	4318      	orrge	r0, r3
 8000a64:	bfbc      	itt	lt
 8000a66:	40d0      	lsrlt	r0, r2
 8000a68:	4318      	orrlt	r0, r3
 8000a6a:	4770      	bx	lr
 8000a6c:	f092 0f00 	teq	r2, #0
 8000a70:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000a74:	bf06      	itte	eq
 8000a76:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000a7a:	3201      	addeq	r2, #1
 8000a7c:	3b01      	subne	r3, #1
 8000a7e:	e7b5      	b.n	80009ec <__addsf3+0x58>
 8000a80:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000a84:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000a88:	bf18      	it	ne
 8000a8a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000a8e:	d021      	beq.n	8000ad4 <__addsf3+0x140>
 8000a90:	ea92 0f03 	teq	r2, r3
 8000a94:	d004      	beq.n	8000aa0 <__addsf3+0x10c>
 8000a96:	f092 0f00 	teq	r2, #0
 8000a9a:	bf08      	it	eq
 8000a9c:	4608      	moveq	r0, r1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea90 0f01 	teq	r0, r1
 8000aa4:	bf1c      	itt	ne
 8000aa6:	2000      	movne	r0, #0
 8000aa8:	4770      	bxne	lr
 8000aaa:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000aae:	d104      	bne.n	8000aba <__addsf3+0x126>
 8000ab0:	0040      	lsls	r0, r0, #1
 8000ab2:	bf28      	it	cs
 8000ab4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000ab8:	4770      	bx	lr
 8000aba:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000abe:	bf3c      	itt	cc
 8000ac0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ac4:	4770      	bxcc	lr
 8000ac6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000aca:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000ace:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ad2:	4770      	bx	lr
 8000ad4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000ad8:	bf16      	itet	ne
 8000ada:	4608      	movne	r0, r1
 8000adc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000ae0:	4601      	movne	r1, r0
 8000ae2:	0242      	lsls	r2, r0, #9
 8000ae4:	bf06      	itte	eq
 8000ae6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000aea:	ea90 0f01 	teqeq	r0, r1
 8000aee:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000af2:	4770      	bx	lr

08000af4 <__aeabi_ui2f>:
 8000af4:	f04f 0300 	mov.w	r3, #0
 8000af8:	e004      	b.n	8000b04 <__aeabi_i2f+0x8>
 8000afa:	bf00      	nop

08000afc <__aeabi_i2f>:
 8000afc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000b00:	bf48      	it	mi
 8000b02:	4240      	negmi	r0, r0
 8000b04:	ea5f 0c00 	movs.w	ip, r0
 8000b08:	bf08      	it	eq
 8000b0a:	4770      	bxeq	lr
 8000b0c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000b10:	4601      	mov	r1, r0
 8000b12:	f04f 0000 	mov.w	r0, #0
 8000b16:	e01c      	b.n	8000b52 <__aeabi_l2f+0x2a>

08000b18 <__aeabi_ul2f>:
 8000b18:	ea50 0201 	orrs.w	r2, r0, r1
 8000b1c:	bf08      	it	eq
 8000b1e:	4770      	bxeq	lr
 8000b20:	f04f 0300 	mov.w	r3, #0
 8000b24:	e00a      	b.n	8000b3c <__aeabi_l2f+0x14>
 8000b26:	bf00      	nop

08000b28 <__aeabi_l2f>:
 8000b28:	ea50 0201 	orrs.w	r2, r0, r1
 8000b2c:	bf08      	it	eq
 8000b2e:	4770      	bxeq	lr
 8000b30:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000b34:	d502      	bpl.n	8000b3c <__aeabi_l2f+0x14>
 8000b36:	4240      	negs	r0, r0
 8000b38:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b3c:	ea5f 0c01 	movs.w	ip, r1
 8000b40:	bf02      	ittt	eq
 8000b42:	4684      	moveq	ip, r0
 8000b44:	4601      	moveq	r1, r0
 8000b46:	2000      	moveq	r0, #0
 8000b48:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000b4c:	bf08      	it	eq
 8000b4e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000b52:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000b56:	fabc f28c 	clz	r2, ip
 8000b5a:	3a08      	subs	r2, #8
 8000b5c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000b60:	db10      	blt.n	8000b84 <__aeabi_l2f+0x5c>
 8000b62:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b66:	4463      	add	r3, ip
 8000b68:	fa00 fc02 	lsl.w	ip, r0, r2
 8000b6c:	f1c2 0220 	rsb	r2, r2, #32
 8000b70:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000b74:	fa20 f202 	lsr.w	r2, r0, r2
 8000b78:	eb43 0002 	adc.w	r0, r3, r2
 8000b7c:	bf08      	it	eq
 8000b7e:	f020 0001 	biceq.w	r0, r0, #1
 8000b82:	4770      	bx	lr
 8000b84:	f102 0220 	add.w	r2, r2, #32
 8000b88:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b8c:	f1c2 0220 	rsb	r2, r2, #32
 8000b90:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000b94:	fa21 f202 	lsr.w	r2, r1, r2
 8000b98:	eb43 0002 	adc.w	r0, r3, r2
 8000b9c:	bf08      	it	eq
 8000b9e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ba2:	4770      	bx	lr

08000ba4 <__aeabi_fmul>:
 8000ba4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ba8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000bac:	bf1e      	ittt	ne
 8000bae:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000bb2:	ea92 0f0c 	teqne	r2, ip
 8000bb6:	ea93 0f0c 	teqne	r3, ip
 8000bba:	d06f      	beq.n	8000c9c <__aeabi_fmul+0xf8>
 8000bbc:	441a      	add	r2, r3
 8000bbe:	ea80 0c01 	eor.w	ip, r0, r1
 8000bc2:	0240      	lsls	r0, r0, #9
 8000bc4:	bf18      	it	ne
 8000bc6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000bca:	d01e      	beq.n	8000c0a <__aeabi_fmul+0x66>
 8000bcc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000bd0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000bd4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000bd8:	fba0 3101 	umull	r3, r1, r0, r1
 8000bdc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000be0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000be4:	bf3e      	ittt	cc
 8000be6:	0049      	lslcc	r1, r1, #1
 8000be8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000bec:	005b      	lslcc	r3, r3, #1
 8000bee:	ea40 0001 	orr.w	r0, r0, r1
 8000bf2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000bf6:	2afd      	cmp	r2, #253	; 0xfd
 8000bf8:	d81d      	bhi.n	8000c36 <__aeabi_fmul+0x92>
 8000bfa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000bfe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c02:	bf08      	it	eq
 8000c04:	f020 0001 	biceq.w	r0, r0, #1
 8000c08:	4770      	bx	lr
 8000c0a:	f090 0f00 	teq	r0, #0
 8000c0e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000c12:	bf08      	it	eq
 8000c14:	0249      	lsleq	r1, r1, #9
 8000c16:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000c1a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000c1e:	3a7f      	subs	r2, #127	; 0x7f
 8000c20:	bfc2      	ittt	gt
 8000c22:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000c26:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000c2a:	4770      	bxgt	lr
 8000c2c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c30:	f04f 0300 	mov.w	r3, #0
 8000c34:	3a01      	subs	r2, #1
 8000c36:	dc5d      	bgt.n	8000cf4 <__aeabi_fmul+0x150>
 8000c38:	f112 0f19 	cmn.w	r2, #25
 8000c3c:	bfdc      	itt	le
 8000c3e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000c42:	4770      	bxle	lr
 8000c44:	f1c2 0200 	rsb	r2, r2, #0
 8000c48:	0041      	lsls	r1, r0, #1
 8000c4a:	fa21 f102 	lsr.w	r1, r1, r2
 8000c4e:	f1c2 0220 	rsb	r2, r2, #32
 8000c52:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c56:	ea5f 0031 	movs.w	r0, r1, rrx
 8000c5a:	f140 0000 	adc.w	r0, r0, #0
 8000c5e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000c62:	bf08      	it	eq
 8000c64:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000c68:	4770      	bx	lr
 8000c6a:	f092 0f00 	teq	r2, #0
 8000c6e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000c72:	bf02      	ittt	eq
 8000c74:	0040      	lsleq	r0, r0, #1
 8000c76:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000c7a:	3a01      	subeq	r2, #1
 8000c7c:	d0f9      	beq.n	8000c72 <__aeabi_fmul+0xce>
 8000c7e:	ea40 000c 	orr.w	r0, r0, ip
 8000c82:	f093 0f00 	teq	r3, #0
 8000c86:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c8a:	bf02      	ittt	eq
 8000c8c:	0049      	lsleq	r1, r1, #1
 8000c8e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000c92:	3b01      	subeq	r3, #1
 8000c94:	d0f9      	beq.n	8000c8a <__aeabi_fmul+0xe6>
 8000c96:	ea41 010c 	orr.w	r1, r1, ip
 8000c9a:	e78f      	b.n	8000bbc <__aeabi_fmul+0x18>
 8000c9c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000ca0:	ea92 0f0c 	teq	r2, ip
 8000ca4:	bf18      	it	ne
 8000ca6:	ea93 0f0c 	teqne	r3, ip
 8000caa:	d00a      	beq.n	8000cc2 <__aeabi_fmul+0x11e>
 8000cac:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000cb0:	bf18      	it	ne
 8000cb2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000cb6:	d1d8      	bne.n	8000c6a <__aeabi_fmul+0xc6>
 8000cb8:	ea80 0001 	eor.w	r0, r0, r1
 8000cbc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000cc0:	4770      	bx	lr
 8000cc2:	f090 0f00 	teq	r0, #0
 8000cc6:	bf17      	itett	ne
 8000cc8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000ccc:	4608      	moveq	r0, r1
 8000cce:	f091 0f00 	teqne	r1, #0
 8000cd2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000cd6:	d014      	beq.n	8000d02 <__aeabi_fmul+0x15e>
 8000cd8:	ea92 0f0c 	teq	r2, ip
 8000cdc:	d101      	bne.n	8000ce2 <__aeabi_fmul+0x13e>
 8000cde:	0242      	lsls	r2, r0, #9
 8000ce0:	d10f      	bne.n	8000d02 <__aeabi_fmul+0x15e>
 8000ce2:	ea93 0f0c 	teq	r3, ip
 8000ce6:	d103      	bne.n	8000cf0 <__aeabi_fmul+0x14c>
 8000ce8:	024b      	lsls	r3, r1, #9
 8000cea:	bf18      	it	ne
 8000cec:	4608      	movne	r0, r1
 8000cee:	d108      	bne.n	8000d02 <__aeabi_fmul+0x15e>
 8000cf0:	ea80 0001 	eor.w	r0, r0, r1
 8000cf4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000cf8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cfc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d00:	4770      	bx	lr
 8000d02:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000d06:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000d0a:	4770      	bx	lr

08000d0c <__aeabi_fdiv>:
 8000d0c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d10:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d14:	bf1e      	ittt	ne
 8000d16:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d1a:	ea92 0f0c 	teqne	r2, ip
 8000d1e:	ea93 0f0c 	teqne	r3, ip
 8000d22:	d069      	beq.n	8000df8 <__aeabi_fdiv+0xec>
 8000d24:	eba2 0203 	sub.w	r2, r2, r3
 8000d28:	ea80 0c01 	eor.w	ip, r0, r1
 8000d2c:	0249      	lsls	r1, r1, #9
 8000d2e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000d32:	d037      	beq.n	8000da4 <__aeabi_fdiv+0x98>
 8000d34:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000d38:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000d3c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000d40:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d44:	428b      	cmp	r3, r1
 8000d46:	bf38      	it	cc
 8000d48:	005b      	lslcc	r3, r3, #1
 8000d4a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000d4e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000d52:	428b      	cmp	r3, r1
 8000d54:	bf24      	itt	cs
 8000d56:	1a5b      	subcs	r3, r3, r1
 8000d58:	ea40 000c 	orrcs.w	r0, r0, ip
 8000d5c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000d60:	bf24      	itt	cs
 8000d62:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000d66:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000d6a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000d6e:	bf24      	itt	cs
 8000d70:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000d74:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000d78:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000d7c:	bf24      	itt	cs
 8000d7e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000d82:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000d86:	011b      	lsls	r3, r3, #4
 8000d88:	bf18      	it	ne
 8000d8a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000d8e:	d1e0      	bne.n	8000d52 <__aeabi_fdiv+0x46>
 8000d90:	2afd      	cmp	r2, #253	; 0xfd
 8000d92:	f63f af50 	bhi.w	8000c36 <__aeabi_fmul+0x92>
 8000d96:	428b      	cmp	r3, r1
 8000d98:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d9c:	bf08      	it	eq
 8000d9e:	f020 0001 	biceq.w	r0, r0, #1
 8000da2:	4770      	bx	lr
 8000da4:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000da8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dac:	327f      	adds	r2, #127	; 0x7f
 8000dae:	bfc2      	ittt	gt
 8000db0:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000db4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000db8:	4770      	bxgt	lr
 8000dba:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dbe:	f04f 0300 	mov.w	r3, #0
 8000dc2:	3a01      	subs	r2, #1
 8000dc4:	e737      	b.n	8000c36 <__aeabi_fmul+0x92>
 8000dc6:	f092 0f00 	teq	r2, #0
 8000dca:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000dce:	bf02      	ittt	eq
 8000dd0:	0040      	lsleq	r0, r0, #1
 8000dd2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000dd6:	3a01      	subeq	r2, #1
 8000dd8:	d0f9      	beq.n	8000dce <__aeabi_fdiv+0xc2>
 8000dda:	ea40 000c 	orr.w	r0, r0, ip
 8000dde:	f093 0f00 	teq	r3, #0
 8000de2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000de6:	bf02      	ittt	eq
 8000de8:	0049      	lsleq	r1, r1, #1
 8000dea:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000dee:	3b01      	subeq	r3, #1
 8000df0:	d0f9      	beq.n	8000de6 <__aeabi_fdiv+0xda>
 8000df2:	ea41 010c 	orr.w	r1, r1, ip
 8000df6:	e795      	b.n	8000d24 <__aeabi_fdiv+0x18>
 8000df8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000dfc:	ea92 0f0c 	teq	r2, ip
 8000e00:	d108      	bne.n	8000e14 <__aeabi_fdiv+0x108>
 8000e02:	0242      	lsls	r2, r0, #9
 8000e04:	f47f af7d 	bne.w	8000d02 <__aeabi_fmul+0x15e>
 8000e08:	ea93 0f0c 	teq	r3, ip
 8000e0c:	f47f af70 	bne.w	8000cf0 <__aeabi_fmul+0x14c>
 8000e10:	4608      	mov	r0, r1
 8000e12:	e776      	b.n	8000d02 <__aeabi_fmul+0x15e>
 8000e14:	ea93 0f0c 	teq	r3, ip
 8000e18:	d104      	bne.n	8000e24 <__aeabi_fdiv+0x118>
 8000e1a:	024b      	lsls	r3, r1, #9
 8000e1c:	f43f af4c 	beq.w	8000cb8 <__aeabi_fmul+0x114>
 8000e20:	4608      	mov	r0, r1
 8000e22:	e76e      	b.n	8000d02 <__aeabi_fmul+0x15e>
 8000e24:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e28:	bf18      	it	ne
 8000e2a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e2e:	d1ca      	bne.n	8000dc6 <__aeabi_fdiv+0xba>
 8000e30:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000e34:	f47f af5c 	bne.w	8000cf0 <__aeabi_fmul+0x14c>
 8000e38:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000e3c:	f47f af3c 	bne.w	8000cb8 <__aeabi_fmul+0x114>
 8000e40:	e75f      	b.n	8000d02 <__aeabi_fmul+0x15e>
 8000e42:	bf00      	nop

08000e44 <__aeabi_f2iz>:
 8000e44:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000e48:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000e4c:	d30f      	bcc.n	8000e6e <__aeabi_f2iz+0x2a>
 8000e4e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000e52:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000e56:	d90d      	bls.n	8000e74 <__aeabi_f2iz+0x30>
 8000e58:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000e5c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000e60:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000e64:	fa23 f002 	lsr.w	r0, r3, r2
 8000e68:	bf18      	it	ne
 8000e6a:	4240      	negne	r0, r0
 8000e6c:	4770      	bx	lr
 8000e6e:	f04f 0000 	mov.w	r0, #0
 8000e72:	4770      	bx	lr
 8000e74:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000e78:	d101      	bne.n	8000e7e <__aeabi_f2iz+0x3a>
 8000e7a:	0242      	lsls	r2, r0, #9
 8000e7c:	d105      	bne.n	8000e8a <__aeabi_f2iz+0x46>
 8000e7e:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000e82:	bf08      	it	eq
 8000e84:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000e88:	4770      	bx	lr
 8000e8a:	f04f 0000 	mov.w	r0, #0
 8000e8e:	4770      	bx	lr

08000e90 <__aeabi_f2uiz>:
 8000e90:	0042      	lsls	r2, r0, #1
 8000e92:	d20e      	bcs.n	8000eb2 <__aeabi_f2uiz+0x22>
 8000e94:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000e98:	d30b      	bcc.n	8000eb2 <__aeabi_f2uiz+0x22>
 8000e9a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000e9e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000ea2:	d409      	bmi.n	8000eb8 <__aeabi_f2uiz+0x28>
 8000ea4:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000ea8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000eac:	fa23 f002 	lsr.w	r0, r3, r2
 8000eb0:	4770      	bx	lr
 8000eb2:	f04f 0000 	mov.w	r0, #0
 8000eb6:	4770      	bx	lr
 8000eb8:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000ebc:	d101      	bne.n	8000ec2 <__aeabi_f2uiz+0x32>
 8000ebe:	0242      	lsls	r2, r0, #9
 8000ec0:	d102      	bne.n	8000ec8 <__aeabi_f2uiz+0x38>
 8000ec2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000ec6:	4770      	bx	lr
 8000ec8:	f04f 0000 	mov.w	r0, #0
 8000ecc:	4770      	bx	lr
 8000ece:	bf00      	nop

08000ed0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ed4:	4b08      	ldr	r3, [pc, #32]	; (8000ef8 <HAL_Init+0x28>)
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	4a07      	ldr	r2, [pc, #28]	; (8000ef8 <HAL_Init+0x28>)
 8000eda:	f043 0310 	orr.w	r3, r3, #16
 8000ede:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ee0:	2003      	movs	r0, #3
 8000ee2:	f000 ff4f 	bl	8001d84 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ee6:	200f      	movs	r0, #15
 8000ee8:	f000 f808 	bl	8000efc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000eec:	f006 f950 	bl	8007190 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ef0:	2300      	movs	r3, #0
}
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	bd80      	pop	{r7, pc}
 8000ef6:	bf00      	nop
 8000ef8:	40022000 	.word	0x40022000

08000efc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b082      	sub	sp, #8
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f04:	4b12      	ldr	r3, [pc, #72]	; (8000f50 <HAL_InitTick+0x54>)
 8000f06:	681a      	ldr	r2, [r3, #0]
 8000f08:	4b12      	ldr	r3, [pc, #72]	; (8000f54 <HAL_InitTick+0x58>)
 8000f0a:	781b      	ldrb	r3, [r3, #0]
 8000f0c:	4619      	mov	r1, r3
 8000f0e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f12:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f16:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	f000 ff75 	bl	8001e0a <HAL_SYSTICK_Config>
 8000f20:	4603      	mov	r3, r0
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d001      	beq.n	8000f2a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f26:	2301      	movs	r3, #1
 8000f28:	e00e      	b.n	8000f48 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	2b0f      	cmp	r3, #15
 8000f2e:	d80a      	bhi.n	8000f46 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f30:	2200      	movs	r2, #0
 8000f32:	6879      	ldr	r1, [r7, #4]
 8000f34:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000f38:	f000 ff2f 	bl	8001d9a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f3c:	4a06      	ldr	r2, [pc, #24]	; (8000f58 <HAL_InitTick+0x5c>)
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f42:	2300      	movs	r3, #0
 8000f44:	e000      	b.n	8000f48 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f46:	2301      	movs	r3, #1
}
 8000f48:	4618      	mov	r0, r3
 8000f4a:	3708      	adds	r7, #8
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	bd80      	pop	{r7, pc}
 8000f50:	2000000c 	.word	0x2000000c
 8000f54:	20000004 	.word	0x20000004
 8000f58:	20000000 	.word	0x20000000

08000f5c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f60:	4b05      	ldr	r3, [pc, #20]	; (8000f78 <HAL_IncTick+0x1c>)
 8000f62:	781b      	ldrb	r3, [r3, #0]
 8000f64:	461a      	mov	r2, r3
 8000f66:	4b05      	ldr	r3, [pc, #20]	; (8000f7c <HAL_IncTick+0x20>)
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	4413      	add	r3, r2
 8000f6c:	4a03      	ldr	r2, [pc, #12]	; (8000f7c <HAL_IncTick+0x20>)
 8000f6e:	6013      	str	r3, [r2, #0]
}
 8000f70:	bf00      	nop
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bc80      	pop	{r7}
 8000f76:	4770      	bx	lr
 8000f78:	20000004 	.word	0x20000004
 8000f7c:	20000200 	.word	0x20000200

08000f80 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f80:	b480      	push	{r7}
 8000f82:	af00      	add	r7, sp, #0
  return uwTick;
 8000f84:	4b02      	ldr	r3, [pc, #8]	; (8000f90 <HAL_GetTick+0x10>)
 8000f86:	681b      	ldr	r3, [r3, #0]
}
 8000f88:	4618      	mov	r0, r3
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	bc80      	pop	{r7}
 8000f8e:	4770      	bx	lr
 8000f90:	20000200 	.word	0x20000200

08000f94 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b084      	sub	sp, #16
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f9c:	f7ff fff0 	bl	8000f80 <HAL_GetTick>
 8000fa0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000fa6:	68fb      	ldr	r3, [r7, #12]
 8000fa8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000fac:	d005      	beq.n	8000fba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000fae:	4b0a      	ldr	r3, [pc, #40]	; (8000fd8 <HAL_Delay+0x44>)
 8000fb0:	781b      	ldrb	r3, [r3, #0]
 8000fb2:	461a      	mov	r2, r3
 8000fb4:	68fb      	ldr	r3, [r7, #12]
 8000fb6:	4413      	add	r3, r2
 8000fb8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000fba:	bf00      	nop
 8000fbc:	f7ff ffe0 	bl	8000f80 <HAL_GetTick>
 8000fc0:	4602      	mov	r2, r0
 8000fc2:	68bb      	ldr	r3, [r7, #8]
 8000fc4:	1ad3      	subs	r3, r2, r3
 8000fc6:	68fa      	ldr	r2, [r7, #12]
 8000fc8:	429a      	cmp	r2, r3
 8000fca:	d8f7      	bhi.n	8000fbc <HAL_Delay+0x28>
  {
  }
}
 8000fcc:	bf00      	nop
 8000fce:	bf00      	nop
 8000fd0:	3710      	adds	r7, #16
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bd80      	pop	{r7, pc}
 8000fd6:	bf00      	nop
 8000fd8:	20000004 	.word	0x20000004

08000fdc <HAL_CAN_Init>:
  * @param  hcan: pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef* hcan)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b086      	sub	sp, #24
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
  uint32_t status = CAN_INITSTATUS_FAILED;  /* Default init status */
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_mcr = 0;
 8000fec:	2300      	movs	r3, #0
 8000fee:	613b      	str	r3, [r7, #16]

  /* Check CAN handle */
  if(hcan == NULL)
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d101      	bne.n	8000ffa <HAL_CAN_Init+0x1e>
  {
     return HAL_ERROR;
 8000ff6:	2301      	movs	r3, #1
 8000ff8:	e0ce      	b.n	8001198 <HAL_CAN_Init+0x1bc>
  assert_param(IS_CAN_SJW(hcan->Init.SJW));
  assert_param(IS_CAN_BS1(hcan->Init.BS1));
  assert_param(IS_CAN_BS2(hcan->Init.BS2));
  assert_param(IS_CAN_PRESCALER(hcan->Init.Prescaler));

  if(hcan->State == HAL_CAN_STATE_RESET)
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001000:	b2db      	uxtb	r3, r3
 8001002:	2b00      	cmp	r3, #0
 8001004:	d106      	bne.n	8001014 <HAL_CAN_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    hcan-> Lock = HAL_UNLOCKED;
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	2200      	movs	r2, #0
 800100a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_CAN_MspInit(hcan);
 800100e:	6878      	ldr	r0, [r7, #4]
 8001010:	f000 f997 	bl	8001342 <HAL_CAN_MspInit>
  }

  /* Initialize the CAN state*/
  hcan->State = HAL_CAN_STATE_BUSY;
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	2202      	movs	r2, #2
 8001018:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	681a      	ldr	r2, [r3, #0]
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	f022 0202 	bic.w	r2, r2, #2
 800102a:	601a      	str	r2, [r3, #0]

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	681a      	ldr	r2, [r3, #0]
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	f042 0201 	orr.w	r2, r2, #1
 800103a:	601a      	str	r2, [r3, #0]

  /* Get timeout */
  tickstart = HAL_GetTick();
 800103c:	f7ff ffa0 	bl	8000f80 <HAL_GetTick>
 8001040:	60f8      	str	r0, [r7, #12]

  /* Wait the acknowledge */
  while(HAL_IS_BIT_CLR(hcan->Instance->MSR, CAN_MSR_INAK))
 8001042:	e010      	b.n	8001066 <HAL_CAN_Init+0x8a>
  {
    if((HAL_GetTick()-tickstart) > CAN_TIMEOUT_VALUE)
 8001044:	f7ff ff9c 	bl	8000f80 <HAL_GetTick>
 8001048:	4602      	mov	r2, r0
 800104a:	68fb      	ldr	r3, [r7, #12]
 800104c:	1ad3      	subs	r3, r2, r3
 800104e:	2b0a      	cmp	r3, #10
 8001050:	d909      	bls.n	8001066 <HAL_CAN_Init+0x8a>
    {
      hcan->State= HAL_CAN_STATE_TIMEOUT;
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	2203      	movs	r2, #3
 8001056:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process unlocked */
      __HAL_UNLOCK(hcan);
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	2200      	movs	r2, #0
 800105e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      return HAL_TIMEOUT;
 8001062:	2303      	movs	r3, #3
 8001064:	e098      	b.n	8001198 <HAL_CAN_Init+0x1bc>
  while(HAL_IS_BIT_CLR(hcan->Instance->MSR, CAN_MSR_INAK))
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	685b      	ldr	r3, [r3, #4]
 800106c:	f003 0301 	and.w	r3, r3, #1
 8001070:	2b00      	cmp	r3, #0
 8001072:	d0e7      	beq.n	8001044 <HAL_CAN_Init+0x68>
    }
  }

  /* Check acknowledge */
  if ((hcan->Instance->MSR & CAN_MSR_INAK) == CAN_MSR_INAK)
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	685b      	ldr	r3, [r3, #4]
 800107a:	f003 0301 	and.w	r3, r3, #1
 800107e:	2b01      	cmp	r3, #1
 8001080:	d179      	bne.n	8001176 <HAL_CAN_Init+0x19a>
  {
    /* Set the time triggered communication mode */
    if (hcan->Init.TTCM == ENABLE)
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	699b      	ldr	r3, [r3, #24]
 8001086:	2b01      	cmp	r3, #1
 8001088:	d103      	bne.n	8001092 <HAL_CAN_Init+0xb6>
    {
      SET_BIT(tmp_mcr, CAN_MCR_TTCM);
 800108a:	693b      	ldr	r3, [r7, #16]
 800108c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001090:	613b      	str	r3, [r7, #16]
    }

    /* Set the automatic bus-off management */
    if (hcan->Init.ABOM == ENABLE)
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	69db      	ldr	r3, [r3, #28]
 8001096:	2b01      	cmp	r3, #1
 8001098:	d103      	bne.n	80010a2 <HAL_CAN_Init+0xc6>
    {
      SET_BIT(tmp_mcr, CAN_MCR_ABOM);
 800109a:	693b      	ldr	r3, [r7, #16]
 800109c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80010a0:	613b      	str	r3, [r7, #16]
    }

    /* Set the automatic wake-up mode */
    if (hcan->Init.AWUM == ENABLE)
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	6a1b      	ldr	r3, [r3, #32]
 80010a6:	2b01      	cmp	r3, #1
 80010a8:	d103      	bne.n	80010b2 <HAL_CAN_Init+0xd6>
    {
      SET_BIT(tmp_mcr, CAN_MCR_AWUM);
 80010aa:	693b      	ldr	r3, [r7, #16]
 80010ac:	f043 0320 	orr.w	r3, r3, #32
 80010b0:	613b      	str	r3, [r7, #16]
    }

    /* Set the no automatic retransmission */
    if (hcan->Init.NART == ENABLE)
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010b6:	2b01      	cmp	r3, #1
 80010b8:	d103      	bne.n	80010c2 <HAL_CAN_Init+0xe6>
    {
      SET_BIT(tmp_mcr, CAN_MCR_NART);
 80010ba:	693b      	ldr	r3, [r7, #16]
 80010bc:	f043 0310 	orr.w	r3, r3, #16
 80010c0:	613b      	str	r3, [r7, #16]
    }

    /* Set the receive FIFO locked mode */
    if (hcan->Init.RFLM == ENABLE)
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010c6:	2b01      	cmp	r3, #1
 80010c8:	d103      	bne.n	80010d2 <HAL_CAN_Init+0xf6>
    {
      SET_BIT(tmp_mcr, CAN_MCR_RFLM);
 80010ca:	693b      	ldr	r3, [r7, #16]
 80010cc:	f043 0308 	orr.w	r3, r3, #8
 80010d0:	613b      	str	r3, [r7, #16]
    }

    /* Set the transmit FIFO priority */
    if (hcan->Init.TXFP == ENABLE)
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010d6:	2b01      	cmp	r3, #1
 80010d8:	d103      	bne.n	80010e2 <HAL_CAN_Init+0x106>
    {
      SET_BIT(tmp_mcr, CAN_MCR_TXFP);
 80010da:	693b      	ldr	r3, [r7, #16]
 80010dc:	f043 0304 	orr.w	r3, r3, #4
 80010e0:	613b      	str	r3, [r7, #16]
    }

    /* Update register MCR */
    MODIFY_REG(hcan->Instance->MCR,
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	f023 01fc 	bic.w	r1, r3, #252	; 0xfc
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	693a      	ldr	r2, [r7, #16]
 80010f2:	430a      	orrs	r2, r1
 80010f4:	601a      	str	r2, [r3, #0]
               CAN_MCR_RFLM |
               CAN_MCR_TXFP,
               tmp_mcr);

    /* Set the bit timing register */
    WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	689a      	ldr	r2, [r3, #8]
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	68db      	ldr	r3, [r3, #12]
 80010fe:	431a      	orrs	r2, r3
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	691b      	ldr	r3, [r3, #16]
 8001104:	431a      	orrs	r2, r3
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	695b      	ldr	r3, [r3, #20]
 800110a:	ea42 0103 	orr.w	r1, r2, r3
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	685b      	ldr	r3, [r3, #4]
 8001112:	1e5a      	subs	r2, r3, #1
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	430a      	orrs	r2, r1
 800111a:	61da      	str	r2, [r3, #28]
                                              hcan->Init.BS1            |
                                              hcan->Init.BS2            |
                                              (hcan->Init.Prescaler - 1) ));

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	681a      	ldr	r2, [r3, #0]
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	f022 0201 	bic.w	r2, r2, #1
 800112a:	601a      	str	r2, [r3, #0]

    /* Get timeout */
    tickstart = HAL_GetTick();
 800112c:	f7ff ff28 	bl	8000f80 <HAL_GetTick>
 8001130:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while(HAL_IS_BIT_CLR(hcan->Instance->MSR, CAN_MSR_INAK))
 8001132:	e010      	b.n	8001156 <HAL_CAN_Init+0x17a>
    {
      if((HAL_GetTick()-tickstart) > CAN_TIMEOUT_VALUE)
 8001134:	f7ff ff24 	bl	8000f80 <HAL_GetTick>
 8001138:	4602      	mov	r2, r0
 800113a:	68fb      	ldr	r3, [r7, #12]
 800113c:	1ad3      	subs	r3, r2, r3
 800113e:	2b0a      	cmp	r3, #10
 8001140:	d909      	bls.n	8001156 <HAL_CAN_Init+0x17a>
      {
        hcan->State= HAL_CAN_STATE_TIMEOUT;
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	2203      	movs	r2, #3
 8001146:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hcan);
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	2200      	movs	r2, #0
 800114e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8001152:	2303      	movs	r3, #3
 8001154:	e020      	b.n	8001198 <HAL_CAN_Init+0x1bc>
    while(HAL_IS_BIT_CLR(hcan->Instance->MSR, CAN_MSR_INAK))
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	685b      	ldr	r3, [r3, #4]
 800115c:	f003 0301 	and.w	r3, r3, #1
 8001160:	2b00      	cmp	r3, #0
 8001162:	d0e7      	beq.n	8001134 <HAL_CAN_Init+0x158>
      }
    }

    /* Check acknowledged */
    if (HAL_IS_BIT_SET(hcan->Instance->MSR, CAN_MSR_INAK))
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	685b      	ldr	r3, [r3, #4]
 800116a:	f003 0301 	and.w	r3, r3, #1
 800116e:	2b00      	cmp	r3, #0
 8001170:	d001      	beq.n	8001176 <HAL_CAN_Init+0x19a>
    {
      status = CAN_INITSTATUS_SUCCESS;
 8001172:	2301      	movs	r3, #1
 8001174:	617b      	str	r3, [r7, #20]
    }
  }

  if(status == CAN_INITSTATUS_SUCCESS)
 8001176:	697b      	ldr	r3, [r7, #20]
 8001178:	2b01      	cmp	r3, #1
 800117a:	d108      	bne.n	800118e <HAL_CAN_Init+0x1b2>
  {
    /* Set CAN error code to none */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	2200      	movs	r2, #0
 8001180:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Initialize the CAN state */
    hcan->State = HAL_CAN_STATE_READY;
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	2201      	movs	r2, #1
 8001186:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Return function status */
    return HAL_OK;
 800118a:	2300      	movs	r3, #0
 800118c:	e004      	b.n	8001198 <HAL_CAN_Init+0x1bc>
  }
  else
  {
    /* Initialize the CAN state */
    hcan->State = HAL_CAN_STATE_ERROR;
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	2204      	movs	r2, #4
 8001192:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Return function status */
    return HAL_ERROR;
 8001196:	2301      	movs	r3, #1
  }
}
 8001198:	4618      	mov	r0, r3
 800119a:	3718      	adds	r7, #24
 800119c:	46bd      	mov	sp, r7
 800119e:	bd80      	pop	{r7, pc}

080011a0 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig: pointer to a CAN_FilterConfTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef* hcan, CAN_FilterConfTypeDef* sFilterConfig)
{
 80011a0:	b480      	push	{r7}
 80011a2:	b085      	sub	sp, #20
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
 80011a8:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos = 0;
 80011aa:	2300      	movs	r3, #0
 80011ac:	60fb      	str	r3, [r7, #12]
  assert_param(IS_CAN_FILTER_SCALE(sFilterConfig->FilterScale));
  assert_param(IS_CAN_FILTER_FIFO(sFilterConfig->FilterFIFOAssignment));
  assert_param(IS_FUNCTIONAL_STATE(sFilterConfig->FilterActivation));
  assert_param(IS_CAN_BANKNUMBER(sFilterConfig->BankNumber));

  filternbrbitpos = ((uint32_t)1) << sFilterConfig->FilterNumber;
 80011ae:	683b      	ldr	r3, [r7, #0]
 80011b0:	695b      	ldr	r3, [r3, #20]
 80011b2:	2201      	movs	r2, #1
 80011b4:	fa02 f303 	lsl.w	r3, r2, r3
 80011b8:	60fb      	str	r3, [r7, #12]

  /* Initialisation mode for the filter */
  /* Select the start slave bank */
  MODIFY_REG(hcan->Instance->FMR                         ,
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80011c2:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80011c6:	683b      	ldr	r3, [r7, #0]
 80011c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011ca:	021b      	lsls	r3, r3, #8
 80011cc:	431a      	orrs	r2, r3
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	f042 0201 	orr.w	r2, r2, #1
 80011d6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
             CAN_FMR_CAN2SB                              ,
             CAN_FMR_FINIT                              |
             (uint32_t)(sFilterConfig->BankNumber << 8)   );

  /* Filter Deactivation */
  CLEAR_BIT(hcan->Instance->FA1R, filternbrbitpos);
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	f8d3 121c 	ldr.w	r1, [r3, #540]	; 0x21c
 80011e2:	68fb      	ldr	r3, [r7, #12]
 80011e4:	43da      	mvns	r2, r3
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	400a      	ands	r2, r1
 80011ec:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

  /* Filter Scale */
  if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80011f0:	683b      	ldr	r3, [r7, #0]
 80011f2:	69db      	ldr	r3, [r3, #28]
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d127      	bne.n	8001248 <HAL_CAN_ConfigFilter+0xa8>
  {
    /* 16-bit scale for the filter */
    CLEAR_BIT(hcan->Instance->FS1R, filternbrbitpos);
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	f8d3 120c 	ldr.w	r1, [r3, #524]	; 0x20c
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	43da      	mvns	r2, r3
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	400a      	ands	r2, r1
 800120a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

    /* First 16-bit identifier and First 16-bit mask */
    /* Or First 16-bit identifier and Second 16-bit identifier */
    hcan->Instance->sFilterRegister[sFilterConfig->FilterNumber].FR1 =
       ((0x0000FFFF & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16) |
 800120e:	683b      	ldr	r3, [r7, #0]
 8001210:	68db      	ldr	r3, [r3, #12]
 8001212:	0418      	lsls	r0, r3, #16
        (0x0000FFFF & (uint32_t)sFilterConfig->FilterIdLow);
 8001214:	683b      	ldr	r3, [r7, #0]
 8001216:	685b      	ldr	r3, [r3, #4]
 8001218:	b299      	uxth	r1, r3
    hcan->Instance->sFilterRegister[sFilterConfig->FilterNumber].FR1 =
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	683a      	ldr	r2, [r7, #0]
 8001220:	6952      	ldr	r2, [r2, #20]
       ((0x0000FFFF & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16) |
 8001222:	4301      	orrs	r1, r0
    hcan->Instance->sFilterRegister[sFilterConfig->FilterNumber].FR1 =
 8001224:	3248      	adds	r2, #72	; 0x48
 8001226:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

    /* Second 16-bit identifier and Second 16-bit mask */
    /* Or Third 16-bit identifier and Fourth 16-bit identifier */
    hcan->Instance->sFilterRegister[sFilterConfig->FilterNumber].FR2 =
       ((0x0000FFFF & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16) |
 800122a:	683b      	ldr	r3, [r7, #0]
 800122c:	689b      	ldr	r3, [r3, #8]
 800122e:	0418      	lsls	r0, r3, #16
        (0x0000FFFF & (uint32_t)sFilterConfig->FilterIdHigh);
 8001230:	683b      	ldr	r3, [r7, #0]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	b29a      	uxth	r2, r3
    hcan->Instance->sFilterRegister[sFilterConfig->FilterNumber].FR2 =
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	6819      	ldr	r1, [r3, #0]
 800123a:	683b      	ldr	r3, [r7, #0]
 800123c:	695b      	ldr	r3, [r3, #20]
       ((0x0000FFFF & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16) |
 800123e:	4302      	orrs	r2, r0
    hcan->Instance->sFilterRegister[sFilterConfig->FilterNumber].FR2 =
 8001240:	3348      	adds	r3, #72	; 0x48
 8001242:	00db      	lsls	r3, r3, #3
 8001244:	440b      	add	r3, r1
 8001246:	605a      	str	r2, [r3, #4]
  }

  if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001248:	683b      	ldr	r3, [r7, #0]
 800124a:	69db      	ldr	r3, [r3, #28]
 800124c:	2b01      	cmp	r3, #1
 800124e:	d126      	bne.n	800129e <HAL_CAN_ConfigFilter+0xfe>
  {
    /* 32-bit scale for the filter */
    SET_BIT(hcan->Instance->FS1R, filternbrbitpos);
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	f8d3 120c 	ldr.w	r1, [r3, #524]	; 0x20c
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	68fa      	ldr	r2, [r7, #12]
 800125e:	430a      	orrs	r2, r1
 8001260:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
    /* 32-bit identifier or First 32-bit identifier */
    hcan->Instance->sFilterRegister[sFilterConfig->FilterNumber].FR1 =
       ((0x0000FFFF & (uint32_t)sFilterConfig->FilterIdHigh) << 16) |
 8001264:	683b      	ldr	r3, [r7, #0]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	0418      	lsls	r0, r3, #16
        (0x0000FFFF & (uint32_t)sFilterConfig->FilterIdLow);
 800126a:	683b      	ldr	r3, [r7, #0]
 800126c:	685b      	ldr	r3, [r3, #4]
 800126e:	b299      	uxth	r1, r3
    hcan->Instance->sFilterRegister[sFilterConfig->FilterNumber].FR1 =
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	683a      	ldr	r2, [r7, #0]
 8001276:	6952      	ldr	r2, [r2, #20]
       ((0x0000FFFF & (uint32_t)sFilterConfig->FilterIdHigh) << 16) |
 8001278:	4301      	orrs	r1, r0
    hcan->Instance->sFilterRegister[sFilterConfig->FilterNumber].FR1 =
 800127a:	3248      	adds	r2, #72	; 0x48
 800127c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
    /* 32-bit mask or Second 32-bit identifier */
    hcan->Instance->sFilterRegister[sFilterConfig->FilterNumber].FR2 =
       ((0x0000FFFF & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16) |
 8001280:	683b      	ldr	r3, [r7, #0]
 8001282:	689b      	ldr	r3, [r3, #8]
 8001284:	0418      	lsls	r0, r3, #16
        (0x0000FFFF & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001286:	683b      	ldr	r3, [r7, #0]
 8001288:	68db      	ldr	r3, [r3, #12]
 800128a:	b29a      	uxth	r2, r3
    hcan->Instance->sFilterRegister[sFilterConfig->FilterNumber].FR2 =
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	6819      	ldr	r1, [r3, #0]
 8001290:	683b      	ldr	r3, [r7, #0]
 8001292:	695b      	ldr	r3, [r3, #20]
       ((0x0000FFFF & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16) |
 8001294:	4302      	orrs	r2, r0
    hcan->Instance->sFilterRegister[sFilterConfig->FilterNumber].FR2 =
 8001296:	3348      	adds	r3, #72	; 0x48
 8001298:	00db      	lsls	r3, r3, #3
 800129a:	440b      	add	r3, r1
 800129c:	605a      	str	r2, [r3, #4]
  }

  /* Filter Mode */
  if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800129e:	683b      	ldr	r3, [r7, #0]
 80012a0:	699b      	ldr	r3, [r3, #24]
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d10b      	bne.n	80012be <HAL_CAN_ConfigFilter+0x11e>
  {
    /*Id/Mask mode for the filter*/
    CLEAR_BIT(hcan->Instance->FM1R, filternbrbitpos);
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	f8d3 1204 	ldr.w	r1, [r3, #516]	; 0x204
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	43da      	mvns	r2, r3
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	400a      	ands	r2, r1
 80012b8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80012bc:	e009      	b.n	80012d2 <HAL_CAN_ConfigFilter+0x132>
  }
  else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
  {
    /*Identifier list mode for the filter*/
    SET_BIT(hcan->Instance->FM1R, filternbrbitpos);
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	f8d3 1204 	ldr.w	r1, [r3, #516]	; 0x204
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	68fa      	ldr	r2, [r7, #12]
 80012cc:	430a      	orrs	r2, r1
 80012ce:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
  }

  /* Filter FIFO assignment */
  if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80012d2:	683b      	ldr	r3, [r7, #0]
 80012d4:	691b      	ldr	r3, [r3, #16]
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d10b      	bne.n	80012f2 <HAL_CAN_ConfigFilter+0x152>
  {
    /* FIFO 0 assignation for the filter */
    CLEAR_BIT(hcan->Instance->FFA1R, filternbrbitpos);
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	f8d3 1214 	ldr.w	r1, [r3, #532]	; 0x214
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	43da      	mvns	r2, r3
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	400a      	ands	r2, r1
 80012ec:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80012f0:	e009      	b.n	8001306 <HAL_CAN_ConfigFilter+0x166>
  }
  else
  {
    /* FIFO 1 assignation for the filter */
    SET_BIT(hcan->Instance->FFA1R, filternbrbitpos);
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	f8d3 1214 	ldr.w	r1, [r3, #532]	; 0x214
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	68fa      	ldr	r2, [r7, #12]
 8001300:	430a      	orrs	r2, r1
 8001302:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  }

  /* Filter activation */
  if (sFilterConfig->FilterActivation == ENABLE)
 8001306:	683b      	ldr	r3, [r7, #0]
 8001308:	6a1b      	ldr	r3, [r3, #32]
 800130a:	2b01      	cmp	r3, #1
 800130c:	d109      	bne.n	8001322 <HAL_CAN_ConfigFilter+0x182>
  {
    SET_BIT(hcan->Instance->FA1R, filternbrbitpos);
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	f8d3 121c 	ldr.w	r1, [r3, #540]	; 0x21c
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	68fa      	ldr	r2, [r7, #12]
 800131c:	430a      	orrs	r2, r1
 800131e:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
  }

  /* Leave the initialisation mode for the filter */
  CLEAR_BIT(hcan->Instance->FMR, ((uint32_t)CAN_FMR_FINIT));
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	f022 0201 	bic.w	r2, r2, #1
 8001332:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

  /* Return function status */
  return HAL_OK;
 8001336:	2300      	movs	r3, #0
}
 8001338:	4618      	mov	r0, r3
 800133a:	3714      	adds	r7, #20
 800133c:	46bd      	mov	sp, r7
 800133e:	bc80      	pop	{r7}
 8001340:	4770      	bx	lr

08001342 <HAL_CAN_MspInit>:
  * @param  hcan: pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001342:	b480      	push	{r7}
 8001344:	b083      	sub	sp, #12
 8001346:	af00      	add	r7, sp, #0
 8001348:	6078      	str	r0, [r7, #4]
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_MspInit can be implemented in the user file
   */
}
 800134a:	bf00      	nop
 800134c:	370c      	adds	r7, #12
 800134e:	46bd      	mov	sp, r7
 8001350:	bc80      	pop	{r7}
 8001352:	4770      	bx	lr

08001354 <HAL_CAN_Transmit>:
  *         the configuration information for the specified CAN.
  * @param  Timeout: Specify Timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Transmit(CAN_HandleTypeDef* hcan, uint32_t Timeout)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b084      	sub	sp, #16
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
 800135c:	6039      	str	r1, [r7, #0]
  uint32_t transmitmailbox = CAN_TXSTATUS_NOMAILBOX;
 800135e:	2304      	movs	r3, #4
 8001360:	60fb      	str	r3, [r7, #12]
  uint32_t tickstart = 0;
 8001362:	2300      	movs	r3, #0
 8001364:	60bb      	str	r3, [r7, #8]
  assert_param(IS_CAN_IDTYPE(hcan->pTxMsg->IDE));
  assert_param(IS_CAN_RTR(hcan->pTxMsg->RTR));
  assert_param(IS_CAN_DLC(hcan->pTxMsg->DLC));

  /* Process locked */
  __HAL_LOCK(hcan);
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800136c:	2b01      	cmp	r3, #1
 800136e:	d101      	bne.n	8001374 <HAL_CAN_Transmit+0x20>
 8001370:	2302      	movs	r3, #2
 8001372:	e15a      	b.n	800162a <HAL_CAN_Transmit+0x2d6>
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	2201      	movs	r2, #1
 8001378:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  if(hcan->State == HAL_CAN_STATE_BUSY_RX)
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001382:	b2db      	uxtb	r3, r3
 8001384:	2b22      	cmp	r3, #34	; 0x22
 8001386:	d104      	bne.n	8001392 <HAL_CAN_Transmit+0x3e>
  {
    /* Change CAN state */
    hcan->State = HAL_CAN_STATE_BUSY_TX_RX;
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	2232      	movs	r2, #50	; 0x32
 800138c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8001390:	e003      	b.n	800139a <HAL_CAN_Transmit+0x46>
  }
  else
  {
    /* Change CAN state */
    hcan->State = HAL_CAN_STATE_BUSY_TX;
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	2212      	movs	r2, #18
 8001396:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  }

  /* Select one empty transmit mailbox */
  if (HAL_IS_BIT_SET(hcan->Instance->TSR, CAN_TSR_TME0))
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	689b      	ldr	r3, [r3, #8]
 80013a0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d002      	beq.n	80013ae <HAL_CAN_Transmit+0x5a>
  {
    transmitmailbox = 0;
 80013a8:	2300      	movs	r3, #0
 80013aa:	60fb      	str	r3, [r7, #12]
 80013ac:	e015      	b.n	80013da <HAL_CAN_Transmit+0x86>
  }
  else if (HAL_IS_BIT_SET(hcan->Instance->TSR, CAN_TSR_TME1))
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	689b      	ldr	r3, [r3, #8]
 80013b4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d002      	beq.n	80013c2 <HAL_CAN_Transmit+0x6e>
  {
    transmitmailbox = 1;
 80013bc:	2301      	movs	r3, #1
 80013be:	60fb      	str	r3, [r7, #12]
 80013c0:	e00b      	b.n	80013da <HAL_CAN_Transmit+0x86>
  }
  else if (HAL_IS_BIT_SET(hcan->Instance->TSR, CAN_TSR_TME2))
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	689b      	ldr	r3, [r3, #8]
 80013c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d002      	beq.n	80013d6 <HAL_CAN_Transmit+0x82>
  {
    transmitmailbox = 2;
 80013d0:	2302      	movs	r3, #2
 80013d2:	60fb      	str	r3, [r7, #12]
 80013d4:	e001      	b.n	80013da <HAL_CAN_Transmit+0x86>
  }
  else
  {
    transmitmailbox = CAN_TXSTATUS_NOMAILBOX;
 80013d6:	2304      	movs	r3, #4
 80013d8:	60fb      	str	r3, [r7, #12]
  }

  if (transmitmailbox != CAN_TXSTATUS_NOMAILBOX)
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	2b04      	cmp	r3, #4
 80013de:	f000 811b 	beq.w	8001618 <HAL_CAN_Transmit+0x2c4>
  {
    /* Set up the Id */
    hcan->Instance->sTxMailBox[transmitmailbox].TIR &= CAN_TI0R_TXRQ;
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681a      	ldr	r2, [r3, #0]
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	3318      	adds	r3, #24
 80013ea:	011b      	lsls	r3, r3, #4
 80013ec:	4413      	add	r3, r2
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	687a      	ldr	r2, [r7, #4]
 80013f2:	6811      	ldr	r1, [r2, #0]
 80013f4:	f003 0201 	and.w	r2, r3, #1
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	3318      	adds	r3, #24
 80013fc:	011b      	lsls	r3, r3, #4
 80013fe:	440b      	add	r3, r1
 8001400:	601a      	str	r2, [r3, #0]
    if (hcan->pTxMsg->IDE == CAN_ID_STD)
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001406:	689b      	ldr	r3, [r3, #8]
 8001408:	2b00      	cmp	r3, #0
 800140a:	d117      	bne.n	800143c <HAL_CAN_Transmit+0xe8>
    {
      assert_param(IS_CAN_STDID(hcan->pTxMsg->StdId));
      hcan->Instance->sTxMailBox[transmitmailbox].TIR |= ((hcan->pTxMsg->StdId << CAN_TI0R_STID_BIT_POSITION) |
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681a      	ldr	r2, [r3, #0]
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	3318      	adds	r3, #24
 8001414:	011b      	lsls	r3, r3, #4
 8001416:	4413      	add	r3, r2
 8001418:	681a      	ldr	r2, [r3, #0]
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	0559      	lsls	r1, r3, #21
                                                           hcan->pTxMsg->RTR);
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001426:	68db      	ldr	r3, [r3, #12]
      hcan->Instance->sTxMailBox[transmitmailbox].TIR |= ((hcan->pTxMsg->StdId << CAN_TI0R_STID_BIT_POSITION) |
 8001428:	430b      	orrs	r3, r1
 800142a:	6879      	ldr	r1, [r7, #4]
 800142c:	6809      	ldr	r1, [r1, #0]
 800142e:	431a      	orrs	r2, r3
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	3318      	adds	r3, #24
 8001434:	011b      	lsls	r3, r3, #4
 8001436:	440b      	add	r3, r1
 8001438:	601a      	str	r2, [r3, #0]
 800143a:	e01a      	b.n	8001472 <HAL_CAN_Transmit+0x11e>
    }
    else
    {
      assert_param(IS_CAN_EXTID(hcan->pTxMsg->ExtId));
      hcan->Instance->sTxMailBox[transmitmailbox].TIR |= ((hcan->pTxMsg->ExtId << CAN_TI0R_EXID_BIT_POSITION) |
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681a      	ldr	r2, [r3, #0]
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	3318      	adds	r3, #24
 8001444:	011b      	lsls	r3, r3, #4
 8001446:	4413      	add	r3, r2
 8001448:	681a      	ldr	r2, [r3, #0]
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800144e:	685b      	ldr	r3, [r3, #4]
 8001450:	00d9      	lsls	r1, r3, #3
                                                           hcan->pTxMsg->IDE |
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001456:	689b      	ldr	r3, [r3, #8]
      hcan->Instance->sTxMailBox[transmitmailbox].TIR |= ((hcan->pTxMsg->ExtId << CAN_TI0R_EXID_BIT_POSITION) |
 8001458:	4319      	orrs	r1, r3
                                                           hcan->pTxMsg->RTR);
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800145e:	68db      	ldr	r3, [r3, #12]
                                                           hcan->pTxMsg->IDE |
 8001460:	430b      	orrs	r3, r1
      hcan->Instance->sTxMailBox[transmitmailbox].TIR |= ((hcan->pTxMsg->ExtId << CAN_TI0R_EXID_BIT_POSITION) |
 8001462:	6879      	ldr	r1, [r7, #4]
 8001464:	6809      	ldr	r1, [r1, #0]
 8001466:	431a      	orrs	r2, r3
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	3318      	adds	r3, #24
 800146c:	011b      	lsls	r3, r3, #4
 800146e:	440b      	add	r3, r1
 8001470:	601a      	str	r2, [r3, #0]
    }

    /* Set up the DLC */
    hcan->pTxMsg->DLC &= (uint8_t)0x0000000F;
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001476:	691a      	ldr	r2, [r3, #16]
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800147c:	f002 020f 	and.w	r2, r2, #15
 8001480:	611a      	str	r2, [r3, #16]
    hcan->Instance->sTxMailBox[transmitmailbox].TDTR &= (uint32_t)0xFFFFFFF0;
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681a      	ldr	r2, [r3, #0]
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	3318      	adds	r3, #24
 800148a:	011b      	lsls	r3, r3, #4
 800148c:	4413      	add	r3, r2
 800148e:	3304      	adds	r3, #4
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	687a      	ldr	r2, [r7, #4]
 8001494:	6811      	ldr	r1, [r2, #0]
 8001496:	f023 020f 	bic.w	r2, r3, #15
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	3318      	adds	r3, #24
 800149e:	011b      	lsls	r3, r3, #4
 80014a0:	440b      	add	r3, r1
 80014a2:	3304      	adds	r3, #4
 80014a4:	601a      	str	r2, [r3, #0]
    hcan->Instance->sTxMailBox[transmitmailbox].TDTR |= hcan->pTxMsg->DLC;
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681a      	ldr	r2, [r3, #0]
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	3318      	adds	r3, #24
 80014ae:	011b      	lsls	r3, r3, #4
 80014b0:	4413      	add	r3, r2
 80014b2:	3304      	adds	r3, #4
 80014b4:	681a      	ldr	r2, [r3, #0]
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ba:	691b      	ldr	r3, [r3, #16]
 80014bc:	6879      	ldr	r1, [r7, #4]
 80014be:	6809      	ldr	r1, [r1, #0]
 80014c0:	431a      	orrs	r2, r3
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	3318      	adds	r3, #24
 80014c6:	011b      	lsls	r3, r3, #4
 80014c8:	440b      	add	r3, r1
 80014ca:	3304      	adds	r3, #4
 80014cc:	601a      	str	r2, [r3, #0]

    /* Set up the data field */
    WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR, ((uint32_t)hcan->pTxMsg->Data[3] << CAN_TDL0R_DATA3_BIT_POSITION) |
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014d2:	6a1b      	ldr	r3, [r3, #32]
 80014d4:	061a      	lsls	r2, r3, #24
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014da:	69db      	ldr	r3, [r3, #28]
 80014dc:	041b      	lsls	r3, r3, #16
 80014de:	431a      	orrs	r2, r3
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014e4:	699b      	ldr	r3, [r3, #24]
 80014e6:	021b      	lsls	r3, r3, #8
 80014e8:	431a      	orrs	r2, r3
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ee:	695b      	ldr	r3, [r3, #20]
 80014f0:	6879      	ldr	r1, [r7, #4]
 80014f2:	6809      	ldr	r1, [r1, #0]
 80014f4:	431a      	orrs	r2, r3
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	011b      	lsls	r3, r3, #4
 80014fa:	440b      	add	r3, r1
 80014fc:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8001500:	601a      	str	r2, [r3, #0]
                                                                ((uint32_t)hcan->pTxMsg->Data[2] << CAN_TDL0R_DATA2_BIT_POSITION) |
                                                                ((uint32_t)hcan->pTxMsg->Data[1] << CAN_TDL0R_DATA1_BIT_POSITION) |
                                                                ((uint32_t)hcan->pTxMsg->Data[0] << CAN_TDL0R_DATA0_BIT_POSITION)  );
    WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR, ((uint32_t)hcan->pTxMsg->Data[7] << CAN_TDL0R_DATA3_BIT_POSITION) |
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001506:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001508:	061a      	lsls	r2, r3, #24
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800150e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001510:	041b      	lsls	r3, r3, #16
 8001512:	431a      	orrs	r2, r3
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001518:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800151a:	021b      	lsls	r3, r3, #8
 800151c:	431a      	orrs	r2, r3
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001522:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001524:	6879      	ldr	r1, [r7, #4]
 8001526:	6809      	ldr	r1, [r1, #0]
 8001528:	431a      	orrs	r2, r3
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	011b      	lsls	r3, r3, #4
 800152e:	440b      	add	r3, r1
 8001530:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8001534:	601a      	str	r2, [r3, #0]
                                                                ((uint32_t)hcan->pTxMsg->Data[6] << CAN_TDL0R_DATA2_BIT_POSITION) |
                                                                ((uint32_t)hcan->pTxMsg->Data[5] << CAN_TDL0R_DATA1_BIT_POSITION) |
                                                                ((uint32_t)hcan->pTxMsg->Data[4] << CAN_TDL0R_DATA0_BIT_POSITION)  );
    /* Request transmission */
    SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681a      	ldr	r2, [r3, #0]
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	3318      	adds	r3, #24
 800153e:	011b      	lsls	r3, r3, #4
 8001540:	4413      	add	r3, r2
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	687a      	ldr	r2, [r7, #4]
 8001546:	6811      	ldr	r1, [r2, #0]
 8001548:	f043 0201 	orr.w	r2, r3, #1
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	3318      	adds	r3, #24
 8001550:	011b      	lsls	r3, r3, #4
 8001552:	440b      	add	r3, r1
 8001554:	601a      	str	r2, [r3, #0]

    /* Get timeout */
    tickstart = HAL_GetTick();
 8001556:	f7ff fd13 	bl	8000f80 <HAL_GetTick>
 800155a:	60b8      	str	r0, [r7, #8]

    /* Check End of transmission flag */
    while(!(__HAL_CAN_TRANSMIT_STATUS(hcan, transmitmailbox)))
 800155c:	e018      	b.n	8001590 <HAL_CAN_Transmit+0x23c>
    {
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 800155e:	683b      	ldr	r3, [r7, #0]
 8001560:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001564:	d014      	beq.n	8001590 <HAL_CAN_Transmit+0x23c>
      {
        if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 8001566:	683b      	ldr	r3, [r7, #0]
 8001568:	2b00      	cmp	r3, #0
 800156a:	d007      	beq.n	800157c <HAL_CAN_Transmit+0x228>
 800156c:	f7ff fd08 	bl	8000f80 <HAL_GetTick>
 8001570:	4602      	mov	r2, r0
 8001572:	68bb      	ldr	r3, [r7, #8]
 8001574:	1ad3      	subs	r3, r2, r3
 8001576:	683a      	ldr	r2, [r7, #0]
 8001578:	429a      	cmp	r2, r3
 800157a:	d209      	bcs.n	8001590 <HAL_CAN_Transmit+0x23c>
        {
          hcan->State = HAL_CAN_STATE_TIMEOUT;
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	2203      	movs	r2, #3
 8001580:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hcan);
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	2200      	movs	r2, #0
 8001588:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 800158c:	2303      	movs	r3, #3
 800158e:	e04c      	b.n	800162a <HAL_CAN_Transmit+0x2d6>
    while(!(__HAL_CAN_TRANSMIT_STATUS(hcan, transmitmailbox)))
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	2b00      	cmp	r3, #0
 8001594:	d10b      	bne.n	80015ae <HAL_CAN_Transmit+0x25a>
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	689a      	ldr	r2, [r3, #8]
 800159c:	4b25      	ldr	r3, [pc, #148]	; (8001634 <HAL_CAN_Transmit+0x2e0>)
 800159e:	4013      	ands	r3, r2
 80015a0:	4a24      	ldr	r2, [pc, #144]	; (8001634 <HAL_CAN_Transmit+0x2e0>)
 80015a2:	4293      	cmp	r3, r2
 80015a4:	bf14      	ite	ne
 80015a6:	2301      	movne	r3, #1
 80015a8:	2300      	moveq	r3, #0
 80015aa:	b2db      	uxtb	r3, r3
 80015ac:	e019      	b.n	80015e2 <HAL_CAN_Transmit+0x28e>
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	2b01      	cmp	r3, #1
 80015b2:	d10b      	bne.n	80015cc <HAL_CAN_Transmit+0x278>
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	689a      	ldr	r2, [r3, #8]
 80015ba:	4b1f      	ldr	r3, [pc, #124]	; (8001638 <HAL_CAN_Transmit+0x2e4>)
 80015bc:	4013      	ands	r3, r2
 80015be:	4a1e      	ldr	r2, [pc, #120]	; (8001638 <HAL_CAN_Transmit+0x2e4>)
 80015c0:	4293      	cmp	r3, r2
 80015c2:	bf14      	ite	ne
 80015c4:	2301      	movne	r3, #1
 80015c6:	2300      	moveq	r3, #0
 80015c8:	b2db      	uxtb	r3, r3
 80015ca:	e00a      	b.n	80015e2 <HAL_CAN_Transmit+0x28e>
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	689a      	ldr	r2, [r3, #8]
 80015d2:	4b1a      	ldr	r3, [pc, #104]	; (800163c <HAL_CAN_Transmit+0x2e8>)
 80015d4:	4013      	ands	r3, r2
 80015d6:	4a19      	ldr	r2, [pc, #100]	; (800163c <HAL_CAN_Transmit+0x2e8>)
 80015d8:	4293      	cmp	r3, r2
 80015da:	bf14      	ite	ne
 80015dc:	2301      	movne	r3, #1
 80015de:	2300      	moveq	r3, #0
 80015e0:	b2db      	uxtb	r3, r3
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d1bb      	bne.n	800155e <HAL_CAN_Transmit+0x20a>
        }
      }
    }
    if(hcan->State == HAL_CAN_STATE_BUSY_TX_RX)
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80015ec:	b2db      	uxtb	r3, r3
 80015ee:	2b32      	cmp	r3, #50	; 0x32
 80015f0:	d108      	bne.n	8001604 <HAL_CAN_Transmit+0x2b0>
    {
      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_BUSY_RX;
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	2222      	movs	r2, #34	; 0x22
 80015f6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process unlocked */
      __HAL_UNLOCK(hcan);
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	2200      	movs	r2, #0
 80015fe:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 8001602:	e003      	b.n	800160c <HAL_CAN_Transmit+0x2b8>
    }
    else
    {
      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_READY;
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	2201      	movs	r2, #1
 8001608:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    }

    /* Process unlocked */
    __HAL_UNLOCK(hcan);
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	2200      	movs	r2, #0
 8001610:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Return function status */
    return HAL_OK;
 8001614:	2300      	movs	r3, #0
 8001616:	e008      	b.n	800162a <HAL_CAN_Transmit+0x2d6>
  }
  else
  {
    /* Change CAN state */
    hcan->State = HAL_CAN_STATE_ERROR;
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	2204      	movs	r2, #4
 800161c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process unlocked */
    __HAL_UNLOCK(hcan);
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	2200      	movs	r2, #0
 8001624:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Return function status */
    return HAL_ERROR;
 8001628:	2301      	movs	r3, #1
  }
}
 800162a:	4618      	mov	r0, r3
 800162c:	3710      	adds	r7, #16
 800162e:	46bd      	mov	sp, r7
 8001630:	bd80      	pop	{r7, pc}
 8001632:	bf00      	nop
 8001634:	04000003 	.word	0x04000003
 8001638:	08000300 	.word	0x08000300
 800163c:	10030000 	.word	0x10030000

08001640 <HAL_CAN_Receive_IT>:
  * @param  FIFONumber: Specify the FIFO number
  * @retval HAL status
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_Receive_IT(CAN_HandleTypeDef* hcan, uint8_t FIFONumber)
{
 8001640:	b480      	push	{r7}
 8001642:	b083      	sub	sp, #12
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
 8001648:	460b      	mov	r3, r1
 800164a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_CAN_FIFO(FIFONumber));

  if((hcan->State == HAL_CAN_STATE_READY) || (hcan->State == HAL_CAN_STATE_BUSY_TX))
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001652:	b2db      	uxtb	r3, r3
 8001654:	2b01      	cmp	r3, #1
 8001656:	d005      	beq.n	8001664 <HAL_CAN_Receive_IT+0x24>
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800165e:	b2db      	uxtb	r3, r3
 8001660:	2b12      	cmp	r3, #18
 8001662:	d13f      	bne.n	80016e4 <HAL_CAN_Receive_IT+0xa4>
  {
    /* Process locked */
    __HAL_LOCK(hcan);
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800166a:	2b01      	cmp	r3, #1
 800166c:	d101      	bne.n	8001672 <HAL_CAN_Receive_IT+0x32>
 800166e:	2302      	movs	r3, #2
 8001670:	e03b      	b.n	80016ea <HAL_CAN_Receive_IT+0xaa>
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	2201      	movs	r2, #1
 8001676:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    if(hcan->State == HAL_CAN_STATE_BUSY_TX)
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001680:	b2db      	uxtb	r3, r3
 8001682:	2b12      	cmp	r3, #18
 8001684:	d104      	bne.n	8001690 <HAL_CAN_Receive_IT+0x50>
    {
      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_BUSY_TX_RX;
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	2232      	movs	r2, #50	; 0x32
 800168a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 800168e:	e003      	b.n	8001698 <HAL_CAN_Receive_IT+0x58>
    }
    else
    {
      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_BUSY_RX;
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	2222      	movs	r2, #34	; 0x22
 8001694:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    }

    /* Set CAN error code to none */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	2200      	movs	r2, #0
 800169c:	63da      	str	r2, [r3, #60]	; 0x3c
    /*  - Enable Error passive Interrupt */
    /*  - Enable Bus-off Interrupt */
    /*  - Enable Last error code Interrupt */
    /*  - Enable Error Interrupt */
    /*  - Enable Transmit mailbox empty Interrupt */
    __HAL_CAN_ENABLE_IT(hcan, CAN_IT_EWG |
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	695b      	ldr	r3, [r3, #20]
 80016a4:	687a      	ldr	r2, [r7, #4]
 80016a6:	6812      	ldr	r2, [r2, #0]
 80016a8:	f443 430f 	orr.w	r3, r3, #36608	; 0x8f00
 80016ac:	f043 0301 	orr.w	r3, r3, #1
 80016b0:	6153      	str	r3, [r2, #20]
                              CAN_IT_LEC |
                              CAN_IT_ERR |
                              CAN_IT_TME  );

    /* Process unlocked */
    __HAL_UNLOCK(hcan);
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	2200      	movs	r2, #0
 80016b6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    if(FIFONumber == CAN_FIFO0)
 80016ba:	78fb      	ldrb	r3, [r7, #3]
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d108      	bne.n	80016d2 <HAL_CAN_Receive_IT+0x92>
    {
      /* Enable FIFO 0 message pending Interrupt */
      __HAL_CAN_ENABLE_IT(hcan, CAN_IT_FMP0);
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	695a      	ldr	r2, [r3, #20]
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f042 0202 	orr.w	r2, r2, #2
 80016ce:	615a      	str	r2, [r3, #20]
    if(FIFONumber == CAN_FIFO0)
 80016d0:	e00a      	b.n	80016e8 <HAL_CAN_Receive_IT+0xa8>
    }
    else
    {
      /* Enable FIFO 1 message pending Interrupt */
      __HAL_CAN_ENABLE_IT(hcan, CAN_IT_FMP1);
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	695a      	ldr	r2, [r3, #20]
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	f042 0210 	orr.w	r2, r2, #16
 80016e0:	615a      	str	r2, [r3, #20]
    if(FIFONumber == CAN_FIFO0)
 80016e2:	e001      	b.n	80016e8 <HAL_CAN_Receive_IT+0xa8>
    }

  }
  else
  {
    return HAL_BUSY;
 80016e4:	2302      	movs	r3, #2
 80016e6:	e000      	b.n	80016ea <HAL_CAN_Receive_IT+0xaa>
  }

  /* Return function status */
  return HAL_OK;
 80016e8:	2300      	movs	r3, #0
}
 80016ea:	4618      	mov	r0, r3
 80016ec:	370c      	adds	r7, #12
 80016ee:	46bd      	mov	sp, r7
 80016f0:	bc80      	pop	{r7}
 80016f2:	4770      	bx	lr

080016f4 <HAL_CAN_IRQHandler>:
  * @param  hcan: pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef* hcan)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b082      	sub	sp, #8
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
  /* Check End of transmission flag */
  if(__HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_TME))
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	695b      	ldr	r3, [r3, #20]
 8001702:	f003 0301 	and.w	r3, r3, #1
 8001706:	2b01      	cmp	r3, #1
 8001708:	d11a      	bne.n	8001740 <HAL_CAN_IRQHandler+0x4c>
  {
    if((__HAL_CAN_TRANSMIT_STATUS(hcan, CAN_TXMAILBOX_0)) ||
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	689a      	ldr	r2, [r3, #8]
 8001710:	4b83      	ldr	r3, [pc, #524]	; (8001920 <HAL_CAN_IRQHandler+0x22c>)
 8001712:	4013      	ands	r3, r2
 8001714:	4a82      	ldr	r2, [pc, #520]	; (8001920 <HAL_CAN_IRQHandler+0x22c>)
 8001716:	4293      	cmp	r3, r2
 8001718:	d00f      	beq.n	800173a <HAL_CAN_IRQHandler+0x46>
       (__HAL_CAN_TRANSMIT_STATUS(hcan, CAN_TXMAILBOX_1)) ||
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	689a      	ldr	r2, [r3, #8]
 8001720:	4b80      	ldr	r3, [pc, #512]	; (8001924 <HAL_CAN_IRQHandler+0x230>)
 8001722:	4013      	ands	r3, r2
    if((__HAL_CAN_TRANSMIT_STATUS(hcan, CAN_TXMAILBOX_0)) ||
 8001724:	4a7f      	ldr	r2, [pc, #508]	; (8001924 <HAL_CAN_IRQHandler+0x230>)
 8001726:	4293      	cmp	r3, r2
 8001728:	d007      	beq.n	800173a <HAL_CAN_IRQHandler+0x46>
       (__HAL_CAN_TRANSMIT_STATUS(hcan, CAN_TXMAILBOX_2)))
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	689a      	ldr	r2, [r3, #8]
 8001730:	4b7d      	ldr	r3, [pc, #500]	; (8001928 <HAL_CAN_IRQHandler+0x234>)
 8001732:	4013      	ands	r3, r2
       (__HAL_CAN_TRANSMIT_STATUS(hcan, CAN_TXMAILBOX_1)) ||
 8001734:	4a7c      	ldr	r2, [pc, #496]	; (8001928 <HAL_CAN_IRQHandler+0x234>)
 8001736:	4293      	cmp	r3, r2
 8001738:	d102      	bne.n	8001740 <HAL_CAN_IRQHandler+0x4c>
    {
      /* Call transmit function */
      CAN_Transmit_IT(hcan);
 800173a:	6878      	ldr	r0, [r7, #4]
 800173c:	f000 f908 	bl	8001950 <CAN_Transmit_IT>
    }
  }

  /* Check End of reception flag for FIFO0 */
  if((__HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_FMP0)) &&
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	695b      	ldr	r3, [r3, #20]
 8001746:	f003 0302 	and.w	r3, r3, #2
 800174a:	2b02      	cmp	r3, #2
 800174c:	d10b      	bne.n	8001766 <HAL_CAN_IRQHandler+0x72>
     (__HAL_CAN_MSG_PENDING(hcan, CAN_FIFO0) != 0))
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	68db      	ldr	r3, [r3, #12]
 8001754:	b2db      	uxtb	r3, r3
 8001756:	f003 0303 	and.w	r3, r3, #3
  if((__HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_FMP0)) &&
 800175a:	2b00      	cmp	r3, #0
 800175c:	d003      	beq.n	8001766 <HAL_CAN_IRQHandler+0x72>
  {
    /* Call receive function */
    CAN_Receive_IT(hcan, CAN_FIFO0);
 800175e:	2100      	movs	r1, #0
 8001760:	6878      	ldr	r0, [r7, #4]
 8001762:	f000 f926 	bl	80019b2 <CAN_Receive_IT>
  }

  /* Check End of reception flag for FIFO1 */
  if((__HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_FMP1)) &&
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	695b      	ldr	r3, [r3, #20]
 800176c:	f003 0310 	and.w	r3, r3, #16
 8001770:	2b10      	cmp	r3, #16
 8001772:	d10b      	bne.n	800178c <HAL_CAN_IRQHandler+0x98>
     (__HAL_CAN_MSG_PENDING(hcan, CAN_FIFO1) != 0))
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	691b      	ldr	r3, [r3, #16]
 800177a:	b2db      	uxtb	r3, r3
 800177c:	f003 0303 	and.w	r3, r3, #3
  if((__HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_FMP1)) &&
 8001780:	2b00      	cmp	r3, #0
 8001782:	d003      	beq.n	800178c <HAL_CAN_IRQHandler+0x98>
  {
    /* Call receive function */
    CAN_Receive_IT(hcan, CAN_FIFO1);
 8001784:	2101      	movs	r1, #1
 8001786:	6878      	ldr	r0, [r7, #4]
 8001788:	f000 f913 	bl	80019b2 <CAN_Receive_IT>
  }

  /* Check Error Warning Flag */
  if((__HAL_CAN_GET_FLAG(hcan, CAN_FLAG_EWG))    &&
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	699b      	ldr	r3, [r3, #24]
 8001792:	f003 0301 	and.w	r3, r3, #1
 8001796:	2b01      	cmp	r3, #1
 8001798:	d115      	bne.n	80017c6 <HAL_CAN_IRQHandler+0xd2>
     (__HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_EWG)) &&
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	695b      	ldr	r3, [r3, #20]
 80017a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if((__HAL_CAN_GET_FLAG(hcan, CAN_FLAG_EWG))    &&
 80017a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80017a8:	d10d      	bne.n	80017c6 <HAL_CAN_IRQHandler+0xd2>
     (__HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_ERR)))
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	695b      	ldr	r3, [r3, #20]
 80017b0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
     (__HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_EWG)) &&
 80017b4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80017b8:	d105      	bne.n	80017c6 <HAL_CAN_IRQHandler+0xd2>
  {
    /* Set CAN error code to EWG error */
    hcan->ErrorCode |= HAL_CAN_ERROR_EWG;
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80017be:	f043 0201 	orr.w	r2, r3, #1
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	63da      	str	r2, [r3, #60]	; 0x3c
    /* No need for clear of Error Warning Flag as read-only */
  }

  /* Check Error Passive Flag */
  if((__HAL_CAN_GET_FLAG(hcan, CAN_FLAG_EPV))    &&
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	699b      	ldr	r3, [r3, #24]
 80017cc:	f003 0302 	and.w	r3, r3, #2
 80017d0:	2b02      	cmp	r3, #2
 80017d2:	d115      	bne.n	8001800 <HAL_CAN_IRQHandler+0x10c>
     (__HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_EPV)) &&
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	695b      	ldr	r3, [r3, #20]
 80017da:	f403 7300 	and.w	r3, r3, #512	; 0x200
  if((__HAL_CAN_GET_FLAG(hcan, CAN_FLAG_EPV))    &&
 80017de:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80017e2:	d10d      	bne.n	8001800 <HAL_CAN_IRQHandler+0x10c>
     (__HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_ERR)))
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	695b      	ldr	r3, [r3, #20]
 80017ea:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
     (__HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_EPV)) &&
 80017ee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80017f2:	d105      	bne.n	8001800 <HAL_CAN_IRQHandler+0x10c>
  {
    /* Set CAN error code to EPV error */
    hcan->ErrorCode |= HAL_CAN_ERROR_EPV;
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80017f8:	f043 0202 	orr.w	r2, r3, #2
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	63da      	str	r2, [r3, #60]	; 0x3c
    /* No need for clear of Error Passive Flag as read-only */
  }

  /* Check Bus-Off Flag */
  if((__HAL_CAN_GET_FLAG(hcan, CAN_FLAG_BOF))    &&
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	699b      	ldr	r3, [r3, #24]
 8001806:	f003 0304 	and.w	r3, r3, #4
 800180a:	2b04      	cmp	r3, #4
 800180c:	d115      	bne.n	800183a <HAL_CAN_IRQHandler+0x146>
     (__HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_BOF)) &&
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	695b      	ldr	r3, [r3, #20]
 8001814:	f403 6380 	and.w	r3, r3, #1024	; 0x400
  if((__HAL_CAN_GET_FLAG(hcan, CAN_FLAG_BOF))    &&
 8001818:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800181c:	d10d      	bne.n	800183a <HAL_CAN_IRQHandler+0x146>
     (__HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_ERR)))
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	695b      	ldr	r3, [r3, #20]
 8001824:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
     (__HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_BOF)) &&
 8001828:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800182c:	d105      	bne.n	800183a <HAL_CAN_IRQHandler+0x146>
  {
    /* Set CAN error code to BOF error */
    hcan->ErrorCode |= HAL_CAN_ERROR_BOF;
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001832:	f043 0204 	orr.w	r2, r3, #4
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	63da      	str	r2, [r3, #60]	; 0x3c
    /* No need for clear of Bus-Off Flag as read-only */
  }

  /* Check Last error code Flag */
  if((!HAL_IS_BIT_CLR(hcan->Instance->ESR, CAN_ESR_LEC)) &&
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	699b      	ldr	r3, [r3, #24]
 8001840:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001844:	2b00      	cmp	r3, #0
 8001846:	d05c      	beq.n	8001902 <HAL_CAN_IRQHandler+0x20e>
     (__HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_LEC))         &&
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	695b      	ldr	r3, [r3, #20]
 800184e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  if((!HAL_IS_BIT_CLR(hcan->Instance->ESR, CAN_ESR_LEC)) &&
 8001852:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001856:	d154      	bne.n	8001902 <HAL_CAN_IRQHandler+0x20e>
     (__HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_ERR)))
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	695b      	ldr	r3, [r3, #20]
 800185e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
     (__HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_LEC))         &&
 8001862:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001866:	d14c      	bne.n	8001902 <HAL_CAN_IRQHandler+0x20e>
  {
    switch(hcan->Instance->ESR & CAN_ESR_LEC)
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	699b      	ldr	r3, [r3, #24]
 800186e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001872:	2b60      	cmp	r3, #96	; 0x60
 8001874:	d035      	beq.n	80018e2 <HAL_CAN_IRQHandler+0x1ee>
 8001876:	2b60      	cmp	r3, #96	; 0x60
 8001878:	d83a      	bhi.n	80018f0 <HAL_CAN_IRQHandler+0x1fc>
 800187a:	2b50      	cmp	r3, #80	; 0x50
 800187c:	d02a      	beq.n	80018d4 <HAL_CAN_IRQHandler+0x1e0>
 800187e:	2b50      	cmp	r3, #80	; 0x50
 8001880:	d836      	bhi.n	80018f0 <HAL_CAN_IRQHandler+0x1fc>
 8001882:	2b40      	cmp	r3, #64	; 0x40
 8001884:	d01f      	beq.n	80018c6 <HAL_CAN_IRQHandler+0x1d2>
 8001886:	2b40      	cmp	r3, #64	; 0x40
 8001888:	d832      	bhi.n	80018f0 <HAL_CAN_IRQHandler+0x1fc>
 800188a:	2b30      	cmp	r3, #48	; 0x30
 800188c:	d014      	beq.n	80018b8 <HAL_CAN_IRQHandler+0x1c4>
 800188e:	2b30      	cmp	r3, #48	; 0x30
 8001890:	d82e      	bhi.n	80018f0 <HAL_CAN_IRQHandler+0x1fc>
 8001892:	2b10      	cmp	r3, #16
 8001894:	d002      	beq.n	800189c <HAL_CAN_IRQHandler+0x1a8>
 8001896:	2b20      	cmp	r3, #32
 8001898:	d007      	beq.n	80018aa <HAL_CAN_IRQHandler+0x1b6>
      case(CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
          /* Set CAN error code to CRC error */
          hcan->ErrorCode |= HAL_CAN_ERROR_CRC;
          break;
      default:
          break;
 800189a:	e029      	b.n	80018f0 <HAL_CAN_IRQHandler+0x1fc>
          hcan->ErrorCode |= HAL_CAN_ERROR_STF;
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80018a0:	f043 0208 	orr.w	r2, r3, #8
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	63da      	str	r2, [r3, #60]	; 0x3c
          break;
 80018a8:	e023      	b.n	80018f2 <HAL_CAN_IRQHandler+0x1fe>
          hcan->ErrorCode |= HAL_CAN_ERROR_FOR;
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80018ae:	f043 0210 	orr.w	r2, r3, #16
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	63da      	str	r2, [r3, #60]	; 0x3c
          break;
 80018b6:	e01c      	b.n	80018f2 <HAL_CAN_IRQHandler+0x1fe>
          hcan->ErrorCode |= HAL_CAN_ERROR_ACK;
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80018bc:	f043 0220 	orr.w	r2, r3, #32
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	63da      	str	r2, [r3, #60]	; 0x3c
          break;
 80018c4:	e015      	b.n	80018f2 <HAL_CAN_IRQHandler+0x1fe>
          hcan->ErrorCode |= HAL_CAN_ERROR_BR;
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80018ca:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	63da      	str	r2, [r3, #60]	; 0x3c
          break;
 80018d2:	e00e      	b.n	80018f2 <HAL_CAN_IRQHandler+0x1fe>
          hcan->ErrorCode |= HAL_CAN_ERROR_BD;
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80018d8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	63da      	str	r2, [r3, #60]	; 0x3c
          break;
 80018e0:	e007      	b.n	80018f2 <HAL_CAN_IRQHandler+0x1fe>
          hcan->ErrorCode |= HAL_CAN_ERROR_CRC;
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80018e6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	63da      	str	r2, [r3, #60]	; 0x3c
          break;
 80018ee:	e000      	b.n	80018f2 <HAL_CAN_IRQHandler+0x1fe>
          break;
 80018f0:	bf00      	nop
    }

    /* Clear Last error code Flag */
    CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	699a      	ldr	r2, [r3, #24]
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001900:	619a      	str	r2, [r3, #24]
  }

  /* Call the Error call Back in case of Errors */
  if(hcan->ErrorCode != HAL_CAN_ERROR_NONE)
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001906:	2b00      	cmp	r3, #0
 8001908:	d006      	beq.n	8001918 <HAL_CAN_IRQHandler+0x224>
  {
    /* Set the CAN state ready to be able to start again the process */
    hcan->State = HAL_CAN_STATE_READY;
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	2201      	movs	r2, #1
 800190e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Call Error callback function */
    HAL_CAN_ErrorCallback(hcan);
 8001912:	6878      	ldr	r0, [r7, #4]
 8001914:	f000 f813 	bl	800193e <HAL_CAN_ErrorCallback>
  }
}
 8001918:	bf00      	nop
 800191a:	3708      	adds	r7, #8
 800191c:	46bd      	mov	sp, r7
 800191e:	bd80      	pop	{r7, pc}
 8001920:	04000003 	.word	0x04000003
 8001924:	08000300 	.word	0x08000300
 8001928:	10030000 	.word	0x10030000

0800192c <HAL_CAN_TxCpltCallback>:
  * @param  hcan: pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxCpltCallback(CAN_HandleTypeDef* hcan)
{
 800192c:	b480      	push	{r7}
 800192e:	b083      	sub	sp, #12
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxCpltCallback can be implemented in the user file
   */
}
 8001934:	bf00      	nop
 8001936:	370c      	adds	r7, #12
 8001938:	46bd      	mov	sp, r7
 800193a:	bc80      	pop	{r7}
 800193c:	4770      	bx	lr

0800193e <HAL_CAN_ErrorCallback>:
  * @param  hcan: pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 800193e:	b480      	push	{r7}
 8001940:	b083      	sub	sp, #12
 8001942:	af00      	add	r7, sp, #0
 8001944:	6078      	str	r0, [r7, #4]
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback can be implemented in the user file
   */
}
 8001946:	bf00      	nop
 8001948:	370c      	adds	r7, #12
 800194a:	46bd      	mov	sp, r7
 800194c:	bc80      	pop	{r7}
 800194e:	4770      	bx	lr

08001950 <CAN_Transmit_IT>:
  * @param  hcan: pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
static HAL_StatusTypeDef CAN_Transmit_IT(CAN_HandleTypeDef* hcan)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b082      	sub	sp, #8
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
  /* Disable Transmit mailbox empty Interrupt */
  __HAL_CAN_DISABLE_IT(hcan, CAN_IT_TME);
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	695a      	ldr	r2, [r3, #20]
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f022 0201 	bic.w	r2, r2, #1
 8001966:	615a      	str	r2, [r3, #20]

  if(hcan->State == HAL_CAN_STATE_BUSY_TX)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800196e:	b2db      	uxtb	r3, r3
 8001970:	2b12      	cmp	r3, #18
 8001972:	d107      	bne.n	8001984 <CAN_Transmit_IT+0x34>
    /*  - Disable Error warning Interrupt */
    /*  - Disable Error passive Interrupt */
    /*  - Disable Bus-off Interrupt */
    /*  - Disable Last error code Interrupt */
    /*  - Disable Error Interrupt */
    __HAL_CAN_DISABLE_IT(hcan, CAN_IT_EWG |
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	695a      	ldr	r2, [r3, #20]
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f422 420f 	bic.w	r2, r2, #36608	; 0x8f00
 8001982:	615a      	str	r2, [r3, #20]
                               CAN_IT_BOF |
                               CAN_IT_LEC |
                               CAN_IT_ERR  );
  }

  if(hcan->State == HAL_CAN_STATE_BUSY_TX_RX)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800198a:	b2db      	uxtb	r3, r3
 800198c:	2b32      	cmp	r3, #50	; 0x32
 800198e:	d104      	bne.n	800199a <CAN_Transmit_IT+0x4a>
  {
    /* Change CAN state */
    hcan->State = HAL_CAN_STATE_BUSY_RX;
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	2222      	movs	r2, #34	; 0x22
 8001994:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8001998:	e003      	b.n	80019a2 <CAN_Transmit_IT+0x52>
  }
  else
  {
    /* Change CAN state */
    hcan->State = HAL_CAN_STATE_READY;
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	2201      	movs	r2, #1
 800199e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  }

  /* Transmission complete callback */
  HAL_CAN_TxCpltCallback(hcan);
 80019a2:	6878      	ldr	r0, [r7, #4]
 80019a4:	f7ff ffc2 	bl	800192c <HAL_CAN_TxCpltCallback>

  return HAL_OK;
 80019a8:	2300      	movs	r3, #0
}
 80019aa:	4618      	mov	r0, r3
 80019ac:	3708      	adds	r7, #8
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bd80      	pop	{r7, pc}

080019b2 <CAN_Receive_IT>:
  * @param  FIFONumber: Specify the FIFO number
  * @retval HAL status
  * @retval None
  */
static HAL_StatusTypeDef CAN_Receive_IT(CAN_HandleTypeDef* hcan, uint8_t FIFONumber)
{
 80019b2:	b580      	push	{r7, lr}
 80019b4:	b082      	sub	sp, #8
 80019b6:	af00      	add	r7, sp, #0
 80019b8:	6078      	str	r0, [r7, #4]
 80019ba:	460b      	mov	r3, r1
 80019bc:	70fb      	strb	r3, [r7, #3]
  /* Get the Id */
  hcan->pRxMsg->IDE = (uint8_t)0x04 & hcan->Instance->sFIFOMailBox[FIFONumber].RIR;
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681a      	ldr	r2, [r3, #0]
 80019c2:	78fb      	ldrb	r3, [r7, #3]
 80019c4:	331b      	adds	r3, #27
 80019c6:	011b      	lsls	r3, r3, #4
 80019c8:	4413      	add	r3, r2
 80019ca:	681a      	ldr	r2, [r3, #0]
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80019d0:	f002 0204 	and.w	r2, r2, #4
 80019d4:	609a      	str	r2, [r3, #8]
  if (hcan->pRxMsg->IDE == CAN_ID_STD)
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80019da:	689b      	ldr	r3, [r3, #8]
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d10d      	bne.n	80019fc <CAN_Receive_IT+0x4a>
  {
    hcan->pRxMsg->StdId = (uint32_t)0x000007FF & (hcan->Instance->sFIFOMailBox[FIFONumber].RIR >> 21);
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681a      	ldr	r2, [r3, #0]
 80019e4:	78fb      	ldrb	r3, [r7, #3]
 80019e6:	331b      	adds	r3, #27
 80019e8:	011b      	lsls	r3, r3, #4
 80019ea:	4413      	add	r3, r2
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	0d5a      	lsrs	r2, r3, #21
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80019f4:	f3c2 020a 	ubfx	r2, r2, #0, #11
 80019f8:	601a      	str	r2, [r3, #0]
 80019fa:	e00c      	b.n	8001a16 <CAN_Receive_IT+0x64>
  }
  else
  {
    hcan->pRxMsg->ExtId = (uint32_t)0x1FFFFFFF & (hcan->Instance->sFIFOMailBox[FIFONumber].RIR >> 3);
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681a      	ldr	r2, [r3, #0]
 8001a00:	78fb      	ldrb	r3, [r7, #3]
 8001a02:	331b      	adds	r3, #27
 8001a04:	011b      	lsls	r3, r3, #4
 8001a06:	4413      	add	r3, r2
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	08da      	lsrs	r2, r3, #3
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a10:	f022 4260 	bic.w	r2, r2, #3758096384	; 0xe0000000
 8001a14:	605a      	str	r2, [r3, #4]
  }

  hcan->pRxMsg->RTR = (uint8_t)0x02 & hcan->Instance->sFIFOMailBox[FIFONumber].RIR;
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681a      	ldr	r2, [r3, #0]
 8001a1a:	78fb      	ldrb	r3, [r7, #3]
 8001a1c:	331b      	adds	r3, #27
 8001a1e:	011b      	lsls	r3, r3, #4
 8001a20:	4413      	add	r3, r2
 8001a22:	681a      	ldr	r2, [r3, #0]
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a28:	f002 0202 	and.w	r2, r2, #2
 8001a2c:	60da      	str	r2, [r3, #12]
  /* Get the DLC */
  hcan->pRxMsg->DLC = (uint8_t)0x0F & hcan->Instance->sFIFOMailBox[FIFONumber].RDTR;
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681a      	ldr	r2, [r3, #0]
 8001a32:	78fb      	ldrb	r3, [r7, #3]
 8001a34:	331b      	adds	r3, #27
 8001a36:	011b      	lsls	r3, r3, #4
 8001a38:	4413      	add	r3, r2
 8001a3a:	3304      	adds	r3, #4
 8001a3c:	681a      	ldr	r2, [r3, #0]
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a42:	f002 020f 	and.w	r2, r2, #15
 8001a46:	611a      	str	r2, [r3, #16]
  /* Get the FMI */
  hcan->pRxMsg->FMI = (uint8_t)0xFF & (hcan->Instance->sFIFOMailBox[FIFONumber].RDTR >> 8);
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681a      	ldr	r2, [r3, #0]
 8001a4c:	78fb      	ldrb	r3, [r7, #3]
 8001a4e:	331b      	adds	r3, #27
 8001a50:	011b      	lsls	r3, r3, #4
 8001a52:	4413      	add	r3, r2
 8001a54:	3304      	adds	r3, #4
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	0a1a      	lsrs	r2, r3, #8
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a5e:	b2d2      	uxtb	r2, r2
 8001a60:	635a      	str	r2, [r3, #52]	; 0x34
  /* Get the data field */
  hcan->pRxMsg->Data[0] = (uint8_t)0xFF & hcan->Instance->sFIFOMailBox[FIFONumber].RDLR;
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681a      	ldr	r2, [r3, #0]
 8001a66:	78fb      	ldrb	r3, [r7, #3]
 8001a68:	011b      	lsls	r3, r3, #4
 8001a6a:	4413      	add	r3, r2
 8001a6c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001a70:	681a      	ldr	r2, [r3, #0]
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a76:	b2d2      	uxtb	r2, r2
 8001a78:	615a      	str	r2, [r3, #20]
  hcan->pRxMsg->Data[1] = (uint8_t)0xFF & (hcan->Instance->sFIFOMailBox[FIFONumber].RDLR >> 8);
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681a      	ldr	r2, [r3, #0]
 8001a7e:	78fb      	ldrb	r3, [r7, #3]
 8001a80:	011b      	lsls	r3, r3, #4
 8001a82:	4413      	add	r3, r2
 8001a84:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	0a1a      	lsrs	r2, r3, #8
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a90:	b2d2      	uxtb	r2, r2
 8001a92:	619a      	str	r2, [r3, #24]
  hcan->pRxMsg->Data[2] = (uint8_t)0xFF & (hcan->Instance->sFIFOMailBox[FIFONumber].RDLR >> 16);
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681a      	ldr	r2, [r3, #0]
 8001a98:	78fb      	ldrb	r3, [r7, #3]
 8001a9a:	011b      	lsls	r3, r3, #4
 8001a9c:	4413      	add	r3, r2
 8001a9e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	0c1a      	lsrs	r2, r3, #16
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001aaa:	b2d2      	uxtb	r2, r2
 8001aac:	61da      	str	r2, [r3, #28]
  hcan->pRxMsg->Data[3] = (uint8_t)0xFF & (hcan->Instance->sFIFOMailBox[FIFONumber].RDLR >> 24);
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681a      	ldr	r2, [r3, #0]
 8001ab2:	78fb      	ldrb	r3, [r7, #3]
 8001ab4:	011b      	lsls	r3, r3, #4
 8001ab6:	4413      	add	r3, r2
 8001ab8:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	0e1a      	lsrs	r2, r3, #24
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ac4:	b2d2      	uxtb	r2, r2
 8001ac6:	621a      	str	r2, [r3, #32]
  hcan->pRxMsg->Data[4] = (uint8_t)0xFF & hcan->Instance->sFIFOMailBox[FIFONumber].RDHR;
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681a      	ldr	r2, [r3, #0]
 8001acc:	78fb      	ldrb	r3, [r7, #3]
 8001ace:	011b      	lsls	r3, r3, #4
 8001ad0:	4413      	add	r3, r2
 8001ad2:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001ad6:	681a      	ldr	r2, [r3, #0]
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001adc:	b2d2      	uxtb	r2, r2
 8001ade:	625a      	str	r2, [r3, #36]	; 0x24
  hcan->pRxMsg->Data[5] = (uint8_t)0xFF & (hcan->Instance->sFIFOMailBox[FIFONumber].RDHR >> 8);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681a      	ldr	r2, [r3, #0]
 8001ae4:	78fb      	ldrb	r3, [r7, #3]
 8001ae6:	011b      	lsls	r3, r3, #4
 8001ae8:	4413      	add	r3, r2
 8001aea:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	0a1a      	lsrs	r2, r3, #8
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001af6:	b2d2      	uxtb	r2, r2
 8001af8:	629a      	str	r2, [r3, #40]	; 0x28
  hcan->pRxMsg->Data[6] = (uint8_t)0xFF & (hcan->Instance->sFIFOMailBox[FIFONumber].RDHR >> 16);
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681a      	ldr	r2, [r3, #0]
 8001afe:	78fb      	ldrb	r3, [r7, #3]
 8001b00:	011b      	lsls	r3, r3, #4
 8001b02:	4413      	add	r3, r2
 8001b04:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	0c1a      	lsrs	r2, r3, #16
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b10:	b2d2      	uxtb	r2, r2
 8001b12:	62da      	str	r2, [r3, #44]	; 0x2c
  hcan->pRxMsg->Data[7] = (uint8_t)0xFF & (hcan->Instance->sFIFOMailBox[FIFONumber].RDHR >> 24);
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681a      	ldr	r2, [r3, #0]
 8001b18:	78fb      	ldrb	r3, [r7, #3]
 8001b1a:	011b      	lsls	r3, r3, #4
 8001b1c:	4413      	add	r3, r2
 8001b1e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	0e1a      	lsrs	r2, r3, #24
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b2a:	b2d2      	uxtb	r2, r2
 8001b2c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Release the FIFO */
  /* Release FIFO0 */
  if (FIFONumber == CAN_FIFO0)
 8001b2e:	78fb      	ldrb	r3, [r7, #3]
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d110      	bne.n	8001b56 <CAN_Receive_IT+0x1a4>
  {
    __HAL_CAN_FIFO_RELEASE(hcan, CAN_FIFO0);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	68da      	ldr	r2, [r3, #12]
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f042 0220 	orr.w	r2, r2, #32
 8001b42:	60da      	str	r2, [r3, #12]

    /* Disable FIFO 0 message pending Interrupt */
    __HAL_CAN_DISABLE_IT(hcan, CAN_IT_FMP0);
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	695a      	ldr	r2, [r3, #20]
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f022 0202 	bic.w	r2, r2, #2
 8001b52:	615a      	str	r2, [r3, #20]
 8001b54:	e00f      	b.n	8001b76 <CAN_Receive_IT+0x1c4>
  }
  /* Release FIFO1 */
  else /* FIFONumber == CAN_FIFO1 */
  {
    __HAL_CAN_FIFO_RELEASE(hcan, CAN_FIFO1);
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	691a      	ldr	r2, [r3, #16]
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	f042 0220 	orr.w	r2, r2, #32
 8001b64:	611a      	str	r2, [r3, #16]

    /* Disable FIFO 1 message pending Interrupt */
    __HAL_CAN_DISABLE_IT(hcan, CAN_IT_FMP1);
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	695a      	ldr	r2, [r3, #20]
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	f022 0210 	bic.w	r2, r2, #16
 8001b74:	615a      	str	r2, [r3, #20]
  }

  if(hcan->State == HAL_CAN_STATE_BUSY_RX)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001b7c:	b2db      	uxtb	r3, r3
 8001b7e:	2b22      	cmp	r3, #34	; 0x22
 8001b80:	d107      	bne.n	8001b92 <CAN_Receive_IT+0x1e0>
    /*  - Disable Error warning Interrupt */
    /*  - Disable Error passive Interrupt */
    /*  - Disable Bus-off Interrupt */
    /*  - Disable Last error code Interrupt */
    /*  - Disable Error Interrupt */
    __HAL_CAN_DISABLE_IT(hcan, CAN_IT_EWG |
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	695a      	ldr	r2, [r3, #20]
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f422 420f 	bic.w	r2, r2, #36608	; 0x8f00
 8001b90:	615a      	str	r2, [r3, #20]
                               CAN_IT_BOF |
                               CAN_IT_LEC |
                               CAN_IT_ERR  );
  }

  if(hcan->State == HAL_CAN_STATE_BUSY_TX_RX)
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001b98:	b2db      	uxtb	r3, r3
 8001b9a:	2b32      	cmp	r3, #50	; 0x32
 8001b9c:	d104      	bne.n	8001ba8 <CAN_Receive_IT+0x1f6>
  {
    /* Disable CAN state */
    hcan->State = HAL_CAN_STATE_BUSY_TX;
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	2212      	movs	r2, #18
 8001ba2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8001ba6:	e003      	b.n	8001bb0 <CAN_Receive_IT+0x1fe>
  }
  else
  {
    /* Change CAN state */
    hcan->State = HAL_CAN_STATE_READY;
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	2201      	movs	r2, #1
 8001bac:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  }

  /* Receive complete callback */
  HAL_CAN_RxCpltCallback(hcan);
 8001bb0:	6878      	ldr	r0, [r7, #4]
 8001bb2:	f004 f8fd 	bl	8005db0 <HAL_CAN_RxCpltCallback>

  /* Return function status */
  return HAL_OK;
 8001bb6:	2300      	movs	r3, #0
}
 8001bb8:	4618      	mov	r0, r3
 8001bba:	3708      	adds	r7, #8
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	bd80      	pop	{r7, pc}

08001bc0 <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	b085      	sub	sp, #20
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	f003 0307 	and.w	r3, r3, #7
 8001bce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001bd0:	4b0c      	ldr	r3, [pc, #48]	; (8001c04 <NVIC_SetPriorityGrouping+0x44>)
 8001bd2:	68db      	ldr	r3, [r3, #12]
 8001bd4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001bd6:	68ba      	ldr	r2, [r7, #8]
 8001bd8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001bdc:	4013      	ands	r3, r2
 8001bde:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001be4:	68bb      	ldr	r3, [r7, #8]
 8001be6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001be8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001bec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001bf0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001bf2:	4a04      	ldr	r2, [pc, #16]	; (8001c04 <NVIC_SetPriorityGrouping+0x44>)
 8001bf4:	68bb      	ldr	r3, [r7, #8]
 8001bf6:	60d3      	str	r3, [r2, #12]
}
 8001bf8:	bf00      	nop
 8001bfa:	3714      	adds	r7, #20
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	bc80      	pop	{r7}
 8001c00:	4770      	bx	lr
 8001c02:	bf00      	nop
 8001c04:	e000ed00 	.word	0xe000ed00

08001c08 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 8001c08:	b480      	push	{r7}
 8001c0a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c0c:	4b04      	ldr	r3, [pc, #16]	; (8001c20 <NVIC_GetPriorityGrouping+0x18>)
 8001c0e:	68db      	ldr	r3, [r3, #12]
 8001c10:	0a1b      	lsrs	r3, r3, #8
 8001c12:	f003 0307 	and.w	r3, r3, #7
}
 8001c16:	4618      	mov	r0, r3
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	bc80      	pop	{r7}
 8001c1c:	4770      	bx	lr
 8001c1e:	bf00      	nop
 8001c20:	e000ed00 	.word	0xe000ed00

08001c24 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c24:	b480      	push	{r7}
 8001c26:	b083      	sub	sp, #12
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8001c2e:	79fb      	ldrb	r3, [r7, #7]
 8001c30:	f003 021f 	and.w	r2, r3, #31
 8001c34:	4906      	ldr	r1, [pc, #24]	; (8001c50 <NVIC_EnableIRQ+0x2c>)
 8001c36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c3a:	095b      	lsrs	r3, r3, #5
 8001c3c:	2001      	movs	r0, #1
 8001c3e:	fa00 f202 	lsl.w	r2, r0, r2
 8001c42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001c46:	bf00      	nop
 8001c48:	370c      	adds	r7, #12
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	bc80      	pop	{r7}
 8001c4e:	4770      	bx	lr
 8001c50:	e000e100 	.word	0xe000e100

08001c54 <NVIC_DisableIRQ>:
  \brief   Disable External Interrupt
  \details Disables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001c54:	b480      	push	{r7}
 8001c56:	b083      	sub	sp, #12
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	71fb      	strb	r3, [r7, #7]
  NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8001c5e:	79fb      	ldrb	r3, [r7, #7]
 8001c60:	f003 021f 	and.w	r2, r3, #31
 8001c64:	4907      	ldr	r1, [pc, #28]	; (8001c84 <NVIC_DisableIRQ+0x30>)
 8001c66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c6a:	095b      	lsrs	r3, r3, #5
 8001c6c:	2001      	movs	r0, #1
 8001c6e:	fa00 f202 	lsl.w	r2, r0, r2
 8001c72:	3320      	adds	r3, #32
 8001c74:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001c78:	bf00      	nop
 8001c7a:	370c      	adds	r7, #12
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	bc80      	pop	{r7}
 8001c80:	4770      	bx	lr
 8001c82:	bf00      	nop
 8001c84:	e000e100 	.word	0xe000e100

08001c88 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	b083      	sub	sp, #12
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	4603      	mov	r3, r0
 8001c90:	6039      	str	r1, [r7, #0]
 8001c92:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8001c94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	da0b      	bge.n	8001cb4 <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c9c:	683b      	ldr	r3, [r7, #0]
 8001c9e:	b2da      	uxtb	r2, r3
 8001ca0:	490c      	ldr	r1, [pc, #48]	; (8001cd4 <NVIC_SetPriority+0x4c>)
 8001ca2:	79fb      	ldrb	r3, [r7, #7]
 8001ca4:	f003 030f 	and.w	r3, r3, #15
 8001ca8:	3b04      	subs	r3, #4
 8001caa:	0112      	lsls	r2, r2, #4
 8001cac:	b2d2      	uxtb	r2, r2
 8001cae:	440b      	add	r3, r1
 8001cb0:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001cb2:	e009      	b.n	8001cc8 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cb4:	683b      	ldr	r3, [r7, #0]
 8001cb6:	b2da      	uxtb	r2, r3
 8001cb8:	4907      	ldr	r1, [pc, #28]	; (8001cd8 <NVIC_SetPriority+0x50>)
 8001cba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cbe:	0112      	lsls	r2, r2, #4
 8001cc0:	b2d2      	uxtb	r2, r2
 8001cc2:	440b      	add	r3, r1
 8001cc4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001cc8:	bf00      	nop
 8001cca:	370c      	adds	r7, #12
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	bc80      	pop	{r7}
 8001cd0:	4770      	bx	lr
 8001cd2:	bf00      	nop
 8001cd4:	e000ed00 	.word	0xe000ed00
 8001cd8:	e000e100 	.word	0xe000e100

08001cdc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	b089      	sub	sp, #36	; 0x24
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	60f8      	str	r0, [r7, #12]
 8001ce4:	60b9      	str	r1, [r7, #8]
 8001ce6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	f003 0307 	and.w	r3, r3, #7
 8001cee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001cf0:	69fb      	ldr	r3, [r7, #28]
 8001cf2:	f1c3 0307 	rsb	r3, r3, #7
 8001cf6:	2b04      	cmp	r3, #4
 8001cf8:	bf28      	it	cs
 8001cfa:	2304      	movcs	r3, #4
 8001cfc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001cfe:	69fb      	ldr	r3, [r7, #28]
 8001d00:	3304      	adds	r3, #4
 8001d02:	2b06      	cmp	r3, #6
 8001d04:	d902      	bls.n	8001d0c <NVIC_EncodePriority+0x30>
 8001d06:	69fb      	ldr	r3, [r7, #28]
 8001d08:	3b03      	subs	r3, #3
 8001d0a:	e000      	b.n	8001d0e <NVIC_EncodePriority+0x32>
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d10:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001d14:	69bb      	ldr	r3, [r7, #24]
 8001d16:	fa02 f303 	lsl.w	r3, r2, r3
 8001d1a:	43da      	mvns	r2, r3
 8001d1c:	68bb      	ldr	r3, [r7, #8]
 8001d1e:	401a      	ands	r2, r3
 8001d20:	697b      	ldr	r3, [r7, #20]
 8001d22:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d24:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001d28:	697b      	ldr	r3, [r7, #20]
 8001d2a:	fa01 f303 	lsl.w	r3, r1, r3
 8001d2e:	43d9      	mvns	r1, r3
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d34:	4313      	orrs	r3, r2
         );
}
 8001d36:	4618      	mov	r0, r3
 8001d38:	3724      	adds	r7, #36	; 0x24
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	bc80      	pop	{r7}
 8001d3e:	4770      	bx	lr

08001d40 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b082      	sub	sp, #8
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	3b01      	subs	r3, #1
 8001d4c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d50:	d301      	bcc.n	8001d56 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d52:	2301      	movs	r3, #1
 8001d54:	e00f      	b.n	8001d76 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d56:	4a0a      	ldr	r2, [pc, #40]	; (8001d80 <SysTick_Config+0x40>)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	3b01      	subs	r3, #1
 8001d5c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d5e:	210f      	movs	r1, #15
 8001d60:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001d64:	f7ff ff90 	bl	8001c88 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d68:	4b05      	ldr	r3, [pc, #20]	; (8001d80 <SysTick_Config+0x40>)
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d6e:	4b04      	ldr	r3, [pc, #16]	; (8001d80 <SysTick_Config+0x40>)
 8001d70:	2207      	movs	r2, #7
 8001d72:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d74:	2300      	movs	r3, #0
}
 8001d76:	4618      	mov	r0, r3
 8001d78:	3708      	adds	r7, #8
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bd80      	pop	{r7, pc}
 8001d7e:	bf00      	nop
 8001d80:	e000e010 	.word	0xe000e010

08001d84 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b082      	sub	sp, #8
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d8c:	6878      	ldr	r0, [r7, #4]
 8001d8e:	f7ff ff17 	bl	8001bc0 <NVIC_SetPriorityGrouping>
}
 8001d92:	bf00      	nop
 8001d94:	3708      	adds	r7, #8
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bd80      	pop	{r7, pc}

08001d9a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d9a:	b580      	push	{r7, lr}
 8001d9c:	b086      	sub	sp, #24
 8001d9e:	af00      	add	r7, sp, #0
 8001da0:	4603      	mov	r3, r0
 8001da2:	60b9      	str	r1, [r7, #8]
 8001da4:	607a      	str	r2, [r7, #4]
 8001da6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001da8:	2300      	movs	r3, #0
 8001daa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001dac:	f7ff ff2c 	bl	8001c08 <NVIC_GetPriorityGrouping>
 8001db0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001db2:	687a      	ldr	r2, [r7, #4]
 8001db4:	68b9      	ldr	r1, [r7, #8]
 8001db6:	6978      	ldr	r0, [r7, #20]
 8001db8:	f7ff ff90 	bl	8001cdc <NVIC_EncodePriority>
 8001dbc:	4602      	mov	r2, r0
 8001dbe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001dc2:	4611      	mov	r1, r2
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	f7ff ff5f 	bl	8001c88 <NVIC_SetPriority>
}
 8001dca:	bf00      	nop
 8001dcc:	3718      	adds	r7, #24
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	bd80      	pop	{r7, pc}

08001dd2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001dd2:	b580      	push	{r7, lr}
 8001dd4:	b082      	sub	sp, #8
 8001dd6:	af00      	add	r7, sp, #0
 8001dd8:	4603      	mov	r3, r0
 8001dda:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ddc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001de0:	4618      	mov	r0, r3
 8001de2:	f7ff ff1f 	bl	8001c24 <NVIC_EnableIRQ>
}
 8001de6:	bf00      	nop
 8001de8:	3708      	adds	r7, #8
 8001dea:	46bd      	mov	sp, r7
 8001dec:	bd80      	pop	{r7, pc}

08001dee <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))  
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001dee:	b580      	push	{r7, lr}
 8001df0:	b082      	sub	sp, #8
 8001df2:	af00      	add	r7, sp, #0
 8001df4:	4603      	mov	r3, r0
 8001df6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8001df8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	f7ff ff29 	bl	8001c54 <NVIC_DisableIRQ>
}
 8001e02:	bf00      	nop
 8001e04:	3708      	adds	r7, #8
 8001e06:	46bd      	mov	sp, r7
 8001e08:	bd80      	pop	{r7, pc}

08001e0a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e0a:	b580      	push	{r7, lr}
 8001e0c:	b082      	sub	sp, #8
 8001e0e:	af00      	add	r7, sp, #0
 8001e10:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e12:	6878      	ldr	r0, [r7, #4]
 8001e14:	f7ff ff94 	bl	8001d40 <SysTick_Config>
 8001e18:	4603      	mov	r3, r0
}
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	3708      	adds	r7, #8
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	bd80      	pop	{r7, pc}
	...

08001e24 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8001e24:	b480      	push	{r7}
 8001e26:	b083      	sub	sp, #12
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	2b04      	cmp	r3, #4
 8001e30:	d106      	bne.n	8001e40 <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8001e32:	4b09      	ldr	r3, [pc, #36]	; (8001e58 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	4a08      	ldr	r2, [pc, #32]	; (8001e58 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8001e38:	f043 0304 	orr.w	r3, r3, #4
 8001e3c:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 8001e3e:	e005      	b.n	8001e4c <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8001e40:	4b05      	ldr	r3, [pc, #20]	; (8001e58 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	4a04      	ldr	r2, [pc, #16]	; (8001e58 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8001e46:	f023 0304 	bic.w	r3, r3, #4
 8001e4a:	6013      	str	r3, [r2, #0]
}
 8001e4c:	bf00      	nop
 8001e4e:	370c      	adds	r7, #12
 8001e50:	46bd      	mov	sp, r7
 8001e52:	bc80      	pop	{r7}
 8001e54:	4770      	bx	lr
 8001e56:	bf00      	nop
 8001e58:	e000e010 	.word	0xe000e010

08001e5c <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8001e60:	f007 ffe0 	bl	8009e24 <HAL_SYSTICK_Callback>
}
 8001e64:	bf00      	nop
 8001e66:	bd80      	pop	{r7, pc}

08001e68 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b084      	sub	sp, #16
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001e70:	2300      	movs	r3, #0
 8001e72:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001e7a:	2b02      	cmp	r3, #2
 8001e7c:	d005      	beq.n	8001e8a <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	2204      	movs	r2, #4
 8001e82:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001e84:	2301      	movs	r3, #1
 8001e86:	73fb      	strb	r3, [r7, #15]
 8001e88:	e051      	b.n	8001f2e <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	681a      	ldr	r2, [r3, #0]
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f022 020e 	bic.w	r2, r2, #14
 8001e98:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	681a      	ldr	r2, [r3, #0]
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f022 0201 	bic.w	r2, r2, #1
 8001ea8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	4a22      	ldr	r2, [pc, #136]	; (8001f38 <HAL_DMA_Abort_IT+0xd0>)
 8001eb0:	4293      	cmp	r3, r2
 8001eb2:	d029      	beq.n	8001f08 <HAL_DMA_Abort_IT+0xa0>
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	4a20      	ldr	r2, [pc, #128]	; (8001f3c <HAL_DMA_Abort_IT+0xd4>)
 8001eba:	4293      	cmp	r3, r2
 8001ebc:	d022      	beq.n	8001f04 <HAL_DMA_Abort_IT+0x9c>
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	4a1f      	ldr	r2, [pc, #124]	; (8001f40 <HAL_DMA_Abort_IT+0xd8>)
 8001ec4:	4293      	cmp	r3, r2
 8001ec6:	d01a      	beq.n	8001efe <HAL_DMA_Abort_IT+0x96>
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	4a1d      	ldr	r2, [pc, #116]	; (8001f44 <HAL_DMA_Abort_IT+0xdc>)
 8001ece:	4293      	cmp	r3, r2
 8001ed0:	d012      	beq.n	8001ef8 <HAL_DMA_Abort_IT+0x90>
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	4a1c      	ldr	r2, [pc, #112]	; (8001f48 <HAL_DMA_Abort_IT+0xe0>)
 8001ed8:	4293      	cmp	r3, r2
 8001eda:	d00a      	beq.n	8001ef2 <HAL_DMA_Abort_IT+0x8a>
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	4a1a      	ldr	r2, [pc, #104]	; (8001f4c <HAL_DMA_Abort_IT+0xe4>)
 8001ee2:	4293      	cmp	r3, r2
 8001ee4:	d102      	bne.n	8001eec <HAL_DMA_Abort_IT+0x84>
 8001ee6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001eea:	e00e      	b.n	8001f0a <HAL_DMA_Abort_IT+0xa2>
 8001eec:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001ef0:	e00b      	b.n	8001f0a <HAL_DMA_Abort_IT+0xa2>
 8001ef2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001ef6:	e008      	b.n	8001f0a <HAL_DMA_Abort_IT+0xa2>
 8001ef8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001efc:	e005      	b.n	8001f0a <HAL_DMA_Abort_IT+0xa2>
 8001efe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001f02:	e002      	b.n	8001f0a <HAL_DMA_Abort_IT+0xa2>
 8001f04:	2310      	movs	r3, #16
 8001f06:	e000      	b.n	8001f0a <HAL_DMA_Abort_IT+0xa2>
 8001f08:	2301      	movs	r3, #1
 8001f0a:	4a11      	ldr	r2, [pc, #68]	; (8001f50 <HAL_DMA_Abort_IT+0xe8>)
 8001f0c:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	2201      	movs	r2, #1
 8001f12:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	2200      	movs	r2, #0
 8001f1a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d003      	beq.n	8001f2e <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f2a:	6878      	ldr	r0, [r7, #4]
 8001f2c:	4798      	blx	r3
    } 
  }
  return status;
 8001f2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f30:	4618      	mov	r0, r3
 8001f32:	3710      	adds	r7, #16
 8001f34:	46bd      	mov	sp, r7
 8001f36:	bd80      	pop	{r7, pc}
 8001f38:	40020008 	.word	0x40020008
 8001f3c:	4002001c 	.word	0x4002001c
 8001f40:	40020030 	.word	0x40020030
 8001f44:	40020044 	.word	0x40020044
 8001f48:	40020058 	.word	0x40020058
 8001f4c:	4002006c 	.word	0x4002006c
 8001f50:	40020000 	.word	0x40020000

08001f54 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f54:	b480      	push	{r7}
 8001f56:	b08b      	sub	sp, #44	; 0x2c
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
 8001f5c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001f5e:	2300      	movs	r3, #0
 8001f60:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent = 0x00U;
 8001f62:	2300      	movs	r3, #0
 8001f64:	61bb      	str	r3, [r7, #24]
  uint32_t temp = 0x00U;
 8001f66:	2300      	movs	r3, #0
 8001f68:	617b      	str	r3, [r7, #20]
  uint32_t config = 0x00U;
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	623b      	str	r3, [r7, #32]
  __IO uint32_t *configregister; /* Store the address of CRL or CRH register based on pin number */
  uint32_t registeroffset = 0U; /* offset used during computation of CNF and MODE bits placement inside CRL or CRH register */
 8001f6e:	2300      	movs	r3, #0
 8001f70:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0U; position < GPIO_NUMBER; position++)
 8001f72:	2300      	movs	r3, #0
 8001f74:	627b      	str	r3, [r7, #36]	; 0x24
 8001f76:	e169      	b.n	800224c <HAL_GPIO_Init+0x2f8>
  {
    /* Get the IO position */
    ioposition = (0x01U << position);
 8001f78:	2201      	movs	r2, #1
 8001f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f80:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001f82:	683b      	ldr	r3, [r7, #0]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	69fa      	ldr	r2, [r7, #28]
 8001f88:	4013      	ands	r3, r2
 8001f8a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001f8c:	69ba      	ldr	r2, [r7, #24]
 8001f8e:	69fb      	ldr	r3, [r7, #28]
 8001f90:	429a      	cmp	r2, r3
 8001f92:	f040 8158 	bne.w	8002246 <HAL_GPIO_Init+0x2f2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001f96:	683b      	ldr	r3, [r7, #0]
 8001f98:	685b      	ldr	r3, [r3, #4]
 8001f9a:	4a9a      	ldr	r2, [pc, #616]	; (8002204 <HAL_GPIO_Init+0x2b0>)
 8001f9c:	4293      	cmp	r3, r2
 8001f9e:	d05e      	beq.n	800205e <HAL_GPIO_Init+0x10a>
 8001fa0:	4a98      	ldr	r2, [pc, #608]	; (8002204 <HAL_GPIO_Init+0x2b0>)
 8001fa2:	4293      	cmp	r3, r2
 8001fa4:	d875      	bhi.n	8002092 <HAL_GPIO_Init+0x13e>
 8001fa6:	4a98      	ldr	r2, [pc, #608]	; (8002208 <HAL_GPIO_Init+0x2b4>)
 8001fa8:	4293      	cmp	r3, r2
 8001faa:	d058      	beq.n	800205e <HAL_GPIO_Init+0x10a>
 8001fac:	4a96      	ldr	r2, [pc, #600]	; (8002208 <HAL_GPIO_Init+0x2b4>)
 8001fae:	4293      	cmp	r3, r2
 8001fb0:	d86f      	bhi.n	8002092 <HAL_GPIO_Init+0x13e>
 8001fb2:	4a96      	ldr	r2, [pc, #600]	; (800220c <HAL_GPIO_Init+0x2b8>)
 8001fb4:	4293      	cmp	r3, r2
 8001fb6:	d052      	beq.n	800205e <HAL_GPIO_Init+0x10a>
 8001fb8:	4a94      	ldr	r2, [pc, #592]	; (800220c <HAL_GPIO_Init+0x2b8>)
 8001fba:	4293      	cmp	r3, r2
 8001fbc:	d869      	bhi.n	8002092 <HAL_GPIO_Init+0x13e>
 8001fbe:	4a94      	ldr	r2, [pc, #592]	; (8002210 <HAL_GPIO_Init+0x2bc>)
 8001fc0:	4293      	cmp	r3, r2
 8001fc2:	d04c      	beq.n	800205e <HAL_GPIO_Init+0x10a>
 8001fc4:	4a92      	ldr	r2, [pc, #584]	; (8002210 <HAL_GPIO_Init+0x2bc>)
 8001fc6:	4293      	cmp	r3, r2
 8001fc8:	d863      	bhi.n	8002092 <HAL_GPIO_Init+0x13e>
 8001fca:	4a92      	ldr	r2, [pc, #584]	; (8002214 <HAL_GPIO_Init+0x2c0>)
 8001fcc:	4293      	cmp	r3, r2
 8001fce:	d046      	beq.n	800205e <HAL_GPIO_Init+0x10a>
 8001fd0:	4a90      	ldr	r2, [pc, #576]	; (8002214 <HAL_GPIO_Init+0x2c0>)
 8001fd2:	4293      	cmp	r3, r2
 8001fd4:	d85d      	bhi.n	8002092 <HAL_GPIO_Init+0x13e>
 8001fd6:	2b12      	cmp	r3, #18
 8001fd8:	d82a      	bhi.n	8002030 <HAL_GPIO_Init+0xdc>
 8001fda:	2b12      	cmp	r3, #18
 8001fdc:	d859      	bhi.n	8002092 <HAL_GPIO_Init+0x13e>
 8001fde:	a201      	add	r2, pc, #4	; (adr r2, 8001fe4 <HAL_GPIO_Init+0x90>)
 8001fe0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fe4:	0800205f 	.word	0x0800205f
 8001fe8:	08002039 	.word	0x08002039
 8001fec:	0800204b 	.word	0x0800204b
 8001ff0:	0800208d 	.word	0x0800208d
 8001ff4:	08002093 	.word	0x08002093
 8001ff8:	08002093 	.word	0x08002093
 8001ffc:	08002093 	.word	0x08002093
 8002000:	08002093 	.word	0x08002093
 8002004:	08002093 	.word	0x08002093
 8002008:	08002093 	.word	0x08002093
 800200c:	08002093 	.word	0x08002093
 8002010:	08002093 	.word	0x08002093
 8002014:	08002093 	.word	0x08002093
 8002018:	08002093 	.word	0x08002093
 800201c:	08002093 	.word	0x08002093
 8002020:	08002093 	.word	0x08002093
 8002024:	08002093 	.word	0x08002093
 8002028:	08002041 	.word	0x08002041
 800202c:	08002055 	.word	0x08002055
 8002030:	4a79      	ldr	r2, [pc, #484]	; (8002218 <HAL_GPIO_Init+0x2c4>)
 8002032:	4293      	cmp	r3, r2
 8002034:	d013      	beq.n	800205e <HAL_GPIO_Init+0x10a>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002036:	e02c      	b.n	8002092 <HAL_GPIO_Init+0x13e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002038:	683b      	ldr	r3, [r7, #0]
 800203a:	68db      	ldr	r3, [r3, #12]
 800203c:	623b      	str	r3, [r7, #32]
          break;
 800203e:	e029      	b.n	8002094 <HAL_GPIO_Init+0x140>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002040:	683b      	ldr	r3, [r7, #0]
 8002042:	68db      	ldr	r3, [r3, #12]
 8002044:	3304      	adds	r3, #4
 8002046:	623b      	str	r3, [r7, #32]
          break;
 8002048:	e024      	b.n	8002094 <HAL_GPIO_Init+0x140>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800204a:	683b      	ldr	r3, [r7, #0]
 800204c:	68db      	ldr	r3, [r3, #12]
 800204e:	3308      	adds	r3, #8
 8002050:	623b      	str	r3, [r7, #32]
          break;
 8002052:	e01f      	b.n	8002094 <HAL_GPIO_Init+0x140>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002054:	683b      	ldr	r3, [r7, #0]
 8002056:	68db      	ldr	r3, [r3, #12]
 8002058:	330c      	adds	r3, #12
 800205a:	623b      	str	r3, [r7, #32]
          break;
 800205c:	e01a      	b.n	8002094 <HAL_GPIO_Init+0x140>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800205e:	683b      	ldr	r3, [r7, #0]
 8002060:	689b      	ldr	r3, [r3, #8]
 8002062:	2b00      	cmp	r3, #0
 8002064:	d102      	bne.n	800206c <HAL_GPIO_Init+0x118>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002066:	2304      	movs	r3, #4
 8002068:	623b      	str	r3, [r7, #32]
          break;
 800206a:	e013      	b.n	8002094 <HAL_GPIO_Init+0x140>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800206c:	683b      	ldr	r3, [r7, #0]
 800206e:	689b      	ldr	r3, [r3, #8]
 8002070:	2b01      	cmp	r3, #1
 8002072:	d105      	bne.n	8002080 <HAL_GPIO_Init+0x12c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002074:	2308      	movs	r3, #8
 8002076:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	69fa      	ldr	r2, [r7, #28]
 800207c:	611a      	str	r2, [r3, #16]
          break;
 800207e:	e009      	b.n	8002094 <HAL_GPIO_Init+0x140>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002080:	2308      	movs	r3, #8
 8002082:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	69fa      	ldr	r2, [r7, #28]
 8002088:	615a      	str	r2, [r3, #20]
          break;
 800208a:	e003      	b.n	8002094 <HAL_GPIO_Init+0x140>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800208c:	2300      	movs	r3, #0
 800208e:	623b      	str	r3, [r7, #32]
          break;
 8002090:	e000      	b.n	8002094 <HAL_GPIO_Init+0x140>
          break;
 8002092:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002094:	69bb      	ldr	r3, [r7, #24]
 8002096:	2bff      	cmp	r3, #255	; 0xff
 8002098:	d801      	bhi.n	800209e <HAL_GPIO_Init+0x14a>
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	e001      	b.n	80020a2 <HAL_GPIO_Init+0x14e>
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	3304      	adds	r3, #4
 80020a2:	60fb      	str	r3, [r7, #12]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);
 80020a4:	69bb      	ldr	r3, [r7, #24]
 80020a6:	2bff      	cmp	r3, #255	; 0xff
 80020a8:	d802      	bhi.n	80020b0 <HAL_GPIO_Init+0x15c>
 80020aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ac:	009b      	lsls	r3, r3, #2
 80020ae:	e002      	b.n	80020b6 <HAL_GPIO_Init+0x162>
 80020b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020b2:	3b08      	subs	r3, #8
 80020b4:	009b      	lsls	r3, r3, #2
 80020b6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	681a      	ldr	r2, [r3, #0]
 80020bc:	210f      	movs	r1, #15
 80020be:	693b      	ldr	r3, [r7, #16]
 80020c0:	fa01 f303 	lsl.w	r3, r1, r3
 80020c4:	43db      	mvns	r3, r3
 80020c6:	401a      	ands	r2, r3
 80020c8:	6a39      	ldr	r1, [r7, #32]
 80020ca:	693b      	ldr	r3, [r7, #16]
 80020cc:	fa01 f303 	lsl.w	r3, r1, r3
 80020d0:	431a      	orrs	r2, r3
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	685b      	ldr	r3, [r3, #4]
 80020da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020de:	2b00      	cmp	r3, #0
 80020e0:	f000 80b1 	beq.w	8002246 <HAL_GPIO_Init+0x2f2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80020e4:	4b4d      	ldr	r3, [pc, #308]	; (800221c <HAL_GPIO_Init+0x2c8>)
 80020e6:	699b      	ldr	r3, [r3, #24]
 80020e8:	4a4c      	ldr	r2, [pc, #304]	; (800221c <HAL_GPIO_Init+0x2c8>)
 80020ea:	f043 0301 	orr.w	r3, r3, #1
 80020ee:	6193      	str	r3, [r2, #24]
 80020f0:	4b4a      	ldr	r3, [pc, #296]	; (800221c <HAL_GPIO_Init+0x2c8>)
 80020f2:	699b      	ldr	r3, [r3, #24]
 80020f4:	f003 0301 	and.w	r3, r3, #1
 80020f8:	60bb      	str	r3, [r7, #8]
 80020fa:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2U];
 80020fc:	4a48      	ldr	r2, [pc, #288]	; (8002220 <HAL_GPIO_Init+0x2cc>)
 80020fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002100:	089b      	lsrs	r3, r3, #2
 8002102:	3302      	adds	r3, #2
 8002104:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002108:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 800210a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800210c:	f003 0303 	and.w	r3, r3, #3
 8002110:	009b      	lsls	r3, r3, #2
 8002112:	220f      	movs	r2, #15
 8002114:	fa02 f303 	lsl.w	r3, r2, r3
 8002118:	43db      	mvns	r3, r3
 800211a:	697a      	ldr	r2, [r7, #20]
 800211c:	4013      	ands	r3, r2
 800211e:	617b      	str	r3, [r7, #20]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	4a40      	ldr	r2, [pc, #256]	; (8002224 <HAL_GPIO_Init+0x2d0>)
 8002124:	4293      	cmp	r3, r2
 8002126:	d013      	beq.n	8002150 <HAL_GPIO_Init+0x1fc>
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	4a3f      	ldr	r2, [pc, #252]	; (8002228 <HAL_GPIO_Init+0x2d4>)
 800212c:	4293      	cmp	r3, r2
 800212e:	d00d      	beq.n	800214c <HAL_GPIO_Init+0x1f8>
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	4a3e      	ldr	r2, [pc, #248]	; (800222c <HAL_GPIO_Init+0x2d8>)
 8002134:	4293      	cmp	r3, r2
 8002136:	d007      	beq.n	8002148 <HAL_GPIO_Init+0x1f4>
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	4a3d      	ldr	r2, [pc, #244]	; (8002230 <HAL_GPIO_Init+0x2dc>)
 800213c:	4293      	cmp	r3, r2
 800213e:	d101      	bne.n	8002144 <HAL_GPIO_Init+0x1f0>
 8002140:	2303      	movs	r3, #3
 8002142:	e006      	b.n	8002152 <HAL_GPIO_Init+0x1fe>
 8002144:	2304      	movs	r3, #4
 8002146:	e004      	b.n	8002152 <HAL_GPIO_Init+0x1fe>
 8002148:	2302      	movs	r3, #2
 800214a:	e002      	b.n	8002152 <HAL_GPIO_Init+0x1fe>
 800214c:	2301      	movs	r3, #1
 800214e:	e000      	b.n	8002152 <HAL_GPIO_Init+0x1fe>
 8002150:	2300      	movs	r3, #0
 8002152:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002154:	f002 0203 	and.w	r2, r2, #3
 8002158:	0092      	lsls	r2, r2, #2
 800215a:	4093      	lsls	r3, r2
 800215c:	697a      	ldr	r2, [r7, #20]
 800215e:	4313      	orrs	r3, r2
 8002160:	617b      	str	r3, [r7, #20]
        AFIO->EXTICR[position >> 2U] = temp;
 8002162:	492f      	ldr	r1, [pc, #188]	; (8002220 <HAL_GPIO_Init+0x2cc>)
 8002164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002166:	089b      	lsrs	r3, r3, #2
 8002168:	3302      	adds	r3, #2
 800216a:	697a      	ldr	r2, [r7, #20]
 800216c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002170:	683b      	ldr	r3, [r7, #0]
 8002172:	685b      	ldr	r3, [r3, #4]
 8002174:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002178:	2b00      	cmp	r3, #0
 800217a:	d006      	beq.n	800218a <HAL_GPIO_Init+0x236>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800217c:	4b2d      	ldr	r3, [pc, #180]	; (8002234 <HAL_GPIO_Init+0x2e0>)
 800217e:	681a      	ldr	r2, [r3, #0]
 8002180:	492c      	ldr	r1, [pc, #176]	; (8002234 <HAL_GPIO_Init+0x2e0>)
 8002182:	69bb      	ldr	r3, [r7, #24]
 8002184:	4313      	orrs	r3, r2
 8002186:	600b      	str	r3, [r1, #0]
 8002188:	e006      	b.n	8002198 <HAL_GPIO_Init+0x244>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800218a:	4b2a      	ldr	r3, [pc, #168]	; (8002234 <HAL_GPIO_Init+0x2e0>)
 800218c:	681a      	ldr	r2, [r3, #0]
 800218e:	69bb      	ldr	r3, [r7, #24]
 8002190:	43db      	mvns	r3, r3
 8002192:	4928      	ldr	r1, [pc, #160]	; (8002234 <HAL_GPIO_Init+0x2e0>)
 8002194:	4013      	ands	r3, r2
 8002196:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	685b      	ldr	r3, [r3, #4]
 800219c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d006      	beq.n	80021b2 <HAL_GPIO_Init+0x25e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80021a4:	4b23      	ldr	r3, [pc, #140]	; (8002234 <HAL_GPIO_Init+0x2e0>)
 80021a6:	685a      	ldr	r2, [r3, #4]
 80021a8:	4922      	ldr	r1, [pc, #136]	; (8002234 <HAL_GPIO_Init+0x2e0>)
 80021aa:	69bb      	ldr	r3, [r7, #24]
 80021ac:	4313      	orrs	r3, r2
 80021ae:	604b      	str	r3, [r1, #4]
 80021b0:	e006      	b.n	80021c0 <HAL_GPIO_Init+0x26c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80021b2:	4b20      	ldr	r3, [pc, #128]	; (8002234 <HAL_GPIO_Init+0x2e0>)
 80021b4:	685a      	ldr	r2, [r3, #4]
 80021b6:	69bb      	ldr	r3, [r7, #24]
 80021b8:	43db      	mvns	r3, r3
 80021ba:	491e      	ldr	r1, [pc, #120]	; (8002234 <HAL_GPIO_Init+0x2e0>)
 80021bc:	4013      	ands	r3, r2
 80021be:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80021c0:	683b      	ldr	r3, [r7, #0]
 80021c2:	685b      	ldr	r3, [r3, #4]
 80021c4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d006      	beq.n	80021da <HAL_GPIO_Init+0x286>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80021cc:	4b19      	ldr	r3, [pc, #100]	; (8002234 <HAL_GPIO_Init+0x2e0>)
 80021ce:	689a      	ldr	r2, [r3, #8]
 80021d0:	4918      	ldr	r1, [pc, #96]	; (8002234 <HAL_GPIO_Init+0x2e0>)
 80021d2:	69bb      	ldr	r3, [r7, #24]
 80021d4:	4313      	orrs	r3, r2
 80021d6:	608b      	str	r3, [r1, #8]
 80021d8:	e006      	b.n	80021e8 <HAL_GPIO_Init+0x294>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80021da:	4b16      	ldr	r3, [pc, #88]	; (8002234 <HAL_GPIO_Init+0x2e0>)
 80021dc:	689a      	ldr	r2, [r3, #8]
 80021de:	69bb      	ldr	r3, [r7, #24]
 80021e0:	43db      	mvns	r3, r3
 80021e2:	4914      	ldr	r1, [pc, #80]	; (8002234 <HAL_GPIO_Init+0x2e0>)
 80021e4:	4013      	ands	r3, r2
 80021e6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80021e8:	683b      	ldr	r3, [r7, #0]
 80021ea:	685b      	ldr	r3, [r3, #4]
 80021ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d021      	beq.n	8002238 <HAL_GPIO_Init+0x2e4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80021f4:	4b0f      	ldr	r3, [pc, #60]	; (8002234 <HAL_GPIO_Init+0x2e0>)
 80021f6:	68da      	ldr	r2, [r3, #12]
 80021f8:	490e      	ldr	r1, [pc, #56]	; (8002234 <HAL_GPIO_Init+0x2e0>)
 80021fa:	69bb      	ldr	r3, [r7, #24]
 80021fc:	4313      	orrs	r3, r2
 80021fe:	60cb      	str	r3, [r1, #12]
 8002200:	e021      	b.n	8002246 <HAL_GPIO_Init+0x2f2>
 8002202:	bf00      	nop
 8002204:	10320000 	.word	0x10320000
 8002208:	10310000 	.word	0x10310000
 800220c:	10220000 	.word	0x10220000
 8002210:	10210000 	.word	0x10210000
 8002214:	10120000 	.word	0x10120000
 8002218:	10110000 	.word	0x10110000
 800221c:	40021000 	.word	0x40021000
 8002220:	40010000 	.word	0x40010000
 8002224:	40010800 	.word	0x40010800
 8002228:	40010c00 	.word	0x40010c00
 800222c:	40011000 	.word	0x40011000
 8002230:	40011400 	.word	0x40011400
 8002234:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002238:	4b09      	ldr	r3, [pc, #36]	; (8002260 <HAL_GPIO_Init+0x30c>)
 800223a:	68da      	ldr	r2, [r3, #12]
 800223c:	69bb      	ldr	r3, [r7, #24]
 800223e:	43db      	mvns	r3, r3
 8002240:	4907      	ldr	r1, [pc, #28]	; (8002260 <HAL_GPIO_Init+0x30c>)
 8002242:	4013      	ands	r3, r2
 8002244:	60cb      	str	r3, [r1, #12]
  for (position = 0U; position < GPIO_NUMBER; position++)
 8002246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002248:	3301      	adds	r3, #1
 800224a:	627b      	str	r3, [r7, #36]	; 0x24
 800224c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800224e:	2b0f      	cmp	r3, #15
 8002250:	f67f ae92 	bls.w	8001f78 <HAL_GPIO_Init+0x24>
        }
      }
    }
  }
}
 8002254:	bf00      	nop
 8002256:	bf00      	nop
 8002258:	372c      	adds	r7, #44	; 0x2c
 800225a:	46bd      	mov	sp, r7
 800225c:	bc80      	pop	{r7}
 800225e:	4770      	bx	lr
 8002260:	40010400 	.word	0x40010400

08002264 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002264:	b480      	push	{r7}
 8002266:	b085      	sub	sp, #20
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
 800226c:	460b      	mov	r3, r1
 800226e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	689a      	ldr	r2, [r3, #8]
 8002274:	887b      	ldrh	r3, [r7, #2]
 8002276:	4013      	ands	r3, r2
 8002278:	2b00      	cmp	r3, #0
 800227a:	d002      	beq.n	8002282 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800227c:	2301      	movs	r3, #1
 800227e:	73fb      	strb	r3, [r7, #15]
 8002280:	e001      	b.n	8002286 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002282:	2300      	movs	r3, #0
 8002284:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002286:	7bfb      	ldrb	r3, [r7, #15]
}
 8002288:	4618      	mov	r0, r3
 800228a:	3714      	adds	r7, #20
 800228c:	46bd      	mov	sp, r7
 800228e:	bc80      	pop	{r7}
 8002290:	4770      	bx	lr
	...

08002294 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	b082      	sub	sp, #8
 8002298:	af00      	add	r7, sp, #0
 800229a:	4603      	mov	r3, r0
 800229c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800229e:	4b08      	ldr	r3, [pc, #32]	; (80022c0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80022a0:	695a      	ldr	r2, [r3, #20]
 80022a2:	88fb      	ldrh	r3, [r7, #6]
 80022a4:	4013      	ands	r3, r2
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d006      	beq.n	80022b8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80022aa:	4a05      	ldr	r2, [pc, #20]	; (80022c0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80022ac:	88fb      	ldrh	r3, [r7, #6]
 80022ae:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80022b0:	88fb      	ldrh	r3, [r7, #6]
 80022b2:	4618      	mov	r0, r3
 80022b4:	f007 fda8 	bl	8009e08 <HAL_GPIO_EXTI_Callback>
  }
}
 80022b8:	bf00      	nop
 80022ba:	3708      	adds	r7, #8
 80022bc:	46bd      	mov	sp, r7
 80022be:	bd80      	pop	{r7, pc}
 80022c0:	40010400 	.word	0x40010400

080022c4 <HAL_I2C_Init>:
  * @param  hi2c: pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b084      	sub	sp, #16
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
  uint32_t freqrange = 0U;
 80022cc:	2300      	movs	r3, #0
 80022ce:	60fb      	str	r3, [r7, #12]
  uint32_t pclk1 = 0U;
 80022d0:	2300      	movs	r3, #0
 80022d2:	60bb      	str	r3, [r7, #8]

  /* Check the I2C handle allocation */
  if(hi2c == NULL)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d101      	bne.n	80022de <HAL_I2C_Init+0x1a>
  {
    return HAL_ERROR;
 80022da:	2301      	movs	r3, #1
 80022dc:	e0f3      	b.n	80024c6 <HAL_I2C_Init+0x202>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if(hi2c->State == HAL_I2C_STATE_RESET)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80022e4:	b2db      	uxtb	r3, r3
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d106      	bne.n	80022f8 <HAL_I2C_Init+0x34>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	2200      	movs	r2, #0
 80022ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80022f2:	6878      	ldr	r0, [r7, #4]
 80022f4:	f000 f8f6 	bl	80024e4 <HAL_I2C_MspInit>
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	2224      	movs	r2, #36	; 0x24
 80022fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	681a      	ldr	r2, [r3, #0]
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f022 0201 	bic.w	r2, r2, #1
 800230e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002310:	f002 fd44 	bl	8004d9c <HAL_RCC_GetPCLK1Freq>
 8002314:	60b8      	str	r0, [r7, #8]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	685b      	ldr	r3, [r3, #4]
 800231a:	4a6d      	ldr	r2, [pc, #436]	; (80024d0 <HAL_I2C_Init+0x20c>)
 800231c:	4293      	cmp	r3, r2
 800231e:	d807      	bhi.n	8002330 <HAL_I2C_Init+0x6c>
 8002320:	68bb      	ldr	r3, [r7, #8]
 8002322:	4a6c      	ldr	r2, [pc, #432]	; (80024d4 <HAL_I2C_Init+0x210>)
 8002324:	4293      	cmp	r3, r2
 8002326:	bf94      	ite	ls
 8002328:	2301      	movls	r3, #1
 800232a:	2300      	movhi	r3, #0
 800232c:	b2db      	uxtb	r3, r3
 800232e:	e006      	b.n	800233e <HAL_I2C_Init+0x7a>
 8002330:	68bb      	ldr	r3, [r7, #8]
 8002332:	4a69      	ldr	r2, [pc, #420]	; (80024d8 <HAL_I2C_Init+0x214>)
 8002334:	4293      	cmp	r3, r2
 8002336:	bf94      	ite	ls
 8002338:	2301      	movls	r3, #1
 800233a:	2300      	movhi	r3, #0
 800233c:	b2db      	uxtb	r3, r3
 800233e:	2b00      	cmp	r3, #0
 8002340:	d001      	beq.n	8002346 <HAL_I2C_Init+0x82>
  {
    return HAL_ERROR;
 8002342:	2301      	movs	r3, #1
 8002344:	e0bf      	b.n	80024c6 <HAL_I2C_Init+0x202>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002346:	68bb      	ldr	r3, [r7, #8]
 8002348:	4a64      	ldr	r2, [pc, #400]	; (80024dc <HAL_I2C_Init+0x218>)
 800234a:	fba2 2303 	umull	r2, r3, r2, r3
 800234e:	0c9b      	lsrs	r3, r3, #18
 8002350:	60fb      	str	r3, [r7, #12]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->CR2 = freqrange;
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	68fa      	ldr	r2, [r7, #12]
 8002358:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	685b      	ldr	r3, [r3, #4]
 800235e:	4a5c      	ldr	r2, [pc, #368]	; (80024d0 <HAL_I2C_Init+0x20c>)
 8002360:	4293      	cmp	r3, r2
 8002362:	d802      	bhi.n	800236a <HAL_I2C_Init+0xa6>
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	3301      	adds	r3, #1
 8002368:	e009      	b.n	800237e <HAL_I2C_Init+0xba>
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002370:	fb02 f303 	mul.w	r3, r2, r3
 8002374:	4a5a      	ldr	r2, [pc, #360]	; (80024e0 <HAL_I2C_Init+0x21c>)
 8002376:	fba2 2303 	umull	r2, r3, r2, r3
 800237a:	099b      	lsrs	r3, r3, #6
 800237c:	3301      	adds	r3, #1
 800237e:	687a      	ldr	r2, [r7, #4]
 8002380:	6812      	ldr	r2, [r2, #0]
 8002382:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	685b      	ldr	r3, [r3, #4]
 8002388:	4a51      	ldr	r2, [pc, #324]	; (80024d0 <HAL_I2C_Init+0x20c>)
 800238a:	4293      	cmp	r3, r2
 800238c:	d819      	bhi.n	80023c2 <HAL_I2C_Init+0xfe>
 800238e:	68bb      	ldr	r3, [r7, #8]
 8002390:	1e5a      	subs	r2, r3, #1
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	685b      	ldr	r3, [r3, #4]
 8002396:	005b      	lsls	r3, r3, #1
 8002398:	fbb2 f3f3 	udiv	r3, r2, r3
 800239c:	1c5a      	adds	r2, r3, #1
 800239e:	f640 73fc 	movw	r3, #4092	; 0xffc
 80023a2:	4013      	ands	r3, r2
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d00a      	beq.n	80023be <HAL_I2C_Init+0xfa>
 80023a8:	68bb      	ldr	r3, [r7, #8]
 80023aa:	1e5a      	subs	r2, r3, #1
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	685b      	ldr	r3, [r3, #4]
 80023b0:	005b      	lsls	r3, r3, #1
 80023b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80023b6:	3301      	adds	r3, #1
 80023b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80023bc:	e051      	b.n	8002462 <HAL_I2C_Init+0x19e>
 80023be:	2304      	movs	r3, #4
 80023c0:	e04f      	b.n	8002462 <HAL_I2C_Init+0x19e>
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	689b      	ldr	r3, [r3, #8]
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d111      	bne.n	80023ee <HAL_I2C_Init+0x12a>
 80023ca:	68bb      	ldr	r3, [r7, #8]
 80023cc:	1e59      	subs	r1, r3, #1
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	685a      	ldr	r2, [r3, #4]
 80023d2:	4613      	mov	r3, r2
 80023d4:	005b      	lsls	r3, r3, #1
 80023d6:	4413      	add	r3, r2
 80023d8:	fbb1 f3f3 	udiv	r3, r1, r3
 80023dc:	3301      	adds	r3, #1
 80023de:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	bf0c      	ite	eq
 80023e6:	2301      	moveq	r3, #1
 80023e8:	2300      	movne	r3, #0
 80023ea:	b2db      	uxtb	r3, r3
 80023ec:	e012      	b.n	8002414 <HAL_I2C_Init+0x150>
 80023ee:	68bb      	ldr	r3, [r7, #8]
 80023f0:	1e59      	subs	r1, r3, #1
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	685a      	ldr	r2, [r3, #4]
 80023f6:	4613      	mov	r3, r2
 80023f8:	009b      	lsls	r3, r3, #2
 80023fa:	4413      	add	r3, r2
 80023fc:	009a      	lsls	r2, r3, #2
 80023fe:	4413      	add	r3, r2
 8002400:	fbb1 f3f3 	udiv	r3, r1, r3
 8002404:	3301      	adds	r3, #1
 8002406:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800240a:	2b00      	cmp	r3, #0
 800240c:	bf0c      	ite	eq
 800240e:	2301      	moveq	r3, #1
 8002410:	2300      	movne	r3, #0
 8002412:	b2db      	uxtb	r3, r3
 8002414:	2b00      	cmp	r3, #0
 8002416:	d001      	beq.n	800241c <HAL_I2C_Init+0x158>
 8002418:	2301      	movs	r3, #1
 800241a:	e022      	b.n	8002462 <HAL_I2C_Init+0x19e>
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	689b      	ldr	r3, [r3, #8]
 8002420:	2b00      	cmp	r3, #0
 8002422:	d10e      	bne.n	8002442 <HAL_I2C_Init+0x17e>
 8002424:	68bb      	ldr	r3, [r7, #8]
 8002426:	1e59      	subs	r1, r3, #1
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	685a      	ldr	r2, [r3, #4]
 800242c:	4613      	mov	r3, r2
 800242e:	005b      	lsls	r3, r3, #1
 8002430:	4413      	add	r3, r2
 8002432:	fbb1 f3f3 	udiv	r3, r1, r3
 8002436:	3301      	adds	r3, #1
 8002438:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800243c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002440:	e00f      	b.n	8002462 <HAL_I2C_Init+0x19e>
 8002442:	68bb      	ldr	r3, [r7, #8]
 8002444:	1e59      	subs	r1, r3, #1
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	685a      	ldr	r2, [r3, #4]
 800244a:	4613      	mov	r3, r2
 800244c:	009b      	lsls	r3, r3, #2
 800244e:	4413      	add	r3, r2
 8002450:	009a      	lsls	r2, r3, #2
 8002452:	4413      	add	r3, r2
 8002454:	fbb1 f3f3 	udiv	r3, r1, r3
 8002458:	3301      	adds	r3, #1
 800245a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800245e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002462:	687a      	ldr	r2, [r7, #4]
 8002464:	6812      	ldr	r2, [r2, #0]
 8002466:	61d3      	str	r3, [r2, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	69d9      	ldr	r1, [r3, #28]
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	6a1a      	ldr	r2, [r3, #32]
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	430a      	orrs	r2, r1
 8002476:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  hi2c->Instance->OAR1 = (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	6919      	ldr	r1, [r3, #16]
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	68da      	ldr	r2, [r3, #12]
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	430a      	orrs	r2, r1
 8002486:	609a      	str	r2, [r3, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	6959      	ldr	r1, [r3, #20]
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	699a      	ldr	r2, [r3, #24]
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	430a      	orrs	r2, r1
 8002496:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	681a      	ldr	r2, [r3, #0]
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f042 0201 	orr.w	r2, r2, #1
 80024a6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	2200      	movs	r2, #0
 80024ac:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	2220      	movs	r2, #32
 80024b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	2200      	movs	r2, #0
 80024ba:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	2200      	movs	r2, #0
 80024c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80024c4:	2300      	movs	r3, #0
}
 80024c6:	4618      	mov	r0, r3
 80024c8:	3710      	adds	r7, #16
 80024ca:	46bd      	mov	sp, r7
 80024cc:	bd80      	pop	{r7, pc}
 80024ce:	bf00      	nop
 80024d0:	000186a0 	.word	0x000186a0
 80024d4:	001e847f 	.word	0x001e847f
 80024d8:	003d08ff 	.word	0x003d08ff
 80024dc:	431bde83 	.word	0x431bde83
 80024e0:	10624dd3 	.word	0x10624dd3

080024e4 <HAL_I2C_MspInit>:
  * @param  hi2c: pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
 __weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 80024e4:	b480      	push	{r7}
 80024e6:	b083      	sub	sp, #12
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hi2c);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 80024ec:	bf00      	nop
 80024ee:	370c      	adds	r7, #12
 80024f0:	46bd      	mov	sp, r7
 80024f2:	bc80      	pop	{r7}
 80024f4:	4770      	bx	lr
	...

080024f8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b088      	sub	sp, #32
 80024fc:	af02      	add	r7, sp, #8
 80024fe:	60f8      	str	r0, [r7, #12]
 8002500:	607a      	str	r2, [r7, #4]
 8002502:	461a      	mov	r2, r3
 8002504:	460b      	mov	r3, r1
 8002506:	817b      	strh	r3, [r7, #10]
 8002508:	4613      	mov	r3, r2
 800250a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart = 0x00U;
 800250c:	2300      	movs	r3, #0
 800250e:	617b      	str	r3, [r7, #20]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002510:	f7fe fd36 	bl	8000f80 <HAL_GetTick>
 8002514:	6178      	str	r0, [r7, #20]

  if(hi2c->State == HAL_I2C_STATE_READY)
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800251c:	b2db      	uxtb	r3, r3
 800251e:	2b20      	cmp	r3, #32
 8002520:	f040 80ee 	bne.w	8002700 <HAL_I2C_Master_Transmit+0x208>
  {
    /* Wait until BUSY flag is reset */
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002524:	697b      	ldr	r3, [r7, #20]
 8002526:	9300      	str	r3, [sp, #0]
 8002528:	2319      	movs	r3, #25
 800252a:	2201      	movs	r2, #1
 800252c:	4977      	ldr	r1, [pc, #476]	; (800270c <HAL_I2C_Master_Transmit+0x214>)
 800252e:	68f8      	ldr	r0, [r7, #12]
 8002530:	f001 feb2 	bl	8004298 <I2C_WaitOnFlagUntilTimeout>
 8002534:	4603      	mov	r3, r0
 8002536:	2b00      	cmp	r3, #0
 8002538:	d001      	beq.n	800253e <HAL_I2C_Master_Transmit+0x46>
    {
      return HAL_BUSY;
 800253a:	2302      	movs	r3, #2
 800253c:	e0e1      	b.n	8002702 <HAL_I2C_Master_Transmit+0x20a>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002544:	2b01      	cmp	r3, #1
 8002546:	d101      	bne.n	800254c <HAL_I2C_Master_Transmit+0x54>
 8002548:	2302      	movs	r3, #2
 800254a:	e0da      	b.n	8002702 <HAL_I2C_Master_Transmit+0x20a>
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	2201      	movs	r2, #1
 8002550:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f003 0301 	and.w	r3, r3, #1
 800255e:	2b01      	cmp	r3, #1
 8002560:	d007      	beq.n	8002572 <HAL_I2C_Master_Transmit+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	681a      	ldr	r2, [r3, #0]
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f042 0201 	orr.w	r2, r2, #1
 8002570:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	681a      	ldr	r2, [r3, #0]
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002580:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	2221      	movs	r2, #33	; 0x21
 8002586:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	2210      	movs	r2, #16
 800258e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	2200      	movs	r2, #0
 8002596:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	687a      	ldr	r2, [r7, #4]
 800259c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	893a      	ldrh	r2, [r7, #8]
 80025a2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	4a5a      	ldr	r2, [pc, #360]	; (8002710 <HAL_I2C_Master_Transmit+0x218>)
 80025a8:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025ae:	b29a      	uxth	r2, r3
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	851a      	strh	r2, [r3, #40]	; 0x28

    /* Send Slave Address */
    if(I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80025b4:	8979      	ldrh	r1, [r7, #10]
 80025b6:	697b      	ldr	r3, [r7, #20]
 80025b8:	6a3a      	ldr	r2, [r7, #32]
 80025ba:	68f8      	ldr	r0, [r7, #12]
 80025bc:	f001 fcd4 	bl	8003f68 <I2C_MasterRequestWrite>
 80025c0:	4603      	mov	r3, r0
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d00f      	beq.n	80025e6 <HAL_I2C_Master_Transmit+0xee>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ca:	2b04      	cmp	r3, #4
 80025cc:	d105      	bne.n	80025da <HAL_I2C_Master_Transmit+0xe2>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	2200      	movs	r2, #0
 80025d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_ERROR;
 80025d6:	2301      	movs	r3, #1
 80025d8:	e093      	b.n	8002702 <HAL_I2C_Master_Transmit+0x20a>
      }
      else
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	2200      	movs	r2, #0
 80025de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_TIMEOUT;
 80025e2:	2303      	movs	r3, #3
 80025e4:	e08d      	b.n	8002702 <HAL_I2C_Master_Transmit+0x20a>
      }
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80025e6:	2300      	movs	r3, #0
 80025e8:	613b      	str	r3, [r7, #16]
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	695b      	ldr	r3, [r3, #20]
 80025f0:	613b      	str	r3, [r7, #16]
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	699b      	ldr	r3, [r3, #24]
 80025f8:	613b      	str	r3, [r7, #16]
 80025fa:	693b      	ldr	r3, [r7, #16]

    while(hi2c->XferSize > 0U)
 80025fc:	e066      	b.n	80026cc <HAL_I2C_Master_Transmit+0x1d4>
    {
      /* Wait until TXE flag is set */
      if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80025fe:	697a      	ldr	r2, [r7, #20]
 8002600:	6a39      	ldr	r1, [r7, #32]
 8002602:	68f8      	ldr	r0, [r7, #12]
 8002604:	f001 ff07 	bl	8004416 <I2C_WaitOnTXEFlagUntilTimeout>
 8002608:	4603      	mov	r3, r0
 800260a:	2b00      	cmp	r3, #0
 800260c:	d00f      	beq.n	800262e <HAL_I2C_Master_Transmit+0x136>
      {
        if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002612:	2b04      	cmp	r3, #4
 8002614:	d109      	bne.n	800262a <HAL_I2C_Master_Transmit+0x132>
        {
          /* Generate Stop */
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	681a      	ldr	r2, [r3, #0]
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002624:	601a      	str	r2, [r3, #0]
          return HAL_ERROR;
 8002626:	2301      	movs	r3, #1
 8002628:	e06b      	b.n	8002702 <HAL_I2C_Master_Transmit+0x20a>
        }
        else
        {
          return HAL_TIMEOUT;
 800262a:	2303      	movs	r3, #3
 800262c:	e069      	b.n	8002702 <HAL_I2C_Master_Transmit+0x20a>
        }
      }

      /* Write data to DR */
      hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002632:	1c59      	adds	r1, r3, #1
 8002634:	68fa      	ldr	r2, [r7, #12]
 8002636:	6251      	str	r1, [r2, #36]	; 0x24
 8002638:	781a      	ldrb	r2, [r3, #0]
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	611a      	str	r2, [r3, #16]
      hi2c->XferCount--;
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002644:	b29b      	uxth	r3, r3
 8002646:	3b01      	subs	r3, #1
 8002648:	b29a      	uxth	r2, r3
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002652:	3b01      	subs	r3, #1
 8002654:	b29a      	uxth	r2, r3
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	851a      	strh	r2, [r3, #40]	; 0x28

      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	695b      	ldr	r3, [r3, #20]
 8002660:	f003 0304 	and.w	r3, r3, #4
 8002664:	2b04      	cmp	r3, #4
 8002666:	d119      	bne.n	800269c <HAL_I2C_Master_Transmit+0x1a4>
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800266c:	2b00      	cmp	r3, #0
 800266e:	d015      	beq.n	800269c <HAL_I2C_Master_Transmit+0x1a4>
      {
        /* Write data to DR */
        hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002674:	1c59      	adds	r1, r3, #1
 8002676:	68fa      	ldr	r2, [r7, #12]
 8002678:	6251      	str	r1, [r2, #36]	; 0x24
 800267a:	781a      	ldrb	r2, [r3, #0]
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	611a      	str	r2, [r3, #16]
        hi2c->XferCount--;
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002686:	b29b      	uxth	r3, r3
 8002688:	3b01      	subs	r3, #1
 800268a:	b29a      	uxth	r2, r3
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002694:	3b01      	subs	r3, #1
 8002696:	b29a      	uxth	r2, r3
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	851a      	strh	r2, [r3, #40]	; 0x28
      }
      
      /* Wait until BTF flag is set */
      if(I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800269c:	697a      	ldr	r2, [r7, #20]
 800269e:	6a39      	ldr	r1, [r7, #32]
 80026a0:	68f8      	ldr	r0, [r7, #12]
 80026a2:	f001 fef5 	bl	8004490 <I2C_WaitOnBTFFlagUntilTimeout>
 80026a6:	4603      	mov	r3, r0
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d00f      	beq.n	80026cc <HAL_I2C_Master_Transmit+0x1d4>
      {
        if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026b0:	2b04      	cmp	r3, #4
 80026b2:	d109      	bne.n	80026c8 <HAL_I2C_Master_Transmit+0x1d0>
        {
          /* Generate Stop */
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	681a      	ldr	r2, [r3, #0]
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80026c2:	601a      	str	r2, [r3, #0]
          return HAL_ERROR;
 80026c4:	2301      	movs	r3, #1
 80026c6:	e01c      	b.n	8002702 <HAL_I2C_Master_Transmit+0x20a>
        }
        else
        {
          return HAL_TIMEOUT;
 80026c8:	2303      	movs	r3, #3
 80026ca:	e01a      	b.n	8002702 <HAL_I2C_Master_Transmit+0x20a>
    while(hi2c->XferSize > 0U)
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d194      	bne.n	80025fe <HAL_I2C_Master_Transmit+0x106>
        }
      }
    }

    /* Generate Stop */
    hi2c->Instance->CR1 |= I2C_CR1_STOP;
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	681a      	ldr	r2, [r3, #0]
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80026e2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	2220      	movs	r2, #32
 80026e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	2200      	movs	r2, #0
 80026f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    
    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	2200      	movs	r2, #0
 80026f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80026fc:	2300      	movs	r3, #0
 80026fe:	e000      	b.n	8002702 <HAL_I2C_Master_Transmit+0x20a>
  }
  else
  {
    return HAL_BUSY;
 8002700:	2302      	movs	r3, #2
  }
}
 8002702:	4618      	mov	r0, r3
 8002704:	3718      	adds	r7, #24
 8002706:	46bd      	mov	sp, r7
 8002708:	bd80      	pop	{r7, pc}
 800270a:	bf00      	nop
 800270c:	00100002 	.word	0x00100002
 8002710:	ffff0000 	.word	0xffff0000

08002714 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	b08c      	sub	sp, #48	; 0x30
 8002718:	af02      	add	r7, sp, #8
 800271a:	60f8      	str	r0, [r7, #12]
 800271c:	607a      	str	r2, [r7, #4]
 800271e:	461a      	mov	r2, r3
 8002720:	460b      	mov	r3, r1
 8002722:	817b      	strh	r3, [r7, #10]
 8002724:	4613      	mov	r3, r2
 8002726:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart = 0x00U;
 8002728:	2300      	movs	r3, #0
 800272a:	627b      	str	r3, [r7, #36]	; 0x24

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800272c:	f7fe fc28 	bl	8000f80 <HAL_GetTick>
 8002730:	6278      	str	r0, [r7, #36]	; 0x24

  if(hi2c->State == HAL_I2C_STATE_READY)
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002738:	b2db      	uxtb	r3, r3
 800273a:	2b20      	cmp	r3, #32
 800273c:	f040 8223 	bne.w	8002b86 <HAL_I2C_Master_Receive+0x472>
  {
    /* Wait until BUSY flag is reset */
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002742:	9300      	str	r3, [sp, #0]
 8002744:	2319      	movs	r3, #25
 8002746:	2201      	movs	r2, #1
 8002748:	4988      	ldr	r1, [pc, #544]	; (800296c <HAL_I2C_Master_Receive+0x258>)
 800274a:	68f8      	ldr	r0, [r7, #12]
 800274c:	f001 fda4 	bl	8004298 <I2C_WaitOnFlagUntilTimeout>
 8002750:	4603      	mov	r3, r0
 8002752:	2b00      	cmp	r3, #0
 8002754:	d001      	beq.n	800275a <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 8002756:	2302      	movs	r3, #2
 8002758:	e216      	b.n	8002b88 <HAL_I2C_Master_Receive+0x474>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002760:	2b01      	cmp	r3, #1
 8002762:	d101      	bne.n	8002768 <HAL_I2C_Master_Receive+0x54>
 8002764:	2302      	movs	r3, #2
 8002766:	e20f      	b.n	8002b88 <HAL_I2C_Master_Receive+0x474>
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	2201      	movs	r2, #1
 800276c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f003 0301 	and.w	r3, r3, #1
 800277a:	2b01      	cmp	r3, #1
 800277c:	d007      	beq.n	800278e <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	681a      	ldr	r2, [r3, #0]
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f042 0201 	orr.w	r2, r2, #1
 800278c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	681a      	ldr	r2, [r3, #0]
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800279c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	2222      	movs	r2, #34	; 0x22
 80027a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	2210      	movs	r2, #16
 80027aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	2200      	movs	r2, #0
 80027b2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	687a      	ldr	r2, [r7, #4]
 80027b8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	893a      	ldrh	r2, [r7, #8]
 80027be:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	4a6b      	ldr	r2, [pc, #428]	; (8002970 <HAL_I2C_Master_Receive+0x25c>)
 80027c4:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027ca:	b29a      	uxth	r2, r3
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	851a      	strh	r2, [r3, #40]	; 0x28

    /* Send Slave Address */
    if(I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80027d0:	8979      	ldrh	r1, [r7, #10]
 80027d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80027d6:	68f8      	ldr	r0, [r7, #12]
 80027d8:	f001 fc48 	bl	800406c <I2C_MasterRequestRead>
 80027dc:	4603      	mov	r3, r0
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d00f      	beq.n	8002802 <HAL_I2C_Master_Receive+0xee>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027e6:	2b04      	cmp	r3, #4
 80027e8:	d105      	bne.n	80027f6 <HAL_I2C_Master_Receive+0xe2>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	2200      	movs	r2, #0
 80027ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_ERROR;
 80027f2:	2301      	movs	r3, #1
 80027f4:	e1c8      	b.n	8002b88 <HAL_I2C_Master_Receive+0x474>
      }
      else
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	2200      	movs	r2, #0
 80027fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_TIMEOUT;
 80027fe:	2303      	movs	r3, #3
 8002800:	e1c2      	b.n	8002b88 <HAL_I2C_Master_Receive+0x474>
      }
    }

    if(hi2c->XferSize == 0U)
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002806:	2b00      	cmp	r3, #0
 8002808:	d113      	bne.n	8002832 <HAL_I2C_Master_Receive+0x11e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800280a:	2300      	movs	r3, #0
 800280c:	623b      	str	r3, [r7, #32]
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	695b      	ldr	r3, [r3, #20]
 8002814:	623b      	str	r3, [r7, #32]
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	699b      	ldr	r3, [r3, #24]
 800281c:	623b      	str	r3, [r7, #32]
 800281e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	681a      	ldr	r2, [r3, #0]
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800282e:	601a      	str	r2, [r3, #0]
 8002830:	e196      	b.n	8002b60 <HAL_I2C_Master_Receive+0x44c>
    }
    else if(hi2c->XferSize == 1U)
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002836:	2b01      	cmp	r3, #1
 8002838:	d11e      	bne.n	8002878 <HAL_I2C_Master_Receive+0x164>
    {
      /* Disable Acknowledge */
      hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	681a      	ldr	r2, [r3, #0]
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002848:	601a      	str	r2, [r3, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800284a:	b672      	cpsid	i
}
 800284c:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800284e:	2300      	movs	r3, #0
 8002850:	61fb      	str	r3, [r7, #28]
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	695b      	ldr	r3, [r3, #20]
 8002858:	61fb      	str	r3, [r7, #28]
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	699b      	ldr	r3, [r3, #24]
 8002860:	61fb      	str	r3, [r7, #28]
 8002862:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	681a      	ldr	r2, [r3, #0]
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002872:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002874:	b662      	cpsie	i
}
 8002876:	e035      	b.n	80028e4 <HAL_I2C_Master_Receive+0x1d0>

      /* Re-enable IRQs */
      __enable_irq(); 
    }
    else if(hi2c->XferSize == 2U)
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800287c:	2b02      	cmp	r3, #2
 800287e:	d11e      	bne.n	80028be <HAL_I2C_Master_Receive+0x1aa>
    {
      /* Enable Pos */
      hi2c->Instance->CR1 |= I2C_CR1_POS;
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	681a      	ldr	r2, [r3, #0]
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800288e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002890:	b672      	cpsid	i
}
 8002892:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002894:	2300      	movs	r3, #0
 8002896:	61bb      	str	r3, [r7, #24]
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	695b      	ldr	r3, [r3, #20]
 800289e:	61bb      	str	r3, [r7, #24]
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	699b      	ldr	r3, [r3, #24]
 80028a6:	61bb      	str	r3, [r7, #24]
 80028a8:	69bb      	ldr	r3, [r7, #24]

      /* Disable Acknowledge */
      hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	681a      	ldr	r2, [r3, #0]
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80028b8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80028ba:	b662      	cpsie	i
}
 80028bc:	e012      	b.n	80028e4 <HAL_I2C_Master_Receive+0x1d0>
      __enable_irq(); 
    }
    else
    {
      /* Enable Acknowledge */
      hi2c->Instance->CR1 |= I2C_CR1_ACK;
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	681a      	ldr	r2, [r3, #0]
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80028cc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80028ce:	2300      	movs	r3, #0
 80028d0:	617b      	str	r3, [r7, #20]
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	695b      	ldr	r3, [r3, #20]
 80028d8:	617b      	str	r3, [r7, #20]
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	699b      	ldr	r3, [r3, #24]
 80028e0:	617b      	str	r3, [r7, #20]
 80028e2:	697b      	ldr	r3, [r7, #20]
    }

    while(hi2c->XferSize > 0U)
 80028e4:	e13c      	b.n	8002b60 <HAL_I2C_Master_Receive+0x44c>
    {
      if(hi2c->XferSize <= 3U)
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028ea:	2b03      	cmp	r3, #3
 80028ec:	f200 80f3 	bhi.w	8002ad6 <HAL_I2C_Master_Receive+0x3c2>
      {
        /* One byte */
        if(hi2c->XferSize == 1U)
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028f4:	2b01      	cmp	r3, #1
 80028f6:	d127      	bne.n	8002948 <HAL_I2C_Master_Receive+0x234>
        {
          /* Wait until RXNE flag is set */
          if(I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)      
 80028f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028fa:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80028fc:	68f8      	ldr	r0, [r7, #12]
 80028fe:	f001 fe04 	bl	800450a <I2C_WaitOnRXNEFlagUntilTimeout>
 8002902:	4603      	mov	r3, r0
 8002904:	2b00      	cmp	r3, #0
 8002906:	d007      	beq.n	8002918 <HAL_I2C_Master_Receive+0x204>
          {
            if(hi2c->ErrorCode == HAL_I2C_ERROR_TIMEOUT)
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800290c:	2b20      	cmp	r3, #32
 800290e:	d101      	bne.n	8002914 <HAL_I2C_Master_Receive+0x200>
            {
              return HAL_TIMEOUT;
 8002910:	2303      	movs	r3, #3
 8002912:	e139      	b.n	8002b88 <HAL_I2C_Master_Receive+0x474>
            }
            else
            {
              return HAL_ERROR;
 8002914:	2301      	movs	r3, #1
 8002916:	e137      	b.n	8002b88 <HAL_I2C_Master_Receive+0x474>
            }
          }

          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	6918      	ldr	r0, [r3, #16]
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002922:	1c59      	adds	r1, r3, #1
 8002924:	68fa      	ldr	r2, [r7, #12]
 8002926:	6251      	str	r1, [r2, #36]	; 0x24
 8002928:	b2c2      	uxtb	r2, r0
 800292a:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002930:	3b01      	subs	r3, #1
 8002932:	b29a      	uxth	r2, r3
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800293c:	b29b      	uxth	r3, r3
 800293e:	3b01      	subs	r3, #1
 8002940:	b29a      	uxth	r2, r3
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002946:	e10b      	b.n	8002b60 <HAL_I2C_Master_Receive+0x44c>
        }
        /* Two bytes */
        else if(hi2c->XferSize == 2U)
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800294c:	2b02      	cmp	r3, #2
 800294e:	d14e      	bne.n	80029ee <HAL_I2C_Master_Receive+0x2da>
        {
          /* Wait until BTF flag is set */
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002952:	9300      	str	r3, [sp, #0]
 8002954:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002956:	2200      	movs	r2, #0
 8002958:	4906      	ldr	r1, [pc, #24]	; (8002974 <HAL_I2C_Master_Receive+0x260>)
 800295a:	68f8      	ldr	r0, [r7, #12]
 800295c:	f001 fc9c 	bl	8004298 <I2C_WaitOnFlagUntilTimeout>
 8002960:	4603      	mov	r3, r0
 8002962:	2b00      	cmp	r3, #0
 8002964:	d008      	beq.n	8002978 <HAL_I2C_Master_Receive+0x264>
          {
            return HAL_TIMEOUT;
 8002966:	2303      	movs	r3, #3
 8002968:	e10e      	b.n	8002b88 <HAL_I2C_Master_Receive+0x474>
 800296a:	bf00      	nop
 800296c:	00100002 	.word	0x00100002
 8002970:	ffff0000 	.word	0xffff0000
 8002974:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8002978:	b672      	cpsid	i
}
 800297a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
           __disable_irq();

          /* Generate Stop */
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	681a      	ldr	r2, [r3, #0]
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800298a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	6918      	ldr	r0, [r3, #16]
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002996:	1c59      	adds	r1, r3, #1
 8002998:	68fa      	ldr	r2, [r7, #12]
 800299a:	6251      	str	r1, [r2, #36]	; 0x24
 800299c:	b2c2      	uxtb	r2, r0
 800299e:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029a4:	3b01      	subs	r3, #1
 80029a6:	b29a      	uxth	r2, r3
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029b0:	b29b      	uxth	r3, r3
 80029b2:	3b01      	subs	r3, #1
 80029b4:	b29a      	uxth	r2, r3
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80029ba:	b662      	cpsie	i
}
 80029bc:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	6918      	ldr	r0, [r3, #16]
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029c8:	1c59      	adds	r1, r3, #1
 80029ca:	68fa      	ldr	r2, [r7, #12]
 80029cc:	6251      	str	r1, [r2, #36]	; 0x24
 80029ce:	b2c2      	uxtb	r2, r0
 80029d0:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029d6:	3b01      	subs	r3, #1
 80029d8:	b29a      	uxth	r2, r3
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029e2:	b29b      	uxth	r3, r3
 80029e4:	3b01      	subs	r3, #1
 80029e6:	b29a      	uxth	r2, r3
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	855a      	strh	r2, [r3, #42]	; 0x2a
 80029ec:	e0b8      	b.n	8002b60 <HAL_I2C_Master_Receive+0x44c>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80029ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029f0:	9300      	str	r3, [sp, #0]
 80029f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029f4:	2200      	movs	r2, #0
 80029f6:	4966      	ldr	r1, [pc, #408]	; (8002b90 <HAL_I2C_Master_Receive+0x47c>)
 80029f8:	68f8      	ldr	r0, [r7, #12]
 80029fa:	f001 fc4d 	bl	8004298 <I2C_WaitOnFlagUntilTimeout>
 80029fe:	4603      	mov	r3, r0
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d001      	beq.n	8002a08 <HAL_I2C_Master_Receive+0x2f4>
          {
            return HAL_TIMEOUT;
 8002a04:	2303      	movs	r3, #3
 8002a06:	e0bf      	b.n	8002b88 <HAL_I2C_Master_Receive+0x474>
          }

          /* Disable Acknowledge */
          hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	681a      	ldr	r2, [r3, #0]
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a16:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002a18:	b672      	cpsid	i
}
 8002a1a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	6918      	ldr	r0, [r3, #16]
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a26:	1c59      	adds	r1, r3, #1
 8002a28:	68fa      	ldr	r2, [r7, #12]
 8002a2a:	6251      	str	r1, [r2, #36]	; 0x24
 8002a2c:	b2c2      	uxtb	r2, r0
 8002a2e:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a34:	3b01      	subs	r3, #1
 8002a36:	b29a      	uxth	r2, r3
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a40:	b29b      	uxth	r3, r3
 8002a42:	3b01      	subs	r3, #1
 8002a44:	b29a      	uxth	r2, r3
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a4c:	9300      	str	r3, [sp, #0]
 8002a4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a50:	2200      	movs	r2, #0
 8002a52:	494f      	ldr	r1, [pc, #316]	; (8002b90 <HAL_I2C_Master_Receive+0x47c>)
 8002a54:	68f8      	ldr	r0, [r7, #12]
 8002a56:	f001 fc1f 	bl	8004298 <I2C_WaitOnFlagUntilTimeout>
 8002a5a:	4603      	mov	r3, r0
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d001      	beq.n	8002a64 <HAL_I2C_Master_Receive+0x350>
          {
            return HAL_TIMEOUT;
 8002a60:	2303      	movs	r3, #3
 8002a62:	e091      	b.n	8002b88 <HAL_I2C_Master_Receive+0x474>
          }

          /* Generate Stop */
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	681a      	ldr	r2, [r3, #0]
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a72:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	6918      	ldr	r0, [r3, #16]
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a7e:	1c59      	adds	r1, r3, #1
 8002a80:	68fa      	ldr	r2, [r7, #12]
 8002a82:	6251      	str	r1, [r2, #36]	; 0x24
 8002a84:	b2c2      	uxtb	r2, r0
 8002a86:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a8c:	3b01      	subs	r3, #1
 8002a8e:	b29a      	uxth	r2, r3
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a98:	b29b      	uxth	r3, r3
 8002a9a:	3b01      	subs	r3, #1
 8002a9c:	b29a      	uxth	r2, r3
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002aa2:	b662      	cpsie	i
}
 8002aa4:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq(); 

          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	6918      	ldr	r0, [r3, #16]
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ab0:	1c59      	adds	r1, r3, #1
 8002ab2:	68fa      	ldr	r2, [r7, #12]
 8002ab4:	6251      	str	r1, [r2, #36]	; 0x24
 8002ab6:	b2c2      	uxtb	r2, r0
 8002ab8:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002abe:	3b01      	subs	r3, #1
 8002ac0:	b29a      	uxth	r2, r3
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002aca:	b29b      	uxth	r3, r3
 8002acc:	3b01      	subs	r3, #1
 8002ace:	b29a      	uxth	r2, r3
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002ad4:	e044      	b.n	8002b60 <HAL_I2C_Master_Receive+0x44c>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if(I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)      
 8002ad6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ad8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002ada:	68f8      	ldr	r0, [r7, #12]
 8002adc:	f001 fd15 	bl	800450a <I2C_WaitOnRXNEFlagUntilTimeout>
 8002ae0:	4603      	mov	r3, r0
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d007      	beq.n	8002af6 <HAL_I2C_Master_Receive+0x3e2>
        {
          if(hi2c->ErrorCode == HAL_I2C_ERROR_TIMEOUT)
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aea:	2b20      	cmp	r3, #32
 8002aec:	d101      	bne.n	8002af2 <HAL_I2C_Master_Receive+0x3de>
          {
            return HAL_TIMEOUT;
 8002aee:	2303      	movs	r3, #3
 8002af0:	e04a      	b.n	8002b88 <HAL_I2C_Master_Receive+0x474>
          }
          else
          {
            return HAL_ERROR;
 8002af2:	2301      	movs	r3, #1
 8002af4:	e048      	b.n	8002b88 <HAL_I2C_Master_Receive+0x474>
          }
        }

        /* Read data from DR */
        (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	6918      	ldr	r0, [r3, #16]
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b00:	1c59      	adds	r1, r3, #1
 8002b02:	68fa      	ldr	r2, [r7, #12]
 8002b04:	6251      	str	r1, [r2, #36]	; 0x24
 8002b06:	b2c2      	uxtb	r2, r0
 8002b08:	701a      	strb	r2, [r3, #0]
        hi2c->XferSize--;
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b0e:	3b01      	subs	r3, #1
 8002b10:	b29a      	uxth	r2, r3
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b1a:	b29b      	uxth	r3, r3
 8002b1c:	3b01      	subs	r3, #1
 8002b1e:	b29a      	uxth	r2, r3
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	855a      	strh	r2, [r3, #42]	; 0x2a

        if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	695b      	ldr	r3, [r3, #20]
 8002b2a:	f003 0304 	and.w	r3, r3, #4
 8002b2e:	2b04      	cmp	r3, #4
 8002b30:	d116      	bne.n	8002b60 <HAL_I2C_Master_Receive+0x44c>
        {
          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	6918      	ldr	r0, [r3, #16]
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b3c:	1c59      	adds	r1, r3, #1
 8002b3e:	68fa      	ldr	r2, [r7, #12]
 8002b40:	6251      	str	r1, [r2, #36]	; 0x24
 8002b42:	b2c2      	uxtb	r2, r0
 8002b44:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b4a:	3b01      	subs	r3, #1
 8002b4c:	b29a      	uxth	r2, r3
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b56:	b29b      	uxth	r3, r3
 8002b58:	3b01      	subs	r3, #1
 8002b5a:	b29a      	uxth	r2, r3
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while(hi2c->XferSize > 0U)
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	f47f aebe 	bne.w	80028e6 <HAL_I2C_Master_Receive+0x1d2>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	2220      	movs	r2, #32
 8002b6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	2200      	movs	r2, #0
 8002b76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002b82:	2300      	movs	r3, #0
 8002b84:	e000      	b.n	8002b88 <HAL_I2C_Master_Receive+0x474>
  }
  else
  {
    return HAL_BUSY;
 8002b86:	2302      	movs	r3, #2
  }
}
 8002b88:	4618      	mov	r0, r3
 8002b8a:	3728      	adds	r7, #40	; 0x28
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	bd80      	pop	{r7, pc}
 8002b90:	00010004 	.word	0x00010004

08002b94 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	b086      	sub	sp, #24
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
  uint32_t sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	699b      	ldr	r3, [r3, #24]
 8002ba2:	617b      	str	r3, [r7, #20]
  uint32_t sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	695b      	ldr	r3, [r3, #20]
 8002baa:	613b      	str	r3, [r7, #16]
  uint32_t itsources    = READ_REG(hi2c->Instance->CR2);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	685b      	ldr	r3, [r3, #4]
 8002bb2:	60fb      	str	r3, [r7, #12]

  uint32_t CurrentMode  = hi2c->Mode;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002bba:	b2db      	uxtb	r3, r3
 8002bbc:	60bb      	str	r3, [r7, #8]

  /* Master or Memory mode selected */
  if((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8002bbe:	68bb      	ldr	r3, [r7, #8]
 8002bc0:	2b10      	cmp	r3, #16
 8002bc2:	d002      	beq.n	8002bca <HAL_I2C_EV_IRQHandler+0x36>
 8002bc4:	68bb      	ldr	r3, [r7, #8]
 8002bc6:	2b40      	cmp	r3, #64	; 0x40
 8002bc8:	d172      	bne.n	8002cb0 <HAL_I2C_EV_IRQHandler+0x11c>
  {
    /* SB Set ----------------------------------------------------------------*/
    if(((sr1itflags & I2C_FLAG_SB) != RESET) && ((itsources & I2C_IT_EVT) != RESET))
 8002bca:	693b      	ldr	r3, [r7, #16]
 8002bcc:	f003 1301 	and.w	r3, r3, #65537	; 0x10001
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d008      	beq.n	8002be6 <HAL_I2C_EV_IRQHandler+0x52>
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d003      	beq.n	8002be6 <HAL_I2C_EV_IRQHandler+0x52>
    {
      I2C_Master_SB(hi2c);
 8002bde:	6878      	ldr	r0, [r7, #4]
 8002be0:	f000 fcb8 	bl	8003554 <I2C_Master_SB>
 8002be4:	e01a      	b.n	8002c1c <HAL_I2C_EV_IRQHandler+0x88>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if(((sr1itflags & I2C_FLAG_ADD10) != RESET) && ((itsources & I2C_IT_EVT) != RESET))
 8002be6:	693a      	ldr	r2, [r7, #16]
 8002be8:	4b65      	ldr	r3, [pc, #404]	; (8002d80 <HAL_I2C_EV_IRQHandler+0x1ec>)
 8002bea:	4013      	ands	r3, r2
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d008      	beq.n	8002c02 <HAL_I2C_EV_IRQHandler+0x6e>
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d003      	beq.n	8002c02 <HAL_I2C_EV_IRQHandler+0x6e>
    {
      I2C_Master_ADD10(hi2c);
 8002bfa:	6878      	ldr	r0, [r7, #4]
 8002bfc:	f000 fd16 	bl	800362c <I2C_Master_ADD10>
 8002c00:	e00c      	b.n	8002c1c <HAL_I2C_EV_IRQHandler+0x88>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if(((sr1itflags & I2C_FLAG_ADDR) != RESET) && ((itsources & I2C_IT_EVT) != RESET))
 8002c02:	693a      	ldr	r2, [r7, #16]
 8002c04:	4b5f      	ldr	r3, [pc, #380]	; (8002d84 <HAL_I2C_EV_IRQHandler+0x1f0>)
 8002c06:	4013      	ands	r3, r2
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d007      	beq.n	8002c1c <HAL_I2C_EV_IRQHandler+0x88>
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d002      	beq.n	8002c1c <HAL_I2C_EV_IRQHandler+0x88>
    {
      I2C_Master_ADDR(hi2c);
 8002c16:	6878      	ldr	r0, [r7, #4]
 8002c18:	f000 fd18 	bl	800364c <I2C_Master_ADDR>
    }

    /* I2C in mode Transmitter -----------------------------------------------*/
    if((sr2itflags & I2C_FLAG_TRA) != RESET)
 8002c1c:	697a      	ldr	r2, [r7, #20]
 8002c1e:	4b5a      	ldr	r3, [pc, #360]	; (8002d88 <HAL_I2C_EV_IRQHandler+0x1f4>)
 8002c20:	4013      	ands	r3, r2
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d022      	beq.n	8002c6c <HAL_I2C_EV_IRQHandler+0xd8>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if(((sr1itflags & I2C_FLAG_TXE) != RESET) && ((itsources & I2C_IT_BUF) != RESET) && ((sr1itflags & I2C_FLAG_BTF) == RESET))
 8002c26:	693a      	ldr	r2, [r7, #16]
 8002c28:	4b58      	ldr	r3, [pc, #352]	; (8002d8c <HAL_I2C_EV_IRQHandler+0x1f8>)
 8002c2a:	4013      	ands	r3, r2
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d00d      	beq.n	8002c4c <HAL_I2C_EV_IRQHandler+0xb8>
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d008      	beq.n	8002c4c <HAL_I2C_EV_IRQHandler+0xb8>
 8002c3a:	693a      	ldr	r2, [r7, #16]
 8002c3c:	4b54      	ldr	r3, [pc, #336]	; (8002d90 <HAL_I2C_EV_IRQHandler+0x1fc>)
 8002c3e:	4013      	ands	r3, r2
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d103      	bne.n	8002c4c <HAL_I2C_EV_IRQHandler+0xb8>
      {
        I2C_MasterTransmit_TXE(hi2c);
 8002c44:	6878      	ldr	r0, [r7, #4]
 8002c46:	f000 f9b9 	bl	8002fbc <I2C_MasterTransmit_TXE>
 8002c4a:	e030      	b.n	8002cae <HAL_I2C_EV_IRQHandler+0x11a>
      }
      /* BTF set -------------------------------------------------------------*/
      else if(((sr1itflags & I2C_FLAG_BTF) != RESET) && ((itsources & I2C_IT_EVT) != RESET))
 8002c4c:	693a      	ldr	r2, [r7, #16]
 8002c4e:	4b50      	ldr	r3, [pc, #320]	; (8002d90 <HAL_I2C_EV_IRQHandler+0x1fc>)
 8002c50:	4013      	ands	r3, r2
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	f000 808f 	beq.w	8002d76 <HAL_I2C_EV_IRQHandler+0x1e2>
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	f000 8089 	beq.w	8002d76 <HAL_I2C_EV_IRQHandler+0x1e2>
      {
        I2C_MasterTransmit_BTF(hi2c);
 8002c64:	6878      	ldr	r0, [r7, #4]
 8002c66:	f000 fa9e 	bl	80031a6 <I2C_MasterTransmit_BTF>
    if((sr2itflags & I2C_FLAG_TRA) != RESET)
 8002c6a:	e084      	b.n	8002d76 <HAL_I2C_EV_IRQHandler+0x1e2>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset -----------------------------------------------*/
      if(((sr1itflags & I2C_FLAG_RXNE) != RESET) && ((itsources & I2C_IT_BUF) != RESET) && ((sr1itflags & I2C_FLAG_BTF) == RESET))
 8002c6c:	693a      	ldr	r2, [r7, #16]
 8002c6e:	4b49      	ldr	r3, [pc, #292]	; (8002d94 <HAL_I2C_EV_IRQHandler+0x200>)
 8002c70:	4013      	ands	r3, r2
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d00d      	beq.n	8002c92 <HAL_I2C_EV_IRQHandler+0xfe>
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d008      	beq.n	8002c92 <HAL_I2C_EV_IRQHandler+0xfe>
 8002c80:	693a      	ldr	r2, [r7, #16]
 8002c82:	4b43      	ldr	r3, [pc, #268]	; (8002d90 <HAL_I2C_EV_IRQHandler+0x1fc>)
 8002c84:	4013      	ands	r3, r2
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d103      	bne.n	8002c92 <HAL_I2C_EV_IRQHandler+0xfe>
      {
        I2C_MasterReceive_RXNE(hi2c);
 8002c8a:	6878      	ldr	r0, [r7, #4]
 8002c8c:	f000 fb00 	bl	8003290 <I2C_MasterReceive_RXNE>
 8002c90:	e00d      	b.n	8002cae <HAL_I2C_EV_IRQHandler+0x11a>
      }
      /* BTF set -------------------------------------------------------------*/
      else if(((sr1itflags & I2C_FLAG_BTF) != RESET) && ((itsources & I2C_IT_EVT) != RESET))
 8002c92:	693a      	ldr	r2, [r7, #16]
 8002c94:	4b3e      	ldr	r3, [pc, #248]	; (8002d90 <HAL_I2C_EV_IRQHandler+0x1fc>)
 8002c96:	4013      	ands	r3, r2
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d06c      	beq.n	8002d76 <HAL_I2C_EV_IRQHandler+0x1e2>
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d067      	beq.n	8002d76 <HAL_I2C_EV_IRQHandler+0x1e2>
      {
        I2C_MasterReceive_BTF(hi2c);
 8002ca6:	6878      	ldr	r0, [r7, #4]
 8002ca8:	f000 fb93 	bl	80033d2 <I2C_MasterReceive_BTF>
    if((sr2itflags & I2C_FLAG_TRA) != RESET)
 8002cac:	e063      	b.n	8002d76 <HAL_I2C_EV_IRQHandler+0x1e2>
 8002cae:	e062      	b.n	8002d76 <HAL_I2C_EV_IRQHandler+0x1e2>
  }
  /* Slave mode selected */
  else
  {
    /* ADDR set --------------------------------------------------------------*/
    if(((sr1itflags & I2C_FLAG_ADDR) != RESET) && ((itsources & I2C_IT_EVT) != RESET))
 8002cb0:	693a      	ldr	r2, [r7, #16]
 8002cb2:	4b34      	ldr	r3, [pc, #208]	; (8002d84 <HAL_I2C_EV_IRQHandler+0x1f0>)
 8002cb4:	4013      	ands	r3, r2
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d008      	beq.n	8002ccc <HAL_I2C_EV_IRQHandler+0x138>
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d003      	beq.n	8002ccc <HAL_I2C_EV_IRQHandler+0x138>
    {
      I2C_Slave_ADDR(hi2c);
 8002cc4:	6878      	ldr	r0, [r7, #4]
 8002cc6:	f000 fee8 	bl	8003a9a <I2C_Slave_ADDR>
 8002cca:	e055      	b.n	8002d78 <HAL_I2C_EV_IRQHandler+0x1e4>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if(((sr1itflags & I2C_FLAG_STOPF) != RESET) && ((itsources & I2C_IT_EVT) != RESET))
 8002ccc:	693a      	ldr	r2, [r7, #16]
 8002cce:	4b32      	ldr	r3, [pc, #200]	; (8002d98 <HAL_I2C_EV_IRQHandler+0x204>)
 8002cd0:	4013      	ands	r3, r2
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d008      	beq.n	8002ce8 <HAL_I2C_EV_IRQHandler+0x154>
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d003      	beq.n	8002ce8 <HAL_I2C_EV_IRQHandler+0x154>
    {
      I2C_Slave_STOPF(hi2c);
 8002ce0:	6878      	ldr	r0, [r7, #4]
 8002ce2:	f000 ff05 	bl	8003af0 <I2C_Slave_STOPF>
 8002ce6:	e047      	b.n	8002d78 <HAL_I2C_EV_IRQHandler+0x1e4>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if((sr2itflags & I2C_FLAG_TRA) != RESET)
 8002ce8:	697a      	ldr	r2, [r7, #20]
 8002cea:	4b27      	ldr	r3, [pc, #156]	; (8002d88 <HAL_I2C_EV_IRQHandler+0x1f4>)
 8002cec:	4013      	ands	r3, r2
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d020      	beq.n	8002d34 <HAL_I2C_EV_IRQHandler+0x1a0>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if(((sr1itflags & I2C_FLAG_TXE) != RESET) && ((itsources & I2C_IT_BUF) != RESET) && ((sr1itflags & I2C_FLAG_BTF) == RESET))
 8002cf2:	693a      	ldr	r2, [r7, #16]
 8002cf4:	4b25      	ldr	r3, [pc, #148]	; (8002d8c <HAL_I2C_EV_IRQHandler+0x1f8>)
 8002cf6:	4013      	ands	r3, r2
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d00d      	beq.n	8002d18 <HAL_I2C_EV_IRQHandler+0x184>
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d008      	beq.n	8002d18 <HAL_I2C_EV_IRQHandler+0x184>
 8002d06:	693a      	ldr	r2, [r7, #16]
 8002d08:	4b21      	ldr	r3, [pc, #132]	; (8002d90 <HAL_I2C_EV_IRQHandler+0x1fc>)
 8002d0a:	4013      	ands	r3, r2
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d103      	bne.n	8002d18 <HAL_I2C_EV_IRQHandler+0x184>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8002d10:	6878      	ldr	r0, [r7, #4]
 8002d12:	f000 fe08 	bl	8003926 <I2C_SlaveTransmit_TXE>
 8002d16:	e02f      	b.n	8002d78 <HAL_I2C_EV_IRQHandler+0x1e4>
      }
      /* BTF set -------------------------------------------------------------*/
      else if(((sr1itflags & I2C_FLAG_BTF) != RESET) && ((itsources & I2C_IT_EVT) != RESET))
 8002d18:	693a      	ldr	r2, [r7, #16]
 8002d1a:	4b1d      	ldr	r3, [pc, #116]	; (8002d90 <HAL_I2C_EV_IRQHandler+0x1fc>)
 8002d1c:	4013      	ands	r3, r2
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d02a      	beq.n	8002d78 <HAL_I2C_EV_IRQHandler+0x1e4>
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d025      	beq.n	8002d78 <HAL_I2C_EV_IRQHandler+0x1e4>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8002d2c:	6878      	ldr	r0, [r7, #4]
 8002d2e:	f000 fe37 	bl	80039a0 <I2C_SlaveTransmit_BTF>
      {
        I2C_SlaveReceive_BTF(hi2c);
      }
    }
  }
}
 8002d32:	e021      	b.n	8002d78 <HAL_I2C_EV_IRQHandler+0x1e4>
      if(((sr1itflags & I2C_FLAG_RXNE) != RESET) && ((itsources & I2C_IT_BUF) != RESET) && ((sr1itflags & I2C_FLAG_BTF) == RESET))
 8002d34:	693a      	ldr	r2, [r7, #16]
 8002d36:	4b17      	ldr	r3, [pc, #92]	; (8002d94 <HAL_I2C_EV_IRQHandler+0x200>)
 8002d38:	4013      	ands	r3, r2
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d00d      	beq.n	8002d5a <HAL_I2C_EV_IRQHandler+0x1c6>
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d008      	beq.n	8002d5a <HAL_I2C_EV_IRQHandler+0x1c6>
 8002d48:	693a      	ldr	r2, [r7, #16]
 8002d4a:	4b11      	ldr	r3, [pc, #68]	; (8002d90 <HAL_I2C_EV_IRQHandler+0x1fc>)
 8002d4c:	4013      	ands	r3, r2
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d103      	bne.n	8002d5a <HAL_I2C_EV_IRQHandler+0x1c6>
        I2C_SlaveReceive_RXNE(hi2c);
 8002d52:	6878      	ldr	r0, [r7, #4]
 8002d54:	f000 fe43 	bl	80039de <I2C_SlaveReceive_RXNE>
 8002d58:	e00e      	b.n	8002d78 <HAL_I2C_EV_IRQHandler+0x1e4>
      else if(((sr1itflags & I2C_FLAG_BTF) != RESET) && ((itsources & I2C_IT_EVT) != RESET))
 8002d5a:	693a      	ldr	r2, [r7, #16]
 8002d5c:	4b0c      	ldr	r3, [pc, #48]	; (8002d90 <HAL_I2C_EV_IRQHandler+0x1fc>)
 8002d5e:	4013      	ands	r3, r2
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d009      	beq.n	8002d78 <HAL_I2C_EV_IRQHandler+0x1e4>
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d004      	beq.n	8002d78 <HAL_I2C_EV_IRQHandler+0x1e4>
        I2C_SlaveReceive_BTF(hi2c);
 8002d6e:	6878      	ldr	r0, [r7, #4]
 8002d70:	f000 fe73 	bl	8003a5a <I2C_SlaveReceive_BTF>
}
 8002d74:	e000      	b.n	8002d78 <HAL_I2C_EV_IRQHandler+0x1e4>
    if((sr2itflags & I2C_FLAG_TRA) != RESET)
 8002d76:	bf00      	nop
}
 8002d78:	bf00      	nop
 8002d7a:	3718      	adds	r7, #24
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	bd80      	pop	{r7, pc}
 8002d80:	00010008 	.word	0x00010008
 8002d84:	00010002 	.word	0x00010002
 8002d88:	00100004 	.word	0x00100004
 8002d8c:	00010080 	.word	0x00010080
 8002d90:	00010004 	.word	0x00010004
 8002d94:	00010040 	.word	0x00010040
 8002d98:	00010010 	.word	0x00010010

08002d9c <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	b088      	sub	sp, #32
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U, tmp3 = 0U, tmp4 = 0U;
 8002da4:	2300      	movs	r3, #0
 8002da6:	61fb      	str	r3, [r7, #28]
 8002da8:	2300      	movs	r3, #0
 8002daa:	61bb      	str	r3, [r7, #24]
 8002dac:	2300      	movs	r3, #0
 8002dae:	617b      	str	r3, [r7, #20]
 8002db0:	2300      	movs	r3, #0
 8002db2:	613b      	str	r3, [r7, #16]
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	695b      	ldr	r3, [r3, #20]
 8002dba:	60fb      	str	r3, [r7, #12]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	685b      	ldr	r3, [r3, #4]
 8002dc2:	60bb      	str	r3, [r7, #8]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if(((sr1itflags & I2C_FLAG_BERR) != RESET) && ((itsources & I2C_IT_ERR) != RESET))
 8002dc4:	68fa      	ldr	r2, [r7, #12]
 8002dc6:	4b4d      	ldr	r3, [pc, #308]	; (8002efc <HAL_I2C_ER_IRQHandler+0x160>)
 8002dc8:	4013      	ands	r3, r2
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d017      	beq.n	8002dfe <HAL_I2C_ER_IRQHandler+0x62>
 8002dce:	68bb      	ldr	r3, [r7, #8]
 8002dd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d012      	beq.n	8002dfe <HAL_I2C_ER_IRQHandler+0x62>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ddc:	f043 0201 	orr.w	r2, r3, #1
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002dec:	615a      	str	r2, [r3, #20]

    /* Workaround: Start cannot be generated after a misplaced Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_SWRST);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	681a      	ldr	r2, [r3, #0]
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002dfc:	601a      	str	r2, [r3, #0]
  }

  /* I2C Arbitration Loss error interrupt occurred ---------------------------*/
  if(((sr1itflags & I2C_FLAG_ARLO) != RESET) && ((itsources & I2C_IT_ERR) != RESET))
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	f403 3381 	and.w	r3, r3, #66048	; 0x10200
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d00f      	beq.n	8002e28 <HAL_I2C_ER_IRQHandler+0x8c>
 8002e08:	68bb      	ldr	r3, [r7, #8]
 8002e0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d00a      	beq.n	8002e28 <HAL_I2C_ER_IRQHandler+0x8c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e16:	f043 0202 	orr.w	r2, r3, #2
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8002e26:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if(((sr1itflags & I2C_FLAG_AF) != RESET) && ((itsources & I2C_IT_ERR) != RESET))
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	f403 3382 	and.w	r3, r3, #66560	; 0x10400
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d044      	beq.n	8002ebc <HAL_I2C_ER_IRQHandler+0x120>
 8002e32:	68bb      	ldr	r3, [r7, #8]
 8002e34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d03f      	beq.n	8002ebc <HAL_I2C_ER_IRQHandler+0x120>
  {
    tmp1 = hi2c->Mode;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002e42:	b2db      	uxtb	r3, r3
 8002e44:	61fb      	str	r3, [r7, #28]
    tmp2 = hi2c->XferCount;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e4a:	b29b      	uxth	r3, r3
 8002e4c:	61bb      	str	r3, [r7, #24]
    tmp3 = hi2c->State;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e54:	b2db      	uxtb	r3, r3
 8002e56:	617b      	str	r3, [r7, #20]
    tmp4 = hi2c->PreviousState;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e5c:	613b      	str	r3, [r7, #16]
    if((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8002e5e:	69fb      	ldr	r3, [r7, #28]
 8002e60:	2b20      	cmp	r3, #32
 8002e62:	d112      	bne.n	8002e8a <HAL_I2C_ER_IRQHandler+0xee>
 8002e64:	69bb      	ldr	r3, [r7, #24]
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d10f      	bne.n	8002e8a <HAL_I2C_ER_IRQHandler+0xee>
 8002e6a:	697b      	ldr	r3, [r7, #20]
 8002e6c:	2b21      	cmp	r3, #33	; 0x21
 8002e6e:	d008      	beq.n	8002e82 <HAL_I2C_ER_IRQHandler+0xe6>
      ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8002e70:	697b      	ldr	r3, [r7, #20]
 8002e72:	2b29      	cmp	r3, #41	; 0x29
 8002e74:	d005      	beq.n	8002e82 <HAL_I2C_ER_IRQHandler+0xe6>
 8002e76:	697b      	ldr	r3, [r7, #20]
 8002e78:	2b28      	cmp	r3, #40	; 0x28
 8002e7a:	d106      	bne.n	8002e8a <HAL_I2C_ER_IRQHandler+0xee>
      ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8002e7c:	693b      	ldr	r3, [r7, #16]
 8002e7e:	2b21      	cmp	r3, #33	; 0x21
 8002e80:	d103      	bne.n	8002e8a <HAL_I2C_ER_IRQHandler+0xee>
    {
      I2C_Slave_AF(hi2c);
 8002e82:	6878      	ldr	r0, [r7, #4]
 8002e84:	f000 fefa 	bl	8003c7c <I2C_Slave_AF>
 8002e88:	e018      	b.n	8002ebc <HAL_I2C_ER_IRQHandler+0x120>
    }
    else
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e8e:	f043 0204 	orr.w	r2, r3, #4
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	641a      	str	r2, [r3, #64]	; 0x40

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if(hi2c->Mode == HAL_I2C_MODE_MASTER)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002e9c:	b2db      	uxtb	r3, r3
 8002e9e:	2b10      	cmp	r3, #16
 8002ea0:	d107      	bne.n	8002eb2 <HAL_I2C_ER_IRQHandler+0x116>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1,I2C_CR1_STOP);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	681a      	ldr	r2, [r3, #0]
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002eb0:	601a      	str	r2, [r3, #0]
      }

      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002eba:	615a      	str	r2, [r3, #20]
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if(((sr1itflags & I2C_FLAG_OVR) != RESET) && ((itsources & I2C_IT_ERR) != RESET))
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	f403 3384 	and.w	r3, r3, #67584	; 0x10800
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d00f      	beq.n	8002ee6 <HAL_I2C_ER_IRQHandler+0x14a>
 8002ec6:	68bb      	ldr	r3, [r7, #8]
 8002ec8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d00a      	beq.n	8002ee6 <HAL_I2C_ER_IRQHandler+0x14a>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ed4:	f043 0208 	orr.w	r2, r3, #8
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	641a      	str	r2, [r3, #64]	; 0x40
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8002ee4:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if(hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d002      	beq.n	8002ef4 <HAL_I2C_ER_IRQHandler+0x158>
  {
    I2C_ITError(hi2c);
 8002eee:	6878      	ldr	r0, [r7, #4]
 8002ef0:	f000 ff36 	bl	8003d60 <I2C_ITError>
  }
}
 8002ef4:	bf00      	nop
 8002ef6:	3720      	adds	r7, #32
 8002ef8:	46bd      	mov	sp, r7
 8002efa:	bd80      	pop	{r7, pc}
 8002efc:	00010100 	.word	0x00010100

08002f00 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002f00:	b480      	push	{r7}
 8002f02:	b083      	sub	sp, #12
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback can be implemented in the user file
   */
}
 8002f08:	bf00      	nop
 8002f0a:	370c      	adds	r7, #12
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	bc80      	pop	{r7}
 8002f10:	4770      	bx	lr

08002f12 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002f12:	b480      	push	{r7}
 8002f14:	b083      	sub	sp, #12
 8002f16:	af00      	add	r7, sp, #0
 8002f18:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback can be implemented in the user file
   */
}
 8002f1a:	bf00      	nop
 8002f1c:	370c      	adds	r7, #12
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	bc80      	pop	{r7}
 8002f22:	4770      	bx	lr

08002f24 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002f24:	b480      	push	{r7}
 8002f26:	b083      	sub	sp, #12
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback can be implemented in the user file
   */
}
 8002f2c:	bf00      	nop
 8002f2e:	370c      	adds	r7, #12
 8002f30:	46bd      	mov	sp, r7
 8002f32:	bc80      	pop	{r7}
 8002f34:	4770      	bx	lr

08002f36 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002f36:	b480      	push	{r7}
 8002f38:	b083      	sub	sp, #12
 8002f3a:	af00      	add	r7, sp, #0
 8002f3c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback can be implemented in the user file
   */
}
 8002f3e:	bf00      	nop
 8002f40:	370c      	adds	r7, #12
 8002f42:	46bd      	mov	sp, r7
 8002f44:	bc80      	pop	{r7}
 8002f46:	4770      	bx	lr

08002f48 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferOptions_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8002f48:	b480      	push	{r7}
 8002f4a:	b083      	sub	sp, #12
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
 8002f50:	460b      	mov	r3, r1
 8002f52:	70fb      	strb	r3, [r7, #3]
 8002f54:	4613      	mov	r3, r2
 8002f56:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback can be implemented in the user file
   */
}
 8002f58:	bf00      	nop
 8002f5a:	370c      	adds	r7, #12
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	bc80      	pop	{r7}
 8002f60:	4770      	bx	lr

08002f62 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002f62:	b480      	push	{r7}
 8002f64:	b083      	sub	sp, #12
 8002f66:	af00      	add	r7, sp, #0
 8002f68:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

    /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback can be implemented in the user file
   */
}
 8002f6a:	bf00      	nop
 8002f6c:	370c      	adds	r7, #12
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	bc80      	pop	{r7}
 8002f72:	4770      	bx	lr

08002f74 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002f74:	b480      	push	{r7}
 8002f76:	b083      	sub	sp, #12
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback can be implemented in the user file
   */
}
 8002f7c:	bf00      	nop
 8002f7e:	370c      	adds	r7, #12
 8002f80:	46bd      	mov	sp, r7
 8002f82:	bc80      	pop	{r7}
 8002f84:	4770      	bx	lr

08002f86 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002f86:	b480      	push	{r7}
 8002f88:	b083      	sub	sp, #12
 8002f8a:	af00      	add	r7, sp, #0
 8002f8c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback can be implemented in the user file
   */
}
 8002f8e:	bf00      	nop
 8002f90:	370c      	adds	r7, #12
 8002f92:	46bd      	mov	sp, r7
 8002f94:	bc80      	pop	{r7}
 8002f96:	4770      	bx	lr

08002f98 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8002f98:	b480      	push	{r7}
 8002f9a:	b083      	sub	sp, #12
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback can be implemented in the user file
   */
}
 8002fa0:	bf00      	nop
 8002fa2:	370c      	adds	r7, #12
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	bc80      	pop	{r7}
 8002fa8:	4770      	bx	lr

08002faa <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002faa:	b480      	push	{r7}
 8002fac:	b083      	sub	sp, #12
 8002fae:	af00      	add	r7, sp, #0
 8002fb0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8002fb2:	bf00      	nop
 8002fb4:	370c      	adds	r7, #12
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	bc80      	pop	{r7}
 8002fba:	4770      	bx	lr

08002fbc <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	b086      	sub	sp, #24
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentState       = hi2c->State;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002fca:	b2db      	uxtb	r3, r3
 8002fcc:	617b      	str	r3, [r7, #20]
  uint32_t CurrentMode        = hi2c->Mode;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002fd4:	b2db      	uxtb	r3, r3
 8002fd6:	613b      	str	r3, [r7, #16]
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fdc:	60fb      	str	r3, [r7, #12]

  if((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d150      	bne.n	8003088 <I2C_MasterTransmit_TXE+0xcc>
 8002fe6:	697b      	ldr	r3, [r7, #20]
 8002fe8:	2b21      	cmp	r3, #33	; 0x21
 8002fea:	d14d      	bne.n	8003088 <I2C_MasterTransmit_TXE+0xcc>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	2b04      	cmp	r3, #4
 8002ff0:	d01d      	beq.n	800302e <I2C_MasterTransmit_TXE+0x72>
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	2b08      	cmp	r3, #8
 8002ff6:	d01a      	beq.n	800302e <I2C_MasterTransmit_TXE+0x72>
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002ffe:	d016      	beq.n	800302e <I2C_MasterTransmit_TXE+0x72>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	685a      	ldr	r2, [r3, #4]
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800300e:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	2211      	movs	r2, #17
 8003014:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	2200      	movs	r2, #0
 800301a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	2220      	movs	r2, #32
 8003022:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      HAL_I2C_MasterTxCpltCallback(hi2c);
 8003026:	6878      	ldr	r0, [r7, #4]
 8003028:	f7ff ff6a 	bl	8002f00 <HAL_I2C_MasterTxCpltCallback>
    if((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800302c:	e0b6      	b.n	800319c <I2C_MasterTransmit_TXE+0x1e0>
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	685a      	ldr	r2, [r3, #4]
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800303c:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	681a      	ldr	r2, [r3, #0]
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800304c:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	2200      	movs	r2, #0
 8003052:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	2220      	movs	r2, #32
 8003058:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if(hi2c->Mode == HAL_I2C_MODE_MEM)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003062:	b2db      	uxtb	r3, r3
 8003064:	2b40      	cmp	r3, #64	; 0x40
 8003066:	d107      	bne.n	8003078 <I2C_MasterTransmit_TXE+0xbc>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	2200      	movs	r2, #0
 800306c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_MemTxCpltCallback(hi2c);
 8003070:	6878      	ldr	r0, [r7, #4]
 8003072:	f7ff ff7f 	bl	8002f74 <HAL_I2C_MemTxCpltCallback>
    if((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003076:	e091      	b.n	800319c <I2C_MasterTransmit_TXE+0x1e0>
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	2200      	movs	r2, #0
 800307c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003080:	6878      	ldr	r0, [r7, #4]
 8003082:	f7ff ff3d 	bl	8002f00 <HAL_I2C_MasterTxCpltCallback>
    if((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003086:	e089      	b.n	800319c <I2C_MasterTransmit_TXE+0x1e0>
      }
    }
  }
  else if((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8003088:	697b      	ldr	r3, [r7, #20]
 800308a:	2b21      	cmp	r3, #33	; 0x21
 800308c:	d006      	beq.n	800309c <I2C_MasterTransmit_TXE+0xe0>
 800308e:	693b      	ldr	r3, [r7, #16]
 8003090:	2b40      	cmp	r3, #64	; 0x40
 8003092:	f040 8083 	bne.w	800319c <I2C_MasterTransmit_TXE+0x1e0>
    ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8003096:	697b      	ldr	r3, [r7, #20]
 8003098:	2b22      	cmp	r3, #34	; 0x22
 800309a:	d17f      	bne.n	800319c <I2C_MasterTransmit_TXE+0x1e0>
  {
    if(hi2c->XferCount == 0U)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030a0:	b29b      	uxth	r3, r3
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d108      	bne.n	80030b8 <I2C_MasterTransmit_TXE+0xfc>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	685a      	ldr	r2, [r3, #4]
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80030b4:	605a      	str	r2, [r3, #4]
 80030b6:	e071      	b.n	800319c <I2C_MasterTransmit_TXE+0x1e0>
    }
    else
    {
      if(hi2c->Mode == HAL_I2C_MODE_MEM)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80030be:	b2db      	uxtb	r3, r3
 80030c0:	2b40      	cmp	r3, #64	; 0x40
 80030c2:	d15b      	bne.n	800317c <I2C_MasterTransmit_TXE+0x1c0>
      {
        if(hi2c->EventCount == 0)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d11d      	bne.n	8003108 <I2C_MasterTransmit_TXE+0x14c>
        {
          /* If Memory address size is 8Bit */
          if(hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030d0:	2b01      	cmp	r3, #1
 80030d2:	d10b      	bne.n	80030ec <I2C_MasterTransmit_TXE+0x130>
          {
            /* Send Memory Address */
            hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80030d8:	b2da      	uxtb	r2, r3
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	611a      	str	r2, [r3, #16]
            
            hi2c->EventCount += 2;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80030e4:	1c9a      	adds	r2, r3, #2
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	651a      	str	r2, [r3, #80]	; 0x50
 80030ea:	e057      	b.n	800319c <I2C_MasterTransmit_TXE+0x1e0>
          }
          /* If Memory address size is 16Bit */
          else
          {
            /* Send MSB of Memory Address */
            hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80030f0:	b29b      	uxth	r3, r3
 80030f2:	121b      	asrs	r3, r3, #8
 80030f4:	b2da      	uxtb	r2, r3
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	611a      	str	r2, [r3, #16]
            
            hi2c->EventCount++;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003100:	1c5a      	adds	r2, r3, #1
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	651a      	str	r2, [r3, #80]	; 0x50
 8003106:	e049      	b.n	800319c <I2C_MasterTransmit_TXE+0x1e0>
          }
        }
        else if(hi2c->EventCount == 1)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800310c:	2b01      	cmp	r3, #1
 800310e:	d10b      	bne.n	8003128 <I2C_MasterTransmit_TXE+0x16c>
        {
          /* Send LSB of Memory Address */
          hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003114:	b2da      	uxtb	r2, r3
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	611a      	str	r2, [r3, #16]
          
          hi2c->EventCount++;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003120:	1c5a      	adds	r2, r3, #1
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	651a      	str	r2, [r3, #80]	; 0x50
 8003126:	e039      	b.n	800319c <I2C_MasterTransmit_TXE+0x1e0>
        }
        else if(hi2c->EventCount == 2)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800312c:	2b02      	cmp	r3, #2
 800312e:	d135      	bne.n	800319c <I2C_MasterTransmit_TXE+0x1e0>
        {
          if(hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003136:	b2db      	uxtb	r3, r3
 8003138:	2b22      	cmp	r3, #34	; 0x22
 800313a:	d108      	bne.n	800314e <I2C_MasterTransmit_TXE+0x192>
          {
            /* Generate Restart */
            hi2c->Instance->CR1 |= I2C_CR1_START;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	681a      	ldr	r2, [r3, #0]
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800314a:	601a      	str	r2, [r3, #0]
 800314c:	e026      	b.n	800319c <I2C_MasterTransmit_TXE+0x1e0>
          }
          else if(hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003154:	b2db      	uxtb	r3, r3
 8003156:	2b21      	cmp	r3, #33	; 0x21
 8003158:	d120      	bne.n	800319c <I2C_MasterTransmit_TXE+0x1e0>
          {
            /* Write data to DR */
            hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800315e:	1c59      	adds	r1, r3, #1
 8003160:	687a      	ldr	r2, [r7, #4]
 8003162:	6251      	str	r1, [r2, #36]	; 0x24
 8003164:	781a      	ldrb	r2, [r3, #0]
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	611a      	str	r2, [r3, #16]
            hi2c->XferCount--;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003170:	b29b      	uxth	r3, r3
 8003172:	3b01      	subs	r3, #1
 8003174:	b29a      	uxth	r2, r3
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	855a      	strh	r2, [r3, #42]	; 0x2a
 800317a:	e00f      	b.n	800319c <I2C_MasterTransmit_TXE+0x1e0>
        }
      }
      else
      {
        /* Write data to DR */
        hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003180:	1c59      	adds	r1, r3, #1
 8003182:	687a      	ldr	r2, [r7, #4]
 8003184:	6251      	str	r1, [r2, #36]	; 0x24
 8003186:	781a      	ldrb	r2, [r3, #0]
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	611a      	str	r2, [r3, #16]
        hi2c->XferCount--;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003192:	b29b      	uxth	r3, r3
 8003194:	3b01      	subs	r3, #1
 8003196:	b29a      	uxth	r2, r3
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	855a      	strh	r2, [r3, #42]	; 0x2a
      }
    }
  }
  return HAL_OK;
 800319c:	2300      	movs	r3, #0
}
 800319e:	4618      	mov	r0, r3
 80031a0:	3718      	adds	r7, #24
 80031a2:	46bd      	mov	sp, r7
 80031a4:	bd80      	pop	{r7, pc}

080031a6 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80031a6:	b580      	push	{r7, lr}
 80031a8:	b084      	sub	sp, #16
 80031aa:	af00      	add	r7, sp, #0
 80031ac:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031b2:	60fb      	str	r3, [r7, #12]

  if(hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031ba:	b2db      	uxtb	r3, r3
 80031bc:	2b21      	cmp	r3, #33	; 0x21
 80031be:	d162      	bne.n	8003286 <I2C_MasterTransmit_BTF+0xe0>
  {    
    if(hi2c->XferCount != 0U)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031c4:	b29b      	uxth	r3, r3
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d010      	beq.n	80031ec <I2C_MasterTransmit_BTF+0x46>
    {
      /* Write data to DR */
      hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031ce:	1c59      	adds	r1, r3, #1
 80031d0:	687a      	ldr	r2, [r7, #4]
 80031d2:	6251      	str	r1, [r2, #36]	; 0x24
 80031d4:	781a      	ldrb	r2, [r3, #0]
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	611a      	str	r2, [r3, #16]
      hi2c->XferCount--;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031e0:	b29b      	uxth	r3, r3
 80031e2:	3b01      	subs	r3, #1
 80031e4:	b29a      	uxth	r2, r3
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	855a      	strh	r2, [r3, #42]	; 0x2a
 80031ea:	e04c      	b.n	8003286 <I2C_MasterTransmit_BTF+0xe0>
    }
    else
    {
      /* Call TxCpltCallback() directly if no stop mode is set */
      if((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	2b04      	cmp	r3, #4
 80031f0:	d01d      	beq.n	800322e <I2C_MasterTransmit_BTF+0x88>
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	2b08      	cmp	r3, #8
 80031f6:	d01a      	beq.n	800322e <I2C_MasterTransmit_BTF+0x88>
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80031fe:	d016      	beq.n	800322e <I2C_MasterTransmit_BTF+0x88>
      {
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	685a      	ldr	r2, [r3, #4]
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800320e:	605a      	str	r2, [r3, #4]
        
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	2211      	movs	r2, #17
 8003214:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	2200      	movs	r2, #0
 800321a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	2220      	movs	r2, #32
 8003222:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003226:	6878      	ldr	r0, [r7, #4]
 8003228:	f7ff fe6a 	bl	8002f00 <HAL_I2C_MasterTxCpltCallback>
 800322c:	e02b      	b.n	8003286 <I2C_MasterTransmit_BTF+0xe0>
      }
      else /* Generate Stop condition then Call TxCpltCallback() */
      {
        /* Disable EVT, BUF and ERR interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	685a      	ldr	r2, [r3, #4]
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800323c:	605a      	str	r2, [r3, #4]
        
        /* Generate Stop */
        hi2c->Instance->CR1 |= I2C_CR1_STOP;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	681a      	ldr	r2, [r3, #0]
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800324c:	601a      	str	r2, [r3, #0]
        
        hi2c->PreviousState = I2C_STATE_NONE;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	2200      	movs	r2, #0
 8003252:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	2220      	movs	r2, #32
 8003258:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        
        if(hi2c->Mode == HAL_I2C_MODE_MEM)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003262:	b2db      	uxtb	r3, r3
 8003264:	2b40      	cmp	r3, #64	; 0x40
 8003266:	d107      	bne.n	8003278 <I2C_MasterTransmit_BTF+0xd2>
        {
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2200      	movs	r2, #0
 800326c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          
          HAL_I2C_MemTxCpltCallback(hi2c);
 8003270:	6878      	ldr	r0, [r7, #4]
 8003272:	f7ff fe7f 	bl	8002f74 <HAL_I2C_MemTxCpltCallback>
 8003276:	e006      	b.n	8003286 <I2C_MasterTransmit_BTF+0xe0>
        }
        else
        {
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	2200      	movs	r2, #0
 800327c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8003280:	6878      	ldr	r0, [r7, #4]
 8003282:	f7ff fe3d 	bl	8002f00 <HAL_I2C_MasterTxCpltCallback>
        }
      }
    }
  }
  return HAL_OK;
 8003286:	2300      	movs	r3, #0
}
 8003288:	4618      	mov	r0, r3
 800328a:	3710      	adds	r7, #16
 800328c:	46bd      	mov	sp, r7
 800328e:	bd80      	pop	{r7, pc}

08003290 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8003290:	b580      	push	{r7, lr}
 8003292:	b084      	sub	sp, #16
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]
  if(hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800329e:	b2db      	uxtb	r3, r3
 80032a0:	2b22      	cmp	r3, #34	; 0x22
 80032a2:	f040 8091 	bne.w	80033c8 <I2C_MasterReceive_RXNE+0x138>
  {
    uint32_t tmp = 0U;
 80032a6:	2300      	movs	r3, #0
 80032a8:	60fb      	str	r3, [r7, #12]
    
    tmp = hi2c->XferCount;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032ae:	b29b      	uxth	r3, r3
 80032b0:	60fb      	str	r3, [r7, #12]
    if(tmp > 3U)
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	2b03      	cmp	r3, #3
 80032b6:	d911      	bls.n	80032dc <I2C_MasterReceive_RXNE+0x4c>
    {
      /* Read data from DR */
      (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	6918      	ldr	r0, [r3, #16]
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032c2:	1c59      	adds	r1, r3, #1
 80032c4:	687a      	ldr	r2, [r7, #4]
 80032c6:	6251      	str	r1, [r2, #36]	; 0x24
 80032c8:	b2c2      	uxtb	r2, r0
 80032ca:	701a      	strb	r2, [r3, #0]
      hi2c->XferCount--;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032d0:	b29b      	uxth	r3, r3
 80032d2:	3b01      	subs	r3, #1
 80032d4:	b29a      	uxth	r2, r3
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	855a      	strh	r2, [r3, #42]	; 0x2a
 80032da:	e075      	b.n	80033c8 <I2C_MasterReceive_RXNE+0x138>
    }
    else if((tmp == 2U) || (tmp == 3U))
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	2b02      	cmp	r3, #2
 80032e0:	d002      	beq.n	80032e8 <I2C_MasterReceive_RXNE+0x58>
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	2b03      	cmp	r3, #3
 80032e6:	d125      	bne.n	8003334 <I2C_MasterReceive_RXNE+0xa4>
    {
      if(hi2c->XferOptions != I2C_NEXT_FRAME)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032ec:	2b02      	cmp	r3, #2
 80032ee:	d010      	beq.n	8003312 <I2C_MasterReceive_RXNE+0x82>
      {
        /* Disable Acknowledge */
        hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	681a      	ldr	r2, [r3, #0]
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80032fe:	601a      	str	r2, [r3, #0]
        
        /* Enable Pos */
        hi2c->Instance->CR1 |= I2C_CR1_POS;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	681a      	ldr	r2, [r3, #0]
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800330e:	601a      	str	r2, [r3, #0]
 8003310:	e007      	b.n	8003322 <I2C_MasterReceive_RXNE+0x92>
      }
      else
      {
        /* Enable Acknowledge */
        hi2c->Instance->CR1 |= I2C_CR1_ACK;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	681a      	ldr	r2, [r3, #0]
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003320:	601a      	str	r2, [r3, #0]
      }
      
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	685a      	ldr	r2, [r3, #4]
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003330:	605a      	str	r2, [r3, #4]
 8003332:	e049      	b.n	80033c8 <I2C_MasterReceive_RXNE+0x138>
    }
    else
    {
      if(hi2c->XferOptions != I2C_NEXT_FRAME)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003338:	2b02      	cmp	r3, #2
 800333a:	d008      	beq.n	800334e <I2C_MasterReceive_RXNE+0xbe>
      {
        /* Disable Acknowledge */
        hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	681a      	ldr	r2, [r3, #0]
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800334a:	601a      	str	r2, [r3, #0]
 800334c:	e007      	b.n	800335e <I2C_MasterReceive_RXNE+0xce>
      }
      else
      {
        /* Enable Acknowledge */
        hi2c->Instance->CR1 |= I2C_CR1_ACK;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	681a      	ldr	r2, [r3, #0]
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800335c:	601a      	str	r2, [r3, #0]
      }

      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	685a      	ldr	r2, [r3, #4]
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800336c:	605a      	str	r2, [r3, #4]
      
      /* Read data from DR */
      (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	6918      	ldr	r0, [r3, #16]
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003378:	1c59      	adds	r1, r3, #1
 800337a:	687a      	ldr	r2, [r7, #4]
 800337c:	6251      	str	r1, [r2, #36]	; 0x24
 800337e:	b2c2      	uxtb	r2, r0
 8003380:	701a      	strb	r2, [r3, #0]
      hi2c->XferCount--;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003386:	b29b      	uxth	r3, r3
 8003388:	3b01      	subs	r3, #1
 800338a:	b29a      	uxth	r2, r3
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	855a      	strh	r2, [r3, #42]	; 0x2a

      hi2c->State = HAL_I2C_STATE_READY;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	2220      	movs	r2, #32
 8003394:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->PreviousState = I2C_STATE_NONE;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	2200      	movs	r2, #0
 800339c:	631a      	str	r2, [r3, #48]	; 0x30

      if(hi2c->Mode == HAL_I2C_MODE_MEM)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80033a4:	b2db      	uxtb	r3, r3
 80033a6:	2b40      	cmp	r3, #64	; 0x40
 80033a8:	d107      	bne.n	80033ba <I2C_MasterReceive_RXNE+0x12a>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	2200      	movs	r2, #0
 80033ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_MemRxCpltCallback(hi2c);
 80033b2:	6878      	ldr	r0, [r7, #4]
 80033b4:	f7ff fde7 	bl	8002f86 <HAL_I2C_MemRxCpltCallback>
 80033b8:	e006      	b.n	80033c8 <I2C_MasterReceive_RXNE+0x138>
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	2200      	movs	r2, #0
 80033be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_MasterRxCpltCallback(hi2c);
 80033c2:	6878      	ldr	r0, [r7, #4]
 80033c4:	f7ff fda5 	bl	8002f12 <HAL_I2C_MasterRxCpltCallback>
      }
    }
  }
  return HAL_OK;
 80033c8:	2300      	movs	r3, #0
}
 80033ca:	4618      	mov	r0, r3
 80033cc:	3710      	adds	r7, #16
 80033ce:	46bd      	mov	sp, r7
 80033d0:	bd80      	pop	{r7, pc}

080033d2 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80033d2:	b580      	push	{r7, lr}
 80033d4:	b084      	sub	sp, #16
 80033d6:	af00      	add	r7, sp, #0
 80033d8:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033de:	60fb      	str	r3, [r7, #12]

  if(hi2c->XferCount == 3U)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033e4:	b29b      	uxth	r3, r3
 80033e6:	2b03      	cmp	r3, #3
 80033e8:	d123      	bne.n	8003432 <I2C_MasterReceive_BTF+0x60>
  {
    if((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	2b04      	cmp	r3, #4
 80033ee:	d006      	beq.n	80033fe <I2C_MasterReceive_BTF+0x2c>
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	2b08      	cmp	r3, #8
 80033f4:	d003      	beq.n	80033fe <I2C_MasterReceive_BTF+0x2c>
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80033fc:	d107      	bne.n	800340e <I2C_MasterReceive_BTF+0x3c>
    {
      /* Disable Acknowledge */
      hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	681a      	ldr	r2, [r3, #0]
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800340c:	601a      	str	r2, [r3, #0]
    }

    /* Read data from DR */
    (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	6918      	ldr	r0, [r3, #16]
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003418:	1c59      	adds	r1, r3, #1
 800341a:	687a      	ldr	r2, [r7, #4]
 800341c:	6251      	str	r1, [r2, #36]	; 0x24
 800341e:	b2c2      	uxtb	r2, r0
 8003420:	701a      	strb	r2, [r3, #0]
    hi2c->XferCount--;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003426:	b29b      	uxth	r3, r3
 8003428:	3b01      	subs	r3, #1
 800342a:	b29a      	uxth	r2, r3
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003430:	e08b      	b.n	800354a <I2C_MasterReceive_BTF+0x178>
  }
  else if(hi2c->XferCount == 2U)
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003436:	b29b      	uxth	r3, r3
 8003438:	2b02      	cmp	r3, #2
 800343a:	d175      	bne.n	8003528 <I2C_MasterReceive_BTF+0x156>
  {
    /* Prepare next transfer or stop current transfer */
    if((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	2b04      	cmp	r3, #4
 8003440:	d023      	beq.n	800348a <I2C_MasterReceive_BTF+0xb8>
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	2b08      	cmp	r3, #8
 8003446:	d020      	beq.n	800348a <I2C_MasterReceive_BTF+0xb8>
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800344e:	d01c      	beq.n	800348a <I2C_MasterReceive_BTF+0xb8>
    {
      if(CurrentXferOptions != I2C_NEXT_FRAME)
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	2b02      	cmp	r3, #2
 8003454:	d008      	beq.n	8003468 <I2C_MasterReceive_BTF+0x96>
      {
        /* Disable Acknowledge */
        hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	681a      	ldr	r2, [r3, #0]
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003464:	601a      	str	r2, [r3, #0]
 8003466:	e007      	b.n	8003478 <I2C_MasterReceive_BTF+0xa6>
      }
      else
      {
        /* Enable Acknowledge */
        hi2c->Instance->CR1 |= I2C_CR1_ACK;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	681a      	ldr	r2, [r3, #0]
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003476:	601a      	str	r2, [r3, #0]
      }

      /* Disable EVT and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	685a      	ldr	r2, [r3, #4]
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8003486:	605a      	str	r2, [r3, #4]
 8003488:	e00f      	b.n	80034aa <I2C_MasterReceive_BTF+0xd8>
    }
    else
    {
      /* Disable EVT and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	685a      	ldr	r2, [r3, #4]
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8003498:	605a      	str	r2, [r3, #4]
      
      /* Generate Stop */
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	681a      	ldr	r2, [r3, #0]
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80034a8:	601a      	str	r2, [r3, #0]
    }

    /* Read data from DR */
    (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	6918      	ldr	r0, [r3, #16]
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034b4:	1c59      	adds	r1, r3, #1
 80034b6:	687a      	ldr	r2, [r7, #4]
 80034b8:	6251      	str	r1, [r2, #36]	; 0x24
 80034ba:	b2c2      	uxtb	r2, r0
 80034bc:	701a      	strb	r2, [r3, #0]
    hi2c->XferCount--;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034c2:	b29b      	uxth	r3, r3
 80034c4:	3b01      	subs	r3, #1
 80034c6:	b29a      	uxth	r2, r3
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	855a      	strh	r2, [r3, #42]	; 0x2a

    /* Read data from DR */
    (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	6918      	ldr	r0, [r3, #16]
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034d6:	1c59      	adds	r1, r3, #1
 80034d8:	687a      	ldr	r2, [r7, #4]
 80034da:	6251      	str	r1, [r2, #36]	; 0x24
 80034dc:	b2c2      	uxtb	r2, r0
 80034de:	701a      	strb	r2, [r3, #0]
    hi2c->XferCount--;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034e4:	b29b      	uxth	r3, r3
 80034e6:	3b01      	subs	r3, #1
 80034e8:	b29a      	uxth	r2, r3
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	855a      	strh	r2, [r3, #42]	; 0x2a

    hi2c->State = HAL_I2C_STATE_READY;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	2220      	movs	r2, #32
 80034f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->PreviousState = I2C_STATE_NONE;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	2200      	movs	r2, #0
 80034fa:	631a      	str	r2, [r3, #48]	; 0x30

    if(hi2c->Mode == HAL_I2C_MODE_MEM)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003502:	b2db      	uxtb	r3, r3
 8003504:	2b40      	cmp	r3, #64	; 0x40
 8003506:	d107      	bne.n	8003518 <I2C_MasterReceive_BTF+0x146>
    {
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	2200      	movs	r2, #0
 800350c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      HAL_I2C_MemRxCpltCallback(hi2c);
 8003510:	6878      	ldr	r0, [r7, #4]
 8003512:	f7ff fd38 	bl	8002f86 <HAL_I2C_MemRxCpltCallback>
 8003516:	e018      	b.n	800354a <I2C_MasterReceive_BTF+0x178>
    }
    else
    {
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2200      	movs	r2, #0
 800351c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      HAL_I2C_MasterRxCpltCallback(hi2c);
 8003520:	6878      	ldr	r0, [r7, #4]
 8003522:	f7ff fcf6 	bl	8002f12 <HAL_I2C_MasterRxCpltCallback>
 8003526:	e010      	b.n	800354a <I2C_MasterReceive_BTF+0x178>
    }
  }
  else
  {
    /* Read data from DR */
    (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	6918      	ldr	r0, [r3, #16]
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003532:	1c59      	adds	r1, r3, #1
 8003534:	687a      	ldr	r2, [r7, #4]
 8003536:	6251      	str	r1, [r2, #36]	; 0x24
 8003538:	b2c2      	uxtb	r2, r0
 800353a:	701a      	strb	r2, [r3, #0]
    hi2c->XferCount--;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003540:	b29b      	uxth	r3, r3
 8003542:	3b01      	subs	r3, #1
 8003544:	b29a      	uxth	r2, r3
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  return HAL_OK;
 800354a:	2300      	movs	r3, #0
}
 800354c:	4618      	mov	r0, r3
 800354e:	3710      	adds	r7, #16
 8003550:	46bd      	mov	sp, r7
 8003552:	bd80      	pop	{r7, pc}

08003554 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8003554:	b480      	push	{r7}
 8003556:	b083      	sub	sp, #12
 8003558:	af00      	add	r7, sp, #0
 800355a:	6078      	str	r0, [r7, #4]
  if(hi2c->Mode == HAL_I2C_MODE_MEM)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003562:	b2db      	uxtb	r3, r3
 8003564:	2b40      	cmp	r3, #64	; 0x40
 8003566:	d117      	bne.n	8003598 <I2C_Master_SB+0x44>
  {
    if(hi2c->EventCount == 0U)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800356c:	2b00      	cmp	r3, #0
 800356e:	d109      	bne.n	8003584 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003574:	b2db      	uxtb	r3, r3
 8003576:	461a      	mov	r2, r3
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003580:	611a      	str	r2, [r3, #16]
 8003582:	e04d      	b.n	8003620 <I2C_Master_SB+0xcc>
    }
    else
    {
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003588:	b2db      	uxtb	r3, r3
 800358a:	f043 0301 	orr.w	r3, r3, #1
 800358e:	b2da      	uxtb	r2, r3
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	611a      	str	r2, [r3, #16]
 8003596:	e043      	b.n	8003620 <I2C_Master_SB+0xcc>
    }
  }
  else
  {
    if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	691b      	ldr	r3, [r3, #16]
 800359c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80035a0:	d119      	bne.n	80035d6 <I2C_Master_SB+0x82>
    {
      /* Send slave 7 Bits address */
      if(hi2c->State == HAL_I2C_STATE_BUSY_TX) 
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035a8:	b2db      	uxtb	r3, r3
 80035aa:	2b21      	cmp	r3, #33	; 0x21
 80035ac:	d109      	bne.n	80035c2 <I2C_Master_SB+0x6e>
      {
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035b2:	b2db      	uxtb	r3, r3
 80035b4:	461a      	mov	r2, r3
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80035be:	611a      	str	r2, [r3, #16]
 80035c0:	e02e      	b.n	8003620 <I2C_Master_SB+0xcc>
      }
      else
      {
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035c6:	b2db      	uxtb	r3, r3
 80035c8:	f043 0301 	orr.w	r3, r3, #1
 80035cc:	b2da      	uxtb	r2, r3
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	611a      	str	r2, [r3, #16]
 80035d4:	e024      	b.n	8003620 <I2C_Master_SB+0xcc>
      }
    }
    else
    {
      if(hi2c->EventCount == 0U)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d10e      	bne.n	80035fc <I2C_Master_SB+0xa8>
      {
        /* Send header of slave address */
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035e2:	b29b      	uxth	r3, r3
 80035e4:	11db      	asrs	r3, r3, #7
 80035e6:	b2db      	uxtb	r3, r3
 80035e8:	f003 0306 	and.w	r3, r3, #6
 80035ec:	b2db      	uxtb	r3, r3
 80035ee:	f063 030f 	orn	r3, r3, #15
 80035f2:	b2da      	uxtb	r2, r3
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	611a      	str	r2, [r3, #16]
 80035fa:	e011      	b.n	8003620 <I2C_Master_SB+0xcc>
      }
      else if(hi2c->EventCount == 1U)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003600:	2b01      	cmp	r3, #1
 8003602:	d10d      	bne.n	8003620 <I2C_Master_SB+0xcc>
      {
        /* Send header of slave address */
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003608:	b29b      	uxth	r3, r3
 800360a:	11db      	asrs	r3, r3, #7
 800360c:	b2db      	uxtb	r3, r3
 800360e:	f003 0306 	and.w	r3, r3, #6
 8003612:	b2db      	uxtb	r3, r3
 8003614:	f063 030e 	orn	r3, r3, #14
 8003618:	b2da      	uxtb	r2, r3
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	611a      	str	r2, [r3, #16]
      }
    }
  }

  return HAL_OK;
 8003620:	2300      	movs	r3, #0
}
 8003622:	4618      	mov	r0, r3
 8003624:	370c      	adds	r7, #12
 8003626:	46bd      	mov	sp, r7
 8003628:	bc80      	pop	{r7}
 800362a:	4770      	bx	lr

0800362c <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 800362c:	b480      	push	{r7}
 800362e:	b083      	sub	sp, #12
 8003630:	af00      	add	r7, sp, #0
 8003632:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003638:	b2da      	uxtb	r2, r3
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	611a      	str	r2, [r3, #16]

  return HAL_OK;
 8003640:	2300      	movs	r3, #0
}
 8003642:	4618      	mov	r0, r3
 8003644:	370c      	adds	r7, #12
 8003646:	46bd      	mov	sp, r7
 8003648:	bc80      	pop	{r7}
 800364a:	4770      	bx	lr

0800364c <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 800364c:	b480      	push	{r7}
 800364e:	b091      	sub	sp, #68	; 0x44
 8003650:	af00      	add	r7, sp, #0
 8003652:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentMode        = hi2c->Mode;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800365a:	b2db      	uxtb	r3, r3
 800365c:	63fb      	str	r3, [r7, #60]	; 0x3c
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003662:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State         = hi2c->PreviousState;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003668:	637b      	str	r3, [r7, #52]	; 0x34

  if(hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003670:	b2db      	uxtb	r3, r3
 8003672:	2b22      	cmp	r3, #34	; 0x22
 8003674:	f040 8146 	bne.w	8003904 <I2C_Master_ADDR+0x2b8>
  {
    if((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800367c:	2b00      	cmp	r3, #0
 800367e:	d10e      	bne.n	800369e <I2C_Master_ADDR+0x52>
 8003680:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003682:	2b40      	cmp	r3, #64	; 0x40
 8003684:	d10b      	bne.n	800369e <I2C_Master_ADDR+0x52>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003686:	2300      	movs	r3, #0
 8003688:	633b      	str	r3, [r7, #48]	; 0x30
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	695b      	ldr	r3, [r3, #20]
 8003690:	633b      	str	r3, [r7, #48]	; 0x30
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	699b      	ldr	r3, [r3, #24]
 8003698:	633b      	str	r3, [r7, #48]	; 0x30
 800369a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800369c:	e13d      	b.n	800391a <I2C_Master_ADDR+0x2ce>
    }
    else if((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d11d      	bne.n	80036e2 <I2C_Master_ADDR+0x96>
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	691b      	ldr	r3, [r3, #16]
 80036aa:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80036ae:	d118      	bne.n	80036e2 <I2C_Master_ADDR+0x96>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80036b0:	2300      	movs	r3, #0
 80036b2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	695b      	ldr	r3, [r3, #20]
 80036ba:	62fb      	str	r3, [r7, #44]	; 0x2c
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	699b      	ldr	r3, [r3, #24]
 80036c2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80036c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      
      /* Generate Restart */
      hi2c->Instance->CR1 |= I2C_CR1_START;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	681a      	ldr	r2, [r3, #0]
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80036d4:	601a      	str	r2, [r3, #0]
      
      hi2c->EventCount++;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036da:	1c5a      	adds	r2, r3, #1
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	651a      	str	r2, [r3, #80]	; 0x50
 80036e0:	e11b      	b.n	800391a <I2C_Master_ADDR+0x2ce>
    }
    else
    {
      if(hi2c->XferCount == 0U)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036e6:	b29b      	uxth	r3, r3
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d113      	bne.n	8003714 <I2C_Master_ADDR+0xc8>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80036ec:	2300      	movs	r3, #0
 80036ee:	62bb      	str	r3, [r7, #40]	; 0x28
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	695b      	ldr	r3, [r3, #20]
 80036f6:	62bb      	str	r3, [r7, #40]	; 0x28
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	699b      	ldr	r3, [r3, #24]
 80036fe:	62bb      	str	r3, [r7, #40]	; 0x28
 8003700:	6abb      	ldr	r3, [r7, #40]	; 0x28
        
        /* Generate Stop */
        hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	681a      	ldr	r2, [r3, #0]
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003710:	601a      	str	r2, [r3, #0]
 8003712:	e0f3      	b.n	80038fc <I2C_Master_ADDR+0x2b0>
      }
      else if(hi2c->XferCount == 1U)   
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003718:	b29b      	uxth	r3, r3
 800371a:	2b01      	cmp	r3, #1
 800371c:	f040 8082 	bne.w	8003824 <I2C_Master_ADDR+0x1d8>
      {
        if(CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8003720:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003722:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003726:	d137      	bne.n	8003798 <I2C_Master_ADDR+0x14c>
        {
          /* Disable Acknowledge */
            hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	681a      	ldr	r2, [r3, #0]
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003736:	601a      	str	r2, [r3, #0]

          if((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	685b      	ldr	r3, [r3, #4]
 800373e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003742:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003746:	d113      	bne.n	8003770 <I2C_Master_ADDR+0x124>
          {
            /* Disable Acknowledge */
            hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	681a      	ldr	r2, [r3, #0]
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003756:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003758:	2300      	movs	r3, #0
 800375a:	627b      	str	r3, [r7, #36]	; 0x24
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	695b      	ldr	r3, [r3, #20]
 8003762:	627b      	str	r3, [r7, #36]	; 0x24
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	699b      	ldr	r3, [r3, #24]
 800376a:	627b      	str	r3, [r7, #36]	; 0x24
 800376c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800376e:	e0c5      	b.n	80038fc <I2C_Master_ADDR+0x2b0>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003770:	2300      	movs	r3, #0
 8003772:	623b      	str	r3, [r7, #32]
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	695b      	ldr	r3, [r3, #20]
 800377a:	623b      	str	r3, [r7, #32]
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	699b      	ldr	r3, [r3, #24]
 8003782:	623b      	str	r3, [r7, #32]
 8003784:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	681a      	ldr	r2, [r3, #0]
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003794:	601a      	str	r2, [r3, #0]
 8003796:	e0b1      	b.n	80038fc <I2C_Master_ADDR+0x2b0>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8003798:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800379a:	2b04      	cmp	r3, #4
 800379c:	d026      	beq.n	80037ec <I2C_Master_ADDR+0x1a0>
 800379e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037a0:	2b08      	cmp	r3, #8
 80037a2:	d023      	beq.n	80037ec <I2C_Master_ADDR+0x1a0>
          && (Prev_State != I2C_STATE_MASTER_BUSY_RX))
 80037a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037a6:	2b12      	cmp	r3, #18
 80037a8:	d020      	beq.n	80037ec <I2C_Master_ADDR+0x1a0>
        {
          if(hi2c->XferOptions != I2C_NEXT_FRAME)
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037ae:	2b02      	cmp	r3, #2
 80037b0:	d008      	beq.n	80037c4 <I2C_Master_ADDR+0x178>
          {
            /* Disable Acknowledge */
            hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	681a      	ldr	r2, [r3, #0]
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80037c0:	601a      	str	r2, [r3, #0]
 80037c2:	e007      	b.n	80037d4 <I2C_Master_ADDR+0x188>
          }
          else
          {
            /* Enable Acknowledge */
            hi2c->Instance->CR1 |= I2C_CR1_ACK;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	681a      	ldr	r2, [r3, #0]
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80037d2:	601a      	str	r2, [r3, #0]
          }
          
          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80037d4:	2300      	movs	r3, #0
 80037d6:	61fb      	str	r3, [r7, #28]
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	695b      	ldr	r3, [r3, #20]
 80037de:	61fb      	str	r3, [r7, #28]
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	699b      	ldr	r3, [r3, #24]
 80037e6:	61fb      	str	r3, [r7, #28]
 80037e8:	69fb      	ldr	r3, [r7, #28]
 80037ea:	e087      	b.n	80038fc <I2C_Master_ADDR+0x2b0>
        }
        else
        {
          /* Disable Acknowledge */
          hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	681a      	ldr	r2, [r3, #0]
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80037fa:	601a      	str	r2, [r3, #0]
          
          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80037fc:	2300      	movs	r3, #0
 80037fe:	61bb      	str	r3, [r7, #24]
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	695b      	ldr	r3, [r3, #20]
 8003806:	61bb      	str	r3, [r7, #24]
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	699b      	ldr	r3, [r3, #24]
 800380e:	61bb      	str	r3, [r7, #24]
 8003810:	69bb      	ldr	r3, [r7, #24]
          
          /* Generate Stop */
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	681a      	ldr	r2, [r3, #0]
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003820:	601a      	str	r2, [r3, #0]
 8003822:	e06b      	b.n	80038fc <I2C_Master_ADDR+0x2b0>
        }
      }
      else if(hi2c->XferCount == 2U)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003828:	b29b      	uxth	r3, r3
 800382a:	2b02      	cmp	r3, #2
 800382c:	d143      	bne.n	80038b6 <I2C_Master_ADDR+0x26a>
      {
        if(hi2c->XferOptions != I2C_NEXT_FRAME)
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003832:	2b02      	cmp	r3, #2
 8003834:	d01b      	beq.n	800386e <I2C_Master_ADDR+0x222>
        {
          /* Enable Pos */
          hi2c->Instance->CR1 |= I2C_CR1_POS;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	681a      	ldr	r2, [r3, #0]
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003844:	601a      	str	r2, [r3, #0]
          
          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003846:	2300      	movs	r3, #0
 8003848:	617b      	str	r3, [r7, #20]
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	695b      	ldr	r3, [r3, #20]
 8003850:	617b      	str	r3, [r7, #20]
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	699b      	ldr	r3, [r3, #24]
 8003858:	617b      	str	r3, [r7, #20]
 800385a:	697b      	ldr	r3, [r7, #20]
          
          /* Disable Acknowledge */
          hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	681a      	ldr	r2, [r3, #0]
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800386a:	601a      	str	r2, [r3, #0]
 800386c:	e012      	b.n	8003894 <I2C_Master_ADDR+0x248>
        }
        else
        {
          /* Enable Acknowledge */
          hi2c->Instance->CR1 |= I2C_CR1_ACK;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	681a      	ldr	r2, [r3, #0]
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800387c:	601a      	str	r2, [r3, #0]
          
          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800387e:	2300      	movs	r3, #0
 8003880:	613b      	str	r3, [r7, #16]
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	695b      	ldr	r3, [r3, #20]
 8003888:	613b      	str	r3, [r7, #16]
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	699b      	ldr	r3, [r3, #24]
 8003890:	613b      	str	r3, [r7, #16]
 8003892:	693b      	ldr	r3, [r7, #16]
        }

        if((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	685b      	ldr	r3, [r3, #4]
 800389a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800389e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80038a2:	d12b      	bne.n	80038fc <I2C_Master_ADDR+0x2b0>
        {
          /* Enable Last DMA bit */
          hi2c->Instance->CR2 |= I2C_CR2_LAST;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	685a      	ldr	r2, [r3, #4]
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80038b2:	605a      	str	r2, [r3, #4]
 80038b4:	e022      	b.n	80038fc <I2C_Master_ADDR+0x2b0>
        }
      }
      else
      {
        /* Enable Acknowledge */
        hi2c->Instance->CR1 |= I2C_CR1_ACK;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	681a      	ldr	r2, [r3, #0]
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80038c4:	601a      	str	r2, [r3, #0]

        if((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	685b      	ldr	r3, [r3, #4]
 80038cc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80038d0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80038d4:	d107      	bne.n	80038e6 <I2C_Master_ADDR+0x29a>
        {
          /* Enable Last DMA bit */
          hi2c->Instance->CR2 |= I2C_CR2_LAST;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	685a      	ldr	r2, [r3, #4]
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80038e4:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80038e6:	2300      	movs	r3, #0
 80038e8:	60fb      	str	r3, [r7, #12]
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	695b      	ldr	r3, [r3, #20]
 80038f0:	60fb      	str	r3, [r7, #12]
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	699b      	ldr	r3, [r3, #24]
 80038f8:	60fb      	str	r3, [r7, #12]
 80038fa:	68fb      	ldr	r3, [r7, #12]
      }
      
      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	2200      	movs	r2, #0
 8003900:	651a      	str	r2, [r3, #80]	; 0x50
 8003902:	e00a      	b.n	800391a <I2C_Master_ADDR+0x2ce>
    }
  }
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003904:	2300      	movs	r3, #0
 8003906:	60bb      	str	r3, [r7, #8]
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	695b      	ldr	r3, [r3, #20]
 800390e:	60bb      	str	r3, [r7, #8]
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	699b      	ldr	r3, [r3, #24]
 8003916:	60bb      	str	r3, [r7, #8]
 8003918:	68bb      	ldr	r3, [r7, #8]
  }

  return HAL_OK;
 800391a:	2300      	movs	r3, #0
}
 800391c:	4618      	mov	r0, r3
 800391e:	3744      	adds	r7, #68	; 0x44
 8003920:	46bd      	mov	sp, r7
 8003922:	bc80      	pop	{r7}
 8003924:	4770      	bx	lr

08003926 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8003926:	b580      	push	{r7, lr}
 8003928:	b084      	sub	sp, #16
 800392a:	af00      	add	r7, sp, #0
 800392c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentState = hi2c->State;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003934:	b2db      	uxtb	r3, r3
 8003936:	60fb      	str	r3, [r7, #12]

  if(hi2c->XferCount != 0U)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800393c:	b29b      	uxth	r3, r3
 800393e:	2b00      	cmp	r3, #0
 8003940:	d029      	beq.n	8003996 <I2C_SlaveTransmit_TXE+0x70>
  {
    /* Write data to DR */
    hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003946:	1c59      	adds	r1, r3, #1
 8003948:	687a      	ldr	r2, [r7, #4]
 800394a:	6251      	str	r1, [r2, #36]	; 0x24
 800394c:	781a      	ldrb	r2, [r3, #0]
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	611a      	str	r2, [r3, #16]
    hi2c->XferCount--;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003958:	b29b      	uxth	r3, r3
 800395a:	3b01      	subs	r3, #1
 800395c:	b29a      	uxth	r2, r3
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	855a      	strh	r2, [r3, #42]	; 0x2a

    if((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003966:	b29b      	uxth	r3, r3
 8003968:	2b00      	cmp	r3, #0
 800396a:	d114      	bne.n	8003996 <I2C_SlaveTransmit_TXE+0x70>
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	2b29      	cmp	r3, #41	; 0x29
 8003970:	d111      	bne.n	8003996 <I2C_SlaveTransmit_TXE+0x70>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	685a      	ldr	r2, [r3, #4]
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003980:	605a      	str	r2, [r3, #4]
      
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	2221      	movs	r2, #33	; 0x21
 8003986:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2228      	movs	r2, #40	; 0x28
 800398c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      
      /* Call the Tx complete callback to inform upper layer of the end of receive process */
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003990:	6878      	ldr	r0, [r7, #4]
 8003992:	f7ff fac7 	bl	8002f24 <HAL_I2C_SlaveTxCpltCallback>
    }
  }
  return HAL_OK;
 8003996:	2300      	movs	r3, #0
}
 8003998:	4618      	mov	r0, r3
 800399a:	3710      	adds	r7, #16
 800399c:	46bd      	mov	sp, r7
 800399e:	bd80      	pop	{r7, pc}

080039a0 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80039a0:	b480      	push	{r7}
 80039a2:	b083      	sub	sp, #12
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
  if(hi2c->XferCount != 0U)
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039ac:	b29b      	uxth	r3, r3
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d00f      	beq.n	80039d2 <I2C_SlaveTransmit_BTF+0x32>
  {
    /* Write data to DR */
    hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039b6:	1c59      	adds	r1, r3, #1
 80039b8:	687a      	ldr	r2, [r7, #4]
 80039ba:	6251      	str	r1, [r2, #36]	; 0x24
 80039bc:	781a      	ldrb	r2, [r3, #0]
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	611a      	str	r2, [r3, #16]
    hi2c->XferCount--;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039c8:	b29b      	uxth	r3, r3
 80039ca:	3b01      	subs	r3, #1
 80039cc:	b29a      	uxth	r2, r3
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  return HAL_OK;
 80039d2:	2300      	movs	r3, #0
}
 80039d4:	4618      	mov	r0, r3
 80039d6:	370c      	adds	r7, #12
 80039d8:	46bd      	mov	sp, r7
 80039da:	bc80      	pop	{r7}
 80039dc:	4770      	bx	lr

080039de <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80039de:	b580      	push	{r7, lr}
 80039e0:	b084      	sub	sp, #16
 80039e2:	af00      	add	r7, sp, #0
 80039e4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentState = hi2c->State;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039ec:	b2db      	uxtb	r3, r3
 80039ee:	60fb      	str	r3, [r7, #12]

  if(hi2c->XferCount != 0U)
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039f4:	b29b      	uxth	r3, r3
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d02a      	beq.n	8003a50 <I2C_SlaveReceive_RXNE+0x72>
  {
    /* Read data from DR */
    (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	6918      	ldr	r0, [r3, #16]
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a04:	1c59      	adds	r1, r3, #1
 8003a06:	687a      	ldr	r2, [r7, #4]
 8003a08:	6251      	str	r1, [r2, #36]	; 0x24
 8003a0a:	b2c2      	uxtb	r2, r0
 8003a0c:	701a      	strb	r2, [r3, #0]
    hi2c->XferCount--;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a12:	b29b      	uxth	r3, r3
 8003a14:	3b01      	subs	r3, #1
 8003a16:	b29a      	uxth	r2, r3
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	855a      	strh	r2, [r3, #42]	; 0x2a

    if((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a20:	b29b      	uxth	r3, r3
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d114      	bne.n	8003a50 <I2C_SlaveReceive_RXNE+0x72>
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	2b2a      	cmp	r3, #42	; 0x2a
 8003a2a:	d111      	bne.n	8003a50 <I2C_SlaveReceive_RXNE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	685a      	ldr	r2, [r3, #4]
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a3a:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2222      	movs	r2, #34	; 0x22
 8003a40:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	2228      	movs	r2, #40	; 0x28
 8003a46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the Rx complete callback to inform upper layer of the end of receive process */
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003a4a:	6878      	ldr	r0, [r7, #4]
 8003a4c:	f7ff fa73 	bl	8002f36 <HAL_I2C_SlaveRxCpltCallback>
    }
  }
  return HAL_OK;
 8003a50:	2300      	movs	r3, #0
}
 8003a52:	4618      	mov	r0, r3
 8003a54:	3710      	adds	r7, #16
 8003a56:	46bd      	mov	sp, r7
 8003a58:	bd80      	pop	{r7, pc}

08003a5a <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8003a5a:	b480      	push	{r7}
 8003a5c:	b083      	sub	sp, #12
 8003a5e:	af00      	add	r7, sp, #0
 8003a60:	6078      	str	r0, [r7, #4]
  if(hi2c->XferCount != 0U)
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a66:	b29b      	uxth	r3, r3
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d010      	beq.n	8003a8e <I2C_SlaveReceive_BTF+0x34>
  {
    /* Read data from DR */
    (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	6918      	ldr	r0, [r3, #16]
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a76:	1c59      	adds	r1, r3, #1
 8003a78:	687a      	ldr	r2, [r7, #4]
 8003a7a:	6251      	str	r1, [r2, #36]	; 0x24
 8003a7c:	b2c2      	uxtb	r2, r0
 8003a7e:	701a      	strb	r2, [r3, #0]
    hi2c->XferCount--;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a84:	b29b      	uxth	r3, r3
 8003a86:	3b01      	subs	r3, #1
 8003a88:	b29a      	uxth	r2, r3
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  return HAL_OK;
 8003a8e:	2300      	movs	r3, #0
}
 8003a90:	4618      	mov	r0, r3
 8003a92:	370c      	adds	r7, #12
 8003a94:	46bd      	mov	sp, r7
 8003a96:	bc80      	pop	{r7}
 8003a98:	4770      	bx	lr

08003a9a <I2C_Slave_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c)
{
 8003a9a:	b580      	push	{r7, lr}
 8003a9c:	b084      	sub	sp, #16
 8003a9e:	af00      	add	r7, sp, #0
 8003aa0:	6078      	str	r0, [r7, #4]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8003aa2:	2300      	movs	r3, #0
 8003aa4:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode = 0U;
 8003aa6:	2300      	movs	r3, #0
 8003aa8:	81bb      	strh	r3, [r7, #12]

  /* Transfer Direction requested by Master */
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TRA) == RESET)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	699b      	ldr	r3, [r3, #24]
 8003ab0:	f003 0304 	and.w	r3, r3, #4
 8003ab4:	2b04      	cmp	r3, #4
 8003ab6:	d001      	beq.n	8003abc <I2C_Slave_ADDR+0x22>
  {
    TransferDirection = I2C_DIRECTION_TRANSMIT;
 8003ab8:	2301      	movs	r3, #1
 8003aba:	73fb      	strb	r3, [r7, #15]
  }
  
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_DUALF) == RESET)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	699b      	ldr	r3, [r3, #24]
 8003ac2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ac6:	2b80      	cmp	r3, #128	; 0x80
 8003ac8:	d003      	beq.n	8003ad2 <I2C_Slave_ADDR+0x38>
  {
    SlaveAddrCode = hi2c->Init.OwnAddress1;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	68db      	ldr	r3, [r3, #12]
 8003ace:	81bb      	strh	r3, [r7, #12]
 8003ad0:	e002      	b.n	8003ad8 <I2C_Slave_ADDR+0x3e>
  }
  else
  {
    SlaveAddrCode = hi2c->Init.OwnAddress2;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	699b      	ldr	r3, [r3, #24]
 8003ad6:	81bb      	strh	r3, [r7, #12]
  }

  /* Call Slave Addr callback */
  HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8003ad8:	89ba      	ldrh	r2, [r7, #12]
 8003ada:	7bfb      	ldrb	r3, [r7, #15]
 8003adc:	4619      	mov	r1, r3
 8003ade:	6878      	ldr	r0, [r7, #4]
 8003ae0:	f7ff fa32 	bl	8002f48 <HAL_I2C_AddrCallback>

  return HAL_OK;
 8003ae4:	2300      	movs	r3, #0
}
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	3710      	adds	r7, #16
 8003aea:	46bd      	mov	sp, r7
 8003aec:	bd80      	pop	{r7, pc}
	...

08003af0 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8003af0:	b580      	push	{r7, lr}
 8003af2:	b084      	sub	sp, #16
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentState = hi2c->State;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003afe:	b2db      	uxtb	r3, r3
 8003b00:	60fb      	str	r3, [r7, #12]
  
  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	685a      	ldr	r2, [r3, #4]
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003b10:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8003b12:	2300      	movs	r3, #0
 8003b14:	60bb      	str	r3, [r7, #8]
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	695b      	ldr	r3, [r3, #20]
 8003b1c:	60bb      	str	r3, [r7, #8]
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	681a      	ldr	r2, [r3, #0]
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f042 0201 	orr.w	r2, r2, #1
 8003b2c:	601a      	str	r2, [r3, #0]
 8003b2e:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	681a      	ldr	r2, [r3, #0]
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b3e:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	685b      	ldr	r3, [r3, #4]
 8003b46:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003b4a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003b4e:	d11a      	bne.n	8003b86 <I2C_Slave_STOPF+0x96>
  {
    if((hi2c->State == HAL_I2C_STATE_BUSY_RX) || (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b56:	b2db      	uxtb	r3, r3
 8003b58:	2b22      	cmp	r3, #34	; 0x22
 8003b5a:	d005      	beq.n	8003b68 <I2C_Slave_STOPF+0x78>
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b62:	b2db      	uxtb	r3, r3
 8003b64:	2b2a      	cmp	r3, #42	; 0x2a
 8003b66:	d107      	bne.n	8003b78 <I2C_Slave_STOPF+0x88>
    {
      hi2c->XferCount = __HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	685b      	ldr	r3, [r3, #4]
 8003b70:	b29a      	uxth	r2, r3
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003b76:	e006      	b.n	8003b86 <I2C_Slave_STOPF+0x96>
    }
    else
    {
      hi2c->XferCount = __HAL_DMA_GET_COUNTER(hi2c->hdmatx);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	685b      	ldr	r3, [r3, #4]
 8003b80:	b29a      	uxth	r2, r3
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if(hi2c->XferCount != 0U)
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b8a:	b29b      	uxth	r3, r3
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d035      	beq.n	8003bfc <I2C_Slave_STOPF+0x10c>
  {
    /* Store Last receive data if any */
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	695b      	ldr	r3, [r3, #20]
 8003b96:	f003 0304 	and.w	r3, r3, #4
 8003b9a:	2b04      	cmp	r3, #4
 8003b9c:	d110      	bne.n	8003bc0 <I2C_Slave_STOPF+0xd0>
    {
      /* Read data from DR */
      (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	6918      	ldr	r0, [r3, #16]
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ba8:	1c59      	adds	r1, r3, #1
 8003baa:	687a      	ldr	r2, [r7, #4]
 8003bac:	6251      	str	r1, [r2, #36]	; 0x24
 8003bae:	b2c2      	uxtb	r2, r0
 8003bb0:	701a      	strb	r2, [r3, #0]
      hi2c->XferCount--;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bb6:	b29b      	uxth	r3, r3
 8003bb8:	3b01      	subs	r3, #1
 8003bba:	b29a      	uxth	r2, r3
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	695b      	ldr	r3, [r3, #20]
 8003bc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bca:	2b40      	cmp	r3, #64	; 0x40
 8003bcc:	d110      	bne.n	8003bf0 <I2C_Slave_STOPF+0x100>
    {
      /* Read data from DR */
      (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	6918      	ldr	r0, [r3, #16]
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bd8:	1c59      	adds	r1, r3, #1
 8003bda:	687a      	ldr	r2, [r7, #4]
 8003bdc:	6251      	str	r1, [r2, #36]	; 0x24
 8003bde:	b2c2      	uxtb	r2, r0
 8003be0:	701a      	strb	r2, [r3, #0]
      hi2c->XferCount--;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003be6:	b29b      	uxth	r3, r3
 8003be8:	3b01      	subs	r3, #1
 8003bea:	b29a      	uxth	r2, r3
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bf4:	f043 0204 	orr.w	r2, r3, #4
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	641a      	str	r2, [r3, #64]	; 0x40
  }

  if(hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d003      	beq.n	8003c0c <I2C_Slave_STOPF+0x11c>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8003c04:	6878      	ldr	r0, [r7, #4]
 8003c06:	f000 f8ab 	bl	8003d60 <I2C_ITError>
 8003c0a:	e02f      	b.n	8003c6c <I2C_Slave_STOPF+0x17c>
  }
  else
  {
    if((CurrentState == HAL_I2C_STATE_LISTEN ) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN) || \
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	2b28      	cmp	r3, #40	; 0x28
 8003c10:	d005      	beq.n	8003c1e <I2C_Slave_STOPF+0x12e>
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	2b2a      	cmp	r3, #42	; 0x2a
 8003c16:	d002      	beq.n	8003c1e <I2C_Slave_STOPF+0x12e>
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	2b29      	cmp	r3, #41	; 0x29
 8003c1c:	d111      	bne.n	8003c42 <I2C_Slave_STOPF+0x152>
       (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
    {
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	4a15      	ldr	r2, [pc, #84]	; (8003c78 <I2C_Slave_STOPF+0x188>)
 8003c22:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2200      	movs	r2, #0
 8003c28:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	2220      	movs	r2, #32
 8003c2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	2200      	movs	r2, #0
 8003c36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
      HAL_I2C_ListenCpltCallback(hi2c);
 8003c3a:	6878      	ldr	r0, [r7, #4]
 8003c3c:	f7ff f991 	bl	8002f62 <HAL_I2C_ListenCpltCallback>
 8003c40:	e014      	b.n	8003c6c <I2C_Slave_STOPF+0x17c>
    }
    else
    {
      if((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c46:	2b22      	cmp	r3, #34	; 0x22
 8003c48:	d002      	beq.n	8003c50 <I2C_Slave_STOPF+0x160>
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	2b22      	cmp	r3, #34	; 0x22
 8003c4e:	d10d      	bne.n	8003c6c <I2C_Slave_STOPF+0x17c>
      {
        hi2c->PreviousState = I2C_STATE_NONE;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2200      	movs	r2, #0
 8003c54:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	2220      	movs	r2, #32
 8003c5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	2200      	movs	r2, #0
 8003c62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003c66:	6878      	ldr	r0, [r7, #4]
 8003c68:	f7ff f965 	bl	8002f36 <HAL_I2C_SlaveRxCpltCallback>
      }
    }
  }
  return HAL_OK;
 8003c6c:	2300      	movs	r3, #0
}
 8003c6e:	4618      	mov	r0, r3
 8003c70:	3710      	adds	r7, #16
 8003c72:	46bd      	mov	sp, r7
 8003c74:	bd80      	pop	{r7, pc}
 8003c76:	bf00      	nop
 8003c78:	ffff0000 	.word	0xffff0000

08003c7c <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8003c7c:	b580      	push	{r7, lr}
 8003c7e:	b084      	sub	sp, #16
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentState       = hi2c->State;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c8a:	b2db      	uxtb	r3, r3
 8003c8c:	60fb      	str	r3, [r7, #12]
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c92:	60bb      	str	r3, [r7, #8]

  if(((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8003c94:	68bb      	ldr	r3, [r7, #8]
 8003c96:	2b04      	cmp	r3, #4
 8003c98:	d002      	beq.n	8003ca0 <I2C_Slave_AF+0x24>
 8003c9a:	68bb      	ldr	r3, [r7, #8]
 8003c9c:	2b08      	cmp	r3, #8
 8003c9e:	d129      	bne.n	8003cf4 <I2C_Slave_AF+0x78>
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	2b28      	cmp	r3, #40	; 0x28
 8003ca4:	d126      	bne.n	8003cf4 <I2C_Slave_AF+0x78>
          (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	4a2c      	ldr	r2, [pc, #176]	; (8003d5c <I2C_Slave_AF+0xe0>)
 8003caa:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	685a      	ldr	r2, [r3, #4]
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003cba:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003cc4:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	681a      	ldr	r2, [r3, #0]
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003cd4:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	2200      	movs	r2, #0
 8003cda:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_READY;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	2220      	movs	r2, #32
 8003ce0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	2200      	movs	r2, #0
 8003ce8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      
    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    HAL_I2C_ListenCpltCallback(hi2c);
 8003cec:	6878      	ldr	r0, [r7, #4]
 8003cee:	f7ff f938 	bl	8002f62 <HAL_I2C_ListenCpltCallback>
 8003cf2:	e02e      	b.n	8003d52 <I2C_Slave_AF+0xd6>
  }
  else if(CurrentState == HAL_I2C_STATE_BUSY_TX)
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	2b21      	cmp	r3, #33	; 0x21
 8003cf8:	d126      	bne.n	8003d48 <I2C_Slave_AF+0xcc>
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	4a17      	ldr	r2, [pc, #92]	; (8003d5c <I2C_Slave_AF+0xe0>)
 8003cfe:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	2221      	movs	r2, #33	; 0x21
 8003d04:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_READY;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	2220      	movs	r2, #32
 8003d0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	2200      	movs	r2, #0
 8003d12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	685a      	ldr	r2, [r3, #4]
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003d24:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003d2e:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	681a      	ldr	r2, [r3, #0]
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d3e:	601a      	str	r2, [r3, #0]

    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003d40:	6878      	ldr	r0, [r7, #4]
 8003d42:	f7ff f8ef 	bl	8002f24 <HAL_I2C_SlaveTxCpltCallback>
 8003d46:	e004      	b.n	8003d52 <I2C_Slave_AF+0xd6>
  }
  else
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003d50:	615a      	str	r2, [r3, #20]
  }
  
  return HAL_OK;
 8003d52:	2300      	movs	r3, #0
}
 8003d54:	4618      	mov	r0, r3
 8003d56:	3710      	adds	r7, #16
 8003d58:	46bd      	mov	sp, r7
 8003d5a:	bd80      	pop	{r7, pc}
 8003d5c:	ffff0000 	.word	0xffff0000

08003d60 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8003d60:	b580      	push	{r7, lr}
 8003d62:	b084      	sub	sp, #16
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentState = hi2c->State;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d6e:	b2db      	uxtb	r3, r3
 8003d70:	60fb      	str	r3, [r7, #12]

  if((CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	2b29      	cmp	r3, #41	; 0x29
 8003d76:	d002      	beq.n	8003d7e <I2C_ITError+0x1e>
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	2b2a      	cmp	r3, #42	; 0x2a
 8003d7c:	d107      	bne.n	8003d8e <I2C_ITError+0x2e>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	2200      	movs	r2, #0
 8003d82:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	2228      	movs	r2, #40	; 0x28
 8003d88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003d8c:	e018      	b.n	8003dc0 <I2C_ITError+0x60>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if((hi2c->State != HAL_I2C_STATE_ABORT) && ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) != I2C_CR2_DMAEN))
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d94:	b2db      	uxtb	r3, r3
 8003d96:	2b60      	cmp	r3, #96	; 0x60
 8003d98:	d00b      	beq.n	8003db2 <I2C_ITError+0x52>
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	685b      	ldr	r3, [r3, #4]
 8003da0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003da4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003da8:	d003      	beq.n	8003db2 <I2C_ITError+0x52>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	2220      	movs	r2, #32
 8003dae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	2200      	movs	r2, #0
 8003db6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	2200      	movs	r2, #0
 8003dbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  }

  /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
  hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	681a      	ldr	r2, [r3, #0]
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003dce:	601a      	str	r2, [r3, #0]

  /* Abort DMA transfer */
  if((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	685b      	ldr	r3, [r3, #4]
 8003dd6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003dda:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003dde:	d15f      	bne.n	8003ea0 <I2C_ITError+0x140>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	685a      	ldr	r2, [r3, #4]
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003dee:	605a      	str	r2, [r3, #4]

    if(hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003df4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003df8:	2b01      	cmp	r3, #1
 8003dfa:	d020      	beq.n	8003e3e <I2C_ITError+0xde>
    {
      /* Set the DMA Abort callback : 
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e00:	4a57      	ldr	r2, [pc, #348]	; (8003f60 <I2C_ITError+0x200>)
 8003e02:	635a      	str	r2, [r3, #52]	; 0x34

      if(HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e08:	4618      	mov	r0, r3
 8003e0a:	f7fe f82d 	bl	8001e68 <HAL_DMA_Abort_IT>
 8003e0e:	4603      	mov	r3, r0
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	f000 8083 	beq.w	8003f1c <I2C_ITError+0x1bc>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	681a      	ldr	r2, [r3, #0]
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f022 0201 	bic.w	r2, r2, #1
 8003e24:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	2220      	movs	r2, #32
 8003e2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e34:	687a      	ldr	r2, [r7, #4]
 8003e36:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003e38:	4610      	mov	r0, r2
 8003e3a:	4798      	blx	r3
 8003e3c:	e06e      	b.n	8003f1c <I2C_ITError+0x1bc>
    }
    else
    {
      /* Set the DMA Abort callback : 
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e42:	4a47      	ldr	r2, [pc, #284]	; (8003f60 <I2C_ITError+0x200>)
 8003e44:	635a      	str	r2, [r3, #52]	; 0x34

      if(HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	f7fe f80c 	bl	8001e68 <HAL_DMA_Abort_IT>
 8003e50:	4603      	mov	r3, r0
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d062      	beq.n	8003f1c <I2C_ITError+0x1bc>
      {
        /* Store Last receive data if any */
        if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	695b      	ldr	r3, [r3, #20]
 8003e5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e60:	2b40      	cmp	r3, #64	; 0x40
 8003e62:	d109      	bne.n	8003e78 <I2C_ITError+0x118>
        {
          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	6918      	ldr	r0, [r3, #16]
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e6e:	1c59      	adds	r1, r3, #1
 8003e70:	687a      	ldr	r2, [r7, #4]
 8003e72:	6251      	str	r1, [r2, #36]	; 0x24
 8003e74:	b2c2      	uxtb	r2, r0
 8003e76:	701a      	strb	r2, [r3, #0]
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	681a      	ldr	r2, [r3, #0]
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f022 0201 	bic.w	r2, r2, #1
 8003e86:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	2220      	movs	r2, #32
 8003e8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e96:	687a      	ldr	r2, [r7, #4]
 8003e98:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003e9a:	4610      	mov	r0, r2
 8003e9c:	4798      	blx	r3
 8003e9e:	e03d      	b.n	8003f1c <I2C_ITError+0x1bc>
      }
    }
  }
  else if(hi2c->State == HAL_I2C_STATE_ABORT)
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ea6:	b2db      	uxtb	r3, r3
 8003ea8:	2b60      	cmp	r3, #96	; 0x60
 8003eaa:	d123      	bne.n	8003ef4 <I2C_ITError+0x194>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2220      	movs	r2, #32
 8003eb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	695b      	ldr	r3, [r3, #20]
 8003ec0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ec4:	2b40      	cmp	r3, #64	; 0x40
 8003ec6:	d109      	bne.n	8003edc <I2C_ITError+0x17c>
    {
      /* Read data from DR */
      (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	6918      	ldr	r0, [r3, #16]
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ed2:	1c59      	adds	r1, r3, #1
 8003ed4:	687a      	ldr	r2, [r7, #4]
 8003ed6:	6251      	str	r1, [r2, #36]	; 0x24
 8003ed8:	b2c2      	uxtb	r2, r0
 8003eda:	701a      	strb	r2, [r3, #0]
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	681a      	ldr	r2, [r3, #0]
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f022 0201 	bic.w	r2, r2, #1
 8003eea:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
    HAL_I2C_AbortCpltCallback(hi2c);
 8003eec:	6878      	ldr	r0, [r7, #4]
 8003eee:	f7ff f85c 	bl	8002faa <HAL_I2C_AbortCpltCallback>
 8003ef2:	e013      	b.n	8003f1c <I2C_ITError+0x1bc>
  }
  else
  {
    /* Store Last receive data if any */
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	695b      	ldr	r3, [r3, #20]
 8003efa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003efe:	2b40      	cmp	r3, #64	; 0x40
 8003f00:	d109      	bne.n	8003f16 <I2C_ITError+0x1b6>
    {
      /* Read data from DR */
      (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	6918      	ldr	r0, [r3, #16]
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f0c:	1c59      	adds	r1, r3, #1
 8003f0e:	687a      	ldr	r2, [r7, #4]
 8003f10:	6251      	str	r1, [r2, #36]	; 0x24
 8003f12:	b2c2      	uxtb	r2, r0
 8003f14:	701a      	strb	r2, [r3, #0]
    }

    /* Call user error callback */
    HAL_I2C_ErrorCallback(hi2c);
 8003f16:	6878      	ldr	r0, [r7, #4]
 8003f18:	f7ff f83e 	bl	8002f98 <HAL_I2C_ErrorCallback>
  }
  /* STOP Flag is not set after a NACK reception */
  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  if((hi2c->State == HAL_I2C_STATE_LISTEN) && ((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF))
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f22:	b2db      	uxtb	r3, r3
 8003f24:	2b28      	cmp	r3, #40	; 0x28
 8003f26:	d116      	bne.n	8003f56 <I2C_ITError+0x1f6>
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f2c:	f003 0304 	and.w	r3, r3, #4
 8003f30:	2b04      	cmp	r3, #4
 8003f32:	d110      	bne.n	8003f56 <I2C_ITError+0x1f6>
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	4a0b      	ldr	r2, [pc, #44]	; (8003f64 <I2C_ITError+0x204>)
 8003f38:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_READY;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	2220      	movs	r2, #32
 8003f44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	2200      	movs	r2, #0
 8003f4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    
    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    HAL_I2C_ListenCpltCallback(hi2c);
 8003f50:	6878      	ldr	r0, [r7, #4]
 8003f52:	f7ff f806 	bl	8002f62 <HAL_I2C_ListenCpltCallback>
  }
}
 8003f56:	bf00      	nop
 8003f58:	3710      	adds	r7, #16
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	bd80      	pop	{r7, pc}
 8003f5e:	bf00      	nop
 8003f60:	080041fd 	.word	0x080041fd
 8003f64:	ffff0000 	.word	0xffff0000

08003f68 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003f68:	b580      	push	{r7, lr}
 8003f6a:	b088      	sub	sp, #32
 8003f6c:	af02      	add	r7, sp, #8
 8003f6e:	60f8      	str	r0, [r7, #12]
 8003f70:	607a      	str	r2, [r7, #4]
 8003f72:	603b      	str	r3, [r7, #0]
 8003f74:	460b      	mov	r3, r1
 8003f76:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f7c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003f7e:	697b      	ldr	r3, [r7, #20]
 8003f80:	2b04      	cmp	r3, #4
 8003f82:	d006      	beq.n	8003f92 <I2C_MasterRequestWrite+0x2a>
 8003f84:	697b      	ldr	r3, [r7, #20]
 8003f86:	2b01      	cmp	r3, #1
 8003f88:	d003      	beq.n	8003f92 <I2C_MasterRequestWrite+0x2a>
 8003f8a:	697b      	ldr	r3, [r7, #20]
 8003f8c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003f90:	d108      	bne.n	8003fa4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    hi2c->Instance->CR1 |= I2C_CR1_START;
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	681a      	ldr	r2, [r3, #0]
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003fa0:	601a      	str	r2, [r3, #0]
 8003fa2:	e00b      	b.n	8003fbc <I2C_MasterRequestWrite+0x54>
  }
  else if(hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fa8:	2b12      	cmp	r3, #18
 8003faa:	d107      	bne.n	8003fbc <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    hi2c->Instance->CR1 |= I2C_CR1_START;
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	681a      	ldr	r2, [r3, #0]
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003fba:	601a      	str	r2, [r3, #0]
  }

  /* Wait until SB flag is set */
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003fbc:	683b      	ldr	r3, [r7, #0]
 8003fbe:	9300      	str	r3, [sp, #0]
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	2200      	movs	r2, #0
 8003fc4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003fc8:	68f8      	ldr	r0, [r7, #12]
 8003fca:	f000 f965 	bl	8004298 <I2C_WaitOnFlagUntilTimeout>
 8003fce:	4603      	mov	r3, r0
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d001      	beq.n	8003fd8 <I2C_MasterRequestWrite+0x70>
  {
    return HAL_TIMEOUT;
 8003fd4:	2303      	movs	r3, #3
 8003fd6:	e041      	b.n	800405c <I2C_MasterRequestWrite+0xf4>
  }

  if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	691b      	ldr	r3, [r3, #16]
 8003fdc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003fe0:	d108      	bne.n	8003ff4 <I2C_MasterRequestWrite+0x8c>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003fe2:	897b      	ldrh	r3, [r7, #10]
 8003fe4:	b2db      	uxtb	r3, r3
 8003fe6:	461a      	mov	r2, r3
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003ff0:	611a      	str	r2, [r3, #16]
 8003ff2:	e021      	b.n	8004038 <I2C_MasterRequestWrite+0xd0>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003ff4:	897b      	ldrh	r3, [r7, #10]
 8003ff6:	11db      	asrs	r3, r3, #7
 8003ff8:	b2db      	uxtb	r3, r3
 8003ffa:	f003 0306 	and.w	r3, r3, #6
 8003ffe:	b2db      	uxtb	r3, r3
 8004000:	f063 030f 	orn	r3, r3, #15
 8004004:	b2da      	uxtb	r2, r3
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800400c:	683b      	ldr	r3, [r7, #0]
 800400e:	687a      	ldr	r2, [r7, #4]
 8004010:	4914      	ldr	r1, [pc, #80]	; (8004064 <I2C_MasterRequestWrite+0xfc>)
 8004012:	68f8      	ldr	r0, [r7, #12]
 8004014:	f000 f991 	bl	800433a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004018:	4603      	mov	r3, r0
 800401a:	2b00      	cmp	r3, #0
 800401c:	d007      	beq.n	800402e <I2C_MasterRequestWrite+0xc6>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004022:	2b04      	cmp	r3, #4
 8004024:	d101      	bne.n	800402a <I2C_MasterRequestWrite+0xc2>
      {
        return HAL_ERROR;
 8004026:	2301      	movs	r3, #1
 8004028:	e018      	b.n	800405c <I2C_MasterRequestWrite+0xf4>
      }
      else
      {
        return HAL_TIMEOUT;
 800402a:	2303      	movs	r3, #3
 800402c:	e016      	b.n	800405c <I2C_MasterRequestWrite+0xf4>
      }
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800402e:	897b      	ldrh	r3, [r7, #10]
 8004030:	b2da      	uxtb	r2, r3
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004038:	683b      	ldr	r3, [r7, #0]
 800403a:	687a      	ldr	r2, [r7, #4]
 800403c:	490a      	ldr	r1, [pc, #40]	; (8004068 <I2C_MasterRequestWrite+0x100>)
 800403e:	68f8      	ldr	r0, [r7, #12]
 8004040:	f000 f97b 	bl	800433a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004044:	4603      	mov	r3, r0
 8004046:	2b00      	cmp	r3, #0
 8004048:	d007      	beq.n	800405a <I2C_MasterRequestWrite+0xf2>
  {
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800404e:	2b04      	cmp	r3, #4
 8004050:	d101      	bne.n	8004056 <I2C_MasterRequestWrite+0xee>
    {
      return HAL_ERROR;
 8004052:	2301      	movs	r3, #1
 8004054:	e002      	b.n	800405c <I2C_MasterRequestWrite+0xf4>
    }
    else
    {
      return HAL_TIMEOUT;
 8004056:	2303      	movs	r3, #3
 8004058:	e000      	b.n	800405c <I2C_MasterRequestWrite+0xf4>
    }
  }

  return HAL_OK;
 800405a:	2300      	movs	r3, #0
}
 800405c:	4618      	mov	r0, r3
 800405e:	3718      	adds	r7, #24
 8004060:	46bd      	mov	sp, r7
 8004062:	bd80      	pop	{r7, pc}
 8004064:	00010008 	.word	0x00010008
 8004068:	00010002 	.word	0x00010002

0800406c <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800406c:	b580      	push	{r7, lr}
 800406e:	b088      	sub	sp, #32
 8004070:	af02      	add	r7, sp, #8
 8004072:	60f8      	str	r0, [r7, #12]
 8004074:	607a      	str	r2, [r7, #4]
 8004076:	603b      	str	r3, [r7, #0]
 8004078:	460b      	mov	r3, r1
 800407a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004080:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  hi2c->Instance->CR1 |= I2C_CR1_ACK;
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	681a      	ldr	r2, [r3, #0]
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004090:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004092:	697b      	ldr	r3, [r7, #20]
 8004094:	2b04      	cmp	r3, #4
 8004096:	d006      	beq.n	80040a6 <I2C_MasterRequestRead+0x3a>
 8004098:	697b      	ldr	r3, [r7, #20]
 800409a:	2b01      	cmp	r3, #1
 800409c:	d003      	beq.n	80040a6 <I2C_MasterRequestRead+0x3a>
 800409e:	697b      	ldr	r3, [r7, #20]
 80040a0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80040a4:	d108      	bne.n	80040b8 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    hi2c->Instance->CR1 |= I2C_CR1_START;
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	681a      	ldr	r2, [r3, #0]
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80040b4:	601a      	str	r2, [r3, #0]
 80040b6:	e00b      	b.n	80040d0 <I2C_MasterRequestRead+0x64>
  }
  else if(hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040bc:	2b11      	cmp	r3, #17
 80040be:	d107      	bne.n	80040d0 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    hi2c->Instance->CR1 |= I2C_CR1_START;
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	681a      	ldr	r2, [r3, #0]
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80040ce:	601a      	str	r2, [r3, #0]
  }

  /* Wait until SB flag is set */
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80040d0:	683b      	ldr	r3, [r7, #0]
 80040d2:	9300      	str	r3, [sp, #0]
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	2200      	movs	r2, #0
 80040d8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80040dc:	68f8      	ldr	r0, [r7, #12]
 80040de:	f000 f8db 	bl	8004298 <I2C_WaitOnFlagUntilTimeout>
 80040e2:	4603      	mov	r3, r0
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d001      	beq.n	80040ec <I2C_MasterRequestRead+0x80>
  {
    return HAL_TIMEOUT;
 80040e8:	2303      	movs	r3, #3
 80040ea:	e07f      	b.n	80041ec <I2C_MasterRequestRead+0x180>
  }

  if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	691b      	ldr	r3, [r3, #16]
 80040f0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80040f4:	d108      	bne.n	8004108 <I2C_MasterRequestRead+0x9c>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80040f6:	897b      	ldrh	r3, [r7, #10]
 80040f8:	b2db      	uxtb	r3, r3
 80040fa:	f043 0301 	orr.w	r3, r3, #1
 80040fe:	b2da      	uxtb	r2, r3
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	611a      	str	r2, [r3, #16]
 8004106:	e05f      	b.n	80041c8 <I2C_MasterRequestRead+0x15c>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004108:	897b      	ldrh	r3, [r7, #10]
 800410a:	11db      	asrs	r3, r3, #7
 800410c:	b2db      	uxtb	r3, r3
 800410e:	f003 0306 	and.w	r3, r3, #6
 8004112:	b2db      	uxtb	r3, r3
 8004114:	f063 030f 	orn	r3, r3, #15
 8004118:	b2da      	uxtb	r2, r3
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004120:	683b      	ldr	r3, [r7, #0]
 8004122:	687a      	ldr	r2, [r7, #4]
 8004124:	4933      	ldr	r1, [pc, #204]	; (80041f4 <I2C_MasterRequestRead+0x188>)
 8004126:	68f8      	ldr	r0, [r7, #12]
 8004128:	f000 f907 	bl	800433a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800412c:	4603      	mov	r3, r0
 800412e:	2b00      	cmp	r3, #0
 8004130:	d007      	beq.n	8004142 <I2C_MasterRequestRead+0xd6>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004136:	2b04      	cmp	r3, #4
 8004138:	d101      	bne.n	800413e <I2C_MasterRequestRead+0xd2>
      {
        return HAL_ERROR;
 800413a:	2301      	movs	r3, #1
 800413c:	e056      	b.n	80041ec <I2C_MasterRequestRead+0x180>
      }
      else
      {
        return HAL_TIMEOUT;
 800413e:	2303      	movs	r3, #3
 8004140:	e054      	b.n	80041ec <I2C_MasterRequestRead+0x180>
      }
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004142:	897b      	ldrh	r3, [r7, #10]
 8004144:	b2da      	uxtb	r2, r3
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800414c:	683b      	ldr	r3, [r7, #0]
 800414e:	687a      	ldr	r2, [r7, #4]
 8004150:	4929      	ldr	r1, [pc, #164]	; (80041f8 <I2C_MasterRequestRead+0x18c>)
 8004152:	68f8      	ldr	r0, [r7, #12]
 8004154:	f000 f8f1 	bl	800433a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004158:	4603      	mov	r3, r0
 800415a:	2b00      	cmp	r3, #0
 800415c:	d007      	beq.n	800416e <I2C_MasterRequestRead+0x102>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004162:	2b04      	cmp	r3, #4
 8004164:	d101      	bne.n	800416a <I2C_MasterRequestRead+0xfe>
      {
        return HAL_ERROR;
 8004166:	2301      	movs	r3, #1
 8004168:	e040      	b.n	80041ec <I2C_MasterRequestRead+0x180>
      }
      else
      {
        return HAL_TIMEOUT;
 800416a:	2303      	movs	r3, #3
 800416c:	e03e      	b.n	80041ec <I2C_MasterRequestRead+0x180>
      }
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800416e:	2300      	movs	r3, #0
 8004170:	613b      	str	r3, [r7, #16]
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	695b      	ldr	r3, [r3, #20]
 8004178:	613b      	str	r3, [r7, #16]
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	699b      	ldr	r3, [r3, #24]
 8004180:	613b      	str	r3, [r7, #16]
 8004182:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    hi2c->Instance->CR1 |= I2C_CR1_START;
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	681a      	ldr	r2, [r3, #0]
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004192:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004194:	683b      	ldr	r3, [r7, #0]
 8004196:	9300      	str	r3, [sp, #0]
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	2200      	movs	r2, #0
 800419c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80041a0:	68f8      	ldr	r0, [r7, #12]
 80041a2:	f000 f879 	bl	8004298 <I2C_WaitOnFlagUntilTimeout>
 80041a6:	4603      	mov	r3, r0
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d001      	beq.n	80041b0 <I2C_MasterRequestRead+0x144>
    {
      return HAL_TIMEOUT;
 80041ac:	2303      	movs	r3, #3
 80041ae:	e01d      	b.n	80041ec <I2C_MasterRequestRead+0x180>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80041b0:	897b      	ldrh	r3, [r7, #10]
 80041b2:	11db      	asrs	r3, r3, #7
 80041b4:	b2db      	uxtb	r3, r3
 80041b6:	f003 0306 	and.w	r3, r3, #6
 80041ba:	b2db      	uxtb	r3, r3
 80041bc:	f063 030e 	orn	r3, r3, #14
 80041c0:	b2da      	uxtb	r2, r3
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80041c8:	683b      	ldr	r3, [r7, #0]
 80041ca:	687a      	ldr	r2, [r7, #4]
 80041cc:	490a      	ldr	r1, [pc, #40]	; (80041f8 <I2C_MasterRequestRead+0x18c>)
 80041ce:	68f8      	ldr	r0, [r7, #12]
 80041d0:	f000 f8b3 	bl	800433a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80041d4:	4603      	mov	r3, r0
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d007      	beq.n	80041ea <I2C_MasterRequestRead+0x17e>
  {
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041de:	2b04      	cmp	r3, #4
 80041e0:	d101      	bne.n	80041e6 <I2C_MasterRequestRead+0x17a>
    {
      return HAL_ERROR;
 80041e2:	2301      	movs	r3, #1
 80041e4:	e002      	b.n	80041ec <I2C_MasterRequestRead+0x180>
    }
    else
    {
      return HAL_TIMEOUT;
 80041e6:	2303      	movs	r3, #3
 80041e8:	e000      	b.n	80041ec <I2C_MasterRequestRead+0x180>
    }
  }

  return HAL_OK;
 80041ea:	2300      	movs	r3, #0
}
 80041ec:	4618      	mov	r0, r3
 80041ee:	3718      	adds	r7, #24
 80041f0:	46bd      	mov	sp, r7
 80041f2:	bd80      	pop	{r7, pc}
 80041f4:	00010008 	.word	0x00010008
 80041f8:	00010002 	.word	0x00010002

080041fc <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma: DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80041fc:	b580      	push	{r7, lr}
 80041fe:	b084      	sub	sp, #16
 8004200:	af00      	add	r7, sp, #0
 8004202:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef* hi2c = ( I2C_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004208:	60fb      	str	r3, [r7, #12]
  
  /* Disable Acknowledge */
  hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	681a      	ldr	r2, [r3, #0]
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004218:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	2200      	movs	r2, #0
 800421e:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  hi2c->hdmatx->XferAbortCallback = NULL;
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004224:	2200      	movs	r2, #0
 8004226:	635a      	str	r2, [r3, #52]	; 0x34
  hi2c->hdmarx->XferAbortCallback = NULL;
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800422c:	2200      	movs	r2, #0
 800422e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check if come from abort from user */
  if(hi2c->State == HAL_I2C_STATE_ABORT)
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004236:	b2db      	uxtb	r3, r3
 8004238:	2b60      	cmp	r3, #96	; 0x60
 800423a:	d116      	bne.n	800426a <I2C_DMAAbort+0x6e>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	2220      	movs	r2, #32
 8004240:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	2200      	movs	r2, #0
 8004248:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	2200      	movs	r2, #0
 8004250:	641a      	str	r2, [r3, #64]	; 0x40

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	681a      	ldr	r2, [r3, #0]
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f022 0201 	bic.w	r2, r2, #1
 8004260:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
    HAL_I2C_AbortCpltCallback(hi2c);
 8004262:	68f8      	ldr	r0, [r7, #12]
 8004264:	f7fe fea1 	bl	8002faa <HAL_I2C_AbortCpltCallback>
    __HAL_I2C_DISABLE(hi2c);

    /* Call the corresponding callback to inform upper layer of End of Transfer */
    HAL_I2C_ErrorCallback(hi2c);
  }
}
 8004268:	e012      	b.n	8004290 <I2C_DMAAbort+0x94>
    hi2c->State = HAL_I2C_STATE_READY;
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	2220      	movs	r2, #32
 800426e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	2200      	movs	r2, #0
 8004276:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE(hi2c);
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	681a      	ldr	r2, [r3, #0]
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f022 0201 	bic.w	r2, r2, #1
 8004288:	601a      	str	r2, [r3, #0]
    HAL_I2C_ErrorCallback(hi2c);
 800428a:	68f8      	ldr	r0, [r7, #12]
 800428c:	f7fe fe84 	bl	8002f98 <HAL_I2C_ErrorCallback>
}
 8004290:	bf00      	nop
 8004292:	3710      	adds	r7, #16
 8004294:	46bd      	mov	sp, r7
 8004296:	bd80      	pop	{r7, pc}

08004298 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004298:	b580      	push	{r7, lr}
 800429a:	b084      	sub	sp, #16
 800429c:	af00      	add	r7, sp, #0
 800429e:	60f8      	str	r0, [r7, #12]
 80042a0:	60b9      	str	r1, [r7, #8]
 80042a2:	603b      	str	r3, [r7, #0]
 80042a4:	4613      	mov	r3, r2
 80042a6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while((__HAL_I2C_GET_FLAG(hi2c, Flag) ? SET : RESET) == Status) 
 80042a8:	e01f      	b.n	80042ea <I2C_WaitOnFlagUntilTimeout+0x52>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 80042aa:	683b      	ldr	r3, [r7, #0]
 80042ac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80042b0:	d01b      	beq.n	80042ea <I2C_WaitOnFlagUntilTimeout+0x52>
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 80042b2:	683b      	ldr	r3, [r7, #0]
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d007      	beq.n	80042c8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80042b8:	f7fc fe62 	bl	8000f80 <HAL_GetTick>
 80042bc:	4602      	mov	r2, r0
 80042be:	69bb      	ldr	r3, [r7, #24]
 80042c0:	1ad3      	subs	r3, r2, r3
 80042c2:	683a      	ldr	r2, [r7, #0]
 80042c4:	429a      	cmp	r2, r3
 80042c6:	d210      	bcs.n	80042ea <I2C_WaitOnFlagUntilTimeout+0x52>
      {
        hi2c->PreviousState = I2C_STATE_NONE;
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	2200      	movs	r2, #0
 80042cc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State= HAL_I2C_STATE_READY;
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	2220      	movs	r2, #32
 80042d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	2200      	movs	r2, #0
 80042da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	2200      	movs	r2, #0
 80042e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_TIMEOUT;
 80042e6:	2303      	movs	r3, #3
 80042e8:	e023      	b.n	8004332 <I2C_WaitOnFlagUntilTimeout+0x9a>
  while((__HAL_I2C_GET_FLAG(hi2c, Flag) ? SET : RESET) == Status) 
 80042ea:	68bb      	ldr	r3, [r7, #8]
 80042ec:	0c1b      	lsrs	r3, r3, #16
 80042ee:	b2db      	uxtb	r3, r3
 80042f0:	2b01      	cmp	r3, #1
 80042f2:	d10d      	bne.n	8004310 <I2C_WaitOnFlagUntilTimeout+0x78>
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	695b      	ldr	r3, [r3, #20]
 80042fa:	43da      	mvns	r2, r3
 80042fc:	68bb      	ldr	r3, [r7, #8]
 80042fe:	4013      	ands	r3, r2
 8004300:	b29b      	uxth	r3, r3
 8004302:	2b00      	cmp	r3, #0
 8004304:	bf0c      	ite	eq
 8004306:	2301      	moveq	r3, #1
 8004308:	2300      	movne	r3, #0
 800430a:	b2db      	uxtb	r3, r3
 800430c:	461a      	mov	r2, r3
 800430e:	e00c      	b.n	800432a <I2C_WaitOnFlagUntilTimeout+0x92>
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	699b      	ldr	r3, [r3, #24]
 8004316:	43da      	mvns	r2, r3
 8004318:	68bb      	ldr	r3, [r7, #8]
 800431a:	4013      	ands	r3, r2
 800431c:	b29b      	uxth	r3, r3
 800431e:	2b00      	cmp	r3, #0
 8004320:	bf0c      	ite	eq
 8004322:	2301      	moveq	r3, #1
 8004324:	2300      	movne	r3, #0
 8004326:	b2db      	uxtb	r3, r3
 8004328:	461a      	mov	r2, r3
 800432a:	79fb      	ldrb	r3, [r7, #7]
 800432c:	429a      	cmp	r2, r3
 800432e:	d0bc      	beq.n	80042aa <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  
  return HAL_OK;
 8004330:	2300      	movs	r3, #0
}
 8004332:	4618      	mov	r0, r3
 8004334:	3710      	adds	r7, #16
 8004336:	46bd      	mov	sp, r7
 8004338:	bd80      	pop	{r7, pc}

0800433a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800433a:	b580      	push	{r7, lr}
 800433c:	b084      	sub	sp, #16
 800433e:	af00      	add	r7, sp, #0
 8004340:	60f8      	str	r0, [r7, #12]
 8004342:	60b9      	str	r1, [r7, #8]
 8004344:	607a      	str	r2, [r7, #4]
 8004346:	603b      	str	r3, [r7, #0]
  while(__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004348:	e040      	b.n	80043cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x92>
  {
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	695b      	ldr	r3, [r3, #20]
 8004350:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004354:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004358:	d11c      	bne.n	8004394 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x5a>
    {
      /* Generate Stop */
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	681a      	ldr	r2, [r3, #0]
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004368:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004372:	615a      	str	r2, [r3, #20]

      hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	2204      	movs	r2, #4
 8004378:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->PreviousState = I2C_STATE_NONE;
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	2200      	movs	r2, #0
 800437e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State= HAL_I2C_STATE_READY;
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	2220      	movs	r2, #32
 8004384:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	2200      	movs	r2, #0
 800438c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004390:	2301      	movs	r3, #1
 8004392:	e03c      	b.n	800440e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd4>
    }

    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800439a:	d017      	beq.n	80043cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x92>
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d007      	beq.n	80043b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x78>
 80043a2:	f7fc fded 	bl	8000f80 <HAL_GetTick>
 80043a6:	4602      	mov	r2, r0
 80043a8:	683b      	ldr	r3, [r7, #0]
 80043aa:	1ad3      	subs	r3, r2, r3
 80043ac:	687a      	ldr	r2, [r7, #4]
 80043ae:	429a      	cmp	r2, r3
 80043b0:	d20c      	bcs.n	80043cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x92>
      {
        hi2c->PreviousState = I2C_STATE_NONE;
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	2200      	movs	r2, #0
 80043b6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State= HAL_I2C_STATE_READY;
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	2220      	movs	r2, #32
 80043bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	2200      	movs	r2, #0
 80043c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80043c8:	2303      	movs	r3, #3
 80043ca:	e020      	b.n	800440e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd4>
  while(__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80043cc:	68bb      	ldr	r3, [r7, #8]
 80043ce:	0c1b      	lsrs	r3, r3, #16
 80043d0:	b2db      	uxtb	r3, r3
 80043d2:	2b01      	cmp	r3, #1
 80043d4:	d10c      	bne.n	80043f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb6>
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	695b      	ldr	r3, [r3, #20]
 80043dc:	43da      	mvns	r2, r3
 80043de:	68bb      	ldr	r3, [r7, #8]
 80043e0:	4013      	ands	r3, r2
 80043e2:	b29b      	uxth	r3, r3
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	bf14      	ite	ne
 80043e8:	2301      	movne	r3, #1
 80043ea:	2300      	moveq	r3, #0
 80043ec:	b2db      	uxtb	r3, r3
 80043ee:	e00b      	b.n	8004408 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xce>
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	699b      	ldr	r3, [r3, #24]
 80043f6:	43da      	mvns	r2, r3
 80043f8:	68bb      	ldr	r3, [r7, #8]
 80043fa:	4013      	ands	r3, r2
 80043fc:	b29b      	uxth	r3, r3
 80043fe:	2b00      	cmp	r3, #0
 8004400:	bf14      	ite	ne
 8004402:	2301      	movne	r3, #1
 8004404:	2300      	moveq	r3, #0
 8004406:	b2db      	uxtb	r3, r3
 8004408:	2b00      	cmp	r3, #0
 800440a:	d19e      	bne.n	800434a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800440c:	2300      	movs	r3, #0
}
 800440e:	4618      	mov	r0, r3
 8004410:	3710      	adds	r7, #16
 8004412:	46bd      	mov	sp, r7
 8004414:	bd80      	pop	{r7, pc}

08004416 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{    
 8004416:	b580      	push	{r7, lr}
 8004418:	b084      	sub	sp, #16
 800441a:	af00      	add	r7, sp, #0
 800441c:	60f8      	str	r0, [r7, #12]
 800441e:	60b9      	str	r1, [r7, #8]
 8004420:	607a      	str	r2, [r7, #4]
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004422:	e029      	b.n	8004478 <I2C_WaitOnTXEFlagUntilTimeout+0x62>
  {
    /* Check if a NACK is detected */
    if(I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004424:	68f8      	ldr	r0, [r7, #12]
 8004426:	f000 f8ba 	bl	800459e <I2C_IsAcknowledgeFailed>
 800442a:	4603      	mov	r3, r0
 800442c:	2b00      	cmp	r3, #0
 800442e:	d001      	beq.n	8004434 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004430:	2301      	movs	r3, #1
 8004432:	e029      	b.n	8004488 <I2C_WaitOnTXEFlagUntilTimeout+0x72>
    }
		
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8004434:	68bb      	ldr	r3, [r7, #8]
 8004436:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800443a:	d01d      	beq.n	8004478 <I2C_WaitOnTXEFlagUntilTimeout+0x62>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 800443c:	68bb      	ldr	r3, [r7, #8]
 800443e:	2b00      	cmp	r3, #0
 8004440:	d007      	beq.n	8004452 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004442:	f7fc fd9d 	bl	8000f80 <HAL_GetTick>
 8004446:	4602      	mov	r2, r0
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	1ad3      	subs	r3, r2, r3
 800444c:	68ba      	ldr	r2, [r7, #8]
 800444e:	429a      	cmp	r2, r3
 8004450:	d212      	bcs.n	8004478 <I2C_WaitOnTXEFlagUntilTimeout+0x62>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004456:	f043 0220 	orr.w	r2, r3, #32
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->PreviousState = I2C_STATE_NONE;
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	2200      	movs	r2, #0
 8004462:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State= HAL_I2C_STATE_READY;
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	2220      	movs	r2, #32
 8004468:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	2200      	movs	r2, #0
 8004470:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004474:	2303      	movs	r3, #3
 8004476:	e007      	b.n	8004488 <I2C_WaitOnTXEFlagUntilTimeout+0x72>
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	695b      	ldr	r3, [r3, #20]
 800447e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004482:	2b80      	cmp	r3, #128	; 0x80
 8004484:	d1ce      	bne.n	8004424 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;      
 8004486:	2300      	movs	r3, #0
}
 8004488:	4618      	mov	r0, r3
 800448a:	3710      	adds	r7, #16
 800448c:	46bd      	mov	sp, r7
 800448e:	bd80      	pop	{r7, pc}

08004490 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{  
 8004490:	b580      	push	{r7, lr}
 8004492:	b084      	sub	sp, #16
 8004494:	af00      	add	r7, sp, #0
 8004496:	60f8      	str	r0, [r7, #12]
 8004498:	60b9      	str	r1, [r7, #8]
 800449a:	607a      	str	r2, [r7, #4]
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800449c:	e029      	b.n	80044f2 <I2C_WaitOnBTFFlagUntilTimeout+0x62>
  {
    /* Check if a NACK is detected */
    if(I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800449e:	68f8      	ldr	r0, [r7, #12]
 80044a0:	f000 f87d 	bl	800459e <I2C_IsAcknowledgeFailed>
 80044a4:	4603      	mov	r3, r0
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d001      	beq.n	80044ae <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80044aa:	2301      	movs	r3, #1
 80044ac:	e029      	b.n	8004502 <I2C_WaitOnBTFFlagUntilTimeout+0x72>
    }

    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 80044ae:	68bb      	ldr	r3, [r7, #8]
 80044b0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80044b4:	d01d      	beq.n	80044f2 <I2C_WaitOnBTFFlagUntilTimeout+0x62>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 80044b6:	68bb      	ldr	r3, [r7, #8]
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d007      	beq.n	80044cc <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80044bc:	f7fc fd60 	bl	8000f80 <HAL_GetTick>
 80044c0:	4602      	mov	r2, r0
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	1ad3      	subs	r3, r2, r3
 80044c6:	68ba      	ldr	r2, [r7, #8]
 80044c8:	429a      	cmp	r2, r3
 80044ca:	d212      	bcs.n	80044f2 <I2C_WaitOnBTFFlagUntilTimeout+0x62>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044d0:	f043 0220 	orr.w	r2, r3, #32
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->PreviousState = I2C_STATE_NONE;
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	2200      	movs	r2, #0
 80044dc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State= HAL_I2C_STATE_READY;
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	2220      	movs	r2, #32
 80044e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	2200      	movs	r2, #0
 80044ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80044ee:	2303      	movs	r3, #3
 80044f0:	e007      	b.n	8004502 <I2C_WaitOnBTFFlagUntilTimeout+0x72>
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	695b      	ldr	r3, [r3, #20]
 80044f8:	f003 0304 	and.w	r3, r3, #4
 80044fc:	2b04      	cmp	r3, #4
 80044fe:	d1ce      	bne.n	800449e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004500:	2300      	movs	r3, #0
}
 8004502:	4618      	mov	r0, r3
 8004504:	3710      	adds	r7, #16
 8004506:	46bd      	mov	sp, r7
 8004508:	bd80      	pop	{r7, pc}

0800450a <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{  
 800450a:	b580      	push	{r7, lr}
 800450c:	b084      	sub	sp, #16
 800450e:	af00      	add	r7, sp, #0
 8004510:	60f8      	str	r0, [r7, #12]
 8004512:	60b9      	str	r1, [r7, #8]
 8004514:	607a      	str	r2, [r7, #4]

  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004516:	e036      	b.n	8004586 <I2C_WaitOnRXNEFlagUntilTimeout+0x7c>
  {
    /* Check if a STOPF is detected */
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	695b      	ldr	r3, [r3, #20]
 800451e:	f003 0310 	and.w	r3, r3, #16
 8004522:	2b10      	cmp	r3, #16
 8004524:	d114      	bne.n	8004550 <I2C_WaitOnRXNEFlagUntilTimeout+0x46>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f06f 0210 	mvn.w	r2, #16
 800452e:	615a      	str	r2, [r3, #20]

      hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	2200      	movs	r2, #0
 8004534:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->PreviousState = I2C_STATE_NONE;
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	2200      	movs	r2, #0
 800453a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State= HAL_I2C_STATE_READY;
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	2220      	movs	r2, #32
 8004540:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	2200      	movs	r2, #0
 8004548:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800454c:	2301      	movs	r3, #1
 800454e:	e022      	b.n	8004596 <I2C_WaitOnRXNEFlagUntilTimeout+0x8c>
    }

    /* Check for the Timeout */
    if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8004550:	68bb      	ldr	r3, [r7, #8]
 8004552:	2b00      	cmp	r3, #0
 8004554:	d007      	beq.n	8004566 <I2C_WaitOnRXNEFlagUntilTimeout+0x5c>
 8004556:	f7fc fd13 	bl	8000f80 <HAL_GetTick>
 800455a:	4602      	mov	r2, r0
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	1ad3      	subs	r3, r2, r3
 8004560:	68ba      	ldr	r2, [r7, #8]
 8004562:	429a      	cmp	r2, r3
 8004564:	d20f      	bcs.n	8004586 <I2C_WaitOnRXNEFlagUntilTimeout+0x7c>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800456a:	f043 0220 	orr.w	r2, r3, #32
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->State= HAL_I2C_STATE_READY;
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	2220      	movs	r2, #32
 8004576:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	2200      	movs	r2, #0
 800457e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_TIMEOUT;
 8004582:	2303      	movs	r3, #3
 8004584:	e007      	b.n	8004596 <I2C_WaitOnRXNEFlagUntilTimeout+0x8c>
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	695b      	ldr	r3, [r3, #20]
 800458c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004590:	2b40      	cmp	r3, #64	; 0x40
 8004592:	d1c1      	bne.n	8004518 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004594:	2300      	movs	r3, #0
}
 8004596:	4618      	mov	r0, r3
 8004598:	3710      	adds	r7, #16
 800459a:	46bd      	mov	sp, r7
 800459c:	bd80      	pop	{r7, pc}

0800459e <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800459e:	b480      	push	{r7}
 80045a0:	b083      	sub	sp, #12
 80045a2:	af00      	add	r7, sp, #0
 80045a4:	6078      	str	r0, [r7, #4]
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	695b      	ldr	r3, [r3, #20]
 80045ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80045b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80045b4:	d114      	bne.n	80045e0 <I2C_IsAcknowledgeFailed+0x42>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80045be:	615a      	str	r2, [r3, #20]

    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	2204      	movs	r2, #4
 80045c4:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->PreviousState = I2C_STATE_NONE;
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	2200      	movs	r2, #0
 80045ca:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State= HAL_I2C_STATE_READY;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	2220      	movs	r2, #32
 80045d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	2200      	movs	r2, #0
 80045d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80045dc:	2301      	movs	r3, #1
 80045de:	e000      	b.n	80045e2 <I2C_IsAcknowledgeFailed+0x44>
  }
  return HAL_OK;
 80045e0:	2300      	movs	r3, #0
}
 80045e2:	4618      	mov	r0, r3
 80045e4:	370c      	adds	r7, #12
 80045e6:	46bd      	mov	sp, r7
 80045e8:	bc80      	pop	{r7}
 80045ea:	4770      	bx	lr

080045ec <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80045ec:	b580      	push	{r7, lr}
 80045ee:	b086      	sub	sp, #24
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0U;
 80045f4:	2300      	movs	r3, #0
 80045f6:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	f003 0301 	and.w	r3, r3, #1
 8004600:	2b00      	cmp	r3, #0
 8004602:	f000 8087 	beq.w	8004714 <HAL_RCC_OscConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
        
    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8004606:	4b92      	ldr	r3, [pc, #584]	; (8004850 <HAL_RCC_OscConfig+0x264>)
 8004608:	685b      	ldr	r3, [r3, #4]
 800460a:	f003 030c 	and.w	r3, r3, #12
 800460e:	2b04      	cmp	r3, #4
 8004610:	d00c      	beq.n	800462c <HAL_RCC_OscConfig+0x40>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004612:	4b8f      	ldr	r3, [pc, #572]	; (8004850 <HAL_RCC_OscConfig+0x264>)
 8004614:	685b      	ldr	r3, [r3, #4]
 8004616:	f003 030c 	and.w	r3, r3, #12
 800461a:	2b08      	cmp	r3, #8
 800461c:	d112      	bne.n	8004644 <HAL_RCC_OscConfig+0x58>
 800461e:	4b8c      	ldr	r3, [pc, #560]	; (8004850 <HAL_RCC_OscConfig+0x264>)
 8004620:	685b      	ldr	r3, [r3, #4]
 8004622:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004626:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800462a:	d10b      	bne.n	8004644 <HAL_RCC_OscConfig+0x58>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800462c:	4b88      	ldr	r3, [pc, #544]	; (8004850 <HAL_RCC_OscConfig+0x264>)
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004634:	2b00      	cmp	r3, #0
 8004636:	d06c      	beq.n	8004712 <HAL_RCC_OscConfig+0x126>
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	685b      	ldr	r3, [r3, #4]
 800463c:	2b00      	cmp	r3, #0
 800463e:	d168      	bne.n	8004712 <HAL_RCC_OscConfig+0x126>
      {
        return HAL_ERROR;
 8004640:	2301      	movs	r3, #1
 8004642:	e22d      	b.n	8004aa0 <HAL_RCC_OscConfig+0x4b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	685b      	ldr	r3, [r3, #4]
 8004648:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800464c:	d106      	bne.n	800465c <HAL_RCC_OscConfig+0x70>
 800464e:	4b80      	ldr	r3, [pc, #512]	; (8004850 <HAL_RCC_OscConfig+0x264>)
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	4a7f      	ldr	r2, [pc, #508]	; (8004850 <HAL_RCC_OscConfig+0x264>)
 8004654:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004658:	6013      	str	r3, [r2, #0]
 800465a:	e02e      	b.n	80046ba <HAL_RCC_OscConfig+0xce>
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	685b      	ldr	r3, [r3, #4]
 8004660:	2b00      	cmp	r3, #0
 8004662:	d10c      	bne.n	800467e <HAL_RCC_OscConfig+0x92>
 8004664:	4b7a      	ldr	r3, [pc, #488]	; (8004850 <HAL_RCC_OscConfig+0x264>)
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	4a79      	ldr	r2, [pc, #484]	; (8004850 <HAL_RCC_OscConfig+0x264>)
 800466a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800466e:	6013      	str	r3, [r2, #0]
 8004670:	4b77      	ldr	r3, [pc, #476]	; (8004850 <HAL_RCC_OscConfig+0x264>)
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	4a76      	ldr	r2, [pc, #472]	; (8004850 <HAL_RCC_OscConfig+0x264>)
 8004676:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800467a:	6013      	str	r3, [r2, #0]
 800467c:	e01d      	b.n	80046ba <HAL_RCC_OscConfig+0xce>
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	685b      	ldr	r3, [r3, #4]
 8004682:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004686:	d10c      	bne.n	80046a2 <HAL_RCC_OscConfig+0xb6>
 8004688:	4b71      	ldr	r3, [pc, #452]	; (8004850 <HAL_RCC_OscConfig+0x264>)
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	4a70      	ldr	r2, [pc, #448]	; (8004850 <HAL_RCC_OscConfig+0x264>)
 800468e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004692:	6013      	str	r3, [r2, #0]
 8004694:	4b6e      	ldr	r3, [pc, #440]	; (8004850 <HAL_RCC_OscConfig+0x264>)
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	4a6d      	ldr	r2, [pc, #436]	; (8004850 <HAL_RCC_OscConfig+0x264>)
 800469a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800469e:	6013      	str	r3, [r2, #0]
 80046a0:	e00b      	b.n	80046ba <HAL_RCC_OscConfig+0xce>
 80046a2:	4b6b      	ldr	r3, [pc, #428]	; (8004850 <HAL_RCC_OscConfig+0x264>)
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	4a6a      	ldr	r2, [pc, #424]	; (8004850 <HAL_RCC_OscConfig+0x264>)
 80046a8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80046ac:	6013      	str	r3, [r2, #0]
 80046ae:	4b68      	ldr	r3, [pc, #416]	; (8004850 <HAL_RCC_OscConfig+0x264>)
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	4a67      	ldr	r2, [pc, #412]	; (8004850 <HAL_RCC_OscConfig+0x264>)
 80046b4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80046b8:	6013      	str	r3, [r2, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	685b      	ldr	r3, [r3, #4]
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d013      	beq.n	80046ea <HAL_RCC_OscConfig+0xfe>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046c2:	f7fc fc5d 	bl	8000f80 <HAL_GetTick>
 80046c6:	6138      	str	r0, [r7, #16]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80046c8:	e008      	b.n	80046dc <HAL_RCC_OscConfig+0xf0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80046ca:	f7fc fc59 	bl	8000f80 <HAL_GetTick>
 80046ce:	4602      	mov	r2, r0
 80046d0:	693b      	ldr	r3, [r7, #16]
 80046d2:	1ad3      	subs	r3, r2, r3
 80046d4:	2b64      	cmp	r3, #100	; 0x64
 80046d6:	d901      	bls.n	80046dc <HAL_RCC_OscConfig+0xf0>
          {
            return HAL_TIMEOUT;
 80046d8:	2303      	movs	r3, #3
 80046da:	e1e1      	b.n	8004aa0 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80046dc:	4b5c      	ldr	r3, [pc, #368]	; (8004850 <HAL_RCC_OscConfig+0x264>)
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d0f0      	beq.n	80046ca <HAL_RCC_OscConfig+0xde>
 80046e8:	e014      	b.n	8004714 <HAL_RCC_OscConfig+0x128>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046ea:	f7fc fc49 	bl	8000f80 <HAL_GetTick>
 80046ee:	6138      	str	r0, [r7, #16]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80046f0:	e008      	b.n	8004704 <HAL_RCC_OscConfig+0x118>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80046f2:	f7fc fc45 	bl	8000f80 <HAL_GetTick>
 80046f6:	4602      	mov	r2, r0
 80046f8:	693b      	ldr	r3, [r7, #16]
 80046fa:	1ad3      	subs	r3, r2, r3
 80046fc:	2b64      	cmp	r3, #100	; 0x64
 80046fe:	d901      	bls.n	8004704 <HAL_RCC_OscConfig+0x118>
          {
            return HAL_TIMEOUT;
 8004700:	2303      	movs	r3, #3
 8004702:	e1cd      	b.n	8004aa0 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004704:	4b52      	ldr	r3, [pc, #328]	; (8004850 <HAL_RCC_OscConfig+0x264>)
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800470c:	2b00      	cmp	r3, #0
 800470e:	d1f0      	bne.n	80046f2 <HAL_RCC_OscConfig+0x106>
 8004710:	e000      	b.n	8004714 <HAL_RCC_OscConfig+0x128>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004712:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	f003 0302 	and.w	r3, r3, #2
 800471c:	2b00      	cmp	r3, #0
 800471e:	d063      	beq.n	80047e8 <HAL_RCC_OscConfig+0x1fc>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8004720:	4b4b      	ldr	r3, [pc, #300]	; (8004850 <HAL_RCC_OscConfig+0x264>)
 8004722:	685b      	ldr	r3, [r3, #4]
 8004724:	f003 030c 	and.w	r3, r3, #12
 8004728:	2b00      	cmp	r3, #0
 800472a:	d00b      	beq.n	8004744 <HAL_RCC_OscConfig+0x158>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800472c:	4b48      	ldr	r3, [pc, #288]	; (8004850 <HAL_RCC_OscConfig+0x264>)
 800472e:	685b      	ldr	r3, [r3, #4]
 8004730:	f003 030c 	and.w	r3, r3, #12
 8004734:	2b08      	cmp	r3, #8
 8004736:	d11c      	bne.n	8004772 <HAL_RCC_OscConfig+0x186>
 8004738:	4b45      	ldr	r3, [pc, #276]	; (8004850 <HAL_RCC_OscConfig+0x264>)
 800473a:	685b      	ldr	r3, [r3, #4]
 800473c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004740:	2b00      	cmp	r3, #0
 8004742:	d116      	bne.n	8004772 <HAL_RCC_OscConfig+0x186>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004744:	4b42      	ldr	r3, [pc, #264]	; (8004850 <HAL_RCC_OscConfig+0x264>)
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f003 0302 	and.w	r3, r3, #2
 800474c:	2b00      	cmp	r3, #0
 800474e:	d005      	beq.n	800475c <HAL_RCC_OscConfig+0x170>
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	691b      	ldr	r3, [r3, #16]
 8004754:	2b01      	cmp	r3, #1
 8004756:	d001      	beq.n	800475c <HAL_RCC_OscConfig+0x170>
      {
        return HAL_ERROR;
 8004758:	2301      	movs	r3, #1
 800475a:	e1a1      	b.n	8004aa0 <HAL_RCC_OscConfig+0x4b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800475c:	4b3c      	ldr	r3, [pc, #240]	; (8004850 <HAL_RCC_OscConfig+0x264>)
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	695b      	ldr	r3, [r3, #20]
 8004768:	00db      	lsls	r3, r3, #3
 800476a:	4939      	ldr	r1, [pc, #228]	; (8004850 <HAL_RCC_OscConfig+0x264>)
 800476c:	4313      	orrs	r3, r2
 800476e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004770:	e03a      	b.n	80047e8 <HAL_RCC_OscConfig+0x1fc>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	691b      	ldr	r3, [r3, #16]
 8004776:	2b00      	cmp	r3, #0
 8004778:	d020      	beq.n	80047bc <HAL_RCC_OscConfig+0x1d0>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800477a:	4b36      	ldr	r3, [pc, #216]	; (8004854 <HAL_RCC_OscConfig+0x268>)
 800477c:	2201      	movs	r2, #1
 800477e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004780:	f7fc fbfe 	bl	8000f80 <HAL_GetTick>
 8004784:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004786:	e008      	b.n	800479a <HAL_RCC_OscConfig+0x1ae>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004788:	f7fc fbfa 	bl	8000f80 <HAL_GetTick>
 800478c:	4602      	mov	r2, r0
 800478e:	693b      	ldr	r3, [r7, #16]
 8004790:	1ad3      	subs	r3, r2, r3
 8004792:	2b02      	cmp	r3, #2
 8004794:	d901      	bls.n	800479a <HAL_RCC_OscConfig+0x1ae>
          {
            return HAL_TIMEOUT;
 8004796:	2303      	movs	r3, #3
 8004798:	e182      	b.n	8004aa0 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800479a:	4b2d      	ldr	r3, [pc, #180]	; (8004850 <HAL_RCC_OscConfig+0x264>)
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	f003 0302 	and.w	r3, r3, #2
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d0f0      	beq.n	8004788 <HAL_RCC_OscConfig+0x19c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80047a6:	4b2a      	ldr	r3, [pc, #168]	; (8004850 <HAL_RCC_OscConfig+0x264>)
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	695b      	ldr	r3, [r3, #20]
 80047b2:	00db      	lsls	r3, r3, #3
 80047b4:	4926      	ldr	r1, [pc, #152]	; (8004850 <HAL_RCC_OscConfig+0x264>)
 80047b6:	4313      	orrs	r3, r2
 80047b8:	600b      	str	r3, [r1, #0]
 80047ba:	e015      	b.n	80047e8 <HAL_RCC_OscConfig+0x1fc>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80047bc:	4b25      	ldr	r3, [pc, #148]	; (8004854 <HAL_RCC_OscConfig+0x268>)
 80047be:	2200      	movs	r2, #0
 80047c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047c2:	f7fc fbdd 	bl	8000f80 <HAL_GetTick>
 80047c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80047c8:	e008      	b.n	80047dc <HAL_RCC_OscConfig+0x1f0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80047ca:	f7fc fbd9 	bl	8000f80 <HAL_GetTick>
 80047ce:	4602      	mov	r2, r0
 80047d0:	693b      	ldr	r3, [r7, #16]
 80047d2:	1ad3      	subs	r3, r2, r3
 80047d4:	2b02      	cmp	r3, #2
 80047d6:	d901      	bls.n	80047dc <HAL_RCC_OscConfig+0x1f0>
          {
            return HAL_TIMEOUT;
 80047d8:	2303      	movs	r3, #3
 80047da:	e161      	b.n	8004aa0 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80047dc:	4b1c      	ldr	r3, [pc, #112]	; (8004850 <HAL_RCC_OscConfig+0x264>)
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f003 0302 	and.w	r3, r3, #2
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d1f0      	bne.n	80047ca <HAL_RCC_OscConfig+0x1de>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f003 0308 	and.w	r3, r3, #8
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d039      	beq.n	8004868 <HAL_RCC_OscConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	699b      	ldr	r3, [r3, #24]
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d019      	beq.n	8004830 <HAL_RCC_OscConfig+0x244>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80047fc:	4b16      	ldr	r3, [pc, #88]	; (8004858 <HAL_RCC_OscConfig+0x26c>)
 80047fe:	2201      	movs	r2, #1
 8004800:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004802:	f7fc fbbd 	bl	8000f80 <HAL_GetTick>
 8004806:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004808:	e008      	b.n	800481c <HAL_RCC_OscConfig+0x230>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800480a:	f7fc fbb9 	bl	8000f80 <HAL_GetTick>
 800480e:	4602      	mov	r2, r0
 8004810:	693b      	ldr	r3, [r7, #16]
 8004812:	1ad3      	subs	r3, r2, r3
 8004814:	2b02      	cmp	r3, #2
 8004816:	d901      	bls.n	800481c <HAL_RCC_OscConfig+0x230>
        {
          return HAL_TIMEOUT;
 8004818:	2303      	movs	r3, #3
 800481a:	e141      	b.n	8004aa0 <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800481c:	4b0c      	ldr	r3, [pc, #48]	; (8004850 <HAL_RCC_OscConfig+0x264>)
 800481e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004820:	f003 0302 	and.w	r3, r3, #2
 8004824:	2b00      	cmp	r3, #0
 8004826:	d0f0      	beq.n	800480a <HAL_RCC_OscConfig+0x21e>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms 
          should be added.*/
      RCC_Delay(1);
 8004828:	2001      	movs	r0, #1
 800482a:	f000 fadf 	bl	8004dec <RCC_Delay>
 800482e:	e01b      	b.n	8004868 <HAL_RCC_OscConfig+0x27c>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004830:	4b09      	ldr	r3, [pc, #36]	; (8004858 <HAL_RCC_OscConfig+0x26c>)
 8004832:	2200      	movs	r2, #0
 8004834:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004836:	f7fc fba3 	bl	8000f80 <HAL_GetTick>
 800483a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800483c:	e00e      	b.n	800485c <HAL_RCC_OscConfig+0x270>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800483e:	f7fc fb9f 	bl	8000f80 <HAL_GetTick>
 8004842:	4602      	mov	r2, r0
 8004844:	693b      	ldr	r3, [r7, #16]
 8004846:	1ad3      	subs	r3, r2, r3
 8004848:	2b02      	cmp	r3, #2
 800484a:	d907      	bls.n	800485c <HAL_RCC_OscConfig+0x270>
        {
          return HAL_TIMEOUT;
 800484c:	2303      	movs	r3, #3
 800484e:	e127      	b.n	8004aa0 <HAL_RCC_OscConfig+0x4b4>
 8004850:	40021000 	.word	0x40021000
 8004854:	42420000 	.word	0x42420000
 8004858:	42420480 	.word	0x42420480
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800485c:	4b92      	ldr	r3, [pc, #584]	; (8004aa8 <HAL_RCC_OscConfig+0x4bc>)
 800485e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004860:	f003 0302 	and.w	r3, r3, #2
 8004864:	2b00      	cmp	r3, #0
 8004866:	d1ea      	bne.n	800483e <HAL_RCC_OscConfig+0x252>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f003 0304 	and.w	r3, r3, #4
 8004870:	2b00      	cmp	r3, #0
 8004872:	f000 80a6 	beq.w	80049c2 <HAL_RCC_OscConfig+0x3d6>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004876:	2300      	movs	r3, #0
 8004878:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800487a:	4b8b      	ldr	r3, [pc, #556]	; (8004aa8 <HAL_RCC_OscConfig+0x4bc>)
 800487c:	69db      	ldr	r3, [r3, #28]
 800487e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004882:	2b00      	cmp	r3, #0
 8004884:	d10d      	bne.n	80048a2 <HAL_RCC_OscConfig+0x2b6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004886:	4b88      	ldr	r3, [pc, #544]	; (8004aa8 <HAL_RCC_OscConfig+0x4bc>)
 8004888:	69db      	ldr	r3, [r3, #28]
 800488a:	4a87      	ldr	r2, [pc, #540]	; (8004aa8 <HAL_RCC_OscConfig+0x4bc>)
 800488c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004890:	61d3      	str	r3, [r2, #28]
 8004892:	4b85      	ldr	r3, [pc, #532]	; (8004aa8 <HAL_RCC_OscConfig+0x4bc>)
 8004894:	69db      	ldr	r3, [r3, #28]
 8004896:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800489a:	60fb      	str	r3, [r7, #12]
 800489c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800489e:	2301      	movs	r3, #1
 80048a0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048a2:	4b82      	ldr	r3, [pc, #520]	; (8004aac <HAL_RCC_OscConfig+0x4c0>)
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d118      	bne.n	80048e0 <HAL_RCC_OscConfig+0x2f4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80048ae:	4b7f      	ldr	r3, [pc, #508]	; (8004aac <HAL_RCC_OscConfig+0x4c0>)
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	4a7e      	ldr	r2, [pc, #504]	; (8004aac <HAL_RCC_OscConfig+0x4c0>)
 80048b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80048b8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80048ba:	f7fc fb61 	bl	8000f80 <HAL_GetTick>
 80048be:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048c0:	e008      	b.n	80048d4 <HAL_RCC_OscConfig+0x2e8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80048c2:	f7fc fb5d 	bl	8000f80 <HAL_GetTick>
 80048c6:	4602      	mov	r2, r0
 80048c8:	693b      	ldr	r3, [r7, #16]
 80048ca:	1ad3      	subs	r3, r2, r3
 80048cc:	2b64      	cmp	r3, #100	; 0x64
 80048ce:	d901      	bls.n	80048d4 <HAL_RCC_OscConfig+0x2e8>
        {
          return HAL_TIMEOUT;
 80048d0:	2303      	movs	r3, #3
 80048d2:	e0e5      	b.n	8004aa0 <HAL_RCC_OscConfig+0x4b4>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048d4:	4b75      	ldr	r3, [pc, #468]	; (8004aac <HAL_RCC_OscConfig+0x4c0>)
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d0f0      	beq.n	80048c2 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	68db      	ldr	r3, [r3, #12]
 80048e4:	2b01      	cmp	r3, #1
 80048e6:	d106      	bne.n	80048f6 <HAL_RCC_OscConfig+0x30a>
 80048e8:	4b6f      	ldr	r3, [pc, #444]	; (8004aa8 <HAL_RCC_OscConfig+0x4bc>)
 80048ea:	6a1b      	ldr	r3, [r3, #32]
 80048ec:	4a6e      	ldr	r2, [pc, #440]	; (8004aa8 <HAL_RCC_OscConfig+0x4bc>)
 80048ee:	f043 0301 	orr.w	r3, r3, #1
 80048f2:	6213      	str	r3, [r2, #32]
 80048f4:	e02d      	b.n	8004952 <HAL_RCC_OscConfig+0x366>
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	68db      	ldr	r3, [r3, #12]
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d10c      	bne.n	8004918 <HAL_RCC_OscConfig+0x32c>
 80048fe:	4b6a      	ldr	r3, [pc, #424]	; (8004aa8 <HAL_RCC_OscConfig+0x4bc>)
 8004900:	6a1b      	ldr	r3, [r3, #32]
 8004902:	4a69      	ldr	r2, [pc, #420]	; (8004aa8 <HAL_RCC_OscConfig+0x4bc>)
 8004904:	f023 0301 	bic.w	r3, r3, #1
 8004908:	6213      	str	r3, [r2, #32]
 800490a:	4b67      	ldr	r3, [pc, #412]	; (8004aa8 <HAL_RCC_OscConfig+0x4bc>)
 800490c:	6a1b      	ldr	r3, [r3, #32]
 800490e:	4a66      	ldr	r2, [pc, #408]	; (8004aa8 <HAL_RCC_OscConfig+0x4bc>)
 8004910:	f023 0304 	bic.w	r3, r3, #4
 8004914:	6213      	str	r3, [r2, #32]
 8004916:	e01c      	b.n	8004952 <HAL_RCC_OscConfig+0x366>
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	68db      	ldr	r3, [r3, #12]
 800491c:	2b05      	cmp	r3, #5
 800491e:	d10c      	bne.n	800493a <HAL_RCC_OscConfig+0x34e>
 8004920:	4b61      	ldr	r3, [pc, #388]	; (8004aa8 <HAL_RCC_OscConfig+0x4bc>)
 8004922:	6a1b      	ldr	r3, [r3, #32]
 8004924:	4a60      	ldr	r2, [pc, #384]	; (8004aa8 <HAL_RCC_OscConfig+0x4bc>)
 8004926:	f043 0304 	orr.w	r3, r3, #4
 800492a:	6213      	str	r3, [r2, #32]
 800492c:	4b5e      	ldr	r3, [pc, #376]	; (8004aa8 <HAL_RCC_OscConfig+0x4bc>)
 800492e:	6a1b      	ldr	r3, [r3, #32]
 8004930:	4a5d      	ldr	r2, [pc, #372]	; (8004aa8 <HAL_RCC_OscConfig+0x4bc>)
 8004932:	f043 0301 	orr.w	r3, r3, #1
 8004936:	6213      	str	r3, [r2, #32]
 8004938:	e00b      	b.n	8004952 <HAL_RCC_OscConfig+0x366>
 800493a:	4b5b      	ldr	r3, [pc, #364]	; (8004aa8 <HAL_RCC_OscConfig+0x4bc>)
 800493c:	6a1b      	ldr	r3, [r3, #32]
 800493e:	4a5a      	ldr	r2, [pc, #360]	; (8004aa8 <HAL_RCC_OscConfig+0x4bc>)
 8004940:	f023 0301 	bic.w	r3, r3, #1
 8004944:	6213      	str	r3, [r2, #32]
 8004946:	4b58      	ldr	r3, [pc, #352]	; (8004aa8 <HAL_RCC_OscConfig+0x4bc>)
 8004948:	6a1b      	ldr	r3, [r3, #32]
 800494a:	4a57      	ldr	r2, [pc, #348]	; (8004aa8 <HAL_RCC_OscConfig+0x4bc>)
 800494c:	f023 0304 	bic.w	r3, r3, #4
 8004950:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	68db      	ldr	r3, [r3, #12]
 8004956:	2b00      	cmp	r3, #0
 8004958:	d015      	beq.n	8004986 <HAL_RCC_OscConfig+0x39a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800495a:	f7fc fb11 	bl	8000f80 <HAL_GetTick>
 800495e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004960:	e00a      	b.n	8004978 <HAL_RCC_OscConfig+0x38c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004962:	f7fc fb0d 	bl	8000f80 <HAL_GetTick>
 8004966:	4602      	mov	r2, r0
 8004968:	693b      	ldr	r3, [r7, #16]
 800496a:	1ad3      	subs	r3, r2, r3
 800496c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004970:	4293      	cmp	r3, r2
 8004972:	d901      	bls.n	8004978 <HAL_RCC_OscConfig+0x38c>
        {
          return HAL_TIMEOUT;
 8004974:	2303      	movs	r3, #3
 8004976:	e093      	b.n	8004aa0 <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004978:	4b4b      	ldr	r3, [pc, #300]	; (8004aa8 <HAL_RCC_OscConfig+0x4bc>)
 800497a:	6a1b      	ldr	r3, [r3, #32]
 800497c:	f003 0302 	and.w	r3, r3, #2
 8004980:	2b00      	cmp	r3, #0
 8004982:	d0ee      	beq.n	8004962 <HAL_RCC_OscConfig+0x376>
 8004984:	e014      	b.n	80049b0 <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004986:	f7fc fafb 	bl	8000f80 <HAL_GetTick>
 800498a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800498c:	e00a      	b.n	80049a4 <HAL_RCC_OscConfig+0x3b8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800498e:	f7fc faf7 	bl	8000f80 <HAL_GetTick>
 8004992:	4602      	mov	r2, r0
 8004994:	693b      	ldr	r3, [r7, #16]
 8004996:	1ad3      	subs	r3, r2, r3
 8004998:	f241 3288 	movw	r2, #5000	; 0x1388
 800499c:	4293      	cmp	r3, r2
 800499e:	d901      	bls.n	80049a4 <HAL_RCC_OscConfig+0x3b8>
        {
          return HAL_TIMEOUT;
 80049a0:	2303      	movs	r3, #3
 80049a2:	e07d      	b.n	8004aa0 <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80049a4:	4b40      	ldr	r3, [pc, #256]	; (8004aa8 <HAL_RCC_OscConfig+0x4bc>)
 80049a6:	6a1b      	ldr	r3, [r3, #32]
 80049a8:	f003 0302 	and.w	r3, r3, #2
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d1ee      	bne.n	800498e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80049b0:	7dfb      	ldrb	r3, [r7, #23]
 80049b2:	2b01      	cmp	r3, #1
 80049b4:	d105      	bne.n	80049c2 <HAL_RCC_OscConfig+0x3d6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80049b6:	4b3c      	ldr	r3, [pc, #240]	; (8004aa8 <HAL_RCC_OscConfig+0x4bc>)
 80049b8:	69db      	ldr	r3, [r3, #28]
 80049ba:	4a3b      	ldr	r2, [pc, #236]	; (8004aa8 <HAL_RCC_OscConfig+0x4bc>)
 80049bc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80049c0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	69db      	ldr	r3, [r3, #28]
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d069      	beq.n	8004a9e <HAL_RCC_OscConfig+0x4b2>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80049ca:	4b37      	ldr	r3, [pc, #220]	; (8004aa8 <HAL_RCC_OscConfig+0x4bc>)
 80049cc:	685b      	ldr	r3, [r3, #4]
 80049ce:	f003 030c 	and.w	r3, r3, #12
 80049d2:	2b08      	cmp	r3, #8
 80049d4:	d061      	beq.n	8004a9a <HAL_RCC_OscConfig+0x4ae>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	69db      	ldr	r3, [r3, #28]
 80049da:	2b02      	cmp	r3, #2
 80049dc:	d146      	bne.n	8004a6c <HAL_RCC_OscConfig+0x480>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80049de:	4b34      	ldr	r3, [pc, #208]	; (8004ab0 <HAL_RCC_OscConfig+0x4c4>)
 80049e0:	2200      	movs	r2, #0
 80049e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049e4:	f7fc facc 	bl	8000f80 <HAL_GetTick>
 80049e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80049ea:	e008      	b.n	80049fe <HAL_RCC_OscConfig+0x412>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80049ec:	f7fc fac8 	bl	8000f80 <HAL_GetTick>
 80049f0:	4602      	mov	r2, r0
 80049f2:	693b      	ldr	r3, [r7, #16]
 80049f4:	1ad3      	subs	r3, r2, r3
 80049f6:	2b02      	cmp	r3, #2
 80049f8:	d901      	bls.n	80049fe <HAL_RCC_OscConfig+0x412>
          {
            return HAL_TIMEOUT;
 80049fa:	2303      	movs	r3, #3
 80049fc:	e050      	b.n	8004aa0 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80049fe:	4b2a      	ldr	r3, [pc, #168]	; (8004aa8 <HAL_RCC_OscConfig+0x4bc>)
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d1f0      	bne.n	80049ec <HAL_RCC_OscConfig+0x400>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	6a1b      	ldr	r3, [r3, #32]
 8004a0e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a12:	d108      	bne.n	8004a26 <HAL_RCC_OscConfig+0x43a>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004a14:	4b24      	ldr	r3, [pc, #144]	; (8004aa8 <HAL_RCC_OscConfig+0x4bc>)
 8004a16:	685b      	ldr	r3, [r3, #4]
 8004a18:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	689b      	ldr	r3, [r3, #8]
 8004a20:	4921      	ldr	r1, [pc, #132]	; (8004aa8 <HAL_RCC_OscConfig+0x4bc>)
 8004a22:	4313      	orrs	r3, r2
 8004a24:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004a26:	4b20      	ldr	r3, [pc, #128]	; (8004aa8 <HAL_RCC_OscConfig+0x4bc>)
 8004a28:	685b      	ldr	r3, [r3, #4]
 8004a2a:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	6a19      	ldr	r1, [r3, #32]
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a36:	430b      	orrs	r3, r1
 8004a38:	491b      	ldr	r1, [pc, #108]	; (8004aa8 <HAL_RCC_OscConfig+0x4bc>)
 8004a3a:	4313      	orrs	r3, r2
 8004a3c:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004a3e:	4b1c      	ldr	r3, [pc, #112]	; (8004ab0 <HAL_RCC_OscConfig+0x4c4>)
 8004a40:	2201      	movs	r2, #1
 8004a42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a44:	f7fc fa9c 	bl	8000f80 <HAL_GetTick>
 8004a48:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004a4a:	e008      	b.n	8004a5e <HAL_RCC_OscConfig+0x472>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004a4c:	f7fc fa98 	bl	8000f80 <HAL_GetTick>
 8004a50:	4602      	mov	r2, r0
 8004a52:	693b      	ldr	r3, [r7, #16]
 8004a54:	1ad3      	subs	r3, r2, r3
 8004a56:	2b02      	cmp	r3, #2
 8004a58:	d901      	bls.n	8004a5e <HAL_RCC_OscConfig+0x472>
          {
            return HAL_TIMEOUT;
 8004a5a:	2303      	movs	r3, #3
 8004a5c:	e020      	b.n	8004aa0 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004a5e:	4b12      	ldr	r3, [pc, #72]	; (8004aa8 <HAL_RCC_OscConfig+0x4bc>)
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d0f0      	beq.n	8004a4c <HAL_RCC_OscConfig+0x460>
 8004a6a:	e018      	b.n	8004a9e <HAL_RCC_OscConfig+0x4b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a6c:	4b10      	ldr	r3, [pc, #64]	; (8004ab0 <HAL_RCC_OscConfig+0x4c4>)
 8004a6e:	2200      	movs	r2, #0
 8004a70:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a72:	f7fc fa85 	bl	8000f80 <HAL_GetTick>
 8004a76:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004a78:	e008      	b.n	8004a8c <HAL_RCC_OscConfig+0x4a0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004a7a:	f7fc fa81 	bl	8000f80 <HAL_GetTick>
 8004a7e:	4602      	mov	r2, r0
 8004a80:	693b      	ldr	r3, [r7, #16]
 8004a82:	1ad3      	subs	r3, r2, r3
 8004a84:	2b02      	cmp	r3, #2
 8004a86:	d901      	bls.n	8004a8c <HAL_RCC_OscConfig+0x4a0>
          {
            return HAL_TIMEOUT;
 8004a88:	2303      	movs	r3, #3
 8004a8a:	e009      	b.n	8004aa0 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004a8c:	4b06      	ldr	r3, [pc, #24]	; (8004aa8 <HAL_RCC_OscConfig+0x4bc>)
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d1f0      	bne.n	8004a7a <HAL_RCC_OscConfig+0x48e>
 8004a98:	e001      	b.n	8004a9e <HAL_RCC_OscConfig+0x4b2>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8004a9a:	2301      	movs	r3, #1
 8004a9c:	e000      	b.n	8004aa0 <HAL_RCC_OscConfig+0x4b4>
    }
  }
  
  return HAL_OK;
 8004a9e:	2300      	movs	r3, #0
}
 8004aa0:	4618      	mov	r0, r3
 8004aa2:	3718      	adds	r7, #24
 8004aa4:	46bd      	mov	sp, r7
 8004aa6:	bd80      	pop	{r7, pc}
 8004aa8:	40021000 	.word	0x40021000
 8004aac:	40007000 	.word	0x40007000
 8004ab0:	42420060 	.word	0x42420060

08004ab4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004ab4:	b580      	push	{r7, lr}
 8004ab6:	b084      	sub	sp, #16
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	6078      	str	r0, [r7, #4]
 8004abc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8004abe:	2300      	movs	r3, #0
 8004ac0:	60fb      	str	r3, [r7, #12]
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8004ac2:	4b7e      	ldr	r3, [pc, #504]	; (8004cbc <HAL_RCC_ClockConfig+0x208>)
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	f003 0307 	and.w	r3, r3, #7
 8004aca:	683a      	ldr	r2, [r7, #0]
 8004acc:	429a      	cmp	r2, r3
 8004ace:	d910      	bls.n	8004af2 <HAL_RCC_ClockConfig+0x3e>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ad0:	4b7a      	ldr	r3, [pc, #488]	; (8004cbc <HAL_RCC_ClockConfig+0x208>)
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	f023 0207 	bic.w	r2, r3, #7
 8004ad8:	4978      	ldr	r1, [pc, #480]	; (8004cbc <HAL_RCC_ClockConfig+0x208>)
 8004ada:	683b      	ldr	r3, [r7, #0]
 8004adc:	4313      	orrs	r3, r2
 8004ade:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004ae0:	4b76      	ldr	r3, [pc, #472]	; (8004cbc <HAL_RCC_ClockConfig+0x208>)
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	f003 0307 	and.w	r3, r3, #7
 8004ae8:	683a      	ldr	r2, [r7, #0]
 8004aea:	429a      	cmp	r2, r3
 8004aec:	d001      	beq.n	8004af2 <HAL_RCC_ClockConfig+0x3e>
    {
      return HAL_ERROR;
 8004aee:	2301      	movs	r3, #1
 8004af0:	e0e0      	b.n	8004cb4 <HAL_RCC_ClockConfig+0x200>
    }
  }

#endif /* FLASH_ACR_LATENCY */
  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	f003 0302 	and.w	r3, r3, #2
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d020      	beq.n	8004b40 <HAL_RCC_ClockConfig+0x8c>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f003 0304 	and.w	r3, r3, #4
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d005      	beq.n	8004b16 <HAL_RCC_ClockConfig+0x62>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004b0a:	4b6d      	ldr	r3, [pc, #436]	; (8004cc0 <HAL_RCC_ClockConfig+0x20c>)
 8004b0c:	685b      	ldr	r3, [r3, #4]
 8004b0e:	4a6c      	ldr	r2, [pc, #432]	; (8004cc0 <HAL_RCC_ClockConfig+0x20c>)
 8004b10:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004b14:	6053      	str	r3, [r2, #4]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	f003 0308 	and.w	r3, r3, #8
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d005      	beq.n	8004b2e <HAL_RCC_ClockConfig+0x7a>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004b22:	4b67      	ldr	r3, [pc, #412]	; (8004cc0 <HAL_RCC_ClockConfig+0x20c>)
 8004b24:	685b      	ldr	r3, [r3, #4]
 8004b26:	4a66      	ldr	r2, [pc, #408]	; (8004cc0 <HAL_RCC_ClockConfig+0x20c>)
 8004b28:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8004b2c:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004b2e:	4b64      	ldr	r3, [pc, #400]	; (8004cc0 <HAL_RCC_ClockConfig+0x20c>)
 8004b30:	685b      	ldr	r3, [r3, #4]
 8004b32:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	689b      	ldr	r3, [r3, #8]
 8004b3a:	4961      	ldr	r1, [pc, #388]	; (8004cc0 <HAL_RCC_ClockConfig+0x20c>)
 8004b3c:	4313      	orrs	r3, r2
 8004b3e:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	f003 0301 	and.w	r3, r3, #1
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d06a      	beq.n	8004c22 <HAL_RCC_ClockConfig+0x16e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	685b      	ldr	r3, [r3, #4]
 8004b50:	2b01      	cmp	r3, #1
 8004b52:	d107      	bne.n	8004b64 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b54:	4b5a      	ldr	r3, [pc, #360]	; (8004cc0 <HAL_RCC_ClockConfig+0x20c>)
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d115      	bne.n	8004b8c <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_ERROR;
 8004b60:	2301      	movs	r3, #1
 8004b62:	e0a7      	b.n	8004cb4 <HAL_RCC_ClockConfig+0x200>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	685b      	ldr	r3, [r3, #4]
 8004b68:	2b02      	cmp	r3, #2
 8004b6a:	d107      	bne.n	8004b7c <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004b6c:	4b54      	ldr	r3, [pc, #336]	; (8004cc0 <HAL_RCC_ClockConfig+0x20c>)
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d109      	bne.n	8004b8c <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_ERROR;
 8004b78:	2301      	movs	r3, #1
 8004b7a:	e09b      	b.n	8004cb4 <HAL_RCC_ClockConfig+0x200>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b7c:	4b50      	ldr	r3, [pc, #320]	; (8004cc0 <HAL_RCC_ClockConfig+0x20c>)
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	f003 0302 	and.w	r3, r3, #2
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d101      	bne.n	8004b8c <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_ERROR;
 8004b88:	2301      	movs	r3, #1
 8004b8a:	e093      	b.n	8004cb4 <HAL_RCC_ClockConfig+0x200>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004b8c:	4b4c      	ldr	r3, [pc, #304]	; (8004cc0 <HAL_RCC_ClockConfig+0x20c>)
 8004b8e:	685b      	ldr	r3, [r3, #4]
 8004b90:	f023 0203 	bic.w	r2, r3, #3
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	685b      	ldr	r3, [r3, #4]
 8004b98:	4949      	ldr	r1, [pc, #292]	; (8004cc0 <HAL_RCC_ClockConfig+0x20c>)
 8004b9a:	4313      	orrs	r3, r2
 8004b9c:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004b9e:	f7fc f9ef 	bl	8000f80 <HAL_GetTick>
 8004ba2:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	685b      	ldr	r3, [r3, #4]
 8004ba8:	2b01      	cmp	r3, #1
 8004baa:	d112      	bne.n	8004bd2 <HAL_RCC_ClockConfig+0x11e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004bac:	e00a      	b.n	8004bc4 <HAL_RCC_ClockConfig+0x110>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004bae:	f7fc f9e7 	bl	8000f80 <HAL_GetTick>
 8004bb2:	4602      	mov	r2, r0
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	1ad3      	subs	r3, r2, r3
 8004bb8:	f241 3288 	movw	r2, #5000	; 0x1388
 8004bbc:	4293      	cmp	r3, r2
 8004bbe:	d901      	bls.n	8004bc4 <HAL_RCC_ClockConfig+0x110>
        {
          return HAL_TIMEOUT;
 8004bc0:	2303      	movs	r3, #3
 8004bc2:	e077      	b.n	8004cb4 <HAL_RCC_ClockConfig+0x200>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004bc4:	4b3e      	ldr	r3, [pc, #248]	; (8004cc0 <HAL_RCC_ClockConfig+0x20c>)
 8004bc6:	685b      	ldr	r3, [r3, #4]
 8004bc8:	f003 030c 	and.w	r3, r3, #12
 8004bcc:	2b04      	cmp	r3, #4
 8004bce:	d1ee      	bne.n	8004bae <HAL_RCC_ClockConfig+0xfa>
 8004bd0:	e027      	b.n	8004c22 <HAL_RCC_ClockConfig+0x16e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	685b      	ldr	r3, [r3, #4]
 8004bd6:	2b02      	cmp	r3, #2
 8004bd8:	d11d      	bne.n	8004c16 <HAL_RCC_ClockConfig+0x162>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004bda:	e00a      	b.n	8004bf2 <HAL_RCC_ClockConfig+0x13e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004bdc:	f7fc f9d0 	bl	8000f80 <HAL_GetTick>
 8004be0:	4602      	mov	r2, r0
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	1ad3      	subs	r3, r2, r3
 8004be6:	f241 3288 	movw	r2, #5000	; 0x1388
 8004bea:	4293      	cmp	r3, r2
 8004bec:	d901      	bls.n	8004bf2 <HAL_RCC_ClockConfig+0x13e>
        {
          return HAL_TIMEOUT;
 8004bee:	2303      	movs	r3, #3
 8004bf0:	e060      	b.n	8004cb4 <HAL_RCC_ClockConfig+0x200>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004bf2:	4b33      	ldr	r3, [pc, #204]	; (8004cc0 <HAL_RCC_ClockConfig+0x20c>)
 8004bf4:	685b      	ldr	r3, [r3, #4]
 8004bf6:	f003 030c 	and.w	r3, r3, #12
 8004bfa:	2b08      	cmp	r3, #8
 8004bfc:	d1ee      	bne.n	8004bdc <HAL_RCC_ClockConfig+0x128>
 8004bfe:	e010      	b.n	8004c22 <HAL_RCC_ClockConfig+0x16e>
    }
    else
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004c00:	f7fc f9be 	bl	8000f80 <HAL_GetTick>
 8004c04:	4602      	mov	r2, r0
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	1ad3      	subs	r3, r2, r3
 8004c0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c0e:	4293      	cmp	r3, r2
 8004c10:	d901      	bls.n	8004c16 <HAL_RCC_ClockConfig+0x162>
        {
          return HAL_TIMEOUT;
 8004c12:	2303      	movs	r3, #3
 8004c14:	e04e      	b.n	8004cb4 <HAL_RCC_ClockConfig+0x200>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8004c16:	4b2a      	ldr	r3, [pc, #168]	; (8004cc0 <HAL_RCC_ClockConfig+0x20c>)
 8004c18:	685b      	ldr	r3, [r3, #4]
 8004c1a:	f003 030c 	and.w	r3, r3, #12
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d1ee      	bne.n	8004c00 <HAL_RCC_ClockConfig+0x14c>
      }
    }      
  }    
#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8004c22:	4b26      	ldr	r3, [pc, #152]	; (8004cbc <HAL_RCC_ClockConfig+0x208>)
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	f003 0307 	and.w	r3, r3, #7
 8004c2a:	683a      	ldr	r2, [r7, #0]
 8004c2c:	429a      	cmp	r2, r3
 8004c2e:	d210      	bcs.n	8004c52 <HAL_RCC_ClockConfig+0x19e>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c30:	4b22      	ldr	r3, [pc, #136]	; (8004cbc <HAL_RCC_ClockConfig+0x208>)
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	f023 0207 	bic.w	r2, r3, #7
 8004c38:	4920      	ldr	r1, [pc, #128]	; (8004cbc <HAL_RCC_ClockConfig+0x208>)
 8004c3a:	683b      	ldr	r3, [r7, #0]
 8004c3c:	4313      	orrs	r3, r2
 8004c3e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004c40:	4b1e      	ldr	r3, [pc, #120]	; (8004cbc <HAL_RCC_ClockConfig+0x208>)
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	f003 0307 	and.w	r3, r3, #7
 8004c48:	683a      	ldr	r2, [r7, #0]
 8004c4a:	429a      	cmp	r2, r3
 8004c4c:	d001      	beq.n	8004c52 <HAL_RCC_ClockConfig+0x19e>
    {
      return HAL_ERROR;
 8004c4e:	2301      	movs	r3, #1
 8004c50:	e030      	b.n	8004cb4 <HAL_RCC_ClockConfig+0x200>
    }
  }    
#endif /* FLASH_ACR_LATENCY */

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	f003 0304 	and.w	r3, r3, #4
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d008      	beq.n	8004c70 <HAL_RCC_ClockConfig+0x1bc>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004c5e:	4b18      	ldr	r3, [pc, #96]	; (8004cc0 <HAL_RCC_ClockConfig+0x20c>)
 8004c60:	685b      	ldr	r3, [r3, #4]
 8004c62:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	68db      	ldr	r3, [r3, #12]
 8004c6a:	4915      	ldr	r1, [pc, #84]	; (8004cc0 <HAL_RCC_ClockConfig+0x20c>)
 8004c6c:	4313      	orrs	r3, r2
 8004c6e:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	f003 0308 	and.w	r3, r3, #8
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d009      	beq.n	8004c90 <HAL_RCC_ClockConfig+0x1dc>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004c7c:	4b10      	ldr	r3, [pc, #64]	; (8004cc0 <HAL_RCC_ClockConfig+0x20c>)
 8004c7e:	685b      	ldr	r3, [r3, #4]
 8004c80:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	691b      	ldr	r3, [r3, #16]
 8004c88:	00db      	lsls	r3, r3, #3
 8004c8a:	490d      	ldr	r1, [pc, #52]	; (8004cc0 <HAL_RCC_ClockConfig+0x20c>)
 8004c8c:	4313      	orrs	r3, r2
 8004c8e:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004c90:	f000 f81c 	bl	8004ccc <HAL_RCC_GetSysClockFreq>
 8004c94:	4602      	mov	r2, r0
 8004c96:	4b0a      	ldr	r3, [pc, #40]	; (8004cc0 <HAL_RCC_ClockConfig+0x20c>)
 8004c98:	685b      	ldr	r3, [r3, #4]
 8004c9a:	091b      	lsrs	r3, r3, #4
 8004c9c:	f003 030f 	and.w	r3, r3, #15
 8004ca0:	4908      	ldr	r1, [pc, #32]	; (8004cc4 <HAL_RCC_ClockConfig+0x210>)
 8004ca2:	5ccb      	ldrb	r3, [r1, r3]
 8004ca4:	fa22 f303 	lsr.w	r3, r2, r3
 8004ca8:	4a07      	ldr	r2, [pc, #28]	; (8004cc8 <HAL_RCC_ClockConfig+0x214>)
 8004caa:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8004cac:	200f      	movs	r0, #15
 8004cae:	f7fc f925 	bl	8000efc <HAL_InitTick>
  
  return HAL_OK;
 8004cb2:	2300      	movs	r3, #0
}
 8004cb4:	4618      	mov	r0, r3
 8004cb6:	3710      	adds	r7, #16
 8004cb8:	46bd      	mov	sp, r7
 8004cba:	bd80      	pop	{r7, pc}
 8004cbc:	40022000 	.word	0x40022000
 8004cc0:	40021000 	.word	0x40021000
 8004cc4:	0800b574 	.word	0x0800b574
 8004cc8:	2000000c 	.word	0x2000000c

08004ccc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004ccc:	b490      	push	{r4, r7}
 8004cce:	b08a      	sub	sp, #40	; 0x28
 8004cd0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8004cd2:	4b29      	ldr	r3, [pc, #164]	; (8004d78 <HAL_RCC_GetSysClockFreq+0xac>)
 8004cd4:	1d3c      	adds	r4, r7, #4
 8004cd6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004cd8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8004cdc:	f240 2301 	movw	r3, #513	; 0x201
 8004ce0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004ce2:	2300      	movs	r3, #0
 8004ce4:	61fb      	str	r3, [r7, #28]
 8004ce6:	2300      	movs	r3, #0
 8004ce8:	61bb      	str	r3, [r7, #24]
 8004cea:	2300      	movs	r3, #0
 8004cec:	627b      	str	r3, [r7, #36]	; 0x24
 8004cee:	2300      	movs	r3, #0
 8004cf0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8004cf2:	2300      	movs	r3, #0
 8004cf4:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004cf6:	4b21      	ldr	r3, [pc, #132]	; (8004d7c <HAL_RCC_GetSysClockFreq+0xb0>)
 8004cf8:	685b      	ldr	r3, [r3, #4]
 8004cfa:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004cfc:	69fb      	ldr	r3, [r7, #28]
 8004cfe:	f003 030c 	and.w	r3, r3, #12
 8004d02:	2b04      	cmp	r3, #4
 8004d04:	d002      	beq.n	8004d0c <HAL_RCC_GetSysClockFreq+0x40>
 8004d06:	2b08      	cmp	r3, #8
 8004d08:	d003      	beq.n	8004d12 <HAL_RCC_GetSysClockFreq+0x46>
 8004d0a:	e02b      	b.n	8004d64 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004d0c:	4b1c      	ldr	r3, [pc, #112]	; (8004d80 <HAL_RCC_GetSysClockFreq+0xb4>)
 8004d0e:	623b      	str	r3, [r7, #32]
      break;
 8004d10:	e02b      	b.n	8004d6a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004d12:	69fb      	ldr	r3, [r7, #28]
 8004d14:	0c9b      	lsrs	r3, r3, #18
 8004d16:	f003 030f 	and.w	r3, r3, #15
 8004d1a:	3328      	adds	r3, #40	; 0x28
 8004d1c:	443b      	add	r3, r7
 8004d1e:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8004d22:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004d24:	69fb      	ldr	r3, [r7, #28]
 8004d26:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d012      	beq.n	8004d54 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004d2e:	4b13      	ldr	r3, [pc, #76]	; (8004d7c <HAL_RCC_GetSysClockFreq+0xb0>)
 8004d30:	685b      	ldr	r3, [r3, #4]
 8004d32:	0c5b      	lsrs	r3, r3, #17
 8004d34:	f003 0301 	and.w	r3, r3, #1
 8004d38:	3328      	adds	r3, #40	; 0x28
 8004d3a:	443b      	add	r3, r7
 8004d3c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8004d40:	61bb      	str	r3, [r7, #24]
        {
            pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004d42:	697b      	ldr	r3, [r7, #20]
 8004d44:	4a0e      	ldr	r2, [pc, #56]	; (8004d80 <HAL_RCC_GetSysClockFreq+0xb4>)
 8004d46:	fb03 f202 	mul.w	r2, r3, r2
 8004d4a:	69bb      	ldr	r3, [r7, #24]
 8004d4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d50:	627b      	str	r3, [r7, #36]	; 0x24
 8004d52:	e004      	b.n	8004d5e <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004d54:	697b      	ldr	r3, [r7, #20]
 8004d56:	4a0b      	ldr	r2, [pc, #44]	; (8004d84 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004d58:	fb02 f303 	mul.w	r3, r2, r3
 8004d5c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8004d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d60:	623b      	str	r3, [r7, #32]
      break;
 8004d62:	e002      	b.n	8004d6a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004d64:	4b06      	ldr	r3, [pc, #24]	; (8004d80 <HAL_RCC_GetSysClockFreq+0xb4>)
 8004d66:	623b      	str	r3, [r7, #32]
      break;
 8004d68:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004d6a:	6a3b      	ldr	r3, [r7, #32]
}
 8004d6c:	4618      	mov	r0, r3
 8004d6e:	3728      	adds	r7, #40	; 0x28
 8004d70:	46bd      	mov	sp, r7
 8004d72:	bc90      	pop	{r4, r7}
 8004d74:	4770      	bx	lr
 8004d76:	bf00      	nop
 8004d78:	0800b418 	.word	0x0800b418
 8004d7c:	40021000 	.word	0x40021000
 8004d80:	007a1200 	.word	0x007a1200
 8004d84:	003d0900 	.word	0x003d0900

08004d88 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004d88:	b480      	push	{r7}
 8004d8a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004d8c:	4b02      	ldr	r3, [pc, #8]	; (8004d98 <HAL_RCC_GetHCLKFreq+0x10>)
 8004d8e:	681b      	ldr	r3, [r3, #0]
}
 8004d90:	4618      	mov	r0, r3
 8004d92:	46bd      	mov	sp, r7
 8004d94:	bc80      	pop	{r7}
 8004d96:	4770      	bx	lr
 8004d98:	2000000c 	.word	0x2000000c

08004d9c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004d9c:	b580      	push	{r7, lr}
 8004d9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004da0:	f7ff fff2 	bl	8004d88 <HAL_RCC_GetHCLKFreq>
 8004da4:	4602      	mov	r2, r0
 8004da6:	4b05      	ldr	r3, [pc, #20]	; (8004dbc <HAL_RCC_GetPCLK1Freq+0x20>)
 8004da8:	685b      	ldr	r3, [r3, #4]
 8004daa:	0a1b      	lsrs	r3, r3, #8
 8004dac:	f003 0307 	and.w	r3, r3, #7
 8004db0:	4903      	ldr	r1, [pc, #12]	; (8004dc0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004db2:	5ccb      	ldrb	r3, [r1, r3]
 8004db4:	fa22 f303 	lsr.w	r3, r2, r3
}    
 8004db8:	4618      	mov	r0, r3
 8004dba:	bd80      	pop	{r7, pc}
 8004dbc:	40021000 	.word	0x40021000
 8004dc0:	0800b584 	.word	0x0800b584

08004dc4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004dc4:	b580      	push	{r7, lr}
 8004dc6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004dc8:	f7ff ffde 	bl	8004d88 <HAL_RCC_GetHCLKFreq>
 8004dcc:	4602      	mov	r2, r0
 8004dce:	4b05      	ldr	r3, [pc, #20]	; (8004de4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004dd0:	685b      	ldr	r3, [r3, #4]
 8004dd2:	0adb      	lsrs	r3, r3, #11
 8004dd4:	f003 0307 	and.w	r3, r3, #7
 8004dd8:	4903      	ldr	r1, [pc, #12]	; (8004de8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004dda:	5ccb      	ldrb	r3, [r1, r3]
 8004ddc:	fa22 f303 	lsr.w	r3, r2, r3
} 
 8004de0:	4618      	mov	r0, r3
 8004de2:	bd80      	pop	{r7, pc}
 8004de4:	40021000 	.word	0x40021000
 8004de8:	0800b584 	.word	0x0800b584

08004dec <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004dec:	b480      	push	{r7}
 8004dee:	b085      	sub	sp, #20
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004df4:	4b0b      	ldr	r3, [pc, #44]	; (8004e24 <RCC_Delay+0x38>)
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	4a0b      	ldr	r2, [pc, #44]	; (8004e28 <RCC_Delay+0x3c>)
 8004dfa:	fba2 2303 	umull	r2, r3, r2, r3
 8004dfe:	0a5b      	lsrs	r3, r3, #9
 8004e00:	687a      	ldr	r2, [r7, #4]
 8004e02:	fb02 f303 	mul.w	r3, r2, r3
 8004e06:	60fb      	str	r3, [r7, #12]
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 8004e08:	bf00      	nop
}
 8004e0a:	bf00      	nop
  do 
  {
    __NOP();
  } 
  while (Delay --);
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	1e5a      	subs	r2, r3, #1
 8004e10:	60fa      	str	r2, [r7, #12]
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d1f8      	bne.n	8004e08 <RCC_Delay+0x1c>
}
 8004e16:	bf00      	nop
 8004e18:	bf00      	nop
 8004e1a:	3714      	adds	r7, #20
 8004e1c:	46bd      	mov	sp, r7
 8004e1e:	bc80      	pop	{r7}
 8004e20:	4770      	bx	lr
 8004e22:	bf00      	nop
 8004e24:	2000000c 	.word	0x2000000c
 8004e28:	10624dd3 	.word	0x10624dd3

08004e2c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim : TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004e2c:	b580      	push	{r7, lr}
 8004e2e:	b082      	sub	sp, #8
 8004e30:	af00      	add	r7, sp, #0
 8004e32:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	691b      	ldr	r3, [r3, #16]
 8004e3a:	f003 0302 	and.w	r3, r3, #2
 8004e3e:	2b02      	cmp	r3, #2
 8004e40:	d122      	bne.n	8004e88 <HAL_TIM_IRQHandler+0x5c>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	68db      	ldr	r3, [r3, #12]
 8004e48:	f003 0302 	and.w	r3, r3, #2
 8004e4c:	2b02      	cmp	r3, #2
 8004e4e:	d11b      	bne.n	8004e88 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	f06f 0202 	mvn.w	r2, #2
 8004e58:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	2201      	movs	r2, #1
 8004e5e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	699b      	ldr	r3, [r3, #24]
 8004e66:	f003 0303 	and.w	r3, r3, #3
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d003      	beq.n	8004e76 <HAL_TIM_IRQHandler+0x4a>
        {
          HAL_TIM_IC_CaptureCallback(htim);
 8004e6e:	6878      	ldr	r0, [r7, #4]
 8004e70:	f000 f8ed 	bl	800504e <HAL_TIM_IC_CaptureCallback>
 8004e74:	e005      	b.n	8004e82 <HAL_TIM_IRQHandler+0x56>
        }
        /* Output compare event */
        else
        {
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e76:	6878      	ldr	r0, [r7, #4]
 8004e78:	f000 f8e0 	bl	800503c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e7c:	6878      	ldr	r0, [r7, #4]
 8004e7e:	f000 f8ef 	bl	8005060 <HAL_TIM_PWM_PulseFinishedCallback>
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	2200      	movs	r2, #0
 8004e86:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	691b      	ldr	r3, [r3, #16]
 8004e8e:	f003 0304 	and.w	r3, r3, #4
 8004e92:	2b04      	cmp	r3, #4
 8004e94:	d122      	bne.n	8004edc <HAL_TIM_IRQHandler+0xb0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	68db      	ldr	r3, [r3, #12]
 8004e9c:	f003 0304 	and.w	r3, r3, #4
 8004ea0:	2b04      	cmp	r3, #4
 8004ea2:	d11b      	bne.n	8004edc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	f06f 0204 	mvn.w	r2, #4
 8004eac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	2202      	movs	r2, #2
 8004eb2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	699b      	ldr	r3, [r3, #24]
 8004eba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d003      	beq.n	8004eca <HAL_TIM_IRQHandler+0x9e>
      {
        HAL_TIM_IC_CaptureCallback(htim);
 8004ec2:	6878      	ldr	r0, [r7, #4]
 8004ec4:	f000 f8c3 	bl	800504e <HAL_TIM_IC_CaptureCallback>
 8004ec8:	e005      	b.n	8004ed6 <HAL_TIM_IRQHandler+0xaa>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004eca:	6878      	ldr	r0, [r7, #4]
 8004ecc:	f000 f8b6 	bl	800503c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ed0:	6878      	ldr	r0, [r7, #4]
 8004ed2:	f000 f8c5 	bl	8005060 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	2200      	movs	r2, #0
 8004eda:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	691b      	ldr	r3, [r3, #16]
 8004ee2:	f003 0308 	and.w	r3, r3, #8
 8004ee6:	2b08      	cmp	r3, #8
 8004ee8:	d122      	bne.n	8004f30 <HAL_TIM_IRQHandler+0x104>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	68db      	ldr	r3, [r3, #12]
 8004ef0:	f003 0308 	and.w	r3, r3, #8
 8004ef4:	2b08      	cmp	r3, #8
 8004ef6:	d11b      	bne.n	8004f30 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	f06f 0208 	mvn.w	r2, #8
 8004f00:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	2204      	movs	r2, #4
 8004f06:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	69db      	ldr	r3, [r3, #28]
 8004f0e:	f003 0303 	and.w	r3, r3, #3
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d003      	beq.n	8004f1e <HAL_TIM_IRQHandler+0xf2>
      {
        HAL_TIM_IC_CaptureCallback(htim);
 8004f16:	6878      	ldr	r0, [r7, #4]
 8004f18:	f000 f899 	bl	800504e <HAL_TIM_IC_CaptureCallback>
 8004f1c:	e005      	b.n	8004f2a <HAL_TIM_IRQHandler+0xfe>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f1e:	6878      	ldr	r0, [r7, #4]
 8004f20:	f000 f88c 	bl	800503c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f24:	6878      	ldr	r0, [r7, #4]
 8004f26:	f000 f89b 	bl	8005060 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	2200      	movs	r2, #0
 8004f2e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	691b      	ldr	r3, [r3, #16]
 8004f36:	f003 0310 	and.w	r3, r3, #16
 8004f3a:	2b10      	cmp	r3, #16
 8004f3c:	d122      	bne.n	8004f84 <HAL_TIM_IRQHandler+0x158>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	68db      	ldr	r3, [r3, #12]
 8004f44:	f003 0310 	and.w	r3, r3, #16
 8004f48:	2b10      	cmp	r3, #16
 8004f4a:	d11b      	bne.n	8004f84 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	f06f 0210 	mvn.w	r2, #16
 8004f54:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	2208      	movs	r2, #8
 8004f5a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	69db      	ldr	r3, [r3, #28]
 8004f62:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d003      	beq.n	8004f72 <HAL_TIM_IRQHandler+0x146>
      {
        HAL_TIM_IC_CaptureCallback(htim);
 8004f6a:	6878      	ldr	r0, [r7, #4]
 8004f6c:	f000 f86f 	bl	800504e <HAL_TIM_IC_CaptureCallback>
 8004f70:	e005      	b.n	8004f7e <HAL_TIM_IRQHandler+0x152>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f72:	6878      	ldr	r0, [r7, #4]
 8004f74:	f000 f862 	bl	800503c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f78:	6878      	ldr	r0, [r7, #4]
 8004f7a:	f000 f871 	bl	8005060 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	2200      	movs	r2, #0
 8004f82:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	691b      	ldr	r3, [r3, #16]
 8004f8a:	f003 0301 	and.w	r3, r3, #1
 8004f8e:	2b01      	cmp	r3, #1
 8004f90:	d10e      	bne.n	8004fb0 <HAL_TIM_IRQHandler+0x184>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	68db      	ldr	r3, [r3, #12]
 8004f98:	f003 0301 	and.w	r3, r3, #1
 8004f9c:	2b01      	cmp	r3, #1
 8004f9e:	d107      	bne.n	8004fb0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	f06f 0201 	mvn.w	r2, #1
 8004fa8:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8004faa:	6878      	ldr	r0, [r7, #4]
 8004fac:	f001 ffa6 	bl	8006efc <HAL_TIM_PeriodElapsedCallback>
    }
  }
  /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	691b      	ldr	r3, [r3, #16]
 8004fb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fba:	2b80      	cmp	r3, #128	; 0x80
 8004fbc:	d10e      	bne.n	8004fdc <HAL_TIM_IRQHandler+0x1b0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	68db      	ldr	r3, [r3, #12]
 8004fc4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fc8:	2b80      	cmp	r3, #128	; 0x80
 8004fca:	d107      	bne.n	8004fdc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004fd4:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8004fd6:	6878      	ldr	r0, [r7, #4]
 8004fd8:	f000 f85d 	bl	8005096 <HAL_TIMEx_BreakCallback>
    }
  }
  /* TIM Trigger detection event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	691b      	ldr	r3, [r3, #16]
 8004fe2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fe6:	2b40      	cmp	r3, #64	; 0x40
 8004fe8:	d10e      	bne.n	8005008 <HAL_TIM_IRQHandler+0x1dc>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	68db      	ldr	r3, [r3, #12]
 8004ff0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ff4:	2b40      	cmp	r3, #64	; 0x40
 8004ff6:	d107      	bne.n	8005008 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005000:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8005002:	6878      	ldr	r0, [r7, #4]
 8005004:	f000 f835 	bl	8005072 <HAL_TIM_TriggerCallback>
    }
  }
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	691b      	ldr	r3, [r3, #16]
 800500e:	f003 0320 	and.w	r3, r3, #32
 8005012:	2b20      	cmp	r3, #32
 8005014:	d10e      	bne.n	8005034 <HAL_TIM_IRQHandler+0x208>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	68db      	ldr	r3, [r3, #12]
 800501c:	f003 0320 	and.w	r3, r3, #32
 8005020:	2b20      	cmp	r3, #32
 8005022:	d107      	bne.n	8005034 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	f06f 0220 	mvn.w	r2, #32
 800502c:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
 800502e:	6878      	ldr	r0, [r7, #4]
 8005030:	f000 f828 	bl	8005084 <HAL_TIMEx_CommutationCallback>
    }
  }
}
 8005034:	bf00      	nop
 8005036:	3708      	adds	r7, #8
 8005038:	46bd      	mov	sp, r7
 800503a:	bd80      	pop	{r7, pc}

0800503c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non blocking mode 
  * @param  htim : TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800503c:	b480      	push	{r7}
 800503e:	b083      	sub	sp, #12
 8005040:	af00      	add	r7, sp, #0
 8005042:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005044:	bf00      	nop
 8005046:	370c      	adds	r7, #12
 8005048:	46bd      	mov	sp, r7
 800504a:	bc80      	pop	{r7}
 800504c:	4770      	bx	lr

0800504e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non blocking mode 
  * @param  htim : TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800504e:	b480      	push	{r7}
 8005050:	b083      	sub	sp, #12
 8005052:	af00      	add	r7, sp, #0
 8005054:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005056:	bf00      	nop
 8005058:	370c      	adds	r7, #12
 800505a:	46bd      	mov	sp, r7
 800505c:	bc80      	pop	{r7}
 800505e:	4770      	bx	lr

08005060 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non blocking mode 
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005060:	b480      	push	{r7}
 8005062:	b083      	sub	sp, #12
 8005064:	af00      	add	r7, sp, #0
 8005066:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005068:	bf00      	nop
 800506a:	370c      	adds	r7, #12
 800506c:	46bd      	mov	sp, r7
 800506e:	bc80      	pop	{r7}
 8005070:	4770      	bx	lr

08005072 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non blocking mode 
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005072:	b480      	push	{r7}
 8005074:	b083      	sub	sp, #12
 8005076:	af00      	add	r7, sp, #0
 8005078:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800507a:	bf00      	nop
 800507c:	370c      	adds	r7, #12
 800507e:	46bd      	mov	sp, r7
 8005080:	bc80      	pop	{r7}
 8005082:	4770      	bx	lr

08005084 <HAL_TIMEx_CommutationCallback>:
  * @brief  Hall commutation changed callback in non blocking mode
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutationCallback(TIM_HandleTypeDef *htim)
{
 8005084:	b480      	push	{r7}
 8005086:	b083      	sub	sp, #12
 8005088:	af00      	add	r7, sp, #0
 800508a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutationCallback could be implemented in the user file
   */
}
 800508c:	bf00      	nop
 800508e:	370c      	adds	r7, #12
 8005090:	46bd      	mov	sp, r7
 8005092:	bc80      	pop	{r7}
 8005094:	4770      	bx	lr

08005096 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non blocking mode
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005096:	b480      	push	{r7}
 8005098:	b083      	sub	sp, #12
 800509a:	af00      	add	r7, sp, #0
 800509c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800509e:	bf00      	nop
 80050a0:	370c      	adds	r7, #12
 80050a2:	46bd      	mov	sp, r7
 80050a4:	bc80      	pop	{r7}
 80050a6:	4770      	bx	lr

080050a8 <HAL_UART_Init>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80050a8:	b580      	push	{r7, lr}
 80050aa:	b082      	sub	sp, #8
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d101      	bne.n	80050ba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80050b6:	2301      	movs	r3, #1
 80050b8:	e03f      	b.n	800513a <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */
  
  if(huart->gState == HAL_UART_STATE_RESET)
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80050c0:	b2db      	uxtb	r3, r3
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d106      	bne.n	80050d4 <HAL_UART_Init+0x2c>
  {  
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	2200      	movs	r2, #0
 80050ca:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    HAL_UART_MspInit(huart);
 80050ce:	6878      	ldr	r0, [r7, #4]
 80050d0:	f000 f837 	bl	8005142 <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	2224      	movs	r2, #36	; 0x24
 80050d8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	68da      	ldr	r2, [r3, #12]
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80050ea:	60da      	str	r2, [r3, #12]
  
  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80050ec:	6878      	ldr	r0, [r7, #4]
 80050ee:	f000 fb95 	bl	800581c <UART_SetConfig>
  
  /* In asynchronous mode, the following bits must be kept cleared: 
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	691a      	ldr	r2, [r3, #16]
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005100:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	695a      	ldr	r2, [r3, #20]
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005110:	615a      	str	r2, [r3, #20]
  
  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	68da      	ldr	r2, [r3, #12]
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005120:	60da      	str	r2, [r3, #12]
  
  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	2200      	movs	r2, #0
 8005126:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	2220      	movs	r2, #32
 800512c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	2220      	movs	r2, #32
 8005134:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
  
  return HAL_OK;
 8005138:	2300      	movs	r3, #0
}
 800513a:	4618      	mov	r0, r3
 800513c:	3708      	adds	r7, #8
 800513e:	46bd      	mov	sp, r7
 8005140:	bd80      	pop	{r7, pc}

08005142 <HAL_UART_MspInit>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8005142:	b480      	push	{r7}
 8005144:	b083      	sub	sp, #12
 8005146:	af00      	add	r7, sp, #0
 8005148:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_MspInit could be implemented in the user file
   */
}
 800514a:	bf00      	nop
 800514c:	370c      	adds	r7, #12
 800514e:	46bd      	mov	sp, r7
 8005150:	bc80      	pop	{r7}
 8005152:	4770      	bx	lr

08005154 <HAL_UART_Transmit>:
  * @param  Size: Amount of data to be sent
  * @param  Timeout: Timeout duration  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005154:	b580      	push	{r7, lr}
 8005156:	b088      	sub	sp, #32
 8005158:	af02      	add	r7, sp, #8
 800515a:	60f8      	str	r0, [r7, #12]
 800515c:	60b9      	str	r1, [r7, #8]
 800515e:	603b      	str	r3, [r7, #0]
 8005160:	4613      	mov	r3, r2
 8005162:	80fb      	strh	r3, [r7, #6]
  uint16_t* tmp;
  uint32_t tickstart = 0U;
 8005164:	2300      	movs	r3, #0
 8005166:	617b      	str	r3, [r7, #20]
  
  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY)
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800516e:	b2db      	uxtb	r3, r3
 8005170:	2b20      	cmp	r3, #32
 8005172:	f040 8083 	bne.w	800527c <HAL_UART_Transmit+0x128>
  {
    if((pData == NULL) || (Size == 0U))
 8005176:	68bb      	ldr	r3, [r7, #8]
 8005178:	2b00      	cmp	r3, #0
 800517a:	d002      	beq.n	8005182 <HAL_UART_Transmit+0x2e>
 800517c:	88fb      	ldrh	r3, [r7, #6]
 800517e:	2b00      	cmp	r3, #0
 8005180:	d101      	bne.n	8005186 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8005182:	2301      	movs	r3, #1
 8005184:	e07b      	b.n	800527e <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800518c:	2b01      	cmp	r3, #1
 800518e:	d101      	bne.n	8005194 <HAL_UART_Transmit+0x40>
 8005190:	2302      	movs	r3, #2
 8005192:	e074      	b.n	800527e <HAL_UART_Transmit+0x12a>
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	2201      	movs	r2, #1
 8005198:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	2200      	movs	r2, #0
 80051a0:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	2221      	movs	r2, #33	; 0x21
 80051a6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80051aa:	f7fb fee9 	bl	8000f80 <HAL_GetTick>
 80051ae:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	88fa      	ldrh	r2, [r7, #6]
 80051b4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	88fa      	ldrh	r2, [r7, #6]
 80051ba:	84da      	strh	r2, [r3, #38]	; 0x26
    while(huart->TxXferCount > 0U)
 80051bc:	e042      	b.n	8005244 <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80051c2:	b29b      	uxth	r3, r3
 80051c4:	3b01      	subs	r3, #1
 80051c6:	b29a      	uxth	r2, r3
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	84da      	strh	r2, [r3, #38]	; 0x26
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	689b      	ldr	r3, [r3, #8]
 80051d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80051d4:	d122      	bne.n	800521c <HAL_UART_Transmit+0xc8>
      {
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80051d6:	683b      	ldr	r3, [r7, #0]
 80051d8:	9300      	str	r3, [sp, #0]
 80051da:	697b      	ldr	r3, [r7, #20]
 80051dc:	2200      	movs	r2, #0
 80051de:	2180      	movs	r1, #128	; 0x80
 80051e0:	68f8      	ldr	r0, [r7, #12]
 80051e2:	f000 f9b1 	bl	8005548 <UART_WaitOnFlagUntilTimeout>
 80051e6:	4603      	mov	r3, r0
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d001      	beq.n	80051f0 <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 80051ec:	2303      	movs	r3, #3
 80051ee:	e046      	b.n	800527e <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t*) pData;
 80051f0:	68bb      	ldr	r3, [r7, #8]
 80051f2:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80051f4:	693b      	ldr	r3, [r7, #16]
 80051f6:	881b      	ldrh	r3, [r3, #0]
 80051f8:	461a      	mov	r2, r3
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005202:	605a      	str	r2, [r3, #4]
        if(huart->Init.Parity == UART_PARITY_NONE)
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	691b      	ldr	r3, [r3, #16]
 8005208:	2b00      	cmp	r3, #0
 800520a:	d103      	bne.n	8005214 <HAL_UART_Transmit+0xc0>
        {
          pData +=2U;
 800520c:	68bb      	ldr	r3, [r7, #8]
 800520e:	3302      	adds	r3, #2
 8005210:	60bb      	str	r3, [r7, #8]
 8005212:	e017      	b.n	8005244 <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData +=1U;
 8005214:	68bb      	ldr	r3, [r7, #8]
 8005216:	3301      	adds	r3, #1
 8005218:	60bb      	str	r3, [r7, #8]
 800521a:	e013      	b.n	8005244 <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800521c:	683b      	ldr	r3, [r7, #0]
 800521e:	9300      	str	r3, [sp, #0]
 8005220:	697b      	ldr	r3, [r7, #20]
 8005222:	2200      	movs	r2, #0
 8005224:	2180      	movs	r1, #128	; 0x80
 8005226:	68f8      	ldr	r0, [r7, #12]
 8005228:	f000 f98e 	bl	8005548 <UART_WaitOnFlagUntilTimeout>
 800522c:	4603      	mov	r3, r0
 800522e:	2b00      	cmp	r3, #0
 8005230:	d001      	beq.n	8005236 <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 8005232:	2303      	movs	r3, #3
 8005234:	e023      	b.n	800527e <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8005236:	68bb      	ldr	r3, [r7, #8]
 8005238:	1c5a      	adds	r2, r3, #1
 800523a:	60ba      	str	r2, [r7, #8]
 800523c:	781a      	ldrb	r2, [r3, #0]
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	605a      	str	r2, [r3, #4]
    while(huart->TxXferCount > 0U)
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005248:	b29b      	uxth	r3, r3
 800524a:	2b00      	cmp	r3, #0
 800524c:	d1b7      	bne.n	80051be <HAL_UART_Transmit+0x6a>
      }
    }

    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800524e:	683b      	ldr	r3, [r7, #0]
 8005250:	9300      	str	r3, [sp, #0]
 8005252:	697b      	ldr	r3, [r7, #20]
 8005254:	2200      	movs	r2, #0
 8005256:	2140      	movs	r1, #64	; 0x40
 8005258:	68f8      	ldr	r0, [r7, #12]
 800525a:	f000 f975 	bl	8005548 <UART_WaitOnFlagUntilTimeout>
 800525e:	4603      	mov	r3, r0
 8005260:	2b00      	cmp	r3, #0
 8005262:	d001      	beq.n	8005268 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8005264:	2303      	movs	r3, #3
 8005266:	e00a      	b.n	800527e <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	2220      	movs	r2, #32
 800526c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	2200      	movs	r2, #0
 8005274:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 8005278:	2300      	movs	r3, #0
 800527a:	e000      	b.n	800527e <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 800527c:	2302      	movs	r3, #2
  }
}
 800527e:	4618      	mov	r0, r3
 8005280:	3718      	adds	r7, #24
 8005282:	46bd      	mov	sp, r7
 8005284:	bd80      	pop	{r7, pc}

08005286 <HAL_UART_Receive_IT>:
  * @param  pData: Pointer to data buffer
  * @param  Size: Amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005286:	b480      	push	{r7}
 8005288:	b085      	sub	sp, #20
 800528a:	af00      	add	r7, sp, #0
 800528c:	60f8      	str	r0, [r7, #12]
 800528e:	60b9      	str	r1, [r7, #8]
 8005290:	4613      	mov	r3, r2
 8005292:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if(huart->RxState == HAL_UART_STATE_READY)
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800529a:	b2db      	uxtb	r3, r3
 800529c:	2b20      	cmp	r3, #32
 800529e:	d140      	bne.n	8005322 <HAL_UART_Receive_IT+0x9c>
  {
    if((pData == NULL) || (Size == 0U))
 80052a0:	68bb      	ldr	r3, [r7, #8]
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d002      	beq.n	80052ac <HAL_UART_Receive_IT+0x26>
 80052a6:	88fb      	ldrh	r3, [r7, #6]
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d101      	bne.n	80052b0 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80052ac:	2301      	movs	r3, #1
 80052ae:	e039      	b.n	8005324 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80052b6:	2b01      	cmp	r3, #1
 80052b8:	d101      	bne.n	80052be <HAL_UART_Receive_IT+0x38>
 80052ba:	2302      	movs	r3, #2
 80052bc:	e032      	b.n	8005324 <HAL_UART_Receive_IT+0x9e>
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	2201      	movs	r2, #1
 80052c2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	68ba      	ldr	r2, [r7, #8]
 80052ca:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	88fa      	ldrh	r2, [r7, #6]
 80052d0:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	88fa      	ldrh	r2, [r7, #6]
 80052d6:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	2200      	movs	r2, #0
 80052dc:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	2222      	movs	r2, #34	; 0x22
 80052e2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
    
    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	2200      	movs	r2, #0
 80052ea:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	68da      	ldr	r2, [r3, #12]
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80052fc:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	695a      	ldr	r2, [r3, #20]
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	f042 0201 	orr.w	r2, r2, #1
 800530c:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	68da      	ldr	r2, [r3, #12]
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	f042 0220 	orr.w	r2, r2, #32
 800531c:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800531e:	2300      	movs	r3, #0
 8005320:	e000      	b.n	8005324 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8005322:	2302      	movs	r3, #2
  }
}
 8005324:	4618      	mov	r0, r3
 8005326:	3714      	adds	r7, #20
 8005328:	46bd      	mov	sp, r7
 800532a:	bc80      	pop	{r7}
 800532c:	4770      	bx	lr
	...

08005330 <HAL_UART_IRQHandler>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005330:	b580      	push	{r7, lr}
 8005332:	b088      	sub	sp, #32
 8005334:	af00      	add	r7, sp, #0
 8005336:	6078      	str	r0, [r7, #4]
   uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	61fb      	str	r3, [r7, #28]
   uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	68db      	ldr	r3, [r3, #12]
 8005346:	61bb      	str	r3, [r7, #24]
   uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	695b      	ldr	r3, [r3, #20]
 800534e:	617b      	str	r3, [r7, #20]
   uint32_t errorflags = 0x00U;
 8005350:	2300      	movs	r3, #0
 8005352:	613b      	str	r3, [r7, #16]
   uint32_t dmarequest = 0x00U;
 8005354:	2300      	movs	r3, #0
 8005356:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005358:	69fb      	ldr	r3, [r7, #28]
 800535a:	f003 030f 	and.w	r3, r3, #15
 800535e:	613b      	str	r3, [r7, #16]
  if(errorflags == RESET)
 8005360:	693b      	ldr	r3, [r7, #16]
 8005362:	2b00      	cmp	r3, #0
 8005364:	d10d      	bne.n	8005382 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005366:	69fb      	ldr	r3, [r7, #28]
 8005368:	f003 0320 	and.w	r3, r3, #32
 800536c:	2b00      	cmp	r3, #0
 800536e:	d008      	beq.n	8005382 <HAL_UART_IRQHandler+0x52>
 8005370:	69bb      	ldr	r3, [r7, #24]
 8005372:	f003 0320 	and.w	r3, r3, #32
 8005376:	2b00      	cmp	r3, #0
 8005378:	d003      	beq.n	8005382 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800537a:	6878      	ldr	r0, [r7, #4]
 800537c:	f000 f9cc 	bl	8005718 <UART_Receive_IT>
      return;
 8005380:	e0cb      	b.n	800551a <HAL_UART_IRQHandler+0x1ea>
    }
  }

  /* If some errors occur */
  if((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005382:	693b      	ldr	r3, [r7, #16]
 8005384:	2b00      	cmp	r3, #0
 8005386:	f000 80ab 	beq.w	80054e0 <HAL_UART_IRQHandler+0x1b0>
 800538a:	697b      	ldr	r3, [r7, #20]
 800538c:	f003 0301 	and.w	r3, r3, #1
 8005390:	2b00      	cmp	r3, #0
 8005392:	d105      	bne.n	80053a0 <HAL_UART_IRQHandler+0x70>
 8005394:	69bb      	ldr	r3, [r7, #24]
 8005396:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800539a:	2b00      	cmp	r3, #0
 800539c:	f000 80a0 	beq.w	80054e0 <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if(((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80053a0:	69fb      	ldr	r3, [r7, #28]
 80053a2:	f003 0301 	and.w	r3, r3, #1
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d00a      	beq.n	80053c0 <HAL_UART_IRQHandler+0x90>
 80053aa:	69bb      	ldr	r3, [r7, #24]
 80053ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d005      	beq.n	80053c0 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053b8:	f043 0201 	orr.w	r2, r3, #1
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if(((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80053c0:	69fb      	ldr	r3, [r7, #28]
 80053c2:	f003 0304 	and.w	r3, r3, #4
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d00a      	beq.n	80053e0 <HAL_UART_IRQHandler+0xb0>
 80053ca:	697b      	ldr	r3, [r7, #20]
 80053cc:	f003 0301 	and.w	r3, r3, #1
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d005      	beq.n	80053e0 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053d8:	f043 0202 	orr.w	r2, r3, #2
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if(((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80053e0:	69fb      	ldr	r3, [r7, #28]
 80053e2:	f003 0302 	and.w	r3, r3, #2
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d00a      	beq.n	8005400 <HAL_UART_IRQHandler+0xd0>
 80053ea:	697b      	ldr	r3, [r7, #20]
 80053ec:	f003 0301 	and.w	r3, r3, #1
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d005      	beq.n	8005400 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053f8:	f043 0204 	orr.w	r2, r3, #4
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if(((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005400:	69fb      	ldr	r3, [r7, #28]
 8005402:	f003 0308 	and.w	r3, r3, #8
 8005406:	2b00      	cmp	r3, #0
 8005408:	d00a      	beq.n	8005420 <HAL_UART_IRQHandler+0xf0>
 800540a:	697b      	ldr	r3, [r7, #20]
 800540c:	f003 0301 	and.w	r3, r3, #1
 8005410:	2b00      	cmp	r3, #0
 8005412:	d005      	beq.n	8005420 <HAL_UART_IRQHandler+0xf0>
    { 
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005418:	f043 0208 	orr.w	r2, r3, #8
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005424:	2b00      	cmp	r3, #0
 8005426:	d077      	beq.n	8005518 <HAL_UART_IRQHandler+0x1e8>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005428:	69fb      	ldr	r3, [r7, #28]
 800542a:	f003 0320 	and.w	r3, r3, #32
 800542e:	2b00      	cmp	r3, #0
 8005430:	d007      	beq.n	8005442 <HAL_UART_IRQHandler+0x112>
 8005432:	69bb      	ldr	r3, [r7, #24]
 8005434:	f003 0320 	and.w	r3, r3, #32
 8005438:	2b00      	cmp	r3, #0
 800543a:	d002      	beq.n	8005442 <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 800543c:	6878      	ldr	r0, [r7, #4]
 800543e:	f000 f96b 	bl	8005718 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	695b      	ldr	r3, [r3, #20]
 8005448:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800544c:	2b00      	cmp	r3, #0
 800544e:	bf14      	ite	ne
 8005450:	2301      	movne	r3, #1
 8005452:	2300      	moveq	r3, #0
 8005454:	b2db      	uxtb	r3, r3
 8005456:	60fb      	str	r3, [r7, #12]
      if(((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800545c:	f003 0308 	and.w	r3, r3, #8
 8005460:	2b00      	cmp	r3, #0
 8005462:	d102      	bne.n	800546a <HAL_UART_IRQHandler+0x13a>
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	2b00      	cmp	r3, #0
 8005468:	d031      	beq.n	80054ce <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800546a:	6878      	ldr	r0, [r7, #4]
 800546c:	f000 f8b6 	bl	80055dc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	695b      	ldr	r3, [r3, #20]
 8005476:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800547a:	2b00      	cmp	r3, #0
 800547c:	d023      	beq.n	80054c6 <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	695a      	ldr	r2, [r3, #20]
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800548c:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if(huart->hdmarx != NULL)
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005492:	2b00      	cmp	r3, #0
 8005494:	d013      	beq.n	80054be <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback : 
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800549a:	4a21      	ldr	r2, [pc, #132]	; (8005520 <HAL_UART_IRQHandler+0x1f0>)
 800549c:	635a      	str	r2, [r3, #52]	; 0x34
            if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054a2:	4618      	mov	r0, r3
 80054a4:	f7fc fce0 	bl	8001e68 <HAL_DMA_Abort_IT>
 80054a8:	4603      	mov	r3, r0
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d016      	beq.n	80054dc <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054b4:	687a      	ldr	r2, [r7, #4]
 80054b6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80054b8:	4610      	mov	r0, r2
 80054ba:	4798      	blx	r3
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80054bc:	e00e      	b.n	80054dc <HAL_UART_IRQHandler+0x1ac>
            }
          }
          else
          {
            /* Call user error callback */
            HAL_UART_ErrorCallback(huart);
 80054be:	6878      	ldr	r0, [r7, #4]
 80054c0:	f000 f839 	bl	8005536 <HAL_UART_ErrorCallback>
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80054c4:	e00a      	b.n	80054dc <HAL_UART_IRQHandler+0x1ac>
          }
        }
        else
        {
          /* Call user error callback */
          HAL_UART_ErrorCallback(huart);
 80054c6:	6878      	ldr	r0, [r7, #4]
 80054c8:	f000 f835 	bl	8005536 <HAL_UART_ErrorCallback>
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80054cc:	e006      	b.n	80054dc <HAL_UART_IRQHandler+0x1ac>
      }
      else
      {
        /* Non Blocking error : transfer could go on. 
           Error is notified to user through user error callback */
        HAL_UART_ErrorCallback(huart);
 80054ce:	6878      	ldr	r0, [r7, #4]
 80054d0:	f000 f831 	bl	8005536 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	2200      	movs	r2, #0
 80054d8:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 80054da:	e01d      	b.n	8005518 <HAL_UART_IRQHandler+0x1e8>
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80054dc:	bf00      	nop
    return;
 80054de:	e01b      	b.n	8005518 <HAL_UART_IRQHandler+0x1e8>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if(((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80054e0:	69fb      	ldr	r3, [r7, #28]
 80054e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d008      	beq.n	80054fc <HAL_UART_IRQHandler+0x1cc>
 80054ea:	69bb      	ldr	r3, [r7, #24]
 80054ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d003      	beq.n	80054fc <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 80054f4:	6878      	ldr	r0, [r7, #4]
 80054f6:	f000 f8a2 	bl	800563e <UART_Transmit_IT>
    return;
 80054fa:	e00e      	b.n	800551a <HAL_UART_IRQHandler+0x1ea>
  }
  
  /* UART in mode Transmitter end --------------------------------------------*/
  if(((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80054fc:	69fb      	ldr	r3, [r7, #28]
 80054fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005502:	2b00      	cmp	r3, #0
 8005504:	d009      	beq.n	800551a <HAL_UART_IRQHandler+0x1ea>
 8005506:	69bb      	ldr	r3, [r7, #24]
 8005508:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800550c:	2b00      	cmp	r3, #0
 800550e:	d004      	beq.n	800551a <HAL_UART_IRQHandler+0x1ea>
  {
    UART_EndTransmit_IT(huart);
 8005510:	6878      	ldr	r0, [r7, #4]
 8005512:	f000 f8e9 	bl	80056e8 <UART_EndTransmit_IT>
    return;
 8005516:	e000      	b.n	800551a <HAL_UART_IRQHandler+0x1ea>
    return;
 8005518:	bf00      	nop
  }
}
 800551a:	3720      	adds	r7, #32
 800551c:	46bd      	mov	sp, r7
 800551e:	bd80      	pop	{r7, pc}
 8005520:	08005617 	.word	0x08005617

08005524 <HAL_UART_TxCpltCallback>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
 __weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005524:	b480      	push	{r7}
 8005526:	b083      	sub	sp, #12
 8005528:	af00      	add	r7, sp, #0
 800552a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */ 
}
 800552c:	bf00      	nop
 800552e:	370c      	adds	r7, #12
 8005530:	46bd      	mov	sp, r7
 8005532:	bc80      	pop	{r7}
 8005534:	4770      	bx	lr

08005536 <HAL_UART_ErrorCallback>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
 __weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005536:	b480      	push	{r7}
 8005538:	b083      	sub	sp, #12
 800553a:	af00      	add	r7, sp, #0
 800553c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart); 
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */ 
}
 800553e:	bf00      	nop
 8005540:	370c      	adds	r7, #12
 8005542:	46bd      	mov	sp, r7
 8005544:	bc80      	pop	{r7}
 8005546:	4770      	bx	lr

08005548 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8005548:	b580      	push	{r7, lr}
 800554a:	b084      	sub	sp, #16
 800554c:	af00      	add	r7, sp, #0
 800554e:	60f8      	str	r0, [r7, #12]
 8005550:	60b9      	str	r1, [r7, #8]
 8005552:	603b      	str	r3, [r7, #0]
 8005554:	4613      	mov	r3, r2
 8005556:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 8005558:	e02c      	b.n	80055b4 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 800555a:	69bb      	ldr	r3, [r7, #24]
 800555c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005560:	d028      	beq.n	80055b4 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8005562:	69bb      	ldr	r3, [r7, #24]
 8005564:	2b00      	cmp	r3, #0
 8005566:	d007      	beq.n	8005578 <UART_WaitOnFlagUntilTimeout+0x30>
 8005568:	f7fb fd0a 	bl	8000f80 <HAL_GetTick>
 800556c:	4602      	mov	r2, r0
 800556e:	683b      	ldr	r3, [r7, #0]
 8005570:	1ad3      	subs	r3, r2, r3
 8005572:	69ba      	ldr	r2, [r7, #24]
 8005574:	429a      	cmp	r2, r3
 8005576:	d21d      	bcs.n	80055b4 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	68da      	ldr	r2, [r3, #12]
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005586:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	695a      	ldr	r2, [r3, #20]
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	f022 0201 	bic.w	r2, r2, #1
 8005596:	615a      	str	r2, [r3, #20]
        
        huart->gState  = HAL_UART_STATE_READY;
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	2220      	movs	r2, #32
 800559c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	2220      	movs	r2, #32
 80055a4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
        
        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	2200      	movs	r2, #0
 80055ac:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        
        return HAL_TIMEOUT;
 80055b0:	2303      	movs	r3, #3
 80055b2:	e00f      	b.n	80055d4 <UART_WaitOnFlagUntilTimeout+0x8c>
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	681a      	ldr	r2, [r3, #0]
 80055ba:	68bb      	ldr	r3, [r7, #8]
 80055bc:	4013      	ands	r3, r2
 80055be:	68ba      	ldr	r2, [r7, #8]
 80055c0:	429a      	cmp	r2, r3
 80055c2:	bf0c      	ite	eq
 80055c4:	2301      	moveq	r3, #1
 80055c6:	2300      	movne	r3, #0
 80055c8:	b2db      	uxtb	r3, r3
 80055ca:	461a      	mov	r2, r3
 80055cc:	79fb      	ldrb	r3, [r7, #7]
 80055ce:	429a      	cmp	r2, r3
 80055d0:	d0c3      	beq.n	800555a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  
  return HAL_OK;
 80055d2:	2300      	movs	r3, #0
}
 80055d4:	4618      	mov	r0, r3
 80055d6:	3710      	adds	r7, #16
 80055d8:	46bd      	mov	sp, r7
 80055da:	bd80      	pop	{r7, pc}

080055dc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart: UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80055dc:	b480      	push	{r7}
 80055de:	b083      	sub	sp, #12
 80055e0:	af00      	add	r7, sp, #0
 80055e2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	68da      	ldr	r2, [r3, #12]
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80055f2:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	695a      	ldr	r2, [r3, #20]
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	f022 0201 	bic.w	r2, r2, #1
 8005602:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	2220      	movs	r2, #32
 8005608:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 800560c:	bf00      	nop
 800560e:	370c      	adds	r7, #12
 8005610:	46bd      	mov	sp, r7
 8005612:	bc80      	pop	{r7}
 8005614:	4770      	bx	lr

08005616 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005616:	b580      	push	{r7, lr}
 8005618:	b084      	sub	sp, #16
 800561a:	af00      	add	r7, sp, #0
 800561c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005622:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	2200      	movs	r2, #0
 8005628:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	2200      	movs	r2, #0
 800562e:	84da      	strh	r2, [r3, #38]	; 0x26

  HAL_UART_ErrorCallback(huart);
 8005630:	68f8      	ldr	r0, [r7, #12]
 8005632:	f7ff ff80 	bl	8005536 <HAL_UART_ErrorCallback>
}
 8005636:	bf00      	nop
 8005638:	3710      	adds	r7, #16
 800563a:	46bd      	mov	sp, r7
 800563c:	bd80      	pop	{r7, pc}

0800563e <UART_Transmit_IT>:
  * @param  huart: Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800563e:	b480      	push	{r7}
 8005640:	b085      	sub	sp, #20
 8005642:	af00      	add	r7, sp, #0
 8005644:	6078      	str	r0, [r7, #4]
  uint16_t* tmp;
  
  /* Check that a Tx process is ongoing */
  if(huart->gState == HAL_UART_STATE_BUSY_TX)
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800564c:	b2db      	uxtb	r3, r3
 800564e:	2b21      	cmp	r3, #33	; 0x21
 8005650:	d144      	bne.n	80056dc <UART_Transmit_IT+0x9e>
  {
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	689b      	ldr	r3, [r3, #8]
 8005656:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800565a:	d11a      	bne.n	8005692 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t*) huart->pTxBuffPtr;
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	6a1b      	ldr	r3, [r3, #32]
 8005660:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	881b      	ldrh	r3, [r3, #0]
 8005666:	461a      	mov	r2, r3
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005670:	605a      	str	r2, [r3, #4]
      if(huart->Init.Parity == UART_PARITY_NONE)
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	691b      	ldr	r3, [r3, #16]
 8005676:	2b00      	cmp	r3, #0
 8005678:	d105      	bne.n	8005686 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	6a1b      	ldr	r3, [r3, #32]
 800567e:	1c9a      	adds	r2, r3, #2
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	621a      	str	r2, [r3, #32]
 8005684:	e00e      	b.n	80056a4 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	6a1b      	ldr	r3, [r3, #32]
 800568a:	1c5a      	adds	r2, r3, #1
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	621a      	str	r2, [r3, #32]
 8005690:	e008      	b.n	80056a4 <UART_Transmit_IT+0x66>
      }
    } 
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	6a1b      	ldr	r3, [r3, #32]
 8005696:	1c59      	adds	r1, r3, #1
 8005698:	687a      	ldr	r2, [r7, #4]
 800569a:	6211      	str	r1, [r2, #32]
 800569c:	781a      	ldrb	r2, [r3, #0]
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	605a      	str	r2, [r3, #4]
    }

    if(--huart->TxXferCount == 0U)
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80056a8:	b29b      	uxth	r3, r3
 80056aa:	3b01      	subs	r3, #1
 80056ac:	b29b      	uxth	r3, r3
 80056ae:	687a      	ldr	r2, [r7, #4]
 80056b0:	4619      	mov	r1, r3
 80056b2:	84d1      	strh	r1, [r2, #38]	; 0x26
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d10f      	bne.n	80056d8 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	68da      	ldr	r2, [r3, #12]
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80056c6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */    
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	68da      	ldr	r2, [r3, #12]
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80056d6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80056d8:	2300      	movs	r3, #0
 80056da:	e000      	b.n	80056de <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80056dc:	2302      	movs	r3, #2
  }
}
 80056de:	4618      	mov	r0, r3
 80056e0:	3714      	adds	r7, #20
 80056e2:	46bd      	mov	sp, r7
 80056e4:	bc80      	pop	{r7}
 80056e6:	4770      	bx	lr

080056e8 <UART_EndTransmit_IT>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80056e8:	b580      	push	{r7, lr}
 80056ea:	b082      	sub	sp, #8
 80056ec:	af00      	add	r7, sp, #0
 80056ee:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */    
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	68da      	ldr	r2, [r3, #12]
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80056fe:	60da      	str	r2, [r3, #12]
  
  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	2220      	movs	r2, #32
 8005704:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  HAL_UART_TxCpltCallback(huart);
 8005708:	6878      	ldr	r0, [r7, #4]
 800570a:	f7ff ff0b 	bl	8005524 <HAL_UART_TxCpltCallback>
  
  return HAL_OK;
 800570e:	2300      	movs	r3, #0
}
 8005710:	4618      	mov	r0, r3
 8005712:	3708      	adds	r7, #8
 8005714:	46bd      	mov	sp, r7
 8005716:	bd80      	pop	{r7, pc}

08005718 <UART_Receive_IT>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005718:	b580      	push	{r7, lr}
 800571a:	b084      	sub	sp, #16
 800571c:	af00      	add	r7, sp, #0
 800571e:	6078      	str	r0, [r7, #4]
  uint16_t* tmp;
  
  /* Check that a Rx process is ongoing */
  if(huart->RxState == HAL_UART_STATE_BUSY_RX) 
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8005726:	b2db      	uxtb	r3, r3
 8005728:	2b22      	cmp	r3, #34	; 0x22
 800572a:	d171      	bne.n	8005810 <UART_Receive_IT+0xf8>
  {
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	689b      	ldr	r3, [r3, #8]
 8005730:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005734:	d123      	bne.n	800577e <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t*) huart->pRxBuffPtr;
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800573a:	60fb      	str	r3, [r7, #12]
      if(huart->Init.Parity == UART_PARITY_NONE)
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	691b      	ldr	r3, [r3, #16]
 8005740:	2b00      	cmp	r3, #0
 8005742:	d10e      	bne.n	8005762 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	685b      	ldr	r3, [r3, #4]
 800574a:	b29b      	uxth	r3, r3
 800574c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005750:	b29a      	uxth	r2, r3
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800575a:	1c9a      	adds	r2, r3, #2
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	629a      	str	r2, [r3, #40]	; 0x28
 8005760:	e029      	b.n	80057b6 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	685b      	ldr	r3, [r3, #4]
 8005768:	b29b      	uxth	r3, r3
 800576a:	b2db      	uxtb	r3, r3
 800576c:	b29a      	uxth	r2, r3
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005776:	1c5a      	adds	r2, r3, #1
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	629a      	str	r2, [r3, #40]	; 0x28
 800577c:	e01b      	b.n	80057b6 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if(huart->Init.Parity == UART_PARITY_NONE)
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	691b      	ldr	r3, [r3, #16]
 8005782:	2b00      	cmp	r3, #0
 8005784:	d10a      	bne.n	800579c <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	6858      	ldr	r0, [r3, #4]
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005790:	1c59      	adds	r1, r3, #1
 8005792:	687a      	ldr	r2, [r7, #4]
 8005794:	6291      	str	r1, [r2, #40]	; 0x28
 8005796:	b2c2      	uxtb	r2, r0
 8005798:	701a      	strb	r2, [r3, #0]
 800579a:	e00c      	b.n	80057b6 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	685b      	ldr	r3, [r3, #4]
 80057a2:	b2da      	uxtb	r2, r3
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057a8:	1c58      	adds	r0, r3, #1
 80057aa:	6879      	ldr	r1, [r7, #4]
 80057ac:	6288      	str	r0, [r1, #40]	; 0x28
 80057ae:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80057b2:	b2d2      	uxtb	r2, r2
 80057b4:	701a      	strb	r2, [r3, #0]
      }
    }

    if(--huart->RxXferCount == 0U)
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80057ba:	b29b      	uxth	r3, r3
 80057bc:	3b01      	subs	r3, #1
 80057be:	b29b      	uxth	r3, r3
 80057c0:	687a      	ldr	r2, [r7, #4]
 80057c2:	4619      	mov	r1, r3
 80057c4:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d120      	bne.n	800580c <UART_Receive_IT+0xf4>
    {
      /* Disable the IRDA Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	68da      	ldr	r2, [r3, #12]
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	f022 0220 	bic.w	r2, r2, #32
 80057d8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	68da      	ldr	r2, [r3, #12]
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80057e8:	60da      	str	r2, [r3, #12]
        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	695a      	ldr	r2, [r3, #20]
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	f022 0201 	bic.w	r2, r2, #1
 80057f8:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	2220      	movs	r2, #32
 80057fe:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

      HAL_UART_RxCpltCallback(huart);
 8005802:	6878      	ldr	r0, [r7, #4]
 8005804:	f000 fd80 	bl	8006308 <HAL_UART_RxCpltCallback>

      return HAL_OK;
 8005808:	2300      	movs	r3, #0
 800580a:	e002      	b.n	8005812 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 800580c:	2300      	movs	r3, #0
 800580e:	e000      	b.n	8005812 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8005810:	2302      	movs	r3, #2
  }
}
 8005812:	4618      	mov	r0, r3
 8005814:	3710      	adds	r7, #16
 8005816:	46bd      	mov	sp, r7
 8005818:	bd80      	pop	{r7, pc}
	...

0800581c <UART_SetConfig>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800581c:	b5b0      	push	{r4, r5, r7, lr}
 800581e:	b084      	sub	sp, #16
 8005820:	af00      	add	r7, sp, #0
 8005822:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0x00U;
 8005824:	2300      	movs	r3, #0
 8005826:	60fb      	str	r3, [r7, #12]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*------- UART-associated USART registers setting : CR2 Configuration ------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according 
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	691b      	ldr	r3, [r3, #16]
 800582e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	68da      	ldr	r2, [r3, #12]
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	430a      	orrs	r2, r1
 800583c:	611a      	str	r2, [r3, #16]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1, 
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8), 
             tmpreg);
#else
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	689a      	ldr	r2, [r3, #8]
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	691b      	ldr	r3, [r3, #16]
 8005846:	431a      	orrs	r2, r3
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	695b      	ldr	r3, [r3, #20]
 800584c:	4313      	orrs	r3, r2
 800584e:	68fa      	ldr	r2, [r7, #12]
 8005850:	4313      	orrs	r3, r2
 8005852:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1, 
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	68db      	ldr	r3, [r3, #12]
 800585a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800585e:	f023 030c 	bic.w	r3, r3, #12
 8005862:	687a      	ldr	r2, [r7, #4]
 8005864:	6812      	ldr	r2, [r2, #0]
 8005866:	68f9      	ldr	r1, [r7, #12]
 8005868:	430b      	orrs	r3, r1
 800586a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*------- UART-associated USART registers setting : CR3 Configuration ------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	695b      	ldr	r3, [r3, #20]
 8005872:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	699a      	ldr	r2, [r3, #24]
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	430a      	orrs	r2, r1
 8005880:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	4a6f      	ldr	r2, [pc, #444]	; (8005a44 <UART_SetConfig+0x228>)
 8005888:	4293      	cmp	r3, r2
 800588a:	d16b      	bne.n	8005964 <UART_SetConfig+0x148>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 800588c:	f7ff fa9a 	bl	8004dc4 <HAL_RCC_GetPCLK2Freq>
 8005890:	4602      	mov	r2, r0
 8005892:	4613      	mov	r3, r2
 8005894:	009b      	lsls	r3, r3, #2
 8005896:	4413      	add	r3, r2
 8005898:	009a      	lsls	r2, r3, #2
 800589a:	441a      	add	r2, r3
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	685b      	ldr	r3, [r3, #4]
 80058a0:	009b      	lsls	r3, r3, #2
 80058a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80058a6:	4a68      	ldr	r2, [pc, #416]	; (8005a48 <UART_SetConfig+0x22c>)
 80058a8:	fba2 2303 	umull	r2, r3, r2, r3
 80058ac:	095b      	lsrs	r3, r3, #5
 80058ae:	011c      	lsls	r4, r3, #4
 80058b0:	f7ff fa88 	bl	8004dc4 <HAL_RCC_GetPCLK2Freq>
 80058b4:	4602      	mov	r2, r0
 80058b6:	4613      	mov	r3, r2
 80058b8:	009b      	lsls	r3, r3, #2
 80058ba:	4413      	add	r3, r2
 80058bc:	009a      	lsls	r2, r3, #2
 80058be:	441a      	add	r2, r3
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	685b      	ldr	r3, [r3, #4]
 80058c4:	009b      	lsls	r3, r3, #2
 80058c6:	fbb2 f5f3 	udiv	r5, r2, r3
 80058ca:	f7ff fa7b 	bl	8004dc4 <HAL_RCC_GetPCLK2Freq>
 80058ce:	4602      	mov	r2, r0
 80058d0:	4613      	mov	r3, r2
 80058d2:	009b      	lsls	r3, r3, #2
 80058d4:	4413      	add	r3, r2
 80058d6:	009a      	lsls	r2, r3, #2
 80058d8:	441a      	add	r2, r3
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	685b      	ldr	r3, [r3, #4]
 80058de:	009b      	lsls	r3, r3, #2
 80058e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80058e4:	4a58      	ldr	r2, [pc, #352]	; (8005a48 <UART_SetConfig+0x22c>)
 80058e6:	fba2 2303 	umull	r2, r3, r2, r3
 80058ea:	095b      	lsrs	r3, r3, #5
 80058ec:	2264      	movs	r2, #100	; 0x64
 80058ee:	fb02 f303 	mul.w	r3, r2, r3
 80058f2:	1aeb      	subs	r3, r5, r3
 80058f4:	011b      	lsls	r3, r3, #4
 80058f6:	3332      	adds	r3, #50	; 0x32
 80058f8:	4a53      	ldr	r2, [pc, #332]	; (8005a48 <UART_SetConfig+0x22c>)
 80058fa:	fba2 2303 	umull	r2, r3, r2, r3
 80058fe:	095b      	lsrs	r3, r3, #5
 8005900:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005904:	441c      	add	r4, r3
 8005906:	f7ff fa5d 	bl	8004dc4 <HAL_RCC_GetPCLK2Freq>
 800590a:	4602      	mov	r2, r0
 800590c:	4613      	mov	r3, r2
 800590e:	009b      	lsls	r3, r3, #2
 8005910:	4413      	add	r3, r2
 8005912:	009a      	lsls	r2, r3, #2
 8005914:	441a      	add	r2, r3
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	685b      	ldr	r3, [r3, #4]
 800591a:	009b      	lsls	r3, r3, #2
 800591c:	fbb2 f5f3 	udiv	r5, r2, r3
 8005920:	f7ff fa50 	bl	8004dc4 <HAL_RCC_GetPCLK2Freq>
 8005924:	4602      	mov	r2, r0
 8005926:	4613      	mov	r3, r2
 8005928:	009b      	lsls	r3, r3, #2
 800592a:	4413      	add	r3, r2
 800592c:	009a      	lsls	r2, r3, #2
 800592e:	441a      	add	r2, r3
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	685b      	ldr	r3, [r3, #4]
 8005934:	009b      	lsls	r3, r3, #2
 8005936:	fbb2 f3f3 	udiv	r3, r2, r3
 800593a:	4a43      	ldr	r2, [pc, #268]	; (8005a48 <UART_SetConfig+0x22c>)
 800593c:	fba2 2303 	umull	r2, r3, r2, r3
 8005940:	095b      	lsrs	r3, r3, #5
 8005942:	2264      	movs	r2, #100	; 0x64
 8005944:	fb02 f303 	mul.w	r3, r2, r3
 8005948:	1aeb      	subs	r3, r5, r3
 800594a:	011b      	lsls	r3, r3, #4
 800594c:	3332      	adds	r3, #50	; 0x32
 800594e:	4a3e      	ldr	r2, [pc, #248]	; (8005a48 <UART_SetConfig+0x22c>)
 8005950:	fba2 2303 	umull	r2, r3, r2, r3
 8005954:	095b      	lsrs	r3, r3, #5
 8005956:	f003 020f 	and.w	r2, r3, #15
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	4422      	add	r2, r4
 8005960:	609a      	str	r2, [r3, #8]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 8005962:	e06a      	b.n	8005a3a <UART_SetConfig+0x21e>
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8005964:	f7ff fa1a 	bl	8004d9c <HAL_RCC_GetPCLK1Freq>
 8005968:	4602      	mov	r2, r0
 800596a:	4613      	mov	r3, r2
 800596c:	009b      	lsls	r3, r3, #2
 800596e:	4413      	add	r3, r2
 8005970:	009a      	lsls	r2, r3, #2
 8005972:	441a      	add	r2, r3
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	685b      	ldr	r3, [r3, #4]
 8005978:	009b      	lsls	r3, r3, #2
 800597a:	fbb2 f3f3 	udiv	r3, r2, r3
 800597e:	4a32      	ldr	r2, [pc, #200]	; (8005a48 <UART_SetConfig+0x22c>)
 8005980:	fba2 2303 	umull	r2, r3, r2, r3
 8005984:	095b      	lsrs	r3, r3, #5
 8005986:	011c      	lsls	r4, r3, #4
 8005988:	f7ff fa08 	bl	8004d9c <HAL_RCC_GetPCLK1Freq>
 800598c:	4602      	mov	r2, r0
 800598e:	4613      	mov	r3, r2
 8005990:	009b      	lsls	r3, r3, #2
 8005992:	4413      	add	r3, r2
 8005994:	009a      	lsls	r2, r3, #2
 8005996:	441a      	add	r2, r3
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	685b      	ldr	r3, [r3, #4]
 800599c:	009b      	lsls	r3, r3, #2
 800599e:	fbb2 f5f3 	udiv	r5, r2, r3
 80059a2:	f7ff f9fb 	bl	8004d9c <HAL_RCC_GetPCLK1Freq>
 80059a6:	4602      	mov	r2, r0
 80059a8:	4613      	mov	r3, r2
 80059aa:	009b      	lsls	r3, r3, #2
 80059ac:	4413      	add	r3, r2
 80059ae:	009a      	lsls	r2, r3, #2
 80059b0:	441a      	add	r2, r3
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	685b      	ldr	r3, [r3, #4]
 80059b6:	009b      	lsls	r3, r3, #2
 80059b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80059bc:	4a22      	ldr	r2, [pc, #136]	; (8005a48 <UART_SetConfig+0x22c>)
 80059be:	fba2 2303 	umull	r2, r3, r2, r3
 80059c2:	095b      	lsrs	r3, r3, #5
 80059c4:	2264      	movs	r2, #100	; 0x64
 80059c6:	fb02 f303 	mul.w	r3, r2, r3
 80059ca:	1aeb      	subs	r3, r5, r3
 80059cc:	011b      	lsls	r3, r3, #4
 80059ce:	3332      	adds	r3, #50	; 0x32
 80059d0:	4a1d      	ldr	r2, [pc, #116]	; (8005a48 <UART_SetConfig+0x22c>)
 80059d2:	fba2 2303 	umull	r2, r3, r2, r3
 80059d6:	095b      	lsrs	r3, r3, #5
 80059d8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80059dc:	441c      	add	r4, r3
 80059de:	f7ff f9dd 	bl	8004d9c <HAL_RCC_GetPCLK1Freq>
 80059e2:	4602      	mov	r2, r0
 80059e4:	4613      	mov	r3, r2
 80059e6:	009b      	lsls	r3, r3, #2
 80059e8:	4413      	add	r3, r2
 80059ea:	009a      	lsls	r2, r3, #2
 80059ec:	441a      	add	r2, r3
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	685b      	ldr	r3, [r3, #4]
 80059f2:	009b      	lsls	r3, r3, #2
 80059f4:	fbb2 f5f3 	udiv	r5, r2, r3
 80059f8:	f7ff f9d0 	bl	8004d9c <HAL_RCC_GetPCLK1Freq>
 80059fc:	4602      	mov	r2, r0
 80059fe:	4613      	mov	r3, r2
 8005a00:	009b      	lsls	r3, r3, #2
 8005a02:	4413      	add	r3, r2
 8005a04:	009a      	lsls	r2, r3, #2
 8005a06:	441a      	add	r2, r3
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	685b      	ldr	r3, [r3, #4]
 8005a0c:	009b      	lsls	r3, r3, #2
 8005a0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a12:	4a0d      	ldr	r2, [pc, #52]	; (8005a48 <UART_SetConfig+0x22c>)
 8005a14:	fba2 2303 	umull	r2, r3, r2, r3
 8005a18:	095b      	lsrs	r3, r3, #5
 8005a1a:	2264      	movs	r2, #100	; 0x64
 8005a1c:	fb02 f303 	mul.w	r3, r2, r3
 8005a20:	1aeb      	subs	r3, r5, r3
 8005a22:	011b      	lsls	r3, r3, #4
 8005a24:	3332      	adds	r3, #50	; 0x32
 8005a26:	4a08      	ldr	r2, [pc, #32]	; (8005a48 <UART_SetConfig+0x22c>)
 8005a28:	fba2 2303 	umull	r2, r3, r2, r3
 8005a2c:	095b      	lsrs	r3, r3, #5
 8005a2e:	f003 020f 	and.w	r2, r3, #15
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	4422      	add	r2, r4
 8005a38:	609a      	str	r2, [r3, #8]
}
 8005a3a:	bf00      	nop
 8005a3c:	3710      	adds	r7, #16
 8005a3e:	46bd      	mov	sp, r7
 8005a40:	bdb0      	pop	{r4, r5, r7, pc}
 8005a42:	bf00      	nop
 8005a44:	40013800 	.word	0x40013800
 8005a48:	51eb851f 	.word	0x51eb851f

08005a4c <can_Init>:

//===========================================================================
// INIT CAN
//===========================================================================
void can_Init()
{
 8005a4c:	b580      	push	{r7, lr}
 8005a4e:	af00      	add	r7, sp, #0
	CanHandle.Instance = CAN1;
 8005a50:	4b19      	ldr	r3, [pc, #100]	; (8005ab8 <can_Init+0x6c>)
 8005a52:	4a1a      	ldr	r2, [pc, #104]	; (8005abc <can_Init+0x70>)
 8005a54:	601a      	str	r2, [r3, #0]
	CanHandle.pTxMsg = &canTxMsg;
 8005a56:	4b18      	ldr	r3, [pc, #96]	; (8005ab8 <can_Init+0x6c>)
 8005a58:	4a19      	ldr	r2, [pc, #100]	; (8005ac0 <can_Init+0x74>)
 8005a5a:	631a      	str	r2, [r3, #48]	; 0x30
	CanHandle.pRxMsg = &canRxMsg;
 8005a5c:	4b16      	ldr	r3, [pc, #88]	; (8005ab8 <can_Init+0x6c>)
 8005a5e:	4a19      	ldr	r2, [pc, #100]	; (8005ac4 <can_Init+0x78>)
 8005a60:	635a      	str	r2, [r3, #52]	; 0x34

	CanHandle.Init.TTCM = DISABLE;
 8005a62:	4b15      	ldr	r3, [pc, #84]	; (8005ab8 <can_Init+0x6c>)
 8005a64:	2200      	movs	r2, #0
 8005a66:	619a      	str	r2, [r3, #24]
	CanHandle.Init.ABOM = DISABLE;
 8005a68:	4b13      	ldr	r3, [pc, #76]	; (8005ab8 <can_Init+0x6c>)
 8005a6a:	2200      	movs	r2, #0
 8005a6c:	61da      	str	r2, [r3, #28]
	CanHandle.Init.AWUM = DISABLE;
 8005a6e:	4b12      	ldr	r3, [pc, #72]	; (8005ab8 <can_Init+0x6c>)
 8005a70:	2200      	movs	r2, #0
 8005a72:	621a      	str	r2, [r3, #32]
	CanHandle.Init.NART = DISABLE;
 8005a74:	4b10      	ldr	r3, [pc, #64]	; (8005ab8 <can_Init+0x6c>)
 8005a76:	2200      	movs	r2, #0
 8005a78:	625a      	str	r2, [r3, #36]	; 0x24
	CanHandle.Init.RFLM = DISABLE;
 8005a7a:	4b0f      	ldr	r3, [pc, #60]	; (8005ab8 <can_Init+0x6c>)
 8005a7c:	2200      	movs	r2, #0
 8005a7e:	629a      	str	r2, [r3, #40]	; 0x28
	CanHandle.Init.TXFP = DISABLE;
 8005a80:	4b0d      	ldr	r3, [pc, #52]	; (8005ab8 <can_Init+0x6c>)
 8005a82:	2200      	movs	r2, #0
 8005a84:	62da      	str	r2, [r3, #44]	; 0x2c
	CanHandle.Init.Mode = CAN_MODE_NORMAL;
 8005a86:	4b0c      	ldr	r3, [pc, #48]	; (8005ab8 <can_Init+0x6c>)
 8005a88:	2200      	movs	r2, #0
 8005a8a:	609a      	str	r2, [r3, #8]

	// 125kbps bit rate (default)
	// APB1 peripheral clock = 36000000Hz
	CanHandle.Init.Prescaler = 18;      // number of time quanta = 36000000/18/125000 = 16
 8005a8c:	4b0a      	ldr	r3, [pc, #40]	; (8005ab8 <can_Init+0x6c>)
 8005a8e:	2212      	movs	r2, #18
 8005a90:	605a      	str	r2, [r3, #4]
	CanHandle.Init.SJW = CAN_SJW_1TQ;
 8005a92:	4b09      	ldr	r3, [pc, #36]	; (8005ab8 <can_Init+0x6c>)
 8005a94:	2200      	movs	r2, #0
 8005a96:	60da      	str	r2, [r3, #12]
	CanHandle.Init.BS1 = CAN_BS1_11TQ;  // sample point at (1 + 11) / 16 * 100 = 75%
 8005a98:	4b07      	ldr	r3, [pc, #28]	; (8005ab8 <can_Init+0x6c>)
 8005a9a:	f44f 2220 	mov.w	r2, #655360	; 0xa0000
 8005a9e:	611a      	str	r2, [r3, #16]
	CanHandle.Init.BS2 = CAN_BS2_4TQ;
 8005aa0:	4b05      	ldr	r3, [pc, #20]	; (8005ab8 <can_Init+0x6c>)
 8005aa2:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 8005aa6:	615a      	str	r2, [r3, #20]

	HAL_CAN_Init(&CanHandle);
 8005aa8:	4803      	ldr	r0, [pc, #12]	; (8005ab8 <can_Init+0x6c>)
 8005aaa:	f7fb fa97 	bl	8000fdc <HAL_CAN_Init>
	can_IrqSet(can_callback);
 8005aae:	4806      	ldr	r0, [pc, #24]	; (8005ac8 <can_Init+0x7c>)
 8005ab0:	f000 f896 	bl	8005be0 <can_IrqSet>
	
//	can_Filter(0, 0, CANAny, 0);
}
 8005ab4:	bf00      	nop
 8005ab6:	bd80      	pop	{r7, pc}
 8005ab8:	20000314 	.word	0x20000314
 8005abc:	40006400 	.word	0x40006400
 8005ac0:	20000354 	.word	0x20000354
 8005ac4:	20000388 	.word	0x20000388
 8005ac8:	08006eb9 	.word	0x08006eb9

08005acc <can_SetFreq>:

//===========================================================================
int can_SetFreq(int hz) {
 8005acc:	b580      	push	{r7, lr}
 8005ace:	b082      	sub	sp, #8
 8005ad0:	af00      	add	r7, sp, #0
 8005ad2:	6078      	str	r0, [r7, #4]

    HAL_NVIC_DisableIRQ(USB_LP_CAN1_RX0_IRQn);
 8005ad4:	2014      	movs	r0, #20
 8005ad6:	f7fc f98a 	bl	8001dee <HAL_NVIC_DisableIRQ>
    // APB1 peripheral clock = 36000000Hz
    switch(hz) {
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	4a36      	ldr	r2, [pc, #216]	; (8005bb8 <can_SetFreq+0xec>)
 8005ade:	4293      	cmp	r3, r2
 8005ae0:	d014      	beq.n	8005b0c <can_SetFreq+0x40>
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	4a34      	ldr	r2, [pc, #208]	; (8005bb8 <can_SetFreq+0xec>)
 8005ae6:	4293      	cmp	r3, r2
 8005ae8:	dc4c      	bgt.n	8005b84 <can_SetFreq+0xb8>
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	4a33      	ldr	r2, [pc, #204]	; (8005bbc <can_SetFreq+0xf0>)
 8005aee:	4293      	cmp	r3, r2
 8005af0:	d01b      	beq.n	8005b2a <can_SetFreq+0x5e>
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	4a31      	ldr	r2, [pc, #196]	; (8005bbc <can_SetFreq+0xf0>)
 8005af6:	4293      	cmp	r3, r2
 8005af8:	dc44      	bgt.n	8005b84 <can_SetFreq+0xb8>
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	4a30      	ldr	r2, [pc, #192]	; (8005bc0 <can_SetFreq+0xf4>)
 8005afe:	4293      	cmp	r3, r2
 8005b00:	d031      	beq.n	8005b66 <can_SetFreq+0x9a>
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	4a2f      	ldr	r2, [pc, #188]	; (8005bc4 <can_SetFreq+0xf8>)
 8005b06:	4293      	cmp	r3, r2
 8005b08:	d01e      	beq.n	8005b48 <can_SetFreq+0x7c>
 8005b0a:	e03b      	b.n	8005b84 <can_SetFreq+0xb8>
    case 1000000:
        // 1000kbps bit rate
        CanHandle.Init.Prescaler = 3;//3;      // number of time quanta = 36000000/3/1000000 = 12
 8005b0c:	4b2e      	ldr	r3, [pc, #184]	; (8005bc8 <can_SetFreq+0xfc>)
 8005b0e:	2203      	movs	r2, #3
 8005b10:	605a      	str	r2, [r3, #4]
        CanHandle.Init.SJW = CAN_SJW_1TQ;
 8005b12:	4b2d      	ldr	r3, [pc, #180]	; (8005bc8 <can_SetFreq+0xfc>)
 8005b14:	2200      	movs	r2, #0
 8005b16:	60da      	str	r2, [r3, #12]
        CanHandle.Init.BS1 = CAN_BS1_8TQ;  // sample point at: (1 + 8) / 12 * 100 = 75%
 8005b18:	4b2b      	ldr	r3, [pc, #172]	; (8005bc8 <can_SetFreq+0xfc>)
 8005b1a:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8005b1e:	611a      	str	r2, [r3, #16]
        CanHandle.Init.BS2 = CAN_BS2_3TQ;
 8005b20:	4b29      	ldr	r3, [pc, #164]	; (8005bc8 <can_SetFreq+0xfc>)
 8005b22:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8005b26:	615a      	str	r2, [r3, #20]
        break;
 8005b28:	e03a      	b.n	8005ba0 <can_SetFreq+0xd4>
    case 500000:
        // 500kbps bit rate
        CanHandle.Init.Prescaler = 6;      // number of time quanta = 36000000/6/500000 = 12
 8005b2a:	4b27      	ldr	r3, [pc, #156]	; (8005bc8 <can_SetFreq+0xfc>)
 8005b2c:	2206      	movs	r2, #6
 8005b2e:	605a      	str	r2, [r3, #4]
        CanHandle.Init.SJW = CAN_SJW_1TQ;
 8005b30:	4b25      	ldr	r3, [pc, #148]	; (8005bc8 <can_SetFreq+0xfc>)
 8005b32:	2200      	movs	r2, #0
 8005b34:	60da      	str	r2, [r3, #12]
        CanHandle.Init.BS1 = CAN_BS1_8TQ;  // sample point at: (1 + 8) / 12 * 100 = 75%
 8005b36:	4b24      	ldr	r3, [pc, #144]	; (8005bc8 <can_SetFreq+0xfc>)
 8005b38:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8005b3c:	611a      	str	r2, [r3, #16]
        CanHandle.Init.BS2 = CAN_BS2_3TQ;
 8005b3e:	4b22      	ldr	r3, [pc, #136]	; (8005bc8 <can_SetFreq+0xfc>)
 8005b40:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8005b44:	615a      	str	r2, [r3, #20]
        break;
 8005b46:	e02b      	b.n	8005ba0 <can_SetFreq+0xd4>
    case 250000:
        // 250kbps
        CanHandle.Init.Prescaler = 9;      // number of time quanta = 36000000/9/250000 = 16
 8005b48:	4b1f      	ldr	r3, [pc, #124]	; (8005bc8 <can_SetFreq+0xfc>)
 8005b4a:	2209      	movs	r2, #9
 8005b4c:	605a      	str	r2, [r3, #4]
        CanHandle.Init.SJW = CAN_SJW_1TQ;
 8005b4e:	4b1e      	ldr	r3, [pc, #120]	; (8005bc8 <can_SetFreq+0xfc>)
 8005b50:	2200      	movs	r2, #0
 8005b52:	60da      	str	r2, [r3, #12]
        CanHandle.Init.BS1 = CAN_BS1_11TQ; // sample point at: (1 + 11) / 16 * 100 = 75%
 8005b54:	4b1c      	ldr	r3, [pc, #112]	; (8005bc8 <can_SetFreq+0xfc>)
 8005b56:	f44f 2220 	mov.w	r2, #655360	; 0xa0000
 8005b5a:	611a      	str	r2, [r3, #16]
        CanHandle.Init.BS2 = CAN_BS2_4TQ;
 8005b5c:	4b1a      	ldr	r3, [pc, #104]	; (8005bc8 <can_SetFreq+0xfc>)
 8005b5e:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 8005b62:	615a      	str	r2, [r3, #20]
        break;
 8005b64:	e01c      	b.n	8005ba0 <can_SetFreq+0xd4>
    case 125000:
        // 125kbps
        CanHandle.Init.Prescaler = 18;     // number of time quanta = 36000000/18/125000 = 16
 8005b66:	4b18      	ldr	r3, [pc, #96]	; (8005bc8 <can_SetFreq+0xfc>)
 8005b68:	2212      	movs	r2, #18
 8005b6a:	605a      	str	r2, [r3, #4]
        CanHandle.Init.SJW = CAN_SJW_1TQ;
 8005b6c:	4b16      	ldr	r3, [pc, #88]	; (8005bc8 <can_SetFreq+0xfc>)
 8005b6e:	2200      	movs	r2, #0
 8005b70:	60da      	str	r2, [r3, #12]
        CanHandle.Init.BS1 = CAN_BS1_11TQ; // sample point at: (1 + 11) / 16 * 100 = 75%
 8005b72:	4b15      	ldr	r3, [pc, #84]	; (8005bc8 <can_SetFreq+0xfc>)
 8005b74:	f44f 2220 	mov.w	r2, #655360	; 0xa0000
 8005b78:	611a      	str	r2, [r3, #16]
        CanHandle.Init.BS2 = CAN_BS2_4TQ;
 8005b7a:	4b13      	ldr	r3, [pc, #76]	; (8005bc8 <can_SetFreq+0xfc>)
 8005b7c:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 8005b80:	615a      	str	r2, [r3, #20]
        break;
 8005b82:	e00d      	b.n	8005ba0 <can_SetFreq+0xd4>
    default:
        // 125kbps (default)
        CanHandle.Init.Prescaler = 18;     // number of time quanta = 36000000/18/125000 = 16
 8005b84:	4b10      	ldr	r3, [pc, #64]	; (8005bc8 <can_SetFreq+0xfc>)
 8005b86:	2212      	movs	r2, #18
 8005b88:	605a      	str	r2, [r3, #4]
        CanHandle.Init.SJW = CAN_SJW_1TQ;
 8005b8a:	4b0f      	ldr	r3, [pc, #60]	; (8005bc8 <can_SetFreq+0xfc>)
 8005b8c:	2200      	movs	r2, #0
 8005b8e:	60da      	str	r2, [r3, #12]
        CanHandle.Init.BS1 = CAN_BS1_11TQ; // sample point at: (1 + 11) / 16 * 100 = 75%
 8005b90:	4b0d      	ldr	r3, [pc, #52]	; (8005bc8 <can_SetFreq+0xfc>)
 8005b92:	f44f 2220 	mov.w	r2, #655360	; 0xa0000
 8005b96:	611a      	str	r2, [r3, #16]
        CanHandle.Init.BS2 = CAN_BS2_4TQ;
 8005b98:	4b0b      	ldr	r3, [pc, #44]	; (8005bc8 <can_SetFreq+0xfc>)
 8005b9a:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 8005b9e:	615a      	str	r2, [r3, #20]
    }

    HAL_CAN_Init(&CanHandle);
 8005ba0:	4809      	ldr	r0, [pc, #36]	; (8005bc8 <can_SetFreq+0xfc>)
 8005ba2:	f7fb fa1b 	bl	8000fdc <HAL_CAN_Init>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8005ba6:	2014      	movs	r0, #20
 8005ba8:	f7fc f913 	bl	8001dd2 <HAL_NVIC_EnableIRQ>

    return 1;
 8005bac:	2301      	movs	r3, #1
}
 8005bae:	4618      	mov	r0, r3
 8005bb0:	3708      	adds	r7, #8
 8005bb2:	46bd      	mov	sp, r7
 8005bb4:	bd80      	pop	{r7, pc}
 8005bb6:	bf00      	nop
 8005bb8:	000f4240 	.word	0x000f4240
 8005bbc:	0007a120 	.word	0x0007a120
 8005bc0:	0001e848 	.word	0x0001e848
 8005bc4:	0003d090 	.word	0x0003d090
 8005bc8:	20000314 	.word	0x20000314

08005bcc <can_IrqInit>:
//===========================================================================

void can_IrqInit(void)
{
 8005bcc:	b580      	push	{r7, lr}
 8005bce:	af00      	add	r7, sp, #0
	HAL_CAN_Receive_IT(&CanHandle, CAN_FIFO0);
 8005bd0:	2100      	movs	r1, #0
 8005bd2:	4802      	ldr	r0, [pc, #8]	; (8005bdc <can_IrqInit+0x10>)
 8005bd4:	f7fb fd34 	bl	8001640 <HAL_CAN_Receive_IT>
}
 8005bd8:	bf00      	nop
 8005bda:	bd80      	pop	{r7, pc}
 8005bdc:	20000314 	.word	0x20000314

08005be0 <can_IrqSet>:
{
    rxCompleteCallback = NULL;
}
//===========================================================================
void can_IrqSet(void (*fptr) (void))
{
 8005be0:	b480      	push	{r7}
 8005be2:	b083      	sub	sp, #12
 8005be4:	af00      	add	r7, sp, #0
 8005be6:	6078      	str	r0, [r7, #4]
    rxCompleteCallback = fptr;
 8005be8:	4a03      	ldr	r2, [pc, #12]	; (8005bf8 <can_IrqSet+0x18>)
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	6013      	str	r3, [r2, #0]
}
 8005bee:	bf00      	nop
 8005bf0:	370c      	adds	r7, #12
 8005bf2:	46bd      	mov	sp, r7
 8005bf4:	bc80      	pop	{r7}
 8005bf6:	4770      	bx	lr
 8005bf8:	20000664 	.word	0x20000664

08005bfc <can_Write>:
//===========================================================================
int can_Write(CAN_Message msg)
{
 8005bfc:	b590      	push	{r4, r7, lr}
 8005bfe:	b087      	sub	sp, #28
 8005c00:	af00      	add	r7, sp, #0
 8005c02:	463c      	mov	r4, r7
 8005c04:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    int i = 0;
 8005c08:	2300      	movs	r3, #0
 8005c0a:	617b      	str	r3, [r7, #20]

    if(msg.format == CANStandard) {
 8005c0c:	7b7b      	ldrb	r3, [r7, #13]
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d108      	bne.n	8005c24 <can_Write+0x28>
        CanHandle.pTxMsg->StdId = msg.id;
 8005c12:	4b25      	ldr	r3, [pc, #148]	; (8005ca8 <can_Write+0xac>)
 8005c14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c16:	683a      	ldr	r2, [r7, #0]
 8005c18:	601a      	str	r2, [r3, #0]
        CanHandle.pTxMsg->ExtId = 0x00;
 8005c1a:	4b23      	ldr	r3, [pc, #140]	; (8005ca8 <can_Write+0xac>)
 8005c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c1e:	2200      	movs	r2, #0
 8005c20:	605a      	str	r2, [r3, #4]
 8005c22:	e007      	b.n	8005c34 <can_Write+0x38>
    }
    else {
        CanHandle.pTxMsg->StdId = 0x00;
 8005c24:	4b20      	ldr	r3, [pc, #128]	; (8005ca8 <can_Write+0xac>)
 8005c26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c28:	2200      	movs	r2, #0
 8005c2a:	601a      	str	r2, [r3, #0]
        CanHandle.pTxMsg->ExtId = msg.id;
 8005c2c:	4b1e      	ldr	r3, [pc, #120]	; (8005ca8 <can_Write+0xac>)
 8005c2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c30:	683a      	ldr	r2, [r7, #0]
 8005c32:	605a      	str	r2, [r3, #4]
    }

    CanHandle.pTxMsg->RTR = msg.type == CANData ? CAN_RTR_DATA : CAN_RTR_REMOTE;
 8005c34:	7bbb      	ldrb	r3, [r7, #14]
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d101      	bne.n	8005c3e <can_Write+0x42>
 8005c3a:	2200      	movs	r2, #0
 8005c3c:	e000      	b.n	8005c40 <can_Write+0x44>
 8005c3e:	2202      	movs	r2, #2
 8005c40:	4b19      	ldr	r3, [pc, #100]	; (8005ca8 <can_Write+0xac>)
 8005c42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c44:	60da      	str	r2, [r3, #12]
    CanHandle.pTxMsg->IDE = msg.format == CANStandard ? CAN_ID_STD : CAN_ID_EXT;
 8005c46:	7b7b      	ldrb	r3, [r7, #13]
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d101      	bne.n	8005c50 <can_Write+0x54>
 8005c4c:	2200      	movs	r2, #0
 8005c4e:	e000      	b.n	8005c52 <can_Write+0x56>
 8005c50:	2204      	movs	r2, #4
 8005c52:	4b15      	ldr	r3, [pc, #84]	; (8005ca8 <can_Write+0xac>)
 8005c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c56:	609a      	str	r2, [r3, #8]
    CanHandle.pTxMsg->DLC = msg.len;
 8005c58:	7b3a      	ldrb	r2, [r7, #12]
 8005c5a:	4b13      	ldr	r3, [pc, #76]	; (8005ca8 <can_Write+0xac>)
 8005c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c5e:	611a      	str	r2, [r3, #16]

    for(i = 0; i < msg.len; i++)
 8005c60:	2300      	movs	r3, #0
 8005c62:	617b      	str	r3, [r7, #20]
 8005c64:	e00d      	b.n	8005c82 <can_Write+0x86>
        CanHandle.pTxMsg->Data[i] = msg.data[i];
 8005c66:	1d3a      	adds	r2, r7, #4
 8005c68:	697b      	ldr	r3, [r7, #20]
 8005c6a:	4413      	add	r3, r2
 8005c6c:	7819      	ldrb	r1, [r3, #0]
 8005c6e:	4b0e      	ldr	r3, [pc, #56]	; (8005ca8 <can_Write+0xac>)
 8005c70:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005c72:	697b      	ldr	r3, [r7, #20]
 8005c74:	3304      	adds	r3, #4
 8005c76:	009b      	lsls	r3, r3, #2
 8005c78:	4413      	add	r3, r2
 8005c7a:	6059      	str	r1, [r3, #4]
    for(i = 0; i < msg.len; i++)
 8005c7c:	697b      	ldr	r3, [r7, #20]
 8005c7e:	3301      	adds	r3, #1
 8005c80:	617b      	str	r3, [r7, #20]
 8005c82:	7b3b      	ldrb	r3, [r7, #12]
 8005c84:	461a      	mov	r2, r3
 8005c86:	697b      	ldr	r3, [r7, #20]
 8005c88:	4293      	cmp	r3, r2
 8005c8a:	dbec      	blt.n	8005c66 <can_Write+0x6a>

    if(HAL_CAN_Transmit(&CanHandle, 0) != HAL_OK)
 8005c8c:	2100      	movs	r1, #0
 8005c8e:	4806      	ldr	r0, [pc, #24]	; (8005ca8 <can_Write+0xac>)
 8005c90:	f7fb fb60 	bl	8001354 <HAL_CAN_Transmit>
 8005c94:	4603      	mov	r3, r0
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d001      	beq.n	8005c9e <can_Write+0xa2>
							{
								 return 0;
 8005c9a:	2300      	movs	r3, #0
 8005c9c:	e000      	b.n	8005ca0 <can_Write+0xa4>
							 }

    else
        return 1;
 8005c9e:	2301      	movs	r3, #1
}
 8005ca0:	4618      	mov	r0, r3
 8005ca2:	371c      	adds	r7, #28
 8005ca4:	46bd      	mov	sp, r7
 8005ca6:	bd90      	pop	{r4, r7, pc}
 8005ca8:	20000314 	.word	0x20000314

08005cac <can_Read>:
//===========================================================================
int can_Read(CAN_Message* msg)
{
 8005cac:	b480      	push	{r7}
 8005cae:	b085      	sub	sp, #20
 8005cb0:	af00      	add	r7, sp, #0
 8005cb2:	6078      	str	r0, [r7, #4]
	int i=0;
 8005cb4:	2300      	movs	r3, #0
 8005cb6:	60fb      	str	r3, [r7, #12]

    msg->id = CanHandle.pRxMsg->IDE == CAN_ID_STD ? CanHandle.pRxMsg->StdId : CanHandle.pRxMsg->ExtId;
 8005cb8:	4b25      	ldr	r3, [pc, #148]	; (8005d50 <can_Read+0xa4>)
 8005cba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005cbc:	689b      	ldr	r3, [r3, #8]
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d103      	bne.n	8005cca <can_Read+0x1e>
 8005cc2:	4b23      	ldr	r3, [pc, #140]	; (8005d50 <can_Read+0xa4>)
 8005cc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	e002      	b.n	8005cd0 <can_Read+0x24>
 8005cca:	4b21      	ldr	r3, [pc, #132]	; (8005d50 <can_Read+0xa4>)
 8005ccc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005cce:	685b      	ldr	r3, [r3, #4]
 8005cd0:	687a      	ldr	r2, [r7, #4]
 8005cd2:	6013      	str	r3, [r2, #0]
    msg->type = CanHandle.pRxMsg->RTR == CAN_RTR_DATA ? CANData : CANRemote;
 8005cd4:	4b1e      	ldr	r3, [pc, #120]	; (8005d50 <can_Read+0xa4>)
 8005cd6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005cd8:	68db      	ldr	r3, [r3, #12]
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	bf14      	ite	ne
 8005cde:	2301      	movne	r3, #1
 8005ce0:	2300      	moveq	r3, #0
 8005ce2:	b2db      	uxtb	r3, r3
 8005ce4:	461a      	mov	r2, r3
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	739a      	strb	r2, [r3, #14]
    msg->format = CanHandle.pRxMsg->IDE == CAN_ID_STD ? CANStandard : CANExtended;
 8005cea:	4b19      	ldr	r3, [pc, #100]	; (8005d50 <can_Read+0xa4>)
 8005cec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005cee:	689b      	ldr	r3, [r3, #8]
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	bf14      	ite	ne
 8005cf4:	2301      	movne	r3, #1
 8005cf6:	2300      	moveq	r3, #0
 8005cf8:	b2db      	uxtb	r3, r3
 8005cfa:	461a      	mov	r2, r3
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	735a      	strb	r2, [r3, #13]
    msg->len = CanHandle.pRxMsg->DLC;
 8005d00:	4b13      	ldr	r3, [pc, #76]	; (8005d50 <can_Read+0xa4>)
 8005d02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d04:	691b      	ldr	r3, [r3, #16]
 8005d06:	b2da      	uxtb	r2, r3
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	731a      	strb	r2, [r3, #12]
    for(i = 0; i < msg->len; i++)
 8005d0c:	2300      	movs	r3, #0
 8005d0e:	60fb      	str	r3, [r7, #12]
 8005d10:	e010      	b.n	8005d34 <can_Read+0x88>
        msg->data[i] = CanHandle.pRxMsg->Data[i];
 8005d12:	4b0f      	ldr	r3, [pc, #60]	; (8005d50 <can_Read+0xa4>)
 8005d14:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	3304      	adds	r3, #4
 8005d1a:	009b      	lsls	r3, r3, #2
 8005d1c:	4413      	add	r3, r2
 8005d1e:	685b      	ldr	r3, [r3, #4]
 8005d20:	b2d9      	uxtb	r1, r3
 8005d22:	687a      	ldr	r2, [r7, #4]
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	4413      	add	r3, r2
 8005d28:	3304      	adds	r3, #4
 8005d2a:	460a      	mov	r2, r1
 8005d2c:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < msg->len; i++)
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	3301      	adds	r3, #1
 8005d32:	60fb      	str	r3, [r7, #12]
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	7b1b      	ldrb	r3, [r3, #12]
 8005d38:	461a      	mov	r2, r3
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	4293      	cmp	r3, r2
 8005d3e:	dbe8      	blt.n	8005d12 <can_Read+0x66>

    return msg->len;
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	7b1b      	ldrb	r3, [r3, #12]
}
 8005d44:	4618      	mov	r0, r3
 8005d46:	3714      	adds	r7, #20
 8005d48:	46bd      	mov	sp, r7
 8005d4a:	bc80      	pop	{r7}
 8005d4c:	4770      	bx	lr
 8005d4e:	bf00      	nop
 8005d50:	20000314 	.word	0x20000314

08005d54 <can_Filter_list>:

    return HAL_CAN_Init(&CanHandle);
}
//===========================================================================
int can_Filter_list(uint32_t id1_id2, uint32_t id3_id4, CANFormat format /*=CANAny*/, int32_t handle /*=0*/ )
{
 8005d54:	b580      	push	{r7, lr}
 8005d56:	b08e      	sub	sp, #56	; 0x38
 8005d58:	af00      	add	r7, sp, #0
 8005d5a:	60f8      	str	r0, [r7, #12]
 8005d5c:	60b9      	str	r1, [r7, #8]
 8005d5e:	603b      	str	r3, [r7, #0]
 8005d60:	4613      	mov	r3, r2
 8005d62:	71fb      	strb	r3, [r7, #7]
    CAN_FilterConfTypeDef   sFilterConfig;

    sFilterConfig.FilterNumber = handle;
 8005d64:	683b      	ldr	r3, [r7, #0]
 8005d66:	627b      	str	r3, [r7, #36]	; 0x24
    sFilterConfig.FilterMode = CAN_FILTERMODE_IDLIST;  // CAN_FILTERMODE_IDMASK
 8005d68:	2301      	movs	r3, #1
 8005d6a:	62bb      	str	r3, [r7, #40]	; 0x28
    
    sFilterConfig.FilterScale = CAN_FILTERSCALE_16BIT; // CAN_FILTERSCALE_32BIT
 8005d6c:	2300      	movs	r3, #0
 8005d6e:	62fb      	str	r3, [r7, #44]	; 0x2c
    sFilterConfig.FilterIdHigh = (((id1_id2) >> 16) & 0xFFFF);
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	0c1b      	lsrs	r3, r3, #16
 8005d74:	613b      	str	r3, [r7, #16]
    sFilterConfig.FilterIdLow = ((id1_id2) & 0xFFFF);
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	b29b      	uxth	r3, r3
 8005d7a:	617b      	str	r3, [r7, #20]
    sFilterConfig.FilterMaskIdHigh = (((id3_id4) >> 16) & 0xFFFF);
 8005d7c:	68bb      	ldr	r3, [r7, #8]
 8005d7e:	0c1b      	lsrs	r3, r3, #16
 8005d80:	61bb      	str	r3, [r7, #24]
    sFilterConfig.FilterMaskIdLow = ((id3_id4) & 0xFFFF);
 8005d82:	68bb      	ldr	r3, [r7, #8]
 8005d84:	b29b      	uxth	r3, r3
 8005d86:	61fb      	str	r3, [r7, #28]
    sFilterConfig.FilterFIFOAssignment = 0;
 8005d88:	2300      	movs	r3, #0
 8005d8a:	623b      	str	r3, [r7, #32]
    sFilterConfig.FilterActivation = ENABLE;
 8005d8c:	2301      	movs	r3, #1
 8005d8e:	633b      	str	r3, [r7, #48]	; 0x30
    sFilterConfig.BankNumber = 14;
 8005d90:	230e      	movs	r3, #14
 8005d92:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_CAN_ConfigFilter(&CanHandle, &sFilterConfig);
 8005d94:	f107 0310 	add.w	r3, r7, #16
 8005d98:	4619      	mov	r1, r3
 8005d9a:	4804      	ldr	r0, [pc, #16]	; (8005dac <can_Filter_list+0x58>)
 8005d9c:	f7fb fa00 	bl	80011a0 <HAL_CAN_ConfigFilter>

    return 1;
 8005da0:	2301      	movs	r3, #1
}
 8005da2:	4618      	mov	r0, r3
 8005da4:	3738      	adds	r7, #56	; 0x38
 8005da6:	46bd      	mov	sp, r7
 8005da8:	bd80      	pop	{r7, pc}
 8005daa:	bf00      	nop
 8005dac:	20000314 	.word	0x20000314

08005db0 <HAL_CAN_RxCpltCallback>:
    return HAL_CAN_GetError(&CanHandle);
}
//===========================================================================

void HAL_CAN_RxCpltCallback(CAN_HandleTypeDef* CanHandle)
{
 8005db0:	b580      	push	{r7, lr}
 8005db2:	b082      	sub	sp, #8
 8005db4:	af00      	add	r7, sp, #0
 8005db6:	6078      	str	r0, [r7, #4]
    if (rxCompleteCallback != NULL)
 8005db8:	4b26      	ldr	r3, [pc, #152]	; (8005e54 <HAL_CAN_RxCpltCallback+0xa4>)
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d002      	beq.n	8005dc6 <HAL_CAN_RxCpltCallback+0x16>
        rxCompleteCallback();
 8005dc0:	4b24      	ldr	r3, [pc, #144]	; (8005e54 <HAL_CAN_RxCpltCallback+0xa4>)
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	4798      	blx	r3

    if (CanHandle->State == HAL_CAN_STATE_BUSY_TX)
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005dcc:	b2db      	uxtb	r3, r3
 8005dce:	2b12      	cmp	r3, #18
 8005dd0:	d104      	bne.n	8005ddc <HAL_CAN_RxCpltCallback+0x2c>
        CanHandle->State = HAL_CAN_STATE_BUSY_TX_RX;
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	2232      	movs	r2, #50	; 0x32
 8005dd6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8005dda:	e02e      	b.n	8005e3a <HAL_CAN_RxCpltCallback+0x8a>
    else {
        CanHandle->State = HAL_CAN_STATE_BUSY_RX;
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	2222      	movs	r2, #34	; 0x22
 8005de0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Set CAN error code to none */
        CanHandle->ErrorCode = HAL_CAN_ERROR_NONE;
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	2200      	movs	r2, #0
 8005de8:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Enable Error warning Interrupt */
        __HAL_CAN_ENABLE_IT(CanHandle, CAN_IT_EWG);
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	695a      	ldr	r2, [r3, #20]
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005df8:	615a      	str	r2, [r3, #20]

        /* Enable Error passive Interrupt */
        __HAL_CAN_ENABLE_IT(CanHandle, CAN_IT_EPV);
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	695a      	ldr	r2, [r3, #20]
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005e08:	615a      	str	r2, [r3, #20]

        /* Enable Bus-off Interrupt */
        __HAL_CAN_ENABLE_IT(CanHandle, CAN_IT_BOF);
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	695a      	ldr	r2, [r3, #20]
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005e18:	615a      	str	r2, [r3, #20]

        /* Enable Last error code Interrupt */
        __HAL_CAN_ENABLE_IT(CanHandle, CAN_IT_LEC);
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	695a      	ldr	r2, [r3, #20]
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005e28:	615a      	str	r2, [r3, #20]

        /* Enable Error Interrupt */
        __HAL_CAN_ENABLE_IT(CanHandle, CAN_IT_ERR);
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	695a      	ldr	r2, [r3, #20]
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005e38:	615a      	str	r2, [r3, #20]
    }

    // Enable FIFO 0 message pending Interrupt
    __HAL_CAN_ENABLE_IT(CanHandle, CAN_IT_FMP0);
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	695a      	ldr	r2, [r3, #20]
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	f042 0202 	orr.w	r2, r2, #2
 8005e48:	615a      	str	r2, [r3, #20]
}
 8005e4a:	bf00      	nop
 8005e4c:	3708      	adds	r7, #8
 8005e4e:	46bd      	mov	sp, r7
 8005e50:	bd80      	pop	{r7, pc}
 8005e52:	bf00      	nop
 8005e54:	20000664 	.word	0x20000664

08005e58 <i2c1_Init>:

//======================================================================
// Init I2C1 Peripheral
//======================================================================
void i2c1_Init()
{
 8005e58:	b580      	push	{r7, lr}
 8005e5a:	af00      	add	r7, sp, #0
    hi2c1.Instance             = I2C1;
 8005e5c:	4b10      	ldr	r3, [pc, #64]	; (8005ea0 <i2c1_Init+0x48>)
 8005e5e:	4a11      	ldr	r2, [pc, #68]	; (8005ea4 <i2c1_Init+0x4c>)
 8005e60:	601a      	str	r2, [r3, #0]
    hi2c1.Init.ClockSpeed      = I2C1_SPEED;		// cf config.h
 8005e62:	4b0f      	ldr	r3, [pc, #60]	; (8005ea0 <i2c1_Init+0x48>)
 8005e64:	f64e 2260 	movw	r2, #60000	; 0xea60
 8005e68:	605a      	str	r2, [r3, #4]
    hi2c1.Init.DutyCycle       = I2C_DUTYCYCLE_2;
 8005e6a:	4b0d      	ldr	r3, [pc, #52]	; (8005ea0 <i2c1_Init+0x48>)
 8005e6c:	2200      	movs	r2, #0
 8005e6e:	609a      	str	r2, [r3, #8]
    hi2c1.Init.OwnAddress1     = 0x2;
 8005e70:	4b0b      	ldr	r3, [pc, #44]	; (8005ea0 <i2c1_Init+0x48>)
 8005e72:	2202      	movs	r2, #2
 8005e74:	60da      	str	r2, [r3, #12]
    hi2c1.Init.AddressingMode  = I2C_ADDRESSINGMODE_7BIT;
 8005e76:	4b0a      	ldr	r3, [pc, #40]	; (8005ea0 <i2c1_Init+0x48>)
 8005e78:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005e7c:	611a      	str	r2, [r3, #16]
    hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8005e7e:	4b08      	ldr	r3, [pc, #32]	; (8005ea0 <i2c1_Init+0x48>)
 8005e80:	2200      	movs	r2, #0
 8005e82:	615a      	str	r2, [r3, #20]
    hi2c1.Init.OwnAddress2     = 0xFF;
 8005e84:	4b06      	ldr	r3, [pc, #24]	; (8005ea0 <i2c1_Init+0x48>)
 8005e86:	22ff      	movs	r2, #255	; 0xff
 8005e88:	619a      	str	r2, [r3, #24]
    hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8005e8a:	4b05      	ldr	r3, [pc, #20]	; (8005ea0 <i2c1_Init+0x48>)
 8005e8c:	2200      	movs	r2, #0
 8005e8e:	61da      	str	r2, [r3, #28]
    hi2c1.Init.NoStretchMode   = I2C_NOSTRETCH_DISABLE;
 8005e90:	4b03      	ldr	r3, [pc, #12]	; (8005ea0 <i2c1_Init+0x48>)
 8005e92:	2200      	movs	r2, #0
 8005e94:	621a      	str	r2, [r3, #32]

    HAL_I2C_Init(&hi2c1);
 8005e96:	4802      	ldr	r0, [pc, #8]	; (8005ea0 <i2c1_Init+0x48>)
 8005e98:	f7fc fa14 	bl	80022c4 <HAL_I2C_Init>
}
 8005e9c:	bf00      	nop
 8005e9e:	bd80      	pop	{r7, pc}
 8005ea0:	200003c4 	.word	0x200003c4
 8005ea4:	40005400 	.word	0x40005400

08005ea8 <i2c1_WriteBuffer>:
//======================================================================
// Transmit n_data bytes to i2c slave
//======================================================================
int i2c1_WriteBuffer(uint16_t addrSlave, uint8_t *data, int n_data)
{
 8005ea8:	b580      	push	{r7, lr}
 8005eaa:	b088      	sub	sp, #32
 8005eac:	af02      	add	r7, sp, #8
 8005eae:	4603      	mov	r3, r0
 8005eb0:	60b9      	str	r1, [r7, #8]
 8005eb2:	607a      	str	r2, [r7, #4]
 8005eb4:	81fb      	strh	r3, [r7, #14]
	int status;
	status = HAL_I2C_Master_Transmit(&hi2c1, addrSlave, data, n_data , 100);
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	b29b      	uxth	r3, r3
 8005eba:	89f9      	ldrh	r1, [r7, #14]
 8005ebc:	2264      	movs	r2, #100	; 0x64
 8005ebe:	9200      	str	r2, [sp, #0]
 8005ec0:	68ba      	ldr	r2, [r7, #8]
 8005ec2:	4805      	ldr	r0, [pc, #20]	; (8005ed8 <i2c1_WriteBuffer+0x30>)
 8005ec4:	f7fc fb18 	bl	80024f8 <HAL_I2C_Master_Transmit>
 8005ec8:	4603      	mov	r3, r0
 8005eca:	617b      	str	r3, [r7, #20]
	return status;
 8005ecc:	697b      	ldr	r3, [r7, #20]
}
 8005ece:	4618      	mov	r0, r3
 8005ed0:	3718      	adds	r7, #24
 8005ed2:	46bd      	mov	sp, r7
 8005ed4:	bd80      	pop	{r7, pc}
 8005ed6:	bf00      	nop
 8005ed8:	200003c4 	.word	0x200003c4

08005edc <i2c1_ReadBuffer>:
//======================================================================
// Receive n_data bytes from i2c slave
//======================================================================
int i2c1_ReadBuffer(uint16_t addrSlave, uint8_t *data, int n_data)
{
 8005edc:	b580      	push	{r7, lr}
 8005ede:	b088      	sub	sp, #32
 8005ee0:	af02      	add	r7, sp, #8
 8005ee2:	4603      	mov	r3, r0
 8005ee4:	60b9      	str	r1, [r7, #8]
 8005ee6:	607a      	str	r2, [r7, #4]
 8005ee8:	81fb      	strh	r3, [r7, #14]
	int status;
	status = HAL_I2C_Master_Receive(&hi2c1, addrSlave, data, n_data , 100);
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	b29b      	uxth	r3, r3
 8005eee:	89f9      	ldrh	r1, [r7, #14]
 8005ef0:	2264      	movs	r2, #100	; 0x64
 8005ef2:	9200      	str	r2, [sp, #0]
 8005ef4:	68ba      	ldr	r2, [r7, #8]
 8005ef6:	4805      	ldr	r0, [pc, #20]	; (8005f0c <i2c1_ReadBuffer+0x30>)
 8005ef8:	f7fc fc0c 	bl	8002714 <HAL_I2C_Master_Receive>
 8005efc:	4603      	mov	r3, r0
 8005efe:	617b      	str	r3, [r7, #20]
	return status;
 8005f00:	697b      	ldr	r3, [r7, #20]
}
 8005f02:	4618      	mov	r0, r3
 8005f04:	3718      	adds	r7, #24
 8005f06:	46bd      	mov	sp, r7
 8005f08:	bd80      	pop	{r7, pc}
 8005f0a:	bf00      	nop
 8005f0c:	200003c4 	.word	0x200003c4

08005f10 <i2c1_ReadRegBuffer>:
//======================================================================
// Receive n_data bytes - located at regAddr - from i2c slave
//======================================================================
int i2c1_ReadRegBuffer(uint16_t addrSlave, uint8_t  regAddr,  uint8_t *data, int n_data)
{
 8005f10:	b580      	push	{r7, lr}
 8005f12:	b088      	sub	sp, #32
 8005f14:	af02      	add	r7, sp, #8
 8005f16:	60ba      	str	r2, [r7, #8]
 8005f18:	607b      	str	r3, [r7, #4]
 8005f1a:	4603      	mov	r3, r0
 8005f1c:	81fb      	strh	r3, [r7, #14]
 8005f1e:	460b      	mov	r3, r1
 8005f20:	737b      	strb	r3, [r7, #13]
    int status;
    uint8_t RegAddr;
    RegAddr=regAddr;
 8005f22:	7b7b      	ldrb	r3, [r7, #13]
 8005f24:	74fb      	strb	r3, [r7, #19]
    do{
        status=HAL_I2C_Master_Transmit(&hi2c1, addrSlave, &RegAddr, 1, 100);
 8005f26:	f107 0213 	add.w	r2, r7, #19
 8005f2a:	89f9      	ldrh	r1, [r7, #14]
 8005f2c:	2364      	movs	r3, #100	; 0x64
 8005f2e:	9300      	str	r3, [sp, #0]
 8005f30:	2301      	movs	r3, #1
 8005f32:	480f      	ldr	r0, [pc, #60]	; (8005f70 <i2c1_ReadRegBuffer+0x60>)
 8005f34:	f7fc fae0 	bl	80024f8 <HAL_I2C_Master_Transmit>
 8005f38:	4603      	mov	r3, r0
 8005f3a:	617b      	str	r3, [r7, #20]
        if( status )
 8005f3c:	697b      	ldr	r3, [r7, #20]
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d10f      	bne.n	8005f62 <i2c1_ReadRegBuffer+0x52>
            break;
        status =HAL_I2C_Master_Receive(&hi2c1, addrSlave, data, n_data, n_data*100);
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	b29a      	uxth	r2, r3
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	2164      	movs	r1, #100	; 0x64
 8005f4a:	fb01 f303 	mul.w	r3, r1, r3
 8005f4e:	89f9      	ldrh	r1, [r7, #14]
 8005f50:	9300      	str	r3, [sp, #0]
 8005f52:	4613      	mov	r3, r2
 8005f54:	68ba      	ldr	r2, [r7, #8]
 8005f56:	4806      	ldr	r0, [pc, #24]	; (8005f70 <i2c1_ReadRegBuffer+0x60>)
 8005f58:	f7fc fbdc 	bl	8002714 <HAL_I2C_Master_Receive>
 8005f5c:	4603      	mov	r3, r0
 8005f5e:	617b      	str	r3, [r7, #20]
 8005f60:	e000      	b.n	8005f64 <i2c1_ReadRegBuffer+0x54>
            break;
 8005f62:	bf00      	nop
    }while(0);
    return status;
 8005f64:	697b      	ldr	r3, [r7, #20]
}
 8005f66:	4618      	mov	r0, r3
 8005f68:	3718      	adds	r7, #24
 8005f6a:	46bd      	mov	sp, r7
 8005f6c:	bd80      	pop	{r7, pc}
 8005f6e:	bf00      	nop
 8005f70:	200003c4 	.word	0x200003c4

08005f74 <i2c1_WriteRegBuffer>:

//======================================================================
// Write n_data bytes - have to be written at regAddr - to i2c slave
//======================================================================
int i2c1_WriteRegBuffer(uint16_t addrSlave, uint8_t  regAddr,  uint8_t *data, int n_data)
{
 8005f74:	b580      	push	{r7, lr}
 8005f76:	b08c      	sub	sp, #48	; 0x30
 8005f78:	af02      	add	r7, sp, #8
 8005f7a:	60ba      	str	r2, [r7, #8]
 8005f7c:	607b      	str	r3, [r7, #4]
 8005f7e:	4603      	mov	r3, r0
 8005f80:	81fb      	strh	r3, [r7, #14]
 8005f82:	460b      	mov	r3, r1
 8005f84:	737b      	strb	r3, [r7, #13]
    int status;
    uint8_t RegAddr[0x10];
    RegAddr[0]=regAddr;
 8005f86:	7b7b      	ldrb	r3, [r7, #13]
 8005f88:	753b      	strb	r3, [r7, #20]
    memcpy(RegAddr+1, data, n_data);
 8005f8a:	f107 0314 	add.w	r3, r7, #20
 8005f8e:	3301      	adds	r3, #1
 8005f90:	687a      	ldr	r2, [r7, #4]
 8005f92:	68b9      	ldr	r1, [r7, #8]
 8005f94:	4618      	mov	r0, r3
 8005f96:	f004 fda7 	bl	800aae8 <memcpy>
    status=HAL_I2C_Master_Transmit(&hi2c1, addrSlave, RegAddr, n_data+1, 100);
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	b29b      	uxth	r3, r3
 8005f9e:	3301      	adds	r3, #1
 8005fa0:	b29b      	uxth	r3, r3
 8005fa2:	f107 0214 	add.w	r2, r7, #20
 8005fa6:	89f9      	ldrh	r1, [r7, #14]
 8005fa8:	2064      	movs	r0, #100	; 0x64
 8005faa:	9000      	str	r0, [sp, #0]
 8005fac:	4804      	ldr	r0, [pc, #16]	; (8005fc0 <i2c1_WriteRegBuffer+0x4c>)
 8005fae:	f7fc faa3 	bl	80024f8 <HAL_I2C_Master_Transmit>
 8005fb2:	4603      	mov	r3, r0
 8005fb4:	627b      	str	r3, [r7, #36]	; 0x24
    return status;
 8005fb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005fb8:	4618      	mov	r0, r3
 8005fba:	3728      	adds	r7, #40	; 0x28
 8005fbc:	46bd      	mov	sp, r7
 8005fbe:	bd80      	pop	{r7, pc}
 8005fc0:	200003c4 	.word	0x200003c4

08005fc4 <i2c1_WriteReg16Byte>:

//======================================================================
// Write 1 byte to regAddr (16 bits) Slave
//======================================================================
int i2c1_WriteReg16Byte(uint16_t addrSlave, uint16_t  regAddr,  uint8_t data)
{
 8005fc4:	b580      	push	{r7, lr}
 8005fc6:	b086      	sub	sp, #24
 8005fc8:	af02      	add	r7, sp, #8
 8005fca:	4603      	mov	r3, r0
 8005fcc:	80fb      	strh	r3, [r7, #6]
 8005fce:	460b      	mov	r3, r1
 8005fd0:	80bb      	strh	r3, [r7, #4]
 8005fd2:	4613      	mov	r3, r2
 8005fd4:	70fb      	strb	r3, [r7, #3]
	int status;
	uint8_t buffer[3];
	buffer[0]=regAddr>>8;
 8005fd6:	88bb      	ldrh	r3, [r7, #4]
 8005fd8:	0a1b      	lsrs	r3, r3, #8
 8005fda:	b29b      	uxth	r3, r3
 8005fdc:	b2db      	uxtb	r3, r3
 8005fde:	723b      	strb	r3, [r7, #8]
	buffer[1]=regAddr&0xFF;
 8005fe0:	88bb      	ldrh	r3, [r7, #4]
 8005fe2:	b2db      	uxtb	r3, r3
 8005fe4:	727b      	strb	r3, [r7, #9]
	buffer[2]=data;
 8005fe6:	78fb      	ldrb	r3, [r7, #3]
 8005fe8:	72bb      	strb	r3, [r7, #10]

	status = HAL_I2C_Master_Transmit(&hi2c1, addrSlave, buffer, 3 , 100);
 8005fea:	f107 0208 	add.w	r2, r7, #8
 8005fee:	88f9      	ldrh	r1, [r7, #6]
 8005ff0:	2364      	movs	r3, #100	; 0x64
 8005ff2:	9300      	str	r3, [sp, #0]
 8005ff4:	2303      	movs	r3, #3
 8005ff6:	4805      	ldr	r0, [pc, #20]	; (800600c <i2c1_WriteReg16Byte+0x48>)
 8005ff8:	f7fc fa7e 	bl	80024f8 <HAL_I2C_Master_Transmit>
 8005ffc:	4603      	mov	r3, r0
 8005ffe:	60fb      	str	r3, [r7, #12]
	return status;
 8006000:	68fb      	ldr	r3, [r7, #12]
}
 8006002:	4618      	mov	r0, r3
 8006004:	3710      	adds	r7, #16
 8006006:	46bd      	mov	sp, r7
 8006008:	bd80      	pop	{r7, pc}
 800600a:	bf00      	nop
 800600c:	200003c4 	.word	0x200003c4

08006010 <i2c1_WriteReg16Word16>:
//======================================================================
// Write 16 bits word to regAddr (16 bits) Slave
//======================================================================
int i2c1_WriteReg16Word16(uint16_t addrSlave, uint16_t  regAddr,  uint16_t data)
{
 8006010:	b580      	push	{r7, lr}
 8006012:	b086      	sub	sp, #24
 8006014:	af02      	add	r7, sp, #8
 8006016:	4603      	mov	r3, r0
 8006018:	80fb      	strh	r3, [r7, #6]
 800601a:	460b      	mov	r3, r1
 800601c:	80bb      	strh	r3, [r7, #4]
 800601e:	4613      	mov	r3, r2
 8006020:	807b      	strh	r3, [r7, #2]
	int status;
	uint8_t buffer[4];
	buffer[0]=regAddr>>8;
 8006022:	88bb      	ldrh	r3, [r7, #4]
 8006024:	0a1b      	lsrs	r3, r3, #8
 8006026:	b29b      	uxth	r3, r3
 8006028:	b2db      	uxtb	r3, r3
 800602a:	723b      	strb	r3, [r7, #8]
	buffer[1]=regAddr&0xFF;
 800602c:	88bb      	ldrh	r3, [r7, #4]
 800602e:	b2db      	uxtb	r3, r3
 8006030:	727b      	strb	r3, [r7, #9]
    buffer[2]=data>>8;
 8006032:	887b      	ldrh	r3, [r7, #2]
 8006034:	0a1b      	lsrs	r3, r3, #8
 8006036:	b29b      	uxth	r3, r3
 8006038:	b2db      	uxtb	r3, r3
 800603a:	72bb      	strb	r3, [r7, #10]
    buffer[3]=data&0xFF;
 800603c:	887b      	ldrh	r3, [r7, #2]
 800603e:	b2db      	uxtb	r3, r3
 8006040:	72fb      	strb	r3, [r7, #11]

	status = HAL_I2C_Master_Transmit(&hi2c1, addrSlave, buffer, 4 , 100);
 8006042:	f107 0208 	add.w	r2, r7, #8
 8006046:	88f9      	ldrh	r1, [r7, #6]
 8006048:	2364      	movs	r3, #100	; 0x64
 800604a:	9300      	str	r3, [sp, #0]
 800604c:	2304      	movs	r3, #4
 800604e:	4805      	ldr	r0, [pc, #20]	; (8006064 <i2c1_WriteReg16Word16+0x54>)
 8006050:	f7fc fa52 	bl	80024f8 <HAL_I2C_Master_Transmit>
 8006054:	4603      	mov	r3, r0
 8006056:	60fb      	str	r3, [r7, #12]
	return status;
 8006058:	68fb      	ldr	r3, [r7, #12]
}
 800605a:	4618      	mov	r0, r3
 800605c:	3710      	adds	r7, #16
 800605e:	46bd      	mov	sp, r7
 8006060:	bd80      	pop	{r7, pc}
 8006062:	bf00      	nop
 8006064:	200003c4 	.word	0x200003c4

08006068 <i2c1_WriteReg16Word32>:
//======================================================================
// Write 32 bits word to regAddr (16 bits) Slave
//======================================================================
int i2c1_WriteReg16Word32(uint16_t addrSlave, uint16_t  regAddr,  uint32_t data)
{
 8006068:	b580      	push	{r7, lr}
 800606a:	b086      	sub	sp, #24
 800606c:	af02      	add	r7, sp, #8
 800606e:	4603      	mov	r3, r0
 8006070:	603a      	str	r2, [r7, #0]
 8006072:	80fb      	strh	r3, [r7, #6]
 8006074:	460b      	mov	r3, r1
 8006076:	80bb      	strh	r3, [r7, #4]
	int status;
	uint8_t buffer[4];
	buffer[0]=regAddr>>8;
 8006078:	88bb      	ldrh	r3, [r7, #4]
 800607a:	0a1b      	lsrs	r3, r3, #8
 800607c:	b29b      	uxth	r3, r3
 800607e:	b2db      	uxtb	r3, r3
 8006080:	723b      	strb	r3, [r7, #8]
	buffer[1]=regAddr&0xFF;
 8006082:	88bb      	ldrh	r3, [r7, #4]
 8006084:	b2db      	uxtb	r3, r3
 8006086:	727b      	strb	r3, [r7, #9]
    buffer[2]=data>>24;
 8006088:	683b      	ldr	r3, [r7, #0]
 800608a:	0e1b      	lsrs	r3, r3, #24
 800608c:	b2db      	uxtb	r3, r3
 800608e:	72bb      	strb	r3, [r7, #10]
    buffer[3]=(data>>16)&0xFF;
 8006090:	683b      	ldr	r3, [r7, #0]
 8006092:	0c1b      	lsrs	r3, r3, #16
 8006094:	b2db      	uxtb	r3, r3
 8006096:	72fb      	strb	r3, [r7, #11]
    buffer[4]=(data>>8)&0xFF;;
 8006098:	683b      	ldr	r3, [r7, #0]
 800609a:	0a1b      	lsrs	r3, r3, #8
 800609c:	b2db      	uxtb	r3, r3
 800609e:	733b      	strb	r3, [r7, #12]
    buffer[5]=data&0xFF;
 80060a0:	683b      	ldr	r3, [r7, #0]
 80060a2:	b2db      	uxtb	r3, r3
 80060a4:	737b      	strb	r3, [r7, #13]

	status = HAL_I2C_Master_Transmit(&hi2c1, addrSlave, buffer, 6 , 100);
 80060a6:	f107 0208 	add.w	r2, r7, #8
 80060aa:	88f9      	ldrh	r1, [r7, #6]
 80060ac:	2364      	movs	r3, #100	; 0x64
 80060ae:	9300      	str	r3, [sp, #0]
 80060b0:	2306      	movs	r3, #6
 80060b2:	4805      	ldr	r0, [pc, #20]	; (80060c8 <i2c1_WriteReg16Word32+0x60>)
 80060b4:	f7fc fa20 	bl	80024f8 <HAL_I2C_Master_Transmit>
 80060b8:	4603      	mov	r3, r0
 80060ba:	60fb      	str	r3, [r7, #12]
	return status;
 80060bc:	68fb      	ldr	r3, [r7, #12]
}
 80060be:	4618      	mov	r0, r3
 80060c0:	3710      	adds	r7, #16
 80060c2:	46bd      	mov	sp, r7
 80060c4:	bd80      	pop	{r7, pc}
 80060c6:	bf00      	nop
 80060c8:	200003c4 	.word	0x200003c4

080060cc <i2c1_ReadReg16Byte>:
//======================================================================
// Read 1 byte from regAddr (16 bits) Slave
//======================================================================
int i2c1_ReadReg16Byte(uint16_t addrSlave, uint16_t  regAddr, uint8_t *data)
{
 80060cc:	b580      	push	{r7, lr}
 80060ce:	b086      	sub	sp, #24
 80060d0:	af02      	add	r7, sp, #8
 80060d2:	4603      	mov	r3, r0
 80060d4:	603a      	str	r2, [r7, #0]
 80060d6:	80fb      	strh	r3, [r7, #6]
 80060d8:	460b      	mov	r3, r1
 80060da:	80bb      	strh	r3, [r7, #4]
    int status;
    uint8_t buffer[2];

    buffer[0]=regAddr>>8;
 80060dc:	88bb      	ldrh	r3, [r7, #4]
 80060de:	0a1b      	lsrs	r3, r3, #8
 80060e0:	b29b      	uxth	r3, r3
 80060e2:	b2db      	uxtb	r3, r3
 80060e4:	723b      	strb	r3, [r7, #8]
    buffer[1]=regAddr&0xFF;
 80060e6:	88bb      	ldrh	r3, [r7, #4]
 80060e8:	b2db      	uxtb	r3, r3
 80060ea:	727b      	strb	r3, [r7, #9]

    status=HAL_I2C_Master_Transmit(&hi2c1, addrSlave, buffer, 2, 100);
 80060ec:	f107 0208 	add.w	r2, r7, #8
 80060f0:	88f9      	ldrh	r1, [r7, #6]
 80060f2:	2364      	movs	r3, #100	; 0x64
 80060f4:	9300      	str	r3, [sp, #0]
 80060f6:	2302      	movs	r3, #2
 80060f8:	480e      	ldr	r0, [pc, #56]	; (8006134 <i2c1_ReadReg16Byte+0x68>)
 80060fa:	f7fc f9fd 	bl	80024f8 <HAL_I2C_Master_Transmit>
 80060fe:	4603      	mov	r3, r0
 8006100:	60fb      	str	r3, [r7, #12]
     if(!status ) {
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	2b00      	cmp	r3, #0
 8006106:	d110      	bne.n	800612a <i2c1_ReadReg16Byte+0x5e>
        status =HAL_I2C_Master_Receive(&hi2c1, addrSlave, buffer, 1, 100);
 8006108:	f107 0208 	add.w	r2, r7, #8
 800610c:	88f9      	ldrh	r1, [r7, #6]
 800610e:	2364      	movs	r3, #100	; 0x64
 8006110:	9300      	str	r3, [sp, #0]
 8006112:	2301      	movs	r3, #1
 8006114:	4807      	ldr	r0, [pc, #28]	; (8006134 <i2c1_ReadReg16Byte+0x68>)
 8006116:	f7fc fafd 	bl	8002714 <HAL_I2C_Master_Receive>
 800611a:	4603      	mov	r3, r0
 800611c:	60fb      	str	r3, [r7, #12]
        if( !status ){
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	2b00      	cmp	r3, #0
 8006122:	d102      	bne.n	800612a <i2c1_ReadReg16Byte+0x5e>
            *data=buffer[0];
 8006124:	7a3a      	ldrb	r2, [r7, #8]
 8006126:	683b      	ldr	r3, [r7, #0]
 8006128:	701a      	strb	r2, [r3, #0]
        }
     }

    return status;
 800612a:	68fb      	ldr	r3, [r7, #12]
}
 800612c:	4618      	mov	r0, r3
 800612e:	3710      	adds	r7, #16
 8006130:	46bd      	mov	sp, r7
 8006132:	bd80      	pop	{r7, pc}
 8006134:	200003c4 	.word	0x200003c4

08006138 <i2c1_ReadReg16Word16>:
//======================================================================
// Read 16 bits word from regAddr (16 bits) Slave
//======================================================================
int i2c1_ReadReg16Word16(uint16_t addrSlave, uint16_t  regAddr, uint16_t *data)
{
 8006138:	b580      	push	{r7, lr}
 800613a:	b086      	sub	sp, #24
 800613c:	af02      	add	r7, sp, #8
 800613e:	4603      	mov	r3, r0
 8006140:	603a      	str	r2, [r7, #0]
 8006142:	80fb      	strh	r3, [r7, #6]
 8006144:	460b      	mov	r3, r1
 8006146:	80bb      	strh	r3, [r7, #4]
    int status;
    uint8_t buffer[2];

    buffer[0]=regAddr>>8;
 8006148:	88bb      	ldrh	r3, [r7, #4]
 800614a:	0a1b      	lsrs	r3, r3, #8
 800614c:	b29b      	uxth	r3, r3
 800614e:	b2db      	uxtb	r3, r3
 8006150:	723b      	strb	r3, [r7, #8]
    buffer[1]=regAddr&0xFF;
 8006152:	88bb      	ldrh	r3, [r7, #4]
 8006154:	b2db      	uxtb	r3, r3
 8006156:	727b      	strb	r3, [r7, #9]

    status=HAL_I2C_Master_Transmit(&hi2c1, addrSlave, buffer, 2, 100);
 8006158:	f107 0208 	add.w	r2, r7, #8
 800615c:	88f9      	ldrh	r1, [r7, #6]
 800615e:	2364      	movs	r3, #100	; 0x64
 8006160:	9300      	str	r3, [sp, #0]
 8006162:	2302      	movs	r3, #2
 8006164:	4812      	ldr	r0, [pc, #72]	; (80061b0 <i2c1_ReadReg16Word16+0x78>)
 8006166:	f7fc f9c7 	bl	80024f8 <HAL_I2C_Master_Transmit>
 800616a:	4603      	mov	r3, r0
 800616c:	60fb      	str	r3, [r7, #12]
     if(!status ) {
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	2b00      	cmp	r3, #0
 8006172:	d117      	bne.n	80061a4 <i2c1_ReadReg16Word16+0x6c>
        status =HAL_I2C_Master_Receive(&hi2c1, addrSlave, buffer, 2, 100);
 8006174:	f107 0208 	add.w	r2, r7, #8
 8006178:	88f9      	ldrh	r1, [r7, #6]
 800617a:	2364      	movs	r3, #100	; 0x64
 800617c:	9300      	str	r3, [sp, #0]
 800617e:	2302      	movs	r3, #2
 8006180:	480b      	ldr	r0, [pc, #44]	; (80061b0 <i2c1_ReadReg16Word16+0x78>)
 8006182:	f7fc fac7 	bl	8002714 <HAL_I2C_Master_Receive>
 8006186:	4603      	mov	r3, r0
 8006188:	60fb      	str	r3, [r7, #12]
        if( !status ){
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	2b00      	cmp	r3, #0
 800618e:	d109      	bne.n	80061a4 <i2c1_ReadReg16Word16+0x6c>
        	 *data=((uint16_t)buffer[0]<<8)|(uint16_t)buffer[1];
 8006190:	7a3b      	ldrb	r3, [r7, #8]
 8006192:	021b      	lsls	r3, r3, #8
 8006194:	b21a      	sxth	r2, r3
 8006196:	7a7b      	ldrb	r3, [r7, #9]
 8006198:	b21b      	sxth	r3, r3
 800619a:	4313      	orrs	r3, r2
 800619c:	b21b      	sxth	r3, r3
 800619e:	b29a      	uxth	r2, r3
 80061a0:	683b      	ldr	r3, [r7, #0]
 80061a2:	801a      	strh	r2, [r3, #0]
        }
     }

    return status;
 80061a4:	68fb      	ldr	r3, [r7, #12]
}
 80061a6:	4618      	mov	r0, r3
 80061a8:	3710      	adds	r7, #16
 80061aa:	46bd      	mov	sp, r7
 80061ac:	bd80      	pop	{r7, pc}
 80061ae:	bf00      	nop
 80061b0:	200003c4 	.word	0x200003c4

080061b4 <i2c1_ReadReg16Word32>:
//======================================================================
// Read 32 bits word from regAddr (16 bits) Slave
//======================================================================
int i2c1_ReadReg16Word32(uint16_t addrSlave, uint16_t  regAddr, uint32_t *data)
{
 80061b4:	b580      	push	{r7, lr}
 80061b6:	b086      	sub	sp, #24
 80061b8:	af02      	add	r7, sp, #8
 80061ba:	4603      	mov	r3, r0
 80061bc:	603a      	str	r2, [r7, #0]
 80061be:	80fb      	strh	r3, [r7, #6]
 80061c0:	460b      	mov	r3, r1
 80061c2:	80bb      	strh	r3, [r7, #4]
    int status;
    uint8_t buffer[4];

    buffer[0]=regAddr>>8;
 80061c4:	88bb      	ldrh	r3, [r7, #4]
 80061c6:	0a1b      	lsrs	r3, r3, #8
 80061c8:	b29b      	uxth	r3, r3
 80061ca:	b2db      	uxtb	r3, r3
 80061cc:	723b      	strb	r3, [r7, #8]
    buffer[1]=regAddr&0xFF;
 80061ce:	88bb      	ldrh	r3, [r7, #4]
 80061d0:	b2db      	uxtb	r3, r3
 80061d2:	727b      	strb	r3, [r7, #9]

    status=HAL_I2C_Master_Transmit(&hi2c1, addrSlave, buffer, 2, 100);
 80061d4:	f107 0208 	add.w	r2, r7, #8
 80061d8:	88f9      	ldrh	r1, [r7, #6]
 80061da:	2364      	movs	r3, #100	; 0x64
 80061dc:	9300      	str	r3, [sp, #0]
 80061de:	2302      	movs	r3, #2
 80061e0:	4813      	ldr	r0, [pc, #76]	; (8006230 <i2c1_ReadReg16Word32+0x7c>)
 80061e2:	f7fc f989 	bl	80024f8 <HAL_I2C_Master_Transmit>
 80061e6:	4603      	mov	r3, r0
 80061e8:	60fb      	str	r3, [r7, #12]
     if(!status ) {
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d119      	bne.n	8006224 <i2c1_ReadReg16Word32+0x70>
        status =HAL_I2C_Master_Receive(&hi2c1, addrSlave, buffer, 4, 100);
 80061f0:	f107 0208 	add.w	r2, r7, #8
 80061f4:	88f9      	ldrh	r1, [r7, #6]
 80061f6:	2364      	movs	r3, #100	; 0x64
 80061f8:	9300      	str	r3, [sp, #0]
 80061fa:	2304      	movs	r3, #4
 80061fc:	480c      	ldr	r0, [pc, #48]	; (8006230 <i2c1_ReadReg16Word32+0x7c>)
 80061fe:	f7fc fa89 	bl	8002714 <HAL_I2C_Master_Receive>
 8006202:	4603      	mov	r3, r0
 8006204:	60fb      	str	r3, [r7, #12]
        if( !status ){
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	2b00      	cmp	r3, #0
 800620a:	d10b      	bne.n	8006224 <i2c1_ReadReg16Word32+0x70>
           	 *data=((uint32_t)buffer[0]<<24)|((uint32_t)buffer[1]<<16)|((uint32_t)buffer[2]<<8)|((uint32_t)buffer[3]);
 800620c:	7a3b      	ldrb	r3, [r7, #8]
 800620e:	061a      	lsls	r2, r3, #24
 8006210:	7a7b      	ldrb	r3, [r7, #9]
 8006212:	041b      	lsls	r3, r3, #16
 8006214:	431a      	orrs	r2, r3
 8006216:	7abb      	ldrb	r3, [r7, #10]
 8006218:	021b      	lsls	r3, r3, #8
 800621a:	4313      	orrs	r3, r2
 800621c:	7afa      	ldrb	r2, [r7, #11]
 800621e:	431a      	orrs	r2, r3
 8006220:	683b      	ldr	r3, [r7, #0]
 8006222:	601a      	str	r2, [r3, #0]
        }
     }

    return status;
 8006224:	68fb      	ldr	r3, [r7, #12]
}
 8006226:	4618      	mov	r0, r3
 8006228:	3710      	adds	r7, #16
 800622a:	46bd      	mov	sp, r7
 800622c:	bd80      	pop	{r7, pc}
 800622e:	bf00      	nop
 8006230:	200003c4 	.word	0x200003c4

08006234 <uart2_Init>:
//=================================================================
//	UART 2 INIT (STLINK UART)
//=================================================================

void uart2_Init()
{
 8006234:	b580      	push	{r7, lr}
 8006236:	af00      	add	r7, sp, #0
	  Uart2Handle.Instance        = USART2;
 8006238:	4b11      	ldr	r3, [pc, #68]	; (8006280 <uart2_Init+0x4c>)
 800623a:	4a12      	ldr	r2, [pc, #72]	; (8006284 <uart2_Init+0x50>)
 800623c:	601a      	str	r2, [r3, #0]
	  Uart2Handle.Init.BaudRate   = UART_BAUDRATE;
 800623e:	4b10      	ldr	r3, [pc, #64]	; (8006280 <uart2_Init+0x4c>)
 8006240:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8006244:	605a      	str	r2, [r3, #4]
	  Uart2Handle.Init.WordLength = UART_WORDLENGTH_8B;
 8006246:	4b0e      	ldr	r3, [pc, #56]	; (8006280 <uart2_Init+0x4c>)
 8006248:	2200      	movs	r2, #0
 800624a:	609a      	str	r2, [r3, #8]
	  Uart2Handle.Init.StopBits   = UART_STOPBITS_1;
 800624c:	4b0c      	ldr	r3, [pc, #48]	; (8006280 <uart2_Init+0x4c>)
 800624e:	2200      	movs	r2, #0
 8006250:	60da      	str	r2, [r3, #12]
	  Uart2Handle.Init.Parity     = UART_PARITY_NONE;
 8006252:	4b0b      	ldr	r3, [pc, #44]	; (8006280 <uart2_Init+0x4c>)
 8006254:	2200      	movs	r2, #0
 8006256:	611a      	str	r2, [r3, #16]
	  Uart2Handle.Init.HwFlowCtl  = UART_HWCONTROL_NONE;
 8006258:	4b09      	ldr	r3, [pc, #36]	; (8006280 <uart2_Init+0x4c>)
 800625a:	2200      	movs	r2, #0
 800625c:	619a      	str	r2, [r3, #24]
	  Uart2Handle.Init.Mode       = UART_MODE_TX_RX;
 800625e:	4b08      	ldr	r3, [pc, #32]	; (8006280 <uart2_Init+0x4c>)
 8006260:	220c      	movs	r2, #12
 8006262:	615a      	str	r2, [r3, #20]
	  Uart2Handle.Init.OverSampling = UART_OVERSAMPLING_16;
 8006264:	4b06      	ldr	r3, [pc, #24]	; (8006280 <uart2_Init+0x4c>)
 8006266:	2200      	movs	r2, #0
 8006268:	61da      	str	r2, [r3, #28]

	  HAL_UART_Init(&Uart2Handle);
 800626a:	4805      	ldr	r0, [pc, #20]	; (8006280 <uart2_Init+0x4c>)
 800626c:	f7fe ff1c 	bl	80050a8 <HAL_UART_Init>

	  HAL_UART_Receive_IT(&Uart2Handle, (uint8_t *)rec_buf, 1);
 8006270:	2201      	movs	r2, #1
 8006272:	4905      	ldr	r1, [pc, #20]	; (8006288 <uart2_Init+0x54>)
 8006274:	4802      	ldr	r0, [pc, #8]	; (8006280 <uart2_Init+0x4c>)
 8006276:	f7ff f806 	bl	8005286 <HAL_UART_Receive_IT>
}
 800627a:	bf00      	nop
 800627c:	bd80      	pop	{r7, pc}
 800627e:	bf00      	nop
 8006280:	20000268 	.word	0x20000268
 8006284:	40004400 	.word	0x40004400
 8006288:	20000418 	.word	0x20000418

0800628c <uart3_Init>:

void uart3_Init()
{
 800628c:	b580      	push	{r7, lr}
 800628e:	af00      	add	r7, sp, #0
	  UartDxlHandle.Instance          = USART3;
 8006290:	4b11      	ldr	r3, [pc, #68]	; (80062d8 <uart3_Init+0x4c>)
 8006292:	4a12      	ldr	r2, [pc, #72]	; (80062dc <uart3_Init+0x50>)
 8006294:	601a      	str	r2, [r3, #0]

	  UartDxlHandle.Init.BaudRate     =57600;//1000000;//57600;
 8006296:	4b10      	ldr	r3, [pc, #64]	; (80062d8 <uart3_Init+0x4c>)
 8006298:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 800629c:	605a      	str	r2, [r3, #4]
	  UartDxlHandle.Init.WordLength   = UART_WORDLENGTH_8B;
 800629e:	4b0e      	ldr	r3, [pc, #56]	; (80062d8 <uart3_Init+0x4c>)
 80062a0:	2200      	movs	r2, #0
 80062a2:	609a      	str	r2, [r3, #8]
	  UartDxlHandle.Init.StopBits     = UART_STOPBITS_1;
 80062a4:	4b0c      	ldr	r3, [pc, #48]	; (80062d8 <uart3_Init+0x4c>)
 80062a6:	2200      	movs	r2, #0
 80062a8:	60da      	str	r2, [r3, #12]
	  UartDxlHandle.Init.Parity       = UART_PARITY_NONE;
 80062aa:	4b0b      	ldr	r3, [pc, #44]	; (80062d8 <uart3_Init+0x4c>)
 80062ac:	2200      	movs	r2, #0
 80062ae:	611a      	str	r2, [r3, #16]
	  UartDxlHandle.Init.HwFlowCtl    = UART_HWCONTROL_NONE;
 80062b0:	4b09      	ldr	r3, [pc, #36]	; (80062d8 <uart3_Init+0x4c>)
 80062b2:	2200      	movs	r2, #0
 80062b4:	619a      	str	r2, [r3, #24]
	  UartDxlHandle.Init.Mode         = UART_MODE_TX_RX;
 80062b6:	4b08      	ldr	r3, [pc, #32]	; (80062d8 <uart3_Init+0x4c>)
 80062b8:	220c      	movs	r2, #12
 80062ba:	615a      	str	r2, [r3, #20]
	  UartDxlHandle.Init.OverSampling = UART_OVERSAMPLING_16;
 80062bc:	4b06      	ldr	r3, [pc, #24]	; (80062d8 <uart3_Init+0x4c>)
 80062be:	2200      	movs	r2, #0
 80062c0:	61da      	str	r2, [r3, #28]

	  HAL_UART_Init(&UartDxlHandle);
 80062c2:	4805      	ldr	r0, [pc, #20]	; (80062d8 <uart3_Init+0x4c>)
 80062c4:	f7fe fef0 	bl	80050a8 <HAL_UART_Init>

	  HAL_UART_Receive_IT(&UartDxlHandle, (uint8_t *)rec_buf6, 1);
 80062c8:	2201      	movs	r2, #1
 80062ca:	4905      	ldr	r1, [pc, #20]	; (80062e0 <uart3_Init+0x54>)
 80062cc:	4802      	ldr	r0, [pc, #8]	; (80062d8 <uart3_Init+0x4c>)
 80062ce:	f7fe ffda 	bl	8005286 <HAL_UART_Receive_IT>
}
 80062d2:	bf00      	nop
 80062d4:	bd80      	pop	{r7, pc}
 80062d6:	bf00      	nop
 80062d8:	20000210 	.word	0x20000210
 80062dc:	40004800 	.word	0x40004800
 80062e0:	20000198 	.word	0x20000198

080062e4 <put_char>:

//=================================================================
//	PUCHAR PROTOTYPE (USED BY PRINTF FUNCTIONS)
//=================================================================
int put_char(int ch)
{
 80062e4:	b580      	push	{r7, lr}
 80062e6:	b082      	sub	sp, #8
 80062e8:	af00      	add	r7, sp, #0
 80062ea:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&Uart2Handle, (uint8_t *)&ch, 1, 0xFFFF);
 80062ec:	1d39      	adds	r1, r7, #4
 80062ee:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80062f2:	2201      	movs	r2, #1
 80062f4:	4803      	ldr	r0, [pc, #12]	; (8006304 <put_char+0x20>)
 80062f6:	f7fe ff2d 	bl	8005154 <HAL_UART_Transmit>
	return 0;
 80062fa:	2300      	movs	r3, #0
}
 80062fc:	4618      	mov	r0, r3
 80062fe:	3708      	adds	r7, #8
 8006300:	46bd      	mov	sp, r7
 8006302:	bd80      	pop	{r7, pc}
 8006304:	20000268 	.word	0x20000268

08006308 <HAL_UART_RxCpltCallback>:

//=================================================================
//	UART RECEIVE CALLBACK5
//=================================================================
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *UartHandle)
{
 8006308:	b580      	push	{r7, lr}
 800630a:	b082      	sub	sp, #8
 800630c:	af00      	add	r7, sp, #0
 800630e:	6078      	str	r0, [r7, #4]


		if (UartHandle -> Instance == USART3)
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	4a0b      	ldr	r2, [pc, #44]	; (8006344 <HAL_UART_RxCpltCallback+0x3c>)
 8006316:	4293      	cmp	r3, r2
 8006318:	d10a      	bne.n	8006330 <HAL_UART_RxCpltCallback+0x28>
		{
			HAL_UART_Receive_IT(&UartDxlHandle, (uint8_t *)rec_buf6, 1);
 800631a:	2201      	movs	r2, #1
 800631c:	490a      	ldr	r1, [pc, #40]	; (8006348 <HAL_UART_RxCpltCallback+0x40>)
 800631e:	480b      	ldr	r0, [pc, #44]	; (800634c <HAL_UART_RxCpltCallback+0x44>)
 8006320:	f7fe ffb1 	bl	8005286 <HAL_UART_Receive_IT>
			dxl_rcv_cb(rec_buf6[0]);
 8006324:	4b08      	ldr	r3, [pc, #32]	; (8006348 <HAL_UART_RxCpltCallback+0x40>)
 8006326:	781b      	ldrb	r3, [r3, #0]
 8006328:	4618      	mov	r0, r3
 800632a:	f000 fa0f 	bl	800674c <dxl_rcv_cb>
		else
		{

			 HAL_UART_Receive_IT(&Uart2Handle, (uint8_t *)rec_buf, 1);
		}
}
 800632e:	e004      	b.n	800633a <HAL_UART_RxCpltCallback+0x32>
			 HAL_UART_Receive_IT(&Uart2Handle, (uint8_t *)rec_buf, 1);
 8006330:	2201      	movs	r2, #1
 8006332:	4907      	ldr	r1, [pc, #28]	; (8006350 <HAL_UART_RxCpltCallback+0x48>)
 8006334:	4807      	ldr	r0, [pc, #28]	; (8006354 <HAL_UART_RxCpltCallback+0x4c>)
 8006336:	f7fe ffa6 	bl	8005286 <HAL_UART_Receive_IT>
}
 800633a:	bf00      	nop
 800633c:	3708      	adds	r7, #8
 800633e:	46bd      	mov	sp, r7
 8006340:	bd80      	pop	{r7, pc}
 8006342:	bf00      	nop
 8006344:	40004800 	.word	0x40004800
 8006348:	20000198 	.word	0x20000198
 800634c:	20000210 	.word	0x20000210
 8006350:	20000418 	.word	0x20000418
 8006354:	20000268 	.word	0x20000268

08006358 <put_string>:

//================================================================
//				PUT STRING
//================================================================
void put_string(char* s)
{
 8006358:	b580      	push	{r7, lr}
 800635a:	b082      	sub	sp, #8
 800635c:	af00      	add	r7, sp, #0
 800635e:	6078      	str	r0, [r7, #4]
	while(*s != '\0')
 8006360:	e007      	b.n	8006372 <put_string+0x1a>
	{
		put_char(*s);
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	781b      	ldrb	r3, [r3, #0]
 8006366:	4618      	mov	r0, r3
 8006368:	f7ff ffbc 	bl	80062e4 <put_char>
		s++;
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	3301      	adds	r3, #1
 8006370:	607b      	str	r3, [r7, #4]
	while(*s != '\0')
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	781b      	ldrb	r3, [r3, #0]
 8006376:	2b00      	cmp	r3, #0
 8006378:	d1f3      	bne.n	8006362 <put_string+0xa>
	}
}
 800637a:	bf00      	nop
 800637c:	bf00      	nop
 800637e:	3708      	adds	r7, #8
 8006380:	46bd      	mov	sp, r7
 8006382:	bd80      	pop	{r7, pc}

08006384 <term_printf>:

//================================================================
//				TERM_PRINTF
//================================================================
void term_printf(const char* fmt, ...)
{
 8006384:	b40f      	push	{r0, r1, r2, r3}
 8006386:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800638a:	b0a6      	sub	sp, #152	; 0x98
 800638c:	af02      	add	r7, sp, #8
	unsigned long long ull;
	unsigned long long tmp;
	unsigned long  size;
	unsigned int   sp;
	char           s[60];
	int first=0;
 800638e:	2300      	movs	r3, #0
 8006390:	67bb      	str	r3, [r7, #120]	; 0x78

	va_start(ap, fmt);
 8006392:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8006396:	64bb      	str	r3, [r7, #72]	; 0x48

	while (*fmt != '\0') {
 8006398:	e1c4      	b.n	8006724 <term_printf+0x3a0>
		if (*fmt =='%') {
 800639a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800639e:	781b      	ldrb	r3, [r3, #0]
 80063a0:	2b25      	cmp	r3, #37	; 0x25
 80063a2:	f040 81b4 	bne.w	800670e <term_printf+0x38a>
			size=0; sp=1;
 80063a6:	2300      	movs	r3, #0
 80063a8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80063ac:	2301      	movs	r3, #1
 80063ae:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
			if (*++fmt=='0') {fmt++; sp=0;}	// parse %04d --> sp=0
 80063b2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80063b6:	3301      	adds	r3, #1
 80063b8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80063bc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80063c0:	781b      	ldrb	r3, [r3, #0]
 80063c2:	2b30      	cmp	r3, #48	; 0x30
 80063c4:	d107      	bne.n	80063d6 <term_printf+0x52>
 80063c6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80063ca:	3301      	adds	r3, #1
 80063cc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80063d0:	2300      	movs	r3, #0
 80063d2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
			ch=*fmt;
 80063d6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80063da:	781b      	ldrb	r3, [r3, #0]
 80063dc:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
			if ((ch>'0') && (ch<='9')) {	// parse %4d --> size=4
 80063e0:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 80063e4:	2b30      	cmp	r3, #48	; 0x30
 80063e6:	d92d      	bls.n	8006444 <term_printf+0xc0>
 80063e8:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 80063ec:	2b39      	cmp	r3, #57	; 0x39
 80063ee:	d829      	bhi.n	8006444 <term_printf+0xc0>
				char tmp[10];
				int i=0;
 80063f0:	2300      	movs	r3, #0
 80063f2:	67fb      	str	r3, [r7, #124]	; 0x7c
				while ((ch>='0') && (ch<='9')) {
 80063f4:	e012      	b.n	800641c <term_printf+0x98>
					tmp[i++]=ch;
 80063f6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80063f8:	1c5a      	adds	r2, r3, #1
 80063fa:	67fa      	str	r2, [r7, #124]	; 0x7c
 80063fc:	3390      	adds	r3, #144	; 0x90
 80063fe:	443b      	add	r3, r7
 8006400:	f897 208f 	ldrb.w	r2, [r7, #143]	; 0x8f
 8006404:	f803 2c90 	strb.w	r2, [r3, #-144]
					ch=*++fmt;
 8006408:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800640c:	3301      	adds	r3, #1
 800640e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006412:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006416:	781b      	ldrb	r3, [r3, #0]
 8006418:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
				while ((ch>='0') && (ch<='9')) {
 800641c:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8006420:	2b2f      	cmp	r3, #47	; 0x2f
 8006422:	d903      	bls.n	800642c <term_printf+0xa8>
 8006424:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8006428:	2b39      	cmp	r3, #57	; 0x39
 800642a:	d9e4      	bls.n	80063f6 <term_printf+0x72>
				}
				tmp[i]='\0';
 800642c:	463a      	mov	r2, r7
 800642e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006430:	4413      	add	r3, r2
 8006432:	2200      	movs	r2, #0
 8006434:	701a      	strb	r2, [r3, #0]
				size=str2num(tmp,10);
 8006436:	463b      	mov	r3, r7
 8006438:	210a      	movs	r1, #10
 800643a:	4618      	mov	r0, r3
 800643c:	f001 fa90 	bl	8007960 <str2num>
 8006440:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
			}
			switch (ch) {
 8006444:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8006448:	2b25      	cmp	r3, #37	; 0x25
 800644a:	d03b      	beq.n	80064c4 <term_printf+0x140>
 800644c:	2b25      	cmp	r3, #37	; 0x25
 800644e:	f2c0 8157 	blt.w	8006700 <term_printf+0x37c>
 8006452:	2b78      	cmp	r3, #120	; 0x78
 8006454:	f300 8154 	bgt.w	8006700 <term_printf+0x37c>
 8006458:	2b63      	cmp	r3, #99	; 0x63
 800645a:	f2c0 8151 	blt.w	8006700 <term_printf+0x37c>
 800645e:	3b63      	subs	r3, #99	; 0x63
 8006460:	2b15      	cmp	r3, #21
 8006462:	f200 814d 	bhi.w	8006700 <term_printf+0x37c>
 8006466:	a201      	add	r2, pc, #4	; (adr r2, 800646c <term_printf+0xe8>)
 8006468:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800646c:	080064cd 	.word	0x080064cd
 8006470:	080064f7 	.word	0x080064f7
 8006474:	08006701 	.word	0x08006701
 8006478:	0800660b 	.word	0x0800660b
 800647c:	08006701 	.word	0x08006701
 8006480:	08006701 	.word	0x08006701
 8006484:	08006701 	.word	0x08006701
 8006488:	08006701 	.word	0x08006701
 800648c:	08006701 	.word	0x08006701
 8006490:	08006701 	.word	0x08006701
 8006494:	08006701 	.word	0x08006701
 8006498:	08006701 	.word	0x08006701
 800649c:	0800656f 	.word	0x0800656f
 80064a0:	0800659f 	.word	0x0800659f
 80064a4:	08006701 	.word	0x08006701
 80064a8:	08006701 	.word	0x08006701
 80064ac:	080064e5 	.word	0x080064e5
 80064b0:	08006701 	.word	0x08006701
 80064b4:	0800653f 	.word	0x0800653f
 80064b8:	08006701 	.word	0x08006701
 80064bc:	08006701 	.word	0x08006701
 80064c0:	080065db 	.word	0x080065db
				case '%':
					put_char('%');
 80064c4:	2025      	movs	r0, #37	; 0x25
 80064c6:	f7ff ff0d 	bl	80062e4 <put_char>
					break;
 80064ca:	e126      	b.n	800671a <term_printf+0x396>
				case 'c':
					ch = va_arg(ap, int);
 80064cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80064ce:	1d1a      	adds	r2, r3, #4
 80064d0:	64ba      	str	r2, [r7, #72]	; 0x48
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
					put_char(ch);
 80064d8:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 80064dc:	4618      	mov	r0, r3
 80064de:	f7ff ff01 	bl	80062e4 <put_char>
					break;
 80064e2:	e11a      	b.n	800671a <term_printf+0x396>
				case 's':
					p = va_arg(ap, char *);
 80064e4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80064e6:	1d1a      	adds	r2, r3, #4
 80064e8:	64ba      	str	r2, [r7, #72]	; 0x48
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	677b      	str	r3, [r7, #116]	; 0x74
					put_string(p);
 80064ee:	6f78      	ldr	r0, [r7, #116]	; 0x74
 80064f0:	f7ff ff32 	bl	8006358 <put_string>
					break;
 80064f4:	e111      	b.n	800671a <term_printf+0x396>
				case 'd':
					ul = va_arg(ap, long);
 80064f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80064f8:	1d1a      	adds	r2, r3, #4
 80064fa:	64ba      	str	r2, [r7, #72]	; 0x48
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
					if ((long)ul < 0) {
 8006502:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006506:	2b00      	cmp	r3, #0
 8006508:	da07      	bge.n	800651a <term_printf+0x196>
						put_char('-');
 800650a:	202d      	movs	r0, #45	; 0x2d
 800650c:	f7ff feea 	bl	80062e4 <put_char>
						ul = -(long)ul;
 8006510:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006514:	425b      	negs	r3, r3
 8006516:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
						//size--;
					}
					num2str(s, ul, 10, size, sp);
 800651a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800651e:	f107 000c 	add.w	r0, r7, #12
 8006522:	9300      	str	r3, [sp, #0]
 8006524:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006528:	220a      	movs	r2, #10
 800652a:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 800652e:	f001 f995 	bl	800785c <num2str>
					put_string(s);
 8006532:	f107 030c 	add.w	r3, r7, #12
 8006536:	4618      	mov	r0, r3
 8006538:	f7ff ff0e 	bl	8006358 <put_string>
					break;
 800653c:	e0ed      	b.n	800671a <term_printf+0x396>
				case 'u':
					ul = va_arg(ap, unsigned int);
 800653e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006540:	1d1a      	adds	r2, r3, #4
 8006542:	64ba      	str	r2, [r7, #72]	; 0x48
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
					num2str(s, ul, 10, size, sp);
 800654a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800654e:	f107 000c 	add.w	r0, r7, #12
 8006552:	9300      	str	r3, [sp, #0]
 8006554:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006558:	220a      	movs	r2, #10
 800655a:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 800655e:	f001 f97d 	bl	800785c <num2str>
					put_string(s);
 8006562:	f107 030c 	add.w	r3, r7, #12
 8006566:	4618      	mov	r0, r3
 8006568:	f7ff fef6 	bl	8006358 <put_string>
					break;
 800656c:	e0d5      	b.n	800671a <term_printf+0x396>
				case 'o':
					ul = va_arg(ap, unsigned int);
 800656e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006570:	1d1a      	adds	r2, r3, #4
 8006572:	64ba      	str	r2, [r7, #72]	; 0x48
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
					num2str(s, ul, 8, size, sp);
 800657a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800657e:	f107 000c 	add.w	r0, r7, #12
 8006582:	9300      	str	r3, [sp, #0]
 8006584:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006588:	2208      	movs	r2, #8
 800658a:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 800658e:	f001 f965 	bl	800785c <num2str>
					put_string(s);
 8006592:	f107 030c 	add.w	r3, r7, #12
 8006596:	4618      	mov	r0, r3
 8006598:	f7ff fede 	bl	8006358 <put_string>
					break;
 800659c:	e0bd      	b.n	800671a <term_printf+0x396>
				case 'p':
					put_char('0');
 800659e:	2030      	movs	r0, #48	; 0x30
 80065a0:	f7ff fea0 	bl	80062e4 <put_char>
					put_char('x');
 80065a4:	2078      	movs	r0, #120	; 0x78
 80065a6:	f7ff fe9d 	bl	80062e4 <put_char>
					ul = va_arg(ap, unsigned int);
 80065aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80065ac:	1d1a      	adds	r2, r3, #4
 80065ae:	64ba      	str	r2, [r7, #72]	; 0x48
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
					num2str(s, ul, 16, size, sp);
 80065b6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80065ba:	f107 000c 	add.w	r0, r7, #12
 80065be:	9300      	str	r3, [sp, #0]
 80065c0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80065c4:	2210      	movs	r2, #16
 80065c6:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 80065ca:	f001 f947 	bl	800785c <num2str>
					put_string(s);
 80065ce:	f107 030c 	add.w	r3, r7, #12
 80065d2:	4618      	mov	r0, r3
 80065d4:	f7ff fec0 	bl	8006358 <put_string>
					break;
 80065d8:	e09f      	b.n	800671a <term_printf+0x396>
				case 'x':
					ul = va_arg(ap, unsigned int);
 80065da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80065dc:	1d1a      	adds	r2, r3, #4
 80065de:	64ba      	str	r2, [r7, #72]	; 0x48
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
					num2str(s, ul, 16, size, sp);
 80065e6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80065ea:	f107 000c 	add.w	r0, r7, #12
 80065ee:	9300      	str	r3, [sp, #0]
 80065f0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80065f4:	2210      	movs	r2, #16
 80065f6:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 80065fa:	f001 f92f 	bl	800785c <num2str>
					put_string(s);
 80065fe:	f107 030c 	add.w	r3, r7, #12
 8006602:	4618      	mov	r0, r3
 8006604:	f7ff fea8 	bl	8006358 <put_string>
					break;
 8006608:	e087      	b.n	800671a <term_printf+0x396>
				case 'f':
					//if(first==0){ ull = va_arg(ap, long long unsigned int); first = 1;}
					ull = va_arg(ap, long long unsigned int);
 800660a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800660c:	3307      	adds	r3, #7
 800660e:	f023 0307 	bic.w	r3, r3, #7
 8006612:	f103 0208 	add.w	r2, r3, #8
 8006616:	64ba      	str	r2, [r7, #72]	; 0x48
 8006618:	e9d3 2300 	ldrd	r2, r3, [r3]
 800661c:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
					tmp = ull >> 63;
 8006620:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8006624:	f04f 0200 	mov.w	r2, #0
 8006628:	f04f 0300 	mov.w	r3, #0
 800662c:	0fca      	lsrs	r2, r1, #31
 800662e:	2300      	movs	r3, #0
 8006630:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
					int sign = tmp & 0x1 ;
 8006634:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006636:	f003 0301 	and.w	r3, r3, #1
 800663a:	65fb      	str	r3, [r7, #92]	; 0x5c
					tmp = (ull & 0x000FFFFFFFFFFFFF) ;
 800663c:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8006640:	4692      	mov	sl, r2
 8006642:	f3c3 0b13 	ubfx	fp, r3, #0, #20
 8006646:	e9c7 ab18 	strd	sl, fp, [r7, #96]	; 0x60
					double mf = (double)tmp ;
 800664a:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800664e:	f7f9 ff03 	bl	8000458 <__aeabi_ul2d>
 8006652:	4602      	mov	r2, r0
 8006654:	460b      	mov	r3, r1
 8006656:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
					mf = mf / pow(2.0,52.0);
 800665a:	f04f 0200 	mov.w	r2, #0
 800665e:	4b38      	ldr	r3, [pc, #224]	; (8006740 <term_printf+0x3bc>)
 8006660:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8006664:	f7fa f858 	bl	8000718 <__aeabi_ddiv>
 8006668:	4602      	mov	r2, r0
 800666a:	460b      	mov	r3, r1
 800666c:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
					mf = mf + 1.0;
 8006670:	f04f 0200 	mov.w	r2, #0
 8006674:	4b33      	ldr	r3, [pc, #204]	; (8006744 <term_printf+0x3c0>)
 8006676:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800667a:	f7f9 fd6d 	bl	8000158 <__adddf3>
 800667e:	4602      	mov	r2, r0
 8006680:	460b      	mov	r3, r1
 8006682:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
					tmp = ( ull & 0x7FF0000000000000 ) >> 52;
 8006686:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800668a:	f04f 0200 	mov.w	r2, #0
 800668e:	f04f 0300 	mov.w	r3, #0
 8006692:	0d0a      	lsrs	r2, r1, #20
 8006694:	2300      	movs	r3, #0
 8006696:	f3c2 080a 	ubfx	r8, r2, #0, #11
 800669a:	f04f 0900 	mov.w	r9, #0
 800669e:	e9c7 8918 	strd	r8, r9, [r7, #96]	; 0x60
					tmp = tmp - 1023;
 80066a2:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80066a6:	4928      	ldr	r1, [pc, #160]	; (8006748 <term_printf+0x3c4>)
 80066a8:	1854      	adds	r4, r2, r1
 80066aa:	f143 35ff 	adc.w	r5, r3, #4294967295	; 0xffffffff
 80066ae:	e9c7 4518 	strd	r4, r5, [r7, #96]	; 0x60
					float f = mf*myPow(2.0,tmp);
 80066b2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80066b4:	461a      	mov	r2, r3
 80066b6:	f04f 0000 	mov.w	r0, #0
 80066ba:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80066be:	f001 fa53 	bl	8007b68 <myPow>
 80066c2:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80066c6:	f7f9 fefd 	bl	80004c4 <__aeabi_dmul>
 80066ca:	4602      	mov	r2, r0
 80066cc:	460b      	mov	r3, r1
 80066ce:	4610      	mov	r0, r2
 80066d0:	4619      	mov	r1, r3
 80066d2:	f7fa f909 	bl	80008e8 <__aeabi_d2f>
 80066d6:	4603      	mov	r3, r0
 80066d8:	64fb      	str	r3, [r7, #76]	; 0x4c
					if(sign==1){ put_char('-'); }
 80066da:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80066dc:	2b01      	cmp	r3, #1
 80066de:	d102      	bne.n	80066e6 <term_printf+0x362>
 80066e0:	202d      	movs	r0, #45	; 0x2d
 80066e2:	f7ff fdff 	bl	80062e4 <put_char>
					float2str((char*)s, f, 5);
 80066e6:	f107 030c 	add.w	r3, r7, #12
 80066ea:	2205      	movs	r2, #5
 80066ec:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80066ee:	4618      	mov	r0, r3
 80066f0:	f001 f9f2 	bl	8007ad8 <float2str>
					put_string((char*)s);
 80066f4:	f107 030c 	add.w	r3, r7, #12
 80066f8:	4618      	mov	r0, r3
 80066fa:	f7ff fe2d 	bl	8006358 <put_string>
					break;
 80066fe:	e00c      	b.n	800671a <term_printf+0x396>

				default:
					put_char(*fmt);
 8006700:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006704:	781b      	ldrb	r3, [r3, #0]
 8006706:	4618      	mov	r0, r3
 8006708:	f7ff fdec 	bl	80062e4 <put_char>
 800670c:	e005      	b.n	800671a <term_printf+0x396>
			}
		} else put_char(*fmt);
 800670e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006712:	781b      	ldrb	r3, [r3, #0]
 8006714:	4618      	mov	r0, r3
 8006716:	f7ff fde5 	bl	80062e4 <put_char>
		fmt++;
 800671a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800671e:	3301      	adds	r3, #1
 8006720:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
	while (*fmt != '\0') {
 8006724:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006728:	781b      	ldrb	r3, [r3, #0]
 800672a:	2b00      	cmp	r3, #0
 800672c:	f47f ae35 	bne.w	800639a <term_printf+0x16>
	}
	va_end(ap);
}
 8006730:	bf00      	nop
 8006732:	bf00      	nop
 8006734:	3790      	adds	r7, #144	; 0x90
 8006736:	46bd      	mov	sp, r7
 8006738:	e8bd 4fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800673c:	b004      	add	sp, #16
 800673e:	4770      	bx	lr
 8006740:	43300000 	.word	0x43300000
 8006744:	3ff00000 	.word	0x3ff00000
 8006748:	fffffc01 	.word	0xfffffc01

0800674c <dxl_rcv_cb>:
uint8_t 	size = 0;

uint8_t 	dxl_rcvBuf[BUF_SIZE];
//==================================================================
void dxl_rcv_cb(uint8_t car)
{
 800674c:	b480      	push	{r7}
 800674e:	b083      	sub	sp, #12
 8006750:	af00      	add	r7, sp, #0
 8006752:	4603      	mov	r3, r0
 8006754:	71fb      	strb	r3, [r7, #7]
		dxl_rcvBuf[(p_wr++)%BUF_SIZE] = car;
 8006756:	4b10      	ldr	r3, [pc, #64]	; (8006798 <dxl_rcv_cb+0x4c>)
 8006758:	781b      	ldrb	r3, [r3, #0]
 800675a:	1c5a      	adds	r2, r3, #1
 800675c:	b2d1      	uxtb	r1, r2
 800675e:	4a0e      	ldr	r2, [pc, #56]	; (8006798 <dxl_rcv_cb+0x4c>)
 8006760:	7011      	strb	r1, [r2, #0]
 8006762:	461a      	mov	r2, r3
 8006764:	4b0d      	ldr	r3, [pc, #52]	; (800679c <dxl_rcv_cb+0x50>)
 8006766:	fb83 1302 	smull	r1, r3, r3, r2
 800676a:	1159      	asrs	r1, r3, #5
 800676c:	17d3      	asrs	r3, r2, #31
 800676e:	1acb      	subs	r3, r1, r3
 8006770:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8006774:	fb01 f303 	mul.w	r3, r1, r3
 8006778:	1ad3      	subs	r3, r2, r3
 800677a:	4909      	ldr	r1, [pc, #36]	; (80067a0 <dxl_rcv_cb+0x54>)
 800677c:	79fa      	ldrb	r2, [r7, #7]
 800677e:	54ca      	strb	r2, [r1, r3]
		size++;
 8006780:	4b08      	ldr	r3, [pc, #32]	; (80067a4 <dxl_rcv_cb+0x58>)
 8006782:	781b      	ldrb	r3, [r3, #0]
 8006784:	3301      	adds	r3, #1
 8006786:	b2da      	uxtb	r2, r3
 8006788:	4b06      	ldr	r3, [pc, #24]	; (80067a4 <dxl_rcv_cb+0x58>)
 800678a:	701a      	strb	r2, [r3, #0]
}
 800678c:	bf00      	nop
 800678e:	370c      	adds	r7, #12
 8006790:	46bd      	mov	sp, r7
 8006792:	bc80      	pop	{r7}
 8006794:	4770      	bx	lr
 8006796:	bf00      	nop
 8006798:	200001b0 	.word	0x200001b0
 800679c:	10624dd3 	.word	0x10624dd3
 80067a0:	2000041c 	.word	0x2000041c
 80067a4:	200001b2 	.word	0x200001b2

080067a8 <hts221_whoAmI>:
//================================================================================
//          WHO AM I
//  defaut : 0xBC
//================================================================================
uint8_t hts221_whoAmI()
{
 80067a8:	b580      	push	{r7, lr}
 80067aa:	b082      	sub	sp, #8
 80067ac:	af00      	add	r7, sp, #0
    uint8_t id=0;
 80067ae:	2300      	movs	r3, #0
 80067b0:	71fb      	strb	r3, [r7, #7]
    i2c1_ReadRegBuffer(HTS221_I2C_ADDRESS, WHO_AM_I,  &id, 1);
 80067b2:	1dfa      	adds	r2, r7, #7
 80067b4:	2301      	movs	r3, #1
 80067b6:	210f      	movs	r1, #15
 80067b8:	20be      	movs	r0, #190	; 0xbe
 80067ba:	f7ff fba9 	bl	8005f10 <i2c1_ReadRegBuffer>
    return id;
 80067be:	79fb      	ldrb	r3, [r7, #7]
}
 80067c0:	4618      	mov	r0, r3
 80067c2:	3708      	adds	r7, #8
 80067c4:	46bd      	mov	sp, r7
 80067c6:	bd80      	pop	{r7, pc}

080067c8 <hts221_activate>:
//================================================================================
//          ACTIVATE
//================================================================================
void hts221_activate()
{
 80067c8:	b580      	push	{r7, lr}
 80067ca:	b082      	sub	sp, #8
 80067cc:	af00      	add	r7, sp, #0
     uint8_t data;
    i2c1_ReadRegBuffer(HTS221_I2C_ADDRESS, CTRL_REG1,  &data, 1);
 80067ce:	1dfa      	adds	r2, r7, #7
 80067d0:	2301      	movs	r3, #1
 80067d2:	2120      	movs	r1, #32
 80067d4:	20be      	movs	r0, #190	; 0xbe
 80067d6:	f7ff fb9b 	bl	8005f10 <i2c1_ReadRegBuffer>
    data |= POWER_UP;
 80067da:	79fb      	ldrb	r3, [r7, #7]
 80067dc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80067e0:	b2db      	uxtb	r3, r3
 80067e2:	71fb      	strb	r3, [r7, #7]
    data |= ODR0_SET;
 80067e4:	79fb      	ldrb	r3, [r7, #7]
 80067e6:	f043 0301 	orr.w	r3, r3, #1
 80067ea:	b2db      	uxtb	r3, r3
 80067ec:	71fb      	strb	r3, [r7, #7]
    i2c1_WriteRegBuffer(HTS221_I2C_ADDRESS, CTRL_REG1,  &data, 1);
 80067ee:	1dfa      	adds	r2, r7, #7
 80067f0:	2301      	movs	r3, #1
 80067f2:	2120      	movs	r1, #32
 80067f4:	20be      	movs	r0, #190	; 0xbe
 80067f6:	f7ff fbbd 	bl	8005f74 <i2c1_WriteRegBuffer>
}
 80067fa:	bf00      	nop
 80067fc:	3708      	adds	r7, #8
 80067fe:	46bd      	mov	sp, r7
 8006800:	bd80      	pop	{r7, pc}
	...

08006804 <hts221_storeCalibration>:
}
//================================================================================
//          STORE CALIBRATION
//================================================================================
void hts221_storeCalibration()
{
 8006804:	b580      	push	{r7, lr}
 8006806:	b082      	sub	sp, #8
 8006808:	af00      	add	r7, sp, #0
     uint8_t data;
     uint16_t tmp;

     i2c1_ReadRegBuffer(HTS221_I2C_ADDRESS, CALIB_0,  &data, 1);
 800680a:	1d7a      	adds	r2, r7, #5
 800680c:	2301      	movs	r3, #1
 800680e:	2130      	movs	r1, #48	; 0x30
 8006810:	20be      	movs	r0, #190	; 0xbe
 8006812:	f7ff fb7d 	bl	8005f10 <i2c1_ReadRegBuffer>
     _h0_rH = data;
 8006816:	797a      	ldrb	r2, [r7, #5]
 8006818:	4b53      	ldr	r3, [pc, #332]	; (8006968 <hts221_storeCalibration+0x164>)
 800681a:	701a      	strb	r2, [r3, #0]

     i2c1_ReadRegBuffer(HTS221_I2C_ADDRESS, CALIB_1,  &data, 1);
 800681c:	1d7a      	adds	r2, r7, #5
 800681e:	2301      	movs	r3, #1
 8006820:	2131      	movs	r1, #49	; 0x31
 8006822:	20be      	movs	r0, #190	; 0xbe
 8006824:	f7ff fb74 	bl	8005f10 <i2c1_ReadRegBuffer>
     _h1_rH = data;
 8006828:	797a      	ldrb	r2, [r7, #5]
 800682a:	4b50      	ldr	r3, [pc, #320]	; (800696c <hts221_storeCalibration+0x168>)
 800682c:	701a      	strb	r2, [r3, #0]

     i2c1_ReadRegBuffer(HTS221_I2C_ADDRESS, CALIB_2,  &data, 1);
 800682e:	1d7a      	adds	r2, r7, #5
 8006830:	2301      	movs	r3, #1
 8006832:	2132      	movs	r1, #50	; 0x32
 8006834:	20be      	movs	r0, #190	; 0xbe
 8006836:	f7ff fb6b 	bl	8005f10 <i2c1_ReadRegBuffer>
     _T0_degC = data;
 800683a:	797b      	ldrb	r3, [r7, #5]
 800683c:	461a      	mov	r2, r3
 800683e:	4b4c      	ldr	r3, [pc, #304]	; (8006970 <hts221_storeCalibration+0x16c>)
 8006840:	601a      	str	r2, [r3, #0]

     i2c1_ReadRegBuffer(HTS221_I2C_ADDRESS, CALIB_3,  &data, 1);
 8006842:	1d7a      	adds	r2, r7, #5
 8006844:	2301      	movs	r3, #1
 8006846:	2133      	movs	r1, #51	; 0x33
 8006848:	20be      	movs	r0, #190	; 0xbe
 800684a:	f7ff fb61 	bl	8005f10 <i2c1_ReadRegBuffer>
     _T1_degC = data;
 800684e:	797b      	ldrb	r3, [r7, #5]
 8006850:	461a      	mov	r2, r3
 8006852:	4b48      	ldr	r3, [pc, #288]	; (8006974 <hts221_storeCalibration+0x170>)
 8006854:	601a      	str	r2, [r3, #0]

     i2c1_ReadRegBuffer(HTS221_I2C_ADDRESS, CALIB_5,  &data, 1);
 8006856:	1d7a      	adds	r2, r7, #5
 8006858:	2301      	movs	r3, #1
 800685a:	2135      	movs	r1, #53	; 0x35
 800685c:	20be      	movs	r0, #190	; 0xbe
 800685e:	f7ff fb57 	bl	8005f10 <i2c1_ReadRegBuffer>
     tmp = _T0_degC;
 8006862:	4b43      	ldr	r3, [pc, #268]	; (8006970 <hts221_storeCalibration+0x16c>)
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	80fb      	strh	r3, [r7, #6]
     _T0_degC = (data&0x3)<<8;
 8006868:	797b      	ldrb	r3, [r7, #5]
 800686a:	021b      	lsls	r3, r3, #8
 800686c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006870:	4a3f      	ldr	r2, [pc, #252]	; (8006970 <hts221_storeCalibration+0x16c>)
 8006872:	6013      	str	r3, [r2, #0]
     _T0_degC |= tmp;
 8006874:	88fa      	ldrh	r2, [r7, #6]
 8006876:	4b3e      	ldr	r3, [pc, #248]	; (8006970 <hts221_storeCalibration+0x16c>)
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	4313      	orrs	r3, r2
 800687c:	4a3c      	ldr	r2, [pc, #240]	; (8006970 <hts221_storeCalibration+0x16c>)
 800687e:	6013      	str	r3, [r2, #0]
     tmp = _T1_degC;
 8006880:	4b3c      	ldr	r3, [pc, #240]	; (8006974 <hts221_storeCalibration+0x170>)
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	80fb      	strh	r3, [r7, #6]
     _T1_degC = ((data&0xC)>>2)<<8;
 8006886:	797b      	ldrb	r3, [r7, #5]
 8006888:	109b      	asrs	r3, r3, #2
 800688a:	021b      	lsls	r3, r3, #8
 800688c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006890:	4a38      	ldr	r2, [pc, #224]	; (8006974 <hts221_storeCalibration+0x170>)
 8006892:	6013      	str	r3, [r2, #0]
     _T1_degC |= tmp;
 8006894:	88fa      	ldrh	r2, [r7, #6]
 8006896:	4b37      	ldr	r3, [pc, #220]	; (8006974 <hts221_storeCalibration+0x170>)
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	4313      	orrs	r3, r2
 800689c:	4a35      	ldr	r2, [pc, #212]	; (8006974 <hts221_storeCalibration+0x170>)
 800689e:	6013      	str	r3, [r2, #0]

     i2c1_ReadRegBuffer(HTS221_I2C_ADDRESS, CALIB_6,  &data, 1);
 80068a0:	1d7a      	adds	r2, r7, #5
 80068a2:	2301      	movs	r3, #1
 80068a4:	2136      	movs	r1, #54	; 0x36
 80068a6:	20be      	movs	r0, #190	; 0xbe
 80068a8:	f7ff fb32 	bl	8005f10 <i2c1_ReadRegBuffer>
     _H0_T0 = data;
 80068ac:	797b      	ldrb	r3, [r7, #5]
 80068ae:	461a      	mov	r2, r3
 80068b0:	4b31      	ldr	r3, [pc, #196]	; (8006978 <hts221_storeCalibration+0x174>)
 80068b2:	601a      	str	r2, [r3, #0]

     i2c1_ReadRegBuffer(HTS221_I2C_ADDRESS, CALIB_7,  &data, 1);
 80068b4:	1d7a      	adds	r2, r7, #5
 80068b6:	2301      	movs	r3, #1
 80068b8:	2137      	movs	r1, #55	; 0x37
 80068ba:	20be      	movs	r0, #190	; 0xbe
 80068bc:	f7ff fb28 	bl	8005f10 <i2c1_ReadRegBuffer>
     _H0_T0 |= data<<8;
 80068c0:	797b      	ldrb	r3, [r7, #5]
 80068c2:	021b      	lsls	r3, r3, #8
 80068c4:	461a      	mov	r2, r3
 80068c6:	4b2c      	ldr	r3, [pc, #176]	; (8006978 <hts221_storeCalibration+0x174>)
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	4313      	orrs	r3, r2
 80068cc:	4a2a      	ldr	r2, [pc, #168]	; (8006978 <hts221_storeCalibration+0x174>)
 80068ce:	6013      	str	r3, [r2, #0]

     i2c1_ReadRegBuffer(HTS221_I2C_ADDRESS, CALIB_A,  &data, 1);
 80068d0:	1d7a      	adds	r2, r7, #5
 80068d2:	2301      	movs	r3, #1
 80068d4:	213a      	movs	r1, #58	; 0x3a
 80068d6:	20be      	movs	r0, #190	; 0xbe
 80068d8:	f7ff fb1a 	bl	8005f10 <i2c1_ReadRegBuffer>
     _H1_T0 = data;
 80068dc:	797b      	ldrb	r3, [r7, #5]
 80068de:	461a      	mov	r2, r3
 80068e0:	4b26      	ldr	r3, [pc, #152]	; (800697c <hts221_storeCalibration+0x178>)
 80068e2:	601a      	str	r2, [r3, #0]

     i2c1_ReadRegBuffer(HTS221_I2C_ADDRESS, CALIB_B,  &data, 1);
 80068e4:	1d7a      	adds	r2, r7, #5
 80068e6:	2301      	movs	r3, #1
 80068e8:	213b      	movs	r1, #59	; 0x3b
 80068ea:	20be      	movs	r0, #190	; 0xbe
 80068ec:	f7ff fb10 	bl	8005f10 <i2c1_ReadRegBuffer>
     _H1_T0 |= data<<8;
 80068f0:	797b      	ldrb	r3, [r7, #5]
 80068f2:	021b      	lsls	r3, r3, #8
 80068f4:	461a      	mov	r2, r3
 80068f6:	4b21      	ldr	r3, [pc, #132]	; (800697c <hts221_storeCalibration+0x178>)
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	4313      	orrs	r3, r2
 80068fc:	4a1f      	ldr	r2, [pc, #124]	; (800697c <hts221_storeCalibration+0x178>)
 80068fe:	6013      	str	r3, [r2, #0]

     i2c1_ReadRegBuffer(HTS221_I2C_ADDRESS, CALIB_C,  &data, 1);
 8006900:	1d7a      	adds	r2, r7, #5
 8006902:	2301      	movs	r3, #1
 8006904:	213c      	movs	r1, #60	; 0x3c
 8006906:	20be      	movs	r0, #190	; 0xbe
 8006908:	f7ff fb02 	bl	8005f10 <i2c1_ReadRegBuffer>
     _T0_OUT = data;
 800690c:	797b      	ldrb	r3, [r7, #5]
 800690e:	461a      	mov	r2, r3
 8006910:	4b1b      	ldr	r3, [pc, #108]	; (8006980 <hts221_storeCalibration+0x17c>)
 8006912:	601a      	str	r2, [r3, #0]

     i2c1_ReadRegBuffer(HTS221_I2C_ADDRESS, CALIB_D,  &data, 1);
 8006914:	1d7a      	adds	r2, r7, #5
 8006916:	2301      	movs	r3, #1
 8006918:	213d      	movs	r1, #61	; 0x3d
 800691a:	20be      	movs	r0, #190	; 0xbe
 800691c:	f7ff faf8 	bl	8005f10 <i2c1_ReadRegBuffer>
     _T0_OUT |= data << 8;
 8006920:	797b      	ldrb	r3, [r7, #5]
 8006922:	021b      	lsls	r3, r3, #8
 8006924:	461a      	mov	r2, r3
 8006926:	4b16      	ldr	r3, [pc, #88]	; (8006980 <hts221_storeCalibration+0x17c>)
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	4313      	orrs	r3, r2
 800692c:	4a14      	ldr	r2, [pc, #80]	; (8006980 <hts221_storeCalibration+0x17c>)
 800692e:	6013      	str	r3, [r2, #0]

     i2c1_ReadRegBuffer(HTS221_I2C_ADDRESS, CALIB_E,  &data, 1);
 8006930:	1d7a      	adds	r2, r7, #5
 8006932:	2301      	movs	r3, #1
 8006934:	213e      	movs	r1, #62	; 0x3e
 8006936:	20be      	movs	r0, #190	; 0xbe
 8006938:	f7ff faea 	bl	8005f10 <i2c1_ReadRegBuffer>
     _T1_OUT = data;
 800693c:	797b      	ldrb	r3, [r7, #5]
 800693e:	461a      	mov	r2, r3
 8006940:	4b10      	ldr	r3, [pc, #64]	; (8006984 <hts221_storeCalibration+0x180>)
 8006942:	601a      	str	r2, [r3, #0]

     i2c1_ReadRegBuffer(HTS221_I2C_ADDRESS, CALIB_F,  &data, 1);
 8006944:	1d7a      	adds	r2, r7, #5
 8006946:	2301      	movs	r3, #1
 8006948:	213f      	movs	r1, #63	; 0x3f
 800694a:	20be      	movs	r0, #190	; 0xbe
 800694c:	f7ff fae0 	bl	8005f10 <i2c1_ReadRegBuffer>
     _T1_OUT |= data << 8;
 8006950:	797b      	ldrb	r3, [r7, #5]
 8006952:	021b      	lsls	r3, r3, #8
 8006954:	461a      	mov	r2, r3
 8006956:	4b0b      	ldr	r3, [pc, #44]	; (8006984 <hts221_storeCalibration+0x180>)
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	4313      	orrs	r3, r2
 800695c:	4a09      	ldr	r2, [pc, #36]	; (8006984 <hts221_storeCalibration+0x180>)
 800695e:	6013      	str	r3, [r2, #0]
}
 8006960:	bf00      	nop
 8006962:	3708      	adds	r7, #8
 8006964:	46bd      	mov	sp, r7
 8006966:	bd80      	pop	{r7, pc}
 8006968:	20000620 	.word	0x20000620
 800696c:	20000628 	.word	0x20000628
 8006970:	2000061c 	.word	0x2000061c
 8006974:	20000618 	.word	0x20000618
 8006978:	2000062c 	.word	0x2000062c
 800697c:	20000630 	.word	0x20000630
 8006980:	20000614 	.word	0x20000614
 8006984:	20000624 	.word	0x20000624

08006988 <hts221_getHumidity>:
}
//================================================================================
//          GET HUMIDITY
//================================================================================
int hts221_getHumidity(float *humid)
{
 8006988:	b590      	push	{r4, r7, lr}
 800698a:	b087      	sub	sp, #28
 800698c:	af00      	add	r7, sp, #0
 800698e:	6078      	str	r0, [r7, #4]
    uint8_t data   = 0;
 8006990:	2300      	movs	r3, #0
 8006992:	72fb      	strb	r3, [r7, #11]
    uint16_t h_out = 0;
 8006994:	2300      	movs	r3, #0
 8006996:	82fb      	strh	r3, [r7, #22]
    float h_temp  = 0.0;
 8006998:	f04f 0300 	mov.w	r3, #0
 800699c:	613b      	str	r3, [r7, #16]
    float hum     = 0.0;
 800699e:	f04f 0300 	mov.w	r3, #0
 80069a2:	60fb      	str	r3, [r7, #12]
    static float _humidity;

    i2c1_ReadRegBuffer(HTS221_I2C_ADDRESS, STATUS_REG,  &data, 1);
 80069a4:	f107 020b 	add.w	r2, r7, #11
 80069a8:	2301      	movs	r3, #1
 80069aa:	2127      	movs	r1, #39	; 0x27
 80069ac:	20be      	movs	r0, #190	; 0xbe
 80069ae:	f7ff faaf 	bl	8005f10 <i2c1_ReadRegBuffer>

    if (data & HUMIDITY_READY) {
 80069b2:	7afb      	ldrb	r3, [r7, #11]
 80069b4:	f003 0302 	and.w	r3, r3, #2
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d06c      	beq.n	8006a96 <hts221_getHumidity+0x10e>

        i2c1_ReadRegBuffer(HTS221_I2C_ADDRESS,HUMIDITY_OUT_H,  &data, 1);
 80069bc:	f107 020b 	add.w	r2, r7, #11
 80069c0:	2301      	movs	r3, #1
 80069c2:	2129      	movs	r1, #41	; 0x29
 80069c4:	20be      	movs	r0, #190	; 0xbe
 80069c6:	f7ff faa3 	bl	8005f10 <i2c1_ReadRegBuffer>
        h_out = data << 8;  // MSB
 80069ca:	7afb      	ldrb	r3, [r7, #11]
 80069cc:	b29b      	uxth	r3, r3
 80069ce:	021b      	lsls	r3, r3, #8
 80069d0:	82fb      	strh	r3, [r7, #22]
        i2c1_ReadRegBuffer(HTS221_I2C_ADDRESS,HUMIDITY_OUT_L,  &data, 1);
 80069d2:	f107 020b 	add.w	r2, r7, #11
 80069d6:	2301      	movs	r3, #1
 80069d8:	2128      	movs	r1, #40	; 0x28
 80069da:	20be      	movs	r0, #190	; 0xbe
 80069dc:	f7ff fa98 	bl	8005f10 <i2c1_ReadRegBuffer>
        h_out |= data;      // LSB
 80069e0:	7afb      	ldrb	r3, [r7, #11]
 80069e2:	b29a      	uxth	r2, r3
 80069e4:	8afb      	ldrh	r3, [r7, #22]
 80069e6:	4313      	orrs	r3, r2
 80069e8:	82fb      	strh	r3, [r7, #22]

        // Decode Humidity
        hum = ((int16_t)(_h1_rH) - (int16_t)(_h0_rH))/2.0;  // remove x2 multiple
 80069ea:	4b2e      	ldr	r3, [pc, #184]	; (8006aa4 <hts221_getHumidity+0x11c>)
 80069ec:	781b      	ldrb	r3, [r3, #0]
 80069ee:	461a      	mov	r2, r3
 80069f0:	4b2d      	ldr	r3, [pc, #180]	; (8006aa8 <hts221_getHumidity+0x120>)
 80069f2:	781b      	ldrb	r3, [r3, #0]
 80069f4:	1ad3      	subs	r3, r2, r3
 80069f6:	4618      	mov	r0, r3
 80069f8:	f7f9 fcfa 	bl	80003f0 <__aeabi_i2d>
 80069fc:	f04f 0200 	mov.w	r2, #0
 8006a00:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006a04:	f7f9 fe88 	bl	8000718 <__aeabi_ddiv>
 8006a08:	4602      	mov	r2, r0
 8006a0a:	460b      	mov	r3, r1
 8006a0c:	4610      	mov	r0, r2
 8006a0e:	4619      	mov	r1, r3
 8006a10:	f7f9 ff6a 	bl	80008e8 <__aeabi_d2f>
 8006a14:	4603      	mov	r3, r0
 8006a16:	60fb      	str	r3, [r7, #12]

        // Calculate humidity in decimal of grade centigrades i.e. 15.0 = 150.
        h_temp = (float)(((int16_t)h_out - (int16_t)_H0_T0) * hum) /
 8006a18:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8006a1c:	461a      	mov	r2, r3
 8006a1e:	4b23      	ldr	r3, [pc, #140]	; (8006aac <hts221_getHumidity+0x124>)
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	b21b      	sxth	r3, r3
 8006a24:	1ad3      	subs	r3, r2, r3
 8006a26:	4618      	mov	r0, r3
 8006a28:	f7fa f868 	bl	8000afc <__aeabi_i2f>
 8006a2c:	4603      	mov	r3, r0
 8006a2e:	68f9      	ldr	r1, [r7, #12]
 8006a30:	4618      	mov	r0, r3
 8006a32:	f7fa f8b7 	bl	8000ba4 <__aeabi_fmul>
 8006a36:	4603      	mov	r3, r0
 8006a38:	461c      	mov	r4, r3
             (float)((int16_t)_H1_T0 - (int16_t)_H0_T0);
 8006a3a:	4b1d      	ldr	r3, [pc, #116]	; (8006ab0 <hts221_getHumidity+0x128>)
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	b21b      	sxth	r3, r3
 8006a40:	461a      	mov	r2, r3
 8006a42:	4b1a      	ldr	r3, [pc, #104]	; (8006aac <hts221_getHumidity+0x124>)
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	b21b      	sxth	r3, r3
 8006a48:	1ad3      	subs	r3, r2, r3
 8006a4a:	4618      	mov	r0, r3
 8006a4c:	f7fa f856 	bl	8000afc <__aeabi_i2f>
 8006a50:	4603      	mov	r3, r0
        h_temp = (float)(((int16_t)h_out - (int16_t)_H0_T0) * hum) /
 8006a52:	4619      	mov	r1, r3
 8006a54:	4620      	mov	r0, r4
 8006a56:	f7fa f959 	bl	8000d0c <__aeabi_fdiv>
 8006a5a:	4603      	mov	r3, r0
 8006a5c:	613b      	str	r3, [r7, #16]
        hum    = (float)((int16_t)_h0_rH) / 2.0; // remove x2 multiple
 8006a5e:	4b12      	ldr	r3, [pc, #72]	; (8006aa8 <hts221_getHumidity+0x120>)
 8006a60:	781b      	ldrb	r3, [r3, #0]
 8006a62:	b21b      	sxth	r3, r3
 8006a64:	4618      	mov	r0, r3
 8006a66:	f7fa f849 	bl	8000afc <__aeabi_i2f>
 8006a6a:	4603      	mov	r3, r0
 8006a6c:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8006a70:	4618      	mov	r0, r3
 8006a72:	f7fa f94b 	bl	8000d0c <__aeabi_fdiv>
 8006a76:	4603      	mov	r3, r0
 8006a78:	60fb      	str	r3, [r7, #12]
        _humidity = (hum + h_temp); // provide signed % measurement unit
 8006a7a:	6939      	ldr	r1, [r7, #16]
 8006a7c:	68f8      	ldr	r0, [r7, #12]
 8006a7e:	f7f9 ff89 	bl	8000994 <__addsf3>
 8006a82:	4603      	mov	r3, r0
 8006a84:	461a      	mov	r2, r3
 8006a86:	4b0b      	ldr	r3, [pc, #44]	; (8006ab4 <hts221_getHumidity+0x12c>)
 8006a88:	601a      	str	r2, [r3, #0]


        *humid = _humidity;
 8006a8a:	4b0a      	ldr	r3, [pc, #40]	; (8006ab4 <hts221_getHumidity+0x12c>)
 8006a8c:	681a      	ldr	r2, [r3, #0]
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	601a      	str	r2, [r3, #0]
        return 0;
 8006a92:	2300      	movs	r3, #0
 8006a94:	e001      	b.n	8006a9a <hts221_getHumidity+0x112>

    }
    else
    {
        return -1;
 8006a96:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    }


}
 8006a9a:	4618      	mov	r0, r3
 8006a9c:	371c      	adds	r7, #28
 8006a9e:	46bd      	mov	sp, r7
 8006aa0:	bd90      	pop	{r4, r7, pc}
 8006aa2:	bf00      	nop
 8006aa4:	20000628 	.word	0x20000628
 8006aa8:	20000620 	.word	0x20000620
 8006aac:	2000062c 	.word	0x2000062c
 8006ab0:	20000630 	.word	0x20000630
 8006ab4:	200001c4 	.word	0x200001c4

08006ab8 <lps22hb_whoAmI>:
//========================================================================
//			WHO AM I
//========================================================================
// Default : 0xBD
uint8_t lps22hb_whoAmI()
{
 8006ab8:	b580      	push	{r7, lr}
 8006aba:	b082      	sub	sp, #8
 8006abc:	af00      	add	r7, sp, #0
	uint8_t id;
	i2c1_ReadRegBuffer(lps22hb_I2C_ADDRESS, WHO_AM_I,  &id, 1);
 8006abe:	1dfa      	adds	r2, r7, #7
 8006ac0:	2301      	movs	r3, #1
 8006ac2:	210f      	movs	r1, #15
 8006ac4:	20ba      	movs	r0, #186	; 0xba
 8006ac6:	f7ff fa23 	bl	8005f10 <i2c1_ReadRegBuffer>
	return id;
 8006aca:	79fb      	ldrb	r3, [r7, #7]
}
 8006acc:	4618      	mov	r0, r3
 8006ace:	3708      	adds	r7, #8
 8006ad0:	46bd      	mov	sp, r7
 8006ad2:	bd80      	pop	{r7, pc}

08006ad4 <lps22hb_setup>:
//========================================================================
//			SETUP
//========================================================================
void lps22hb_setup()
{
 8006ad4:	b580      	push	{r7, lr}
 8006ad6:	b082      	sub	sp, #8
 8006ad8:	af00      	add	r7, sp, #0
	uint8_t data;
	data = 0x10;	// Active mode, continuous update
 8006ada:	2310      	movs	r3, #16
 8006adc:	71fb      	strb	r3, [r7, #7]
	i2c1_WriteRegBuffer(lps22hb_I2C_ADDRESS, CTRL_REG1,  &data, 1);
 8006ade:	1dfa      	adds	r2, r7, #7
 8006ae0:	2301      	movs	r3, #1
 8006ae2:	2120      	movs	r1, #32
 8006ae4:	20ba      	movs	r0, #186	; 0xba
 8006ae6:	f7ff fa45 	bl	8005f74 <i2c1_WriteRegBuffer>

	data=0x1A;	// resolution: temp=32, pressure=128
 8006aea:	231a      	movs	r3, #26
 8006aec:	71fb      	strb	r3, [r7, #7]
	i2c1_WriteRegBuffer(lps22hb_I2C_ADDRESS, RES_CONF,  &data, 1);
 8006aee:	1dfa      	adds	r2, r7, #7
 8006af0:	2301      	movs	r3, #1
 8006af2:	2110      	movs	r1, #16
 8006af4:	20ba      	movs	r0, #186	; 0xba
 8006af6:	f7ff fa3d 	bl	8005f74 <i2c1_WriteRegBuffer>
}
 8006afa:	bf00      	nop
 8006afc:	3708      	adds	r7, #8
 8006afe:	46bd      	mov	sp, r7
 8006b00:	bd80      	pop	{r7, pc}
	...

08006b04 <lps22hb_getPressure>:
//========================================================================
//			GET PRESSURE
//========================================================================
int lps22hb_getPressure(float* pressure)
{
 8006b04:	b580      	push	{r7, lr}
 8006b06:	b086      	sub	sp, #24
 8006b08:	af00      	add	r7, sp, #0
 8006b0a:	6078      	str	r0, [r7, #4]
	uint8_t data_xl[1];
	uint8_t data_l[1];
	uint8_t data_h[1];
	static float press = 0.0;

	i2c1_ReadRegBuffer(lps22hb_I2C_ADDRESS, (PRESS_OUT_XL | 0x80),  data_xl, 1);
 8006b0c:	f107 0214 	add.w	r2, r7, #20
 8006b10:	2301      	movs	r3, #1
 8006b12:	21a8      	movs	r1, #168	; 0xa8
 8006b14:	20ba      	movs	r0, #186	; 0xba
 8006b16:	f7ff f9fb 	bl	8005f10 <i2c1_ReadRegBuffer>
	i2c1_ReadRegBuffer(lps22hb_I2C_ADDRESS, (PRESS_OUT_L | 0x80),  data_l, 1);
 8006b1a:	f107 0210 	add.w	r2, r7, #16
 8006b1e:	2301      	movs	r3, #1
 8006b20:	21a9      	movs	r1, #169	; 0xa9
 8006b22:	20ba      	movs	r0, #186	; 0xba
 8006b24:	f7ff f9f4 	bl	8005f10 <i2c1_ReadRegBuffer>
	i2c1_ReadRegBuffer(lps22hb_I2C_ADDRESS, (PRESS_OUT_H | 0x80),  data_h, 1);
 8006b28:	f107 020c 	add.w	r2, r7, #12
 8006b2c:	2301      	movs	r3, #1
 8006b2e:	21aa      	movs	r1, #170	; 0xaa
 8006b30:	20ba      	movs	r0, #186	; 0xba
 8006b32:	f7ff f9ed 	bl	8005f10 <i2c1_ReadRegBuffer>
	//data_h[0]=0x10|data_h[0];
	press = ((data_h[0] * 65536) + ((data_l[0] * 256) + data_xl[0])) / 4096.0;
 8006b36:	7b3b      	ldrb	r3, [r7, #12]
 8006b38:	041a      	lsls	r2, r3, #16
 8006b3a:	7c3b      	ldrb	r3, [r7, #16]
 8006b3c:	021b      	lsls	r3, r3, #8
 8006b3e:	7d39      	ldrb	r1, [r7, #20]
 8006b40:	440b      	add	r3, r1
 8006b42:	4413      	add	r3, r2
 8006b44:	4618      	mov	r0, r3
 8006b46:	f7f9 fc53 	bl	80003f0 <__aeabi_i2d>
 8006b4a:	f04f 0200 	mov.w	r2, #0
 8006b4e:	4b0a      	ldr	r3, [pc, #40]	; (8006b78 <lps22hb_getPressure+0x74>)
 8006b50:	f7f9 fde2 	bl	8000718 <__aeabi_ddiv>
 8006b54:	4602      	mov	r2, r0
 8006b56:	460b      	mov	r3, r1
 8006b58:	4610      	mov	r0, r2
 8006b5a:	4619      	mov	r1, r3
 8006b5c:	f7f9 fec4 	bl	80008e8 <__aeabi_d2f>
 8006b60:	4603      	mov	r3, r0
 8006b62:	4a06      	ldr	r2, [pc, #24]	; (8006b7c <lps22hb_getPressure+0x78>)
 8006b64:	6013      	str	r3, [r2, #0]

	*pressure = press;
 8006b66:	4b05      	ldr	r3, [pc, #20]	; (8006b7c <lps22hb_getPressure+0x78>)
 8006b68:	681a      	ldr	r2, [r3, #0]
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	601a      	str	r2, [r3, #0]

	return 0;
 8006b6e:	2300      	movs	r3, #0
}
 8006b70:	4618      	mov	r0, r3
 8006b72:	3718      	adds	r7, #24
 8006b74:	46bd      	mov	sp, r7
 8006b76:	bd80      	pop	{r7, pc}
 8006b78:	40b00000 	.word	0x40b00000
 8006b7c:	200001c8 	.word	0x200001c8

08006b80 <lps22hb_getTemperature>:
//========================================================================
//			GET TEMPERATURE
//========================================================================
int lps22hb_getTemperature(float* tmp)
{
 8006b80:	b580      	push	{r7, lr}
 8006b82:	b084      	sub	sp, #16
 8006b84:	af00      	add	r7, sp, #0
 8006b86:	6078      	str	r0, [r7, #4]
	uint8_t tempH, tempL;
	static float temperature = 0.0;

	//uint8_t  data = 0x1;	// For one-shot mode
	//i2c1_WriteRegBuffer(lps22hb_I2C_ADDRESS, CTRL_REG2,  &data, 1);
	i2c1_ReadRegBuffer(lps22hb_I2C_ADDRESS, TEMP_OUT_L,  &tempL, 1);
 8006b88:	f107 020c 	add.w	r2, r7, #12
 8006b8c:	2301      	movs	r3, #1
 8006b8e:	212b      	movs	r1, #43	; 0x2b
 8006b90:	20ba      	movs	r0, #186	; 0xba
 8006b92:	f7ff f9bd 	bl	8005f10 <i2c1_ReadRegBuffer>
	i2c1_ReadRegBuffer(lps22hb_I2C_ADDRESS, TEMP_OUT_H,  &tempH, 1);
 8006b96:	f107 020d 	add.w	r2, r7, #13
 8006b9a:	2301      	movs	r3, #1
 8006b9c:	212c      	movs	r1, #44	; 0x2c
 8006b9e:	20ba      	movs	r0, #186	; 0xba
 8006ba0:	f7ff f9b6 	bl	8005f10 <i2c1_ReadRegBuffer>

	int16_t val = ((int16_t)tempH) << 8 | (tempL & 0xff);
 8006ba4:	7b7b      	ldrb	r3, [r7, #13]
 8006ba6:	021b      	lsls	r3, r3, #8
 8006ba8:	b21a      	sxth	r2, r3
 8006baa:	7b3b      	ldrb	r3, [r7, #12]
 8006bac:	b21b      	sxth	r3, r3
 8006bae:	4313      	orrs	r3, r2
 8006bb0:	81fb      	strh	r3, [r7, #14]
	temperature = (float)val/100.0;
 8006bb2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8006bb6:	4618      	mov	r0, r3
 8006bb8:	f7f9 ffa0 	bl	8000afc <__aeabi_i2f>
 8006bbc:	4603      	mov	r3, r0
 8006bbe:	4908      	ldr	r1, [pc, #32]	; (8006be0 <lps22hb_getTemperature+0x60>)
 8006bc0:	4618      	mov	r0, r3
 8006bc2:	f7fa f8a3 	bl	8000d0c <__aeabi_fdiv>
 8006bc6:	4603      	mov	r3, r0
 8006bc8:	461a      	mov	r2, r3
 8006bca:	4b06      	ldr	r3, [pc, #24]	; (8006be4 <lps22hb_getTemperature+0x64>)
 8006bcc:	601a      	str	r2, [r3, #0]

	*tmp=temperature;
 8006bce:	4b05      	ldr	r3, [pc, #20]	; (8006be4 <lps22hb_getTemperature+0x64>)
 8006bd0:	681a      	ldr	r2, [r3, #0]
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	601a      	str	r2, [r3, #0]

	return 0;
 8006bd6:	2300      	movs	r3, #0
}
 8006bd8:	4618      	mov	r0, r3
 8006bda:	3710      	adds	r7, #16
 8006bdc:	46bd      	mov	sp, r7
 8006bde:	bd80      	pop	{r7, pc}
 8006be0:	42c80000 	.word	0x42c80000
 8006be4:	200001cc 	.word	0x200001cc

08006be8 <NVIC_SetPriority>:
{
 8006be8:	b480      	push	{r7}
 8006bea:	b083      	sub	sp, #12
 8006bec:	af00      	add	r7, sp, #0
 8006bee:	4603      	mov	r3, r0
 8006bf0:	6039      	str	r1, [r7, #0]
 8006bf2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8006bf4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	da0b      	bge.n	8006c14 <NVIC_SetPriority+0x2c>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006bfc:	683b      	ldr	r3, [r7, #0]
 8006bfe:	b2da      	uxtb	r2, r3
 8006c00:	490c      	ldr	r1, [pc, #48]	; (8006c34 <NVIC_SetPriority+0x4c>)
 8006c02:	79fb      	ldrb	r3, [r7, #7]
 8006c04:	f003 030f 	and.w	r3, r3, #15
 8006c08:	3b04      	subs	r3, #4
 8006c0a:	0112      	lsls	r2, r2, #4
 8006c0c:	b2d2      	uxtb	r2, r2
 8006c0e:	440b      	add	r3, r1
 8006c10:	761a      	strb	r2, [r3, #24]
}
 8006c12:	e009      	b.n	8006c28 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006c14:	683b      	ldr	r3, [r7, #0]
 8006c16:	b2da      	uxtb	r2, r3
 8006c18:	4907      	ldr	r1, [pc, #28]	; (8006c38 <NVIC_SetPriority+0x50>)
 8006c1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006c1e:	0112      	lsls	r2, r2, #4
 8006c20:	b2d2      	uxtb	r2, r2
 8006c22:	440b      	add	r3, r1
 8006c24:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8006c28:	bf00      	nop
 8006c2a:	370c      	adds	r7, #12
 8006c2c:	46bd      	mov	sp, r7
 8006c2e:	bc80      	pop	{r7}
 8006c30:	4770      	bx	lr
 8006c32:	bf00      	nop
 8006c34:	e000ed00 	.word	0xe000ed00
 8006c38:	e000e100 	.word	0xe000e100

08006c3c <NVIC_SystemReset>:
{
 8006c3c:	b480      	push	{r7}
 8006c3e:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8006c40:	f3bf 8f4f 	dsb	sy
}
 8006c44:	bf00      	nop
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8006c46:	4b07      	ldr	r3, [pc, #28]	; (8006c64 <NVIC_SystemReset+0x28>)
 8006c48:	68db      	ldr	r3, [r3, #12]
 8006c4a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8006c4e:	4905      	ldr	r1, [pc, #20]	; (8006c64 <NVIC_SystemReset+0x28>)
 8006c50:	4b05      	ldr	r3, [pc, #20]	; (8006c68 <NVIC_SystemReset+0x2c>)
 8006c52:	4313      	orrs	r3, r2
 8006c54:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8006c56:	f3bf 8f4f 	dsb	sy
}
 8006c5a:	bf00      	nop
  __ASM volatile ("nop");
 8006c5c:	bf00      	nop
}
 8006c5e:	bf00      	nop
    __NOP();
 8006c60:	e7fc      	b.n	8006c5c <NVIC_SystemReset+0x20>
 8006c62:	bf00      	nop
 8006c64:	e000ed00 	.word	0xe000ed00
 8006c68:	05fa0004 	.word	0x05fa0004

08006c6c <SysTick_Config>:
{
 8006c6c:	b580      	push	{r7, lr}
 8006c6e:	b082      	sub	sp, #8
 8006c70:	af00      	add	r7, sp, #0
 8006c72:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	3b01      	subs	r3, #1
 8006c78:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006c7c:	d301      	bcc.n	8006c82 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8006c7e:	2301      	movs	r3, #1
 8006c80:	e00f      	b.n	8006ca2 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006c82:	4a0a      	ldr	r2, [pc, #40]	; (8006cac <SysTick_Config+0x40>)
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	3b01      	subs	r3, #1
 8006c88:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006c8a:	210f      	movs	r1, #15
 8006c8c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006c90:	f7ff ffaa 	bl	8006be8 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006c94:	4b05      	ldr	r3, [pc, #20]	; (8006cac <SysTick_Config+0x40>)
 8006c96:	2200      	movs	r2, #0
 8006c98:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006c9a:	4b04      	ldr	r3, [pc, #16]	; (8006cac <SysTick_Config+0x40>)
 8006c9c:	2207      	movs	r2, #7
 8006c9e:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8006ca0:	2300      	movs	r3, #0
}
 8006ca2:	4618      	mov	r0, r3
 8006ca4:	3708      	adds	r7, #8
 8006ca6:	46bd      	mov	sp, r7
 8006ca8:	bd80      	pop	{r7, pc}
 8006caa:	bf00      	nop
 8006cac:	e000e010 	.word	0xe000e010

08006cb0 <main>:

//====================================================================
// >>>>>>>>>>>>>>>>>>>>>>>>>> MAIN <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
//====================================================================
int main(void)
{
 8006cb0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8006cb4:	b08c      	sub	sp, #48	; 0x30
 8006cb6:	af04      	add	r7, sp, #16
	HAL_Init();
 8006cb8:	f7fa f90a 	bl	8000ed0 <HAL_Init>
	systemClock_Config();
 8006cbc:	f000 fd5c 	bl	8007778 <systemClock_Config>
    SysTick_Config(HAL_RCC_GetHCLKFreq() / 1000); //SysTick end of count event each 1ms
 8006cc0:	f7fe f862 	bl	8004d88 <HAL_RCC_GetHCLKFreq>
 8006cc4:	4603      	mov	r3, r0
 8006cc6:	4a75      	ldr	r2, [pc, #468]	; (8006e9c <main+0x1ec>)
 8006cc8:	fba2 2303 	umull	r2, r3, r2, r3
 8006ccc:	099b      	lsrs	r3, r3, #6
 8006cce:	4618      	mov	r0, r3
 8006cd0:	f7ff ffcc 	bl	8006c6c <SysTick_Config>
	uart2_Init();
 8006cd4:	f7ff faae 	bl	8006234 <uart2_Init>
	uart3_Init();
 8006cd8:	f7ff fad8 	bl	800628c <uart3_Init>
	i2c1_Init();
 8006cdc:	f7ff f8bc 	bl	8005e58 <i2c1_Init>

#if DYN_ANEMO
    anemo_Timer1Init();
#endif

	HAL_Delay(1000); // Wait
 8006ce0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006ce4:	f7fa f956 	bl	8000f94 <HAL_Delay>


	int i;
	i = lps22hb_whoAmI();
 8006ce8:	f7ff fee6 	bl	8006ab8 <lps22hb_whoAmI>
 8006cec:	4603      	mov	r3, r0
 8006cee:	61bb      	str	r3, [r7, #24]
	lps22hb_setup();
 8006cf0:	f7ff fef0 	bl	8006ad4 <lps22hb_setup>

	hts221_activate();
 8006cf4:	f7ff fd68 	bl	80067c8 <hts221_activate>
	i=hts221_whoAmI();
 8006cf8:	f7ff fd56 	bl	80067a8 <hts221_whoAmI>
 8006cfc:	4603      	mov	r3, r0
 8006cfe:	61bb      	str	r3, [r7, #24]
	hts221_storeCalibration();
 8006d00:	f7ff fd80 	bl	8006804 <hts221_storeCalibration>


#if VL6180X_PRESS_HUM_TEMP
    VL6180x_Init();
 8006d04:	f000 f904 	bl	8006f10 <VL6180x_Init>
	response =  mpu9250_WhoAmI();
	term_printf("%d",response);
#endif


    can_Init();
 8006d08:	f7fe fea0 	bl	8005a4c <can_Init>
    can_SetFreq(CAN_BAUDRATE); // CAN BAUDRATE : 500 MHz -- cf Inc/config.h
 8006d0c:	4864      	ldr	r0, [pc, #400]	; (8006ea0 <main+0x1f0>)
 8006d0e:	f7fe fedd 	bl	8005acc <can_SetFreq>
#if USE_FILTER
    can_Filter_list((ID_1<<21)|(ID_2<<5) , (ID_3<<21)|(ID_4<<5) , CANStandard, 0); // Accept until 4 Standard IDs
 8006d12:	2300      	movs	r3, #0
 8006d14:	2200      	movs	r2, #0
 8006d16:	4963      	ldr	r1, [pc, #396]	; (8006ea4 <main+0x1f4>)
 8006d18:	4863      	ldr	r0, [pc, #396]	; (8006ea8 <main+0x1f8>)
 8006d1a:	f7ff f81b 	bl	8005d54 <can_Filter_list>
#else
    can_Filter_disable(); // Accept everybody
#endif
    can_IrqInit();
 8006d1e:	f7fe ff55 	bl	8005bcc <can_IrqInit>
    can_IrqSet(&can_callback);
 8006d22:	4862      	ldr	r0, [pc, #392]	; (8006eac <main+0x1fc>)
 8006d24:	f7fe ff5c 	bl	8005be0 <can_IrqSet>

    txMsg.id=0x55;
 8006d28:	4b61      	ldr	r3, [pc, #388]	; (8006eb0 <main+0x200>)
 8006d2a:	2255      	movs	r2, #85	; 0x55
 8006d2c:	601a      	str	r2, [r3, #0]
    txMsg.data[0]=1;
 8006d2e:	4b60      	ldr	r3, [pc, #384]	; (8006eb0 <main+0x200>)
 8006d30:	2201      	movs	r2, #1
 8006d32:	711a      	strb	r2, [r3, #4]
    txMsg.data[1]=2;
 8006d34:	4b5e      	ldr	r3, [pc, #376]	; (8006eb0 <main+0x200>)
 8006d36:	2202      	movs	r2, #2
 8006d38:	715a      	strb	r2, [r3, #5]
    txMsg.len=2;
 8006d3a:	4b5d      	ldr	r3, [pc, #372]	; (8006eb0 <main+0x200>)
 8006d3c:	2202      	movs	r2, #2
 8006d3e:	731a      	strb	r2, [r3, #12]
    txMsg.format=CANStandard;
 8006d40:	4b5b      	ldr	r3, [pc, #364]	; (8006eb0 <main+0x200>)
 8006d42:	2200      	movs	r2, #0
 8006d44:	735a      	strb	r2, [r3, #13]
    txMsg.type=CANData;
 8006d46:	4b5a      	ldr	r3, [pc, #360]	; (8006eb0 <main+0x200>)
 8006d48:	2200      	movs	r2, #0
 8006d4a:	739a      	strb	r2, [r3, #14]

    can_Write(txMsg);
 8006d4c:	4b58      	ldr	r3, [pc, #352]	; (8006eb0 <main+0x200>)
 8006d4e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006d50:	f7fe ff54 	bl	8005bfc <can_Write>
    HAL_Delay(5000);
    dxl_setGoalVelocity(1, 0);
#endif


    uint32_t lastHumidityTime = 0; // Variable to track last time humidity was retrieved
 8006d54:	2300      	movs	r3, #0
 8006d56:	61fb      	str	r3, [r7, #28]
        #if DYN_ANEMO
        // Code related to DYN_ANEMO
        #endif

        #if VL6180X_PRESS_HUM_TEMP
        VL6180x_Step();
 8006d58:	f000 f92e 	bl	8006fb8 <VL6180x_Step>
        float TempToSend = 0;
 8006d5c:	f04f 0300 	mov.w	r3, #0
 8006d60:	60bb      	str	r3, [r7, #8]
        float HumToSend = 0;
 8006d62:	f04f 0300 	mov.w	r3, #0
 8006d66:	607b      	str	r3, [r7, #4]
        float PressToSend = 0;
 8006d68:	f04f 0300 	mov.w	r3, #0
 8006d6c:	603b      	str	r3, [r7, #0]
        lps22hb_getPressure(&PressToSend);
 8006d6e:	463b      	mov	r3, r7
 8006d70:	4618      	mov	r0, r3
 8006d72:	f7ff fec7 	bl	8006b04 <lps22hb_getPressure>
        lps22hb_getTemperature(&TempToSend);
 8006d76:	f107 0308 	add.w	r3, r7, #8
 8006d7a:	4618      	mov	r0, r3
 8006d7c:	f7ff ff00 	bl	8006b80 <lps22hb_getTemperature>

        uint32_t currentTime = HAL_GetTick(); // Get current time
 8006d80:	f7fa f8fe 	bl	8000f80 <HAL_GetTick>
 8006d84:	6178      	str	r0, [r7, #20]

        // Check if it has been 1 second since the last humidity retrieval
        if (currentTime - lastHumidityTime >= 1000) {
 8006d86:	697a      	ldr	r2, [r7, #20]
 8006d88:	69fb      	ldr	r3, [r7, #28]
 8006d8a:	1ad3      	subs	r3, r2, r3
 8006d8c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006d90:	d325      	bcc.n	8006dde <main+0x12e>
            hts221_getHumidity(&HumToSend); // Retrieve humidity
 8006d92:	1d3b      	adds	r3, r7, #4
 8006d94:	4618      	mov	r0, r3
 8006d96:	f7ff fdf7 	bl	8006988 <hts221_getHumidity>
            txMsg.id = 0x57;
 8006d9a:	4b45      	ldr	r3, [pc, #276]	; (8006eb0 <main+0x200>)
 8006d9c:	2257      	movs	r2, #87	; 0x57
 8006d9e:	601a      	str	r2, [r3, #0]
                    uint16_t humidity = HumToSend;
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	4618      	mov	r0, r3
 8006da4:	f7fa f874 	bl	8000e90 <__aeabi_f2uiz>
 8006da8:	4603      	mov	r3, r0
 8006daa:	827b      	strh	r3, [r7, #18]
                    txMsg.data[0] = humidity & 0xFF;
 8006dac:	8a7b      	ldrh	r3, [r7, #18]
 8006dae:	b2da      	uxtb	r2, r3
 8006db0:	4b3f      	ldr	r3, [pc, #252]	; (8006eb0 <main+0x200>)
 8006db2:	711a      	strb	r2, [r3, #4]
                    txMsg.data[1] = (humidity >> 8) & 0xFF;
 8006db4:	8a7b      	ldrh	r3, [r7, #18]
 8006db6:	0a1b      	lsrs	r3, r3, #8
 8006db8:	b29b      	uxth	r3, r3
 8006dba:	b2da      	uxtb	r2, r3
 8006dbc:	4b3c      	ldr	r3, [pc, #240]	; (8006eb0 <main+0x200>)
 8006dbe:	715a      	strb	r2, [r3, #5]
                    txMsg.len = 2;
 8006dc0:	4b3b      	ldr	r3, [pc, #236]	; (8006eb0 <main+0x200>)
 8006dc2:	2202      	movs	r2, #2
 8006dc4:	731a      	strb	r2, [r3, #12]
                    txMsg.format = CANStandard;
 8006dc6:	4b3a      	ldr	r3, [pc, #232]	; (8006eb0 <main+0x200>)
 8006dc8:	2200      	movs	r2, #0
 8006dca:	735a      	strb	r2, [r3, #13]
                    txMsg.type = CANData;
 8006dcc:	4b38      	ldr	r3, [pc, #224]	; (8006eb0 <main+0x200>)
 8006dce:	2200      	movs	r2, #0
 8006dd0:	739a      	strb	r2, [r3, #14]
                    can_Write(txMsg);
 8006dd2:	4b37      	ldr	r3, [pc, #220]	; (8006eb0 <main+0x200>)
 8006dd4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006dd6:	f7fe ff11 	bl	8005bfc <can_Write>
            lastHumidityTime = currentTime; // Update last humidity retrieval time
 8006dda:	697b      	ldr	r3, [r7, #20]
 8006ddc:	61fb      	str	r3, [r7, #28]
        }

        term_printf("temp: %f\n\rhum: %f\n\rpress: %f\n\r\n\r", TempToSend, HumToSend, PressToSend);
 8006dde:	68bb      	ldr	r3, [r7, #8]
 8006de0:	4618      	mov	r0, r3
 8006de2:	f7f9 fb17 	bl	8000414 <__aeabi_f2d>
 8006de6:	4680      	mov	r8, r0
 8006de8:	4689      	mov	r9, r1
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	4618      	mov	r0, r3
 8006dee:	f7f9 fb11 	bl	8000414 <__aeabi_f2d>
 8006df2:	4604      	mov	r4, r0
 8006df4:	460d      	mov	r5, r1
 8006df6:	683b      	ldr	r3, [r7, #0]
 8006df8:	4618      	mov	r0, r3
 8006dfa:	f7f9 fb0b 	bl	8000414 <__aeabi_f2d>
 8006dfe:	4602      	mov	r2, r0
 8006e00:	460b      	mov	r3, r1
 8006e02:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006e06:	e9cd 4500 	strd	r4, r5, [sp]
 8006e0a:	4642      	mov	r2, r8
 8006e0c:	464b      	mov	r3, r9
 8006e0e:	4829      	ldr	r0, [pc, #164]	; (8006eb4 <main+0x204>)
 8006e10:	f7ff fab8 	bl	8006384 <term_printf>



        txMsg.id = 0x56;
 8006e14:	4b26      	ldr	r3, [pc, #152]	; (8006eb0 <main+0x200>)
 8006e16:	2256      	movs	r2, #86	; 0x56
 8006e18:	601a      	str	r2, [r3, #0]
        uint16_t temperature = TempToSend;
 8006e1a:	68bb      	ldr	r3, [r7, #8]
 8006e1c:	4618      	mov	r0, r3
 8006e1e:	f7fa f837 	bl	8000e90 <__aeabi_f2uiz>
 8006e22:	4603      	mov	r3, r0
 8006e24:	823b      	strh	r3, [r7, #16]
        txMsg.data[0] = temperature & 0xFF;
 8006e26:	8a3b      	ldrh	r3, [r7, #16]
 8006e28:	b2da      	uxtb	r2, r3
 8006e2a:	4b21      	ldr	r3, [pc, #132]	; (8006eb0 <main+0x200>)
 8006e2c:	711a      	strb	r2, [r3, #4]
        txMsg.data[1] = (temperature >> 8) & 0xFF;
 8006e2e:	8a3b      	ldrh	r3, [r7, #16]
 8006e30:	0a1b      	lsrs	r3, r3, #8
 8006e32:	b29b      	uxth	r3, r3
 8006e34:	b2da      	uxtb	r2, r3
 8006e36:	4b1e      	ldr	r3, [pc, #120]	; (8006eb0 <main+0x200>)
 8006e38:	715a      	strb	r2, [r3, #5]
        txMsg.len = 2;
 8006e3a:	4b1d      	ldr	r3, [pc, #116]	; (8006eb0 <main+0x200>)
 8006e3c:	2202      	movs	r2, #2
 8006e3e:	731a      	strb	r2, [r3, #12]
        txMsg.format = CANStandard;
 8006e40:	4b1b      	ldr	r3, [pc, #108]	; (8006eb0 <main+0x200>)
 8006e42:	2200      	movs	r2, #0
 8006e44:	735a      	strb	r2, [r3, #13]
        txMsg.type = CANData;
 8006e46:	4b1a      	ldr	r3, [pc, #104]	; (8006eb0 <main+0x200>)
 8006e48:	2200      	movs	r2, #0
 8006e4a:	739a      	strb	r2, [r3, #14]
        can_Write(txMsg);
 8006e4c:	4b18      	ldr	r3, [pc, #96]	; (8006eb0 <main+0x200>)
 8006e4e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006e50:	f7fe fed4 	bl	8005bfc <can_Write>



        txMsg.id = 0x59;
 8006e54:	4b16      	ldr	r3, [pc, #88]	; (8006eb0 <main+0x200>)
 8006e56:	2259      	movs	r2, #89	; 0x59
 8006e58:	601a      	str	r2, [r3, #0]
        uint16_t pression = PressToSend;
 8006e5a:	683b      	ldr	r3, [r7, #0]
 8006e5c:	4618      	mov	r0, r3
 8006e5e:	f7fa f817 	bl	8000e90 <__aeabi_f2uiz>
 8006e62:	4603      	mov	r3, r0
 8006e64:	81fb      	strh	r3, [r7, #14]
        txMsg.data[0] = pression & 0xFF;
 8006e66:	89fb      	ldrh	r3, [r7, #14]
 8006e68:	b2da      	uxtb	r2, r3
 8006e6a:	4b11      	ldr	r3, [pc, #68]	; (8006eb0 <main+0x200>)
 8006e6c:	711a      	strb	r2, [r3, #4]
        txMsg.data[1] = (pression >> 8) & 0xFF;
 8006e6e:	89fb      	ldrh	r3, [r7, #14]
 8006e70:	0a1b      	lsrs	r3, r3, #8
 8006e72:	b29b      	uxth	r3, r3
 8006e74:	b2da      	uxtb	r2, r3
 8006e76:	4b0e      	ldr	r3, [pc, #56]	; (8006eb0 <main+0x200>)
 8006e78:	715a      	strb	r2, [r3, #5]
        txMsg.len = 2;
 8006e7a:	4b0d      	ldr	r3, [pc, #52]	; (8006eb0 <main+0x200>)
 8006e7c:	2202      	movs	r2, #2
 8006e7e:	731a      	strb	r2, [r3, #12]
        txMsg.format = CANStandard;
 8006e80:	4b0b      	ldr	r3, [pc, #44]	; (8006eb0 <main+0x200>)
 8006e82:	2200      	movs	r2, #0
 8006e84:	735a      	strb	r2, [r3, #13]
        txMsg.type = CANData;
 8006e86:	4b0a      	ldr	r3, [pc, #40]	; (8006eb0 <main+0x200>)
 8006e88:	2200      	movs	r2, #0
 8006e8a:	739a      	strb	r2, [r3, #14]
        can_Write(txMsg);
 8006e8c:	4b08      	ldr	r3, [pc, #32]	; (8006eb0 <main+0x200>)
 8006e8e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006e90:	f7fe feb4 	bl	8005bfc <can_Write>



        HAL_Delay(100); // Delay for other parts
 8006e94:	2064      	movs	r0, #100	; 0x64
 8006e96:	f7fa f87d 	bl	8000f94 <HAL_Delay>
    while (1) {
 8006e9a:	e75d      	b.n	8006d58 <main+0xa8>
 8006e9c:	10624dd3 	.word	0x10624dd3
 8006ea0:	0007a120 	.word	0x0007a120
 8006ea4:	00600080 	.word	0x00600080
 8006ea8:	00200040 	.word	0x00200040
 8006eac:	08006eb9 	.word	0x08006eb9
 8006eb0:	20000654 	.word	0x20000654
 8006eb4:	0800b528 	.word	0x0800b528

08006eb8 <can_callback>:
//====================================================================
//			CAN CALLBACK RECEPT
//====================================================================

void can_callback(void)
{
 8006eb8:	b580      	push	{r7, lr}
 8006eba:	b086      	sub	sp, #24
 8006ebc:	af00      	add	r7, sp, #0
	int8_t message;
	CAN_Message msg_rcv;
	can_Read(&msg_rcv);
 8006ebe:	1d3b      	adds	r3, r7, #4
 8006ec0:	4618      	mov	r0, r3
 8006ec2:	f7fe fef3 	bl	8005cac <can_Read>
	if (msg_rcv.id == ID_4){
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	2b04      	cmp	r3, #4
 8006eca:	d110      	bne.n	8006eee <can_callback+0x36>
		message = msg_rcv.data[0];
 8006ecc:	7a3b      	ldrb	r3, [r7, #8]
 8006ece:	75fb      	strb	r3, [r7, #23]
		if (message == 0x03){
 8006ed0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006ed4:	2b03      	cmp	r3, #3
 8006ed6:	d103      	bne.n	8006ee0 <can_callback+0x28>
			State.mode = RunAlsPoll;
 8006ed8:	4b07      	ldr	r3, [pc, #28]	; (8006ef8 <can_callback+0x40>)
 8006eda:	2201      	movs	r2, #1
 8006edc:	705a      	strb	r2, [r3, #1]
		else if (message == 0x04)
		{
			State.mode = RunRangePoll;
		}
	}
}
 8006ede:	e006      	b.n	8006eee <can_callback+0x36>
		else if (message == 0x04)
 8006ee0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006ee4:	2b04      	cmp	r3, #4
 8006ee6:	d102      	bne.n	8006eee <can_callback+0x36>
			State.mode = RunRangePoll;
 8006ee8:	4b03      	ldr	r3, [pc, #12]	; (8006ef8 <can_callback+0x40>)
 8006eea:	2200      	movs	r2, #0
 8006eec:	705a      	strb	r2, [r3, #1]
}
 8006eee:	bf00      	nop
 8006ef0:	3718      	adds	r7, #24
 8006ef2:	46bd      	mov	sp, r7
 8006ef4:	bd80      	pop	{r7, pc}
 8006ef6:	bf00      	nop
 8006ef8:	20000250 	.word	0x20000250

08006efc <HAL_TIM_PeriodElapsedCallback>:
//====================================================================
//			TIMER CALLBACK PERIOD
//====================================================================

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006efc:	b480      	push	{r7}
 8006efe:	b083      	sub	sp, #12
 8006f00:	af00      	add	r7, sp, #0
 8006f02:	6078      	str	r0, [r7, #4]
	//term_printf("from timer interrupt\n\r");
}
 8006f04:	bf00      	nop
 8006f06:	370c      	adds	r7, #12
 8006f08:	46bd      	mov	sp, r7
 8006f0a:	bc80      	pop	{r7}
 8006f0c:	4770      	bx	lr
	...

08006f10 <VL6180x_Init>:
//====================================================================

#if VL6180X_PRESS_HUM_TEMP
void VL6180x_Init(void)
{
 8006f10:	b580      	push	{r7, lr}
 8006f12:	b082      	sub	sp, #8
 8006f14:	af00      	add	r7, sp, #0
	uint8_t id;
	State.mode = 1;
 8006f16:	4b25      	ldr	r3, [pc, #148]	; (8006fac <VL6180x_Init+0x9c>)
 8006f18:	2201      	movs	r2, #1
 8006f1a:	705a      	strb	r2, [r3, #1]

    XNUCLEO6180XA1_Init();
 8006f1c:	f003 fc72 	bl	800a804 <XNUCLEO6180XA1_Init>
    HAL_Delay(500); // Wait
 8006f20:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8006f24:	f7fa f836 	bl	8000f94 <HAL_Delay>
    // RESET
    XNUCLEO6180XA1_Reset(0);
 8006f28:	2000      	movs	r0, #0
 8006f2a:	f003 fcc7 	bl	800a8bc <XNUCLEO6180XA1_Reset>
    HAL_Delay(10);
 8006f2e:	200a      	movs	r0, #10
 8006f30:	f7fa f830 	bl	8000f94 <HAL_Delay>
    XNUCLEO6180XA1_Reset(1);
 8006f34:	2001      	movs	r0, #1
 8006f36:	f003 fcc1 	bl	800a8bc <XNUCLEO6180XA1_Reset>
    HAL_Delay(1);
 8006f3a:	2001      	movs	r0, #1
 8006f3c:	f7fa f82a 	bl	8000f94 <HAL_Delay>

    HAL_Delay(10);
 8006f40:	200a      	movs	r0, #10
 8006f42:	f7fa f827 	bl	8000f94 <HAL_Delay>
    VL6180x_WaitDeviceBooted(theVL6180xDev);
 8006f46:	2052      	movs	r0, #82	; 0x52
 8006f48:	f000 fe97 	bl	8007c7a <VL6180x_WaitDeviceBooted>
    id=VL6180x_Identification(theVL6180xDev);
 8006f4c:	2052      	movs	r0, #82	; 0x52
 8006f4e:	f000 feac 	bl	8007caa <VL6180x_Identification>
 8006f52:	4603      	mov	r3, r0
 8006f54:	71fb      	strb	r3, [r7, #7]
    term_printf("id=%d, should be 180 (0xB4) \n\r", id);
 8006f56:	79fb      	ldrb	r3, [r7, #7]
 8006f58:	4619      	mov	r1, r3
 8006f5a:	4815      	ldr	r0, [pc, #84]	; (8006fb0 <VL6180x_Init+0xa0>)
 8006f5c:	f7ff fa12 	bl	8006384 <term_printf>
    VL6180x_InitData(theVL6180xDev);
 8006f60:	2052      	movs	r0, #82	; 0x52
 8006f62:	f000 feb3 	bl	8007ccc <VL6180x_InitData>

    State.InitScale=VL6180x_UpscaleGetScaling(theVL6180xDev);
 8006f66:	2052      	movs	r0, #82	; 0x52
 8006f68:	f001 fd38 	bl	80089dc <VL6180x_UpscaleGetScaling>
 8006f6c:	4603      	mov	r3, r0
 8006f6e:	b2da      	uxtb	r2, r3
 8006f70:	4b0e      	ldr	r3, [pc, #56]	; (8006fac <VL6180x_Init+0x9c>)
 8006f72:	70da      	strb	r2, [r3, #3]
    State.FilterEn=VL6180x_FilterGetState(theVL6180xDev);
 8006f74:	2052      	movs	r0, #82	; 0x52
 8006f76:	f001 fae1 	bl	800853c <VL6180x_FilterGetState>
 8006f7a:	4603      	mov	r3, r0
 8006f7c:	01db      	lsls	r3, r3, #7
 8006f7e:	b25b      	sxtb	r3, r3
 8006f80:	11db      	asrs	r3, r3, #7
 8006f82:	b259      	sxtb	r1, r3
 8006f84:	4a09      	ldr	r2, [pc, #36]	; (8006fac <VL6180x_Init+0x9c>)
 8006f86:	7813      	ldrb	r3, [r2, #0]
 8006f88:	f361 0382 	bfi	r3, r1, #2, #1
 8006f8c:	7013      	strb	r3, [r2, #0]

     // Enable Dmax calculation only if value is displayed (to save computation power)
    VL6180x_DMaxSetState(theVL6180xDev, DMaxDispTime>0);
 8006f8e:	2100      	movs	r1, #0
 8006f90:	2052      	movs	r0, #82	; 0x52
 8006f92:	f002 fd53 	bl	8009a3c <VL6180x_DMaxSetState>

    switch_state=-1 ; // force what read from switch to set new working mode
 8006f96:	4b07      	ldr	r3, [pc, #28]	; (8006fb4 <VL6180x_Init+0xa4>)
 8006f98:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006f9c:	601a      	str	r2, [r3, #0]
    State.mode = AlrmStart;
 8006f9e:	4b03      	ldr	r3, [pc, #12]	; (8006fac <VL6180x_Init+0x9c>)
 8006fa0:	2205      	movs	r2, #5
 8006fa2:	705a      	strb	r2, [r3, #1]
}
 8006fa4:	bf00      	nop
 8006fa6:	3708      	adds	r7, #8
 8006fa8:	46bd      	mov	sp, r7
 8006faa:	bd80      	pop	{r7, pc}
 8006fac:	20000250 	.word	0x20000250
 8006fb0:	0800b54c 	.word	0x0800b54c
 8006fb4:	20000008 	.word	0x20000008

08006fb8 <VL6180x_Step>:
//====================================================================
void VL6180x_Step(void)
{
 8006fb8:	b580      	push	{r7, lr}
 8006fba:	b082      	sub	sp, #8
 8006fbc:	af00      	add	r7, sp, #0
    DISP_ExecLoopBody();
 8006fbe:	f002 fef1 	bl	8009da4 <DISP_ExecLoopBody>

    new_switch_state = XNUCLEO6180XA1_GetSwitch();
 8006fc2:	f003 fc87 	bl	800a8d4 <XNUCLEO6180XA1_GetSwitch>
 8006fc6:	4603      	mov	r3, r0
 8006fc8:	4a69      	ldr	r2, [pc, #420]	; (8007170 <VL6180x_Step+0x1b8>)
 8006fca:	6013      	str	r3, [r2, #0]
    if (new_switch_state != switch_state) {
 8006fcc:	4b68      	ldr	r3, [pc, #416]	; (8007170 <VL6180x_Step+0x1b8>)
 8006fce:	681a      	ldr	r2, [r3, #0]
 8006fd0:	4b68      	ldr	r3, [pc, #416]	; (8007174 <VL6180x_Step+0x1bc>)
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	429a      	cmp	r2, r3
 8006fd6:	d030      	beq.n	800703a <VL6180x_Step+0x82>
        switch_state=new_switch_state;
 8006fd8:	4b65      	ldr	r3, [pc, #404]	; (8007170 <VL6180x_Step+0x1b8>)
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	4a65      	ldr	r2, [pc, #404]	; (8007174 <VL6180x_Step+0x1bc>)
 8006fde:	6013      	str	r3, [r2, #0]
        status = VL6180x_Prepare(theVL6180xDev);
 8006fe0:	2052      	movs	r0, #82	; 0x52
 8006fe2:	f000 ffa5 	bl	8007f30 <VL6180x_Prepare>
 8006fe6:	4603      	mov	r3, r0
 8006fe8:	4a63      	ldr	r2, [pc, #396]	; (8007178 <VL6180x_Step+0x1c0>)
 8006fea:	6013      	str	r3, [r2, #0]
        // Increase convergence time to the max (this is because proximity config of API is used)
        VL6180x_RangeSetMaxConvergenceTime(theVL6180xDev, 63);
 8006fec:	213f      	movs	r1, #63	; 0x3f
 8006fee:	2052      	movs	r0, #82	; 0x52
 8006ff0:	f001 fdcc 	bl	8008b8c <VL6180x_RangeSetMaxConvergenceTime>
        if (status) {
 8006ff4:	4b60      	ldr	r3, [pc, #384]	; (8007178 <VL6180x_Step+0x1c0>)
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d003      	beq.n	8007004 <VL6180x_Step+0x4c>
            AbortErr("ErIn");
 8006ffc:	485f      	ldr	r0, [pc, #380]	; (800717c <VL6180x_Step+0x1c4>)
 8006ffe:	f002 ff8f 	bl	8009f20 <AbortErr>
 8007002:	e01a      	b.n	800703a <VL6180x_Step+0x82>
        }
        else{
            if (switch_state == SWITCH_VAL_RANGING) {
 8007004:	4b5b      	ldr	r3, [pc, #364]	; (8007174 <VL6180x_Step+0x1bc>)
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	2b00      	cmp	r3, #0
 800700a:	d111      	bne.n	8007030 <VL6180x_Step+0x78>
                VL6180x_SetupGPIO1(theVL6180xDev, GPIOx_SELECT_GPIO_INTERRUPT_OUTPUT, INTR_POL_HIGH);
 800700c:	2201      	movs	r2, #1
 800700e:	2108      	movs	r1, #8
 8007010:	2052      	movs	r0, #82	; 0x52
 8007012:	f001 fd6b 	bl	8008aec <VL6180x_SetupGPIO1>
                VL6180x_ClearAllInterrupt(theVL6180xDev);
 8007016:	2107      	movs	r1, #7
 8007018:	2052      	movs	r0, #82	; 0x52
 800701a:	f001 fb54 	bl	80086c6 <VL6180x_ClearInterrupt>
                State.ScaleSwapCnt=0;
 800701e:	4b58      	ldr	r3, [pc, #352]	; (8007180 <VL6180x_Step+0x1c8>)
 8007020:	2200      	movs	r2, #0
 8007022:	709a      	strb	r2, [r3, #2]
                DoScalingSwap( State.InitScale);
 8007024:	4b56      	ldr	r3, [pc, #344]	; (8007180 <VL6180x_Step+0x1c8>)
 8007026:	78db      	ldrb	r3, [r3, #3]
 8007028:	4618      	mov	r0, r3
 800702a:	f003 f815 	bl	800a058 <DoScalingSwap>
 800702e:	e004      	b.n	800703a <VL6180x_Step+0x82>
            } else {
                 State.mode = RunAlsPoll;
 8007030:	4b53      	ldr	r3, [pc, #332]	; (8007180 <VL6180x_Step+0x1c8>)
 8007032:	2201      	movs	r2, #1
 8007034:	705a      	strb	r2, [r3, #1]
                 InitAlsMode();
 8007036:	f002 ffff 	bl	800a038 <InitAlsMode>
            }
        }
    }

    switch (State.mode) {
 800703a:	4b51      	ldr	r3, [pc, #324]	; (8007180 <VL6180x_Step+0x1c8>)
 800703c:	785b      	ldrb	r3, [r3, #1]
 800703e:	2b07      	cmp	r3, #7
 8007040:	f200 8083 	bhi.w	800714a <VL6180x_Step+0x192>
 8007044:	a201      	add	r2, pc, #4	; (adr r2, 800704c <VL6180x_Step+0x94>)
 8007046:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800704a:	bf00      	nop
 800704c:	0800706d 	.word	0x0800706d
 8007050:	080070af 	.word	0x080070af
 8007054:	080070f1 	.word	0x080070f1
 8007058:	08007125 	.word	0x08007125
 800705c:	0800714b 	.word	0x0800714b
 8007060:	08007101 	.word	0x08007101
 8007064:	08007107 	.word	0x08007107
 8007068:	0800710d 	.word	0x0800710d
    case RunRangePoll:
        RangeState();
 800706c:	f003 fa34 	bl	800a4d8 <RangeState>
        txMsg.id = 0x58;
 8007070:	4b44      	ldr	r3, [pc, #272]	; (8007184 <VL6180x_Step+0x1cc>)
 8007072:	2258      	movs	r2, #88	; 0x58
 8007074:	601a      	str	r2, [r3, #0]
                uint16_t range = RangeState();
 8007076:	f003 fa2f 	bl	800a4d8 <RangeState>
 800707a:	4603      	mov	r3, r0
 800707c:	80bb      	strh	r3, [r7, #4]
                txMsg.data[0] = range & 0xFF;
 800707e:	88bb      	ldrh	r3, [r7, #4]
 8007080:	b2da      	uxtb	r2, r3
 8007082:	4b40      	ldr	r3, [pc, #256]	; (8007184 <VL6180x_Step+0x1cc>)
 8007084:	711a      	strb	r2, [r3, #4]
                txMsg.data[1] = (range >> 8) & 0xFF;
 8007086:	88bb      	ldrh	r3, [r7, #4]
 8007088:	0a1b      	lsrs	r3, r3, #8
 800708a:	b29b      	uxth	r3, r3
 800708c:	b2da      	uxtb	r2, r3
 800708e:	4b3d      	ldr	r3, [pc, #244]	; (8007184 <VL6180x_Step+0x1cc>)
 8007090:	715a      	strb	r2, [r3, #5]
                txMsg.len = 2;
 8007092:	4b3c      	ldr	r3, [pc, #240]	; (8007184 <VL6180x_Step+0x1cc>)
 8007094:	2202      	movs	r2, #2
 8007096:	731a      	strb	r2, [r3, #12]
                txMsg.format = CANStandard;
 8007098:	4b3a      	ldr	r3, [pc, #232]	; (8007184 <VL6180x_Step+0x1cc>)
 800709a:	2200      	movs	r2, #0
 800709c:	735a      	strb	r2, [r3, #13]
                txMsg.type = CANData;
 800709e:	4b39      	ldr	r3, [pc, #228]	; (8007184 <VL6180x_Step+0x1cc>)
 80070a0:	2200      	movs	r2, #0
 80070a2:	739a      	strb	r2, [r3, #14]
                can_Write(txMsg);
 80070a4:	4b37      	ldr	r3, [pc, #220]	; (8007184 <VL6180x_Step+0x1cc>)
 80070a6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80070a8:	f7fe fda8 	bl	8005bfc <can_Write>
        break;
 80070ac:	e05b      	b.n	8007166 <VL6180x_Step+0x1ae>

    case RunAlsPoll:
        AlsState();
 80070ae:	f002 ff45 	bl	8009f3c <AlsState>
        txMsg.id = 0x60;
 80070b2:	4b34      	ldr	r3, [pc, #208]	; (8007184 <VL6180x_Step+0x1cc>)
 80070b4:	2260      	movs	r2, #96	; 0x60
 80070b6:	601a      	str	r2, [r3, #0]
            	        uint16_t luminosite = AlsState();
 80070b8:	f002 ff40 	bl	8009f3c <AlsState>
 80070bc:	4603      	mov	r3, r0
 80070be:	80fb      	strh	r3, [r7, #6]
            	        txMsg.data[0] = luminosite & 0xFF;
 80070c0:	88fb      	ldrh	r3, [r7, #6]
 80070c2:	b2da      	uxtb	r2, r3
 80070c4:	4b2f      	ldr	r3, [pc, #188]	; (8007184 <VL6180x_Step+0x1cc>)
 80070c6:	711a      	strb	r2, [r3, #4]
            	        txMsg.data[1] = (luminosite >> 8) & 0xFF;
 80070c8:	88fb      	ldrh	r3, [r7, #6]
 80070ca:	0a1b      	lsrs	r3, r3, #8
 80070cc:	b29b      	uxth	r3, r3
 80070ce:	b2da      	uxtb	r2, r3
 80070d0:	4b2c      	ldr	r3, [pc, #176]	; (8007184 <VL6180x_Step+0x1cc>)
 80070d2:	715a      	strb	r2, [r3, #5]
            	        txMsg.len = 2;
 80070d4:	4b2b      	ldr	r3, [pc, #172]	; (8007184 <VL6180x_Step+0x1cc>)
 80070d6:	2202      	movs	r2, #2
 80070d8:	731a      	strb	r2, [r3, #12]
            	        txMsg.format = CANStandard;
 80070da:	4b2a      	ldr	r3, [pc, #168]	; (8007184 <VL6180x_Step+0x1cc>)
 80070dc:	2200      	movs	r2, #0
 80070de:	735a      	strb	r2, [r3, #13]
            	        txMsg.type = CANData;
 80070e0:	4b28      	ldr	r3, [pc, #160]	; (8007184 <VL6180x_Step+0x1cc>)
 80070e2:	2200      	movs	r2, #0
 80070e4:	739a      	strb	r2, [r3, #14]
            	        can_Write(txMsg);
 80070e6:	4b27      	ldr	r3, [pc, #156]	; (8007184 <VL6180x_Step+0x1cc>)
 80070e8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80070ea:	f7fe fd87 	bl	8005bfc <can_Write>
        break;
 80070ee:	e03a      	b.n	8007166 <VL6180x_Step+0x1ae>

    case InitErr:
        TimeStarted = g_TickCnt;
 80070f0:	4b25      	ldr	r3, [pc, #148]	; (8007188 <VL6180x_Step+0x1d0>)
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	4a25      	ldr	r2, [pc, #148]	; (800718c <VL6180x_Step+0x1d4>)
 80070f6:	6013      	str	r3, [r2, #0]
        State.mode = WaitForReset;
 80070f8:	4b21      	ldr	r3, [pc, #132]	; (8007180 <VL6180x_Step+0x1c8>)
 80070fa:	2204      	movs	r2, #4
 80070fc:	705a      	strb	r2, [r3, #1]
        break;
 80070fe:	e032      	b.n	8007166 <VL6180x_Step+0x1ae>

    case AlrmStart:
       GoToAlaramState();
 8007100:	f003 f9e4 	bl	800a4cc <GoToAlaramState>
       break;
 8007104:	e02f      	b.n	8007166 <VL6180x_Step+0x1ae>

    case AlrmRun:
        AlarmState();
 8007106:	f003 f91b 	bl	800a340 <AlarmState>
        break;
 800710a:	e02c      	b.n	8007166 <VL6180x_Step+0x1ae>

    case FromSwitch:
        // force reading swicth as re-init selected mode
        switch_state=!XNUCLEO6180XA1_GetSwitch();
 800710c:	f003 fbe2 	bl	800a8d4 <XNUCLEO6180XA1_GetSwitch>
 8007110:	4603      	mov	r3, r0
 8007112:	2b00      	cmp	r3, #0
 8007114:	bf0c      	ite	eq
 8007116:	2301      	moveq	r3, #1
 8007118:	2300      	movne	r3, #0
 800711a:	b2db      	uxtb	r3, r3
 800711c:	461a      	mov	r2, r3
 800711e:	4b15      	ldr	r3, [pc, #84]	; (8007174 <VL6180x_Step+0x1bc>)
 8007120:	601a      	str	r2, [r3, #0]
        break;
 8007122:	e020      	b.n	8007166 <VL6180x_Step+0x1ae>

    case ScaleSwap:

        if (g_TickCnt - TimeStarted >= ScaleDispTime) {
 8007124:	4b18      	ldr	r3, [pc, #96]	; (8007188 <VL6180x_Step+0x1d0>)
 8007126:	681a      	ldr	r2, [r3, #0]
 8007128:	4b18      	ldr	r3, [pc, #96]	; (800718c <VL6180x_Step+0x1d4>)
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	1ad3      	subs	r3, r2, r3
 800712e:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8007132:	d307      	bcc.n	8007144 <VL6180x_Step+0x18c>
            State.mode = RunRangePoll;
 8007134:	4b12      	ldr	r3, [pc, #72]	; (8007180 <VL6180x_Step+0x1c8>)
 8007136:	2200      	movs	r2, #0
 8007138:	705a      	strb	r2, [r3, #1]
            TimeStarted=g_TickCnt; /* reset as used for --- to er display */
 800713a:	4b13      	ldr	r3, [pc, #76]	; (8007188 <VL6180x_Step+0x1d0>)
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	4a13      	ldr	r2, [pc, #76]	; (800718c <VL6180x_Step+0x1d4>)
 8007140:	6013      	str	r3, [r2, #0]
        }
        else
        {
        	DISP_ExecLoopBody();
        }
        break;
 8007142:	e010      	b.n	8007166 <VL6180x_Step+0x1ae>
        	DISP_ExecLoopBody();
 8007144:	f002 fe2e 	bl	8009da4 <DISP_ExecLoopBody>
        break;
 8007148:	e00d      	b.n	8007166 <VL6180x_Step+0x1ae>

    default: {
    	 DISP_ExecLoopBody();
 800714a:	f002 fe2b 	bl	8009da4 <DISP_ExecLoopBody>
          if (g_TickCnt - TimeStarted >= 5000) {
 800714e:	4b0e      	ldr	r3, [pc, #56]	; (8007188 <VL6180x_Step+0x1d0>)
 8007150:	681a      	ldr	r2, [r3, #0]
 8007152:	4b0e      	ldr	r3, [pc, #56]	; (800718c <VL6180x_Step+0x1d4>)
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	1ad3      	subs	r3, r2, r3
 8007158:	f241 3287 	movw	r2, #4999	; 0x1387
 800715c:	4293      	cmp	r3, r2
 800715e:	d902      	bls.n	8007166 <VL6180x_Step+0x1ae>
              NVIC_SystemReset();
 8007160:	f7ff fd6c 	bl	8006c3c <NVIC_SystemReset>
          }
    }
    }
}
 8007164:	e7ff      	b.n	8007166 <VL6180x_Step+0x1ae>
 8007166:	bf00      	nop
 8007168:	3708      	adds	r7, #8
 800716a:	46bd      	mov	sp, r7
 800716c:	bd80      	pop	{r7, pc}
 800716e:	bf00      	nop
 8007170:	20000644 	.word	0x20000644
 8007174:	20000008 	.word	0x20000008
 8007178:	20000668 	.word	0x20000668
 800717c:	0800b56c 	.word	0x0800b56c
 8007180:	20000250 	.word	0x20000250
 8007184:	20000654 	.word	0x20000654
 8007188:	20000204 	.word	0x20000204
 800718c:	20000258 	.word	0x20000258

08007190 <HAL_MspInit>:
void HAL_UARTDXLMspInit(void);
void HAL_GPIO_PA10_MspInit(void);

//===================================================================
void HAL_MspInit(void)
{
 8007190:	b580      	push	{r7, lr}
 8007192:	af00      	add	r7, sp, #0
	HAL_UARTCOM_MspInit();
 8007194:	f000 f812 	bl	80071bc <HAL_UARTCOM_MspInit>

	HAL_CANBUS_MspInit();
 8007198:	f000 f896 	bl	80072c8 <HAL_CANBUS_MspInit>
	//HAL_spi_MspInit();
	HAL_timer1_MspInit();
 800719c:	f000 f8fa 	bl	8007394 <HAL_timer1_MspInit>
	HAL_tickTimer_MspInit();
 80071a0:	f000 f93a 	bl	8007418 <HAL_tickTimer_MspInit>
	HAL_pushButton_MspInit();
 80071a4:	f000 f9d6 	bl	8007554 <HAL_pushButton_MspInit>
	HAL_vl6180x_GPIO1_MspInit();
 80071a8:	f000 f9f8 	bl	800759c <HAL_vl6180x_GPIO1_MspInit>
	HAL_i2c1_MspInit();
 80071ac:	f000 f952 	bl	8007454 <HAL_i2c1_MspInit>
	HAL_UARTDXLMspInit();
 80071b0:	f000 f840 	bl	8007234 <HAL_UARTDXLMspInit>
	HAL_GPIO_PA10_MspInit();
 80071b4:	f000 fa20 	bl	80075f8 <HAL_GPIO_PA10_MspInit>
}
 80071b8:	bf00      	nop
 80071ba:	bd80      	pop	{r7, pc}

080071bc <HAL_UARTCOM_MspInit>:
// TX --> PA2
// RX --> PA3
//===================================================================

void HAL_UARTCOM_MspInit(void)
{
 80071bc:	b580      	push	{r7, lr}
 80071be:	b086      	sub	sp, #24
 80071c0:	af00      	add	r7, sp, #0
	  GPIO_InitTypeDef  GPIO_InitStruct;
	  __HAL_RCC_GPIOA_CLK_ENABLE();
 80071c2:	4b1a      	ldr	r3, [pc, #104]	; (800722c <HAL_UARTCOM_MspInit+0x70>)
 80071c4:	699b      	ldr	r3, [r3, #24]
 80071c6:	4a19      	ldr	r2, [pc, #100]	; (800722c <HAL_UARTCOM_MspInit+0x70>)
 80071c8:	f043 0304 	orr.w	r3, r3, #4
 80071cc:	6193      	str	r3, [r2, #24]
 80071ce:	4b17      	ldr	r3, [pc, #92]	; (800722c <HAL_UARTCOM_MspInit+0x70>)
 80071d0:	699b      	ldr	r3, [r3, #24]
 80071d2:	f003 0304 	and.w	r3, r3, #4
 80071d6:	607b      	str	r3, [r7, #4]
 80071d8:	687b      	ldr	r3, [r7, #4]
	  __HAL_RCC_USART2_CLK_ENABLE();
 80071da:	4b14      	ldr	r3, [pc, #80]	; (800722c <HAL_UARTCOM_MspInit+0x70>)
 80071dc:	69db      	ldr	r3, [r3, #28]
 80071de:	4a13      	ldr	r2, [pc, #76]	; (800722c <HAL_UARTCOM_MspInit+0x70>)
 80071e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80071e4:	61d3      	str	r3, [r2, #28]
 80071e6:	4b11      	ldr	r3, [pc, #68]	; (800722c <HAL_UARTCOM_MspInit+0x70>)
 80071e8:	69db      	ldr	r3, [r3, #28]
 80071ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80071ee:	603b      	str	r3, [r7, #0]
 80071f0:	683b      	ldr	r3, [r7, #0]

	  GPIO_InitStruct.Pin       = GPIO_PIN_2;		// USART 2 TX PIN
 80071f2:	2304      	movs	r3, #4
 80071f4:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 80071f6:	2302      	movs	r3, #2
 80071f8:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Pull      = GPIO_PULLUP;
 80071fa:	2301      	movs	r3, #1
 80071fc:	613b      	str	r3, [r7, #16]
	  GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_HIGH;
 80071fe:	2303      	movs	r3, #3
 8007200:	617b      	str	r3, [r7, #20]

	  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007202:	f107 0308 	add.w	r3, r7, #8
 8007206:	4619      	mov	r1, r3
 8007208:	4809      	ldr	r0, [pc, #36]	; (8007230 <HAL_UARTCOM_MspInit+0x74>)
 800720a:	f7fa fea3 	bl	8001f54 <HAL_GPIO_Init>

	  GPIO_InitStruct.Pin =  GPIO_PIN_3;			// USART 2 RX PIN
 800720e:	2308      	movs	r3, #8
 8007210:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Mode      = GPIO_MODE_INPUT;
 8007212:	2300      	movs	r3, #0
 8007214:	60fb      	str	r3, [r7, #12]

	  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007216:	f107 0308 	add.w	r3, r7, #8
 800721a:	4619      	mov	r1, r3
 800721c:	4804      	ldr	r0, [pc, #16]	; (8007230 <HAL_UARTCOM_MspInit+0x74>)
 800721e:	f7fa fe99 	bl	8001f54 <HAL_GPIO_Init>
}
 8007222:	bf00      	nop
 8007224:	3718      	adds	r7, #24
 8007226:	46bd      	mov	sp, r7
 8007228:	bd80      	pop	{r7, pc}
 800722a:	bf00      	nop
 800722c:	40021000 	.word	0x40021000
 8007230:	40010800 	.word	0x40010800

08007234 <HAL_UARTDXLMspInit>:

void HAL_UARTDXLMspInit(void)
{
 8007234:	b580      	push	{r7, lr}
 8007236:	b088      	sub	sp, #32
 8007238:	af00      	add	r7, sp, #0
	  GPIO_InitTypeDef  GPIO_InitStruct;
	  __HAL_RCC_GPIOA_CLK_ENABLE();
 800723a:	4b21      	ldr	r3, [pc, #132]	; (80072c0 <HAL_UARTDXLMspInit+0x8c>)
 800723c:	699b      	ldr	r3, [r3, #24]
 800723e:	4a20      	ldr	r2, [pc, #128]	; (80072c0 <HAL_UARTDXLMspInit+0x8c>)
 8007240:	f043 0304 	orr.w	r3, r3, #4
 8007244:	6193      	str	r3, [r2, #24]
 8007246:	4b1e      	ldr	r3, [pc, #120]	; (80072c0 <HAL_UARTDXLMspInit+0x8c>)
 8007248:	699b      	ldr	r3, [r3, #24]
 800724a:	f003 0304 	and.w	r3, r3, #4
 800724e:	60fb      	str	r3, [r7, #12]
 8007250:	68fb      	ldr	r3, [r7, #12]
	  __HAL_RCC_GPIOB_CLK_ENABLE();
 8007252:	4b1b      	ldr	r3, [pc, #108]	; (80072c0 <HAL_UARTDXLMspInit+0x8c>)
 8007254:	699b      	ldr	r3, [r3, #24]
 8007256:	4a1a      	ldr	r2, [pc, #104]	; (80072c0 <HAL_UARTDXLMspInit+0x8c>)
 8007258:	f043 0308 	orr.w	r3, r3, #8
 800725c:	6193      	str	r3, [r2, #24]
 800725e:	4b18      	ldr	r3, [pc, #96]	; (80072c0 <HAL_UARTDXLMspInit+0x8c>)
 8007260:	699b      	ldr	r3, [r3, #24]
 8007262:	f003 0308 	and.w	r3, r3, #8
 8007266:	60bb      	str	r3, [r7, #8]
 8007268:	68bb      	ldr	r3, [r7, #8]
	         GPIO_InitStruct.Pull = GPIO_NOPULL;
	         HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
*/


	  __HAL_RCC_USART1_CLK_ENABLE();
 800726a:	4b15      	ldr	r3, [pc, #84]	; (80072c0 <HAL_UARTDXLMspInit+0x8c>)
 800726c:	699b      	ldr	r3, [r3, #24]
 800726e:	4a14      	ldr	r2, [pc, #80]	; (80072c0 <HAL_UARTDXLMspInit+0x8c>)
 8007270:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007274:	6193      	str	r3, [r2, #24]
 8007276:	4b12      	ldr	r3, [pc, #72]	; (80072c0 <HAL_UARTDXLMspInit+0x8c>)
 8007278:	699b      	ldr	r3, [r3, #24]
 800727a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800727e:	607b      	str	r3, [r7, #4]
 8007280:	687b      	ldr	r3, [r7, #4]

	  	         GPIO_InitStruct.Pin = GPIO_PIN_9;
 8007282:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007286:	613b      	str	r3, [r7, #16]
	  	         GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007288:	2302      	movs	r3, #2
 800728a:	617b      	str	r3, [r7, #20]
	  	         GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800728c:	2303      	movs	r3, #3
 800728e:	61fb      	str	r3, [r7, #28]
	  	         HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007290:	f107 0310 	add.w	r3, r7, #16
 8007294:	4619      	mov	r1, r3
 8007296:	480b      	ldr	r0, [pc, #44]	; (80072c4 <HAL_UARTDXLMspInit+0x90>)
 8007298:	f7fa fe5c 	bl	8001f54 <HAL_GPIO_Init>

	  	         GPIO_InitStruct.Pin = GPIO_PIN_10;
 800729c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80072a0:	613b      	str	r3, [r7, #16]
	  	         GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80072a2:	2300      	movs	r3, #0
 80072a4:	617b      	str	r3, [r7, #20]
	  	         GPIO_InitStruct.Pull = GPIO_PULLUP;
 80072a6:	2301      	movs	r3, #1
 80072a8:	61bb      	str	r3, [r7, #24]
	  	         HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80072aa:	f107 0310 	add.w	r3, r7, #16
 80072ae:	4619      	mov	r1, r3
 80072b0:	4804      	ldr	r0, [pc, #16]	; (80072c4 <HAL_UARTDXLMspInit+0x90>)
 80072b2:	f7fa fe4f 	bl	8001f54 <HAL_GPIO_Init>

	   	//  HAL_NVIC_SetPriority(USART3_IRQn, 6, 0);
	   	//  HAL_NVIC_EnableIRQ(USART3_IRQn);

}
 80072b6:	bf00      	nop
 80072b8:	3720      	adds	r7, #32
 80072ba:	46bd      	mov	sp, r7
 80072bc:	bd80      	pop	{r7, pc}
 80072be:	bf00      	nop
 80072c0:	40021000 	.word	0x40021000
 80072c4:	40010800 	.word	0x40010800

080072c8 <HAL_CANBUS_MspInit>:
// CAN1 alternate function remapping
// RX PA11	PB8	(PD0)
// TX PA12	PB9	(PD1)
//===================================================================
void HAL_CANBUS_MspInit(void)
{
 80072c8:	b580      	push	{r7, lr}
 80072ca:	b088      	sub	sp, #32
 80072cc:	af00      	add	r7, sp, #0
	  GPIO_InitTypeDef   GPIO_InitStruct;

	  __HAL_RCC_CAN1_CLK_ENABLE();
 80072ce:	4b2e      	ldr	r3, [pc, #184]	; (8007388 <HAL_CANBUS_MspInit+0xc0>)
 80072d0:	69db      	ldr	r3, [r3, #28]
 80072d2:	4a2d      	ldr	r2, [pc, #180]	; (8007388 <HAL_CANBUS_MspInit+0xc0>)
 80072d4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80072d8:	61d3      	str	r3, [r2, #28]
 80072da:	4b2b      	ldr	r3, [pc, #172]	; (8007388 <HAL_CANBUS_MspInit+0xc0>)
 80072dc:	69db      	ldr	r3, [r3, #28]
 80072de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80072e2:	60bb      	str	r3, [r7, #8]
 80072e4:	68bb      	ldr	r3, [r7, #8]
	 __HAL_RCC_GPIOA_CLK_ENABLE();
 80072e6:	4b28      	ldr	r3, [pc, #160]	; (8007388 <HAL_CANBUS_MspInit+0xc0>)
 80072e8:	699b      	ldr	r3, [r3, #24]
 80072ea:	4a27      	ldr	r2, [pc, #156]	; (8007388 <HAL_CANBUS_MspInit+0xc0>)
 80072ec:	f043 0304 	orr.w	r3, r3, #4
 80072f0:	6193      	str	r3, [r2, #24]
 80072f2:	4b25      	ldr	r3, [pc, #148]	; (8007388 <HAL_CANBUS_MspInit+0xc0>)
 80072f4:	699b      	ldr	r3, [r3, #24]
 80072f6:	f003 0304 	and.w	r3, r3, #4
 80072fa:	607b      	str	r3, [r7, #4]
 80072fc:	687b      	ldr	r3, [r7, #4]
	  __HAL_AFIO_REMAP_CAN1_1();
 80072fe:	4b23      	ldr	r3, [pc, #140]	; (800738c <HAL_CANBUS_MspInit+0xc4>)
 8007300:	685b      	ldr	r3, [r3, #4]
 8007302:	61fb      	str	r3, [r7, #28]
 8007304:	69fb      	ldr	r3, [r7, #28]
 8007306:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 800730a:	61fb      	str	r3, [r7, #28]
 800730c:	69fb      	ldr	r3, [r7, #28]
 800730e:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8007312:	61fb      	str	r3, [r7, #28]
 8007314:	4a1d      	ldr	r2, [pc, #116]	; (800738c <HAL_CANBUS_MspInit+0xc4>)
 8007316:	69fb      	ldr	r3, [r7, #28]
 8007318:	6053      	str	r3, [r2, #4]
	  __HAL_RCC_AFIO_CLK_ENABLE();
 800731a:	4b1b      	ldr	r3, [pc, #108]	; (8007388 <HAL_CANBUS_MspInit+0xc0>)
 800731c:	699b      	ldr	r3, [r3, #24]
 800731e:	4a1a      	ldr	r2, [pc, #104]	; (8007388 <HAL_CANBUS_MspInit+0xc0>)
 8007320:	f043 0301 	orr.w	r3, r3, #1
 8007324:	6193      	str	r3, [r2, #24]
 8007326:	4b18      	ldr	r3, [pc, #96]	; (8007388 <HAL_CANBUS_MspInit+0xc0>)
 8007328:	699b      	ldr	r3, [r3, #24]
 800732a:	f003 0301 	and.w	r3, r3, #1
 800732e:	603b      	str	r3, [r7, #0]
 8007330:	683b      	ldr	r3, [r7, #0]

	  /* CAN1 TX GPIO pin configuration --> PA_12 */
	  GPIO_InitStruct.Pin =  GPIO_PIN_12;		//CANx_TX_PIN;
 8007332:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007336:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007338:	2302      	movs	r3, #2
 800733a:	613b      	str	r3, [r7, #16]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800733c:	2303      	movs	r3, #3
 800733e:	61bb      	str	r3, [r7, #24]
	  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8007340:	2301      	movs	r3, #1
 8007342:	617b      	str	r3, [r7, #20]

	  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007344:	f107 030c 	add.w	r3, r7, #12
 8007348:	4619      	mov	r1, r3
 800734a:	4811      	ldr	r0, [pc, #68]	; (8007390 <HAL_CANBUS_MspInit+0xc8>)
 800734c:	f7fa fe02 	bl	8001f54 <HAL_GPIO_Init>

	  GPIO_InitStruct.Pin = GPIO_PIN_11;		//CANx_RX_PIN;
 8007350:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007354:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;	//GPIO_MODE_AF_PP;
 8007356:	2300      	movs	r3, #0
 8007358:	613b      	str	r3, [r7, #16]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800735a:	2303      	movs	r3, #3
 800735c:	61bb      	str	r3, [r7, #24]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;		//GPIO_PULLUP;
 800735e:	2300      	movs	r3, #0
 8007360:	617b      	str	r3, [r7, #20]

	  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007362:	f107 030c 	add.w	r3, r7, #12
 8007366:	4619      	mov	r1, r3
 8007368:	4809      	ldr	r0, [pc, #36]	; (8007390 <HAL_CANBUS_MspInit+0xc8>)
 800736a:	f7fa fdf3 	bl	8001f54 <HAL_GPIO_Init>

	  HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 5, 0);
 800736e:	2200      	movs	r2, #0
 8007370:	2105      	movs	r1, #5
 8007372:	2014      	movs	r0, #20
 8007374:	f7fa fd11 	bl	8001d9a <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8007378:	2014      	movs	r0, #20
 800737a:	f7fa fd2a 	bl	8001dd2 <HAL_NVIC_EnableIRQ>

}
 800737e:	bf00      	nop
 8007380:	3720      	adds	r7, #32
 8007382:	46bd      	mov	sp, r7
 8007384:	bd80      	pop	{r7, pc}
 8007386:	bf00      	nop
 8007388:	40021000 	.word	0x40021000
 800738c:	40010000 	.word	0x40010000
 8007390:	40010800 	.word	0x40010800

08007394 <HAL_timer1_MspInit>:
//===================================================================
//			TIMER 1 Anemometer
// TIM_CLK		--> 	PA8 (PWM1_1)
//===================================================================
void HAL_timer1_MspInit(void)
{
 8007394:	b580      	push	{r7, lr}
 8007396:	b088      	sub	sp, #32
 8007398:	af00      	add	r7, sp, #0
	  GPIO_InitTypeDef  GPIO_InitStruct;
	   __HAL_RCC_TIM1_CLK_ENABLE();
 800739a:	4b1c      	ldr	r3, [pc, #112]	; (800740c <HAL_timer1_MspInit+0x78>)
 800739c:	699b      	ldr	r3, [r3, #24]
 800739e:	4a1b      	ldr	r2, [pc, #108]	; (800740c <HAL_timer1_MspInit+0x78>)
 80073a0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80073a4:	6193      	str	r3, [r2, #24]
 80073a6:	4b19      	ldr	r3, [pc, #100]	; (800740c <HAL_timer1_MspInit+0x78>)
 80073a8:	699b      	ldr	r3, [r3, #24]
 80073aa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80073ae:	60bb      	str	r3, [r7, #8]
 80073b0:	68bb      	ldr	r3, [r7, #8]
	   __HAL_RCC_GPIOA_CLK_ENABLE();
 80073b2:	4b16      	ldr	r3, [pc, #88]	; (800740c <HAL_timer1_MspInit+0x78>)
 80073b4:	699b      	ldr	r3, [r3, #24]
 80073b6:	4a15      	ldr	r2, [pc, #84]	; (800740c <HAL_timer1_MspInit+0x78>)
 80073b8:	f043 0304 	orr.w	r3, r3, #4
 80073bc:	6193      	str	r3, [r2, #24]
 80073be:	4b13      	ldr	r3, [pc, #76]	; (800740c <HAL_timer1_MspInit+0x78>)
 80073c0:	699b      	ldr	r3, [r3, #24]
 80073c2:	f003 0304 	and.w	r3, r3, #4
 80073c6:	607b      	str	r3, [r7, #4]
 80073c8:	687b      	ldr	r3, [r7, #4]

	   __HAL_AFIO_REMAP_TIM1_DISABLE();
 80073ca:	4b11      	ldr	r3, [pc, #68]	; (8007410 <HAL_timer1_MspInit+0x7c>)
 80073cc:	685b      	ldr	r3, [r3, #4]
 80073ce:	61fb      	str	r3, [r7, #28]
 80073d0:	69fb      	ldr	r3, [r7, #28]
 80073d2:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80073d6:	61fb      	str	r3, [r7, #28]
 80073d8:	69fb      	ldr	r3, [r7, #28]
 80073da:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80073de:	61fb      	str	r3, [r7, #28]
 80073e0:	4a0b      	ldr	r2, [pc, #44]	; (8007410 <HAL_timer1_MspInit+0x7c>)
 80073e2:	69fb      	ldr	r3, [r7, #28]
 80073e4:	6053      	str	r3, [r2, #4]

	  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80073e6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80073ea:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80073ec:	2300      	movs	r3, #0
 80073ee:	613b      	str	r3, [r7, #16]
	  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80073f0:	2301      	movs	r3, #1
 80073f2:	617b      	str	r3, [r7, #20]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80073f4:	2302      	movs	r3, #2
 80073f6:	61bb      	str	r3, [r7, #24]

 	  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80073f8:	f107 030c 	add.w	r3, r7, #12
 80073fc:	4619      	mov	r1, r3
 80073fe:	4805      	ldr	r0, [pc, #20]	; (8007414 <HAL_timer1_MspInit+0x80>)
 8007400:	f7fa fda8 	bl	8001f54 <HAL_GPIO_Init>
}
 8007404:	bf00      	nop
 8007406:	3720      	adds	r7, #32
 8007408:	46bd      	mov	sp, r7
 800740a:	bd80      	pop	{r7, pc}
 800740c:	40021000 	.word	0x40021000
 8007410:	40010000 	.word	0x40010000
 8007414:	40010800 	.word	0x40010800

08007418 <HAL_tickTimer_MspInit>:

//===================================================================
//			TIMER 3 TickTimer
//===================================================================
void HAL_tickTimer_MspInit(void)
{
 8007418:	b580      	push	{r7, lr}
 800741a:	b082      	sub	sp, #8
 800741c:	af00      	add	r7, sp, #0
	  __HAL_RCC_TIM3_CLK_ENABLE();
 800741e:	4b0c      	ldr	r3, [pc, #48]	; (8007450 <HAL_tickTimer_MspInit+0x38>)
 8007420:	69db      	ldr	r3, [r3, #28]
 8007422:	4a0b      	ldr	r2, [pc, #44]	; (8007450 <HAL_tickTimer_MspInit+0x38>)
 8007424:	f043 0302 	orr.w	r3, r3, #2
 8007428:	61d3      	str	r3, [r2, #28]
 800742a:	4b09      	ldr	r3, [pc, #36]	; (8007450 <HAL_tickTimer_MspInit+0x38>)
 800742c:	69db      	ldr	r3, [r3, #28]
 800742e:	f003 0302 	and.w	r3, r3, #2
 8007432:	607b      	str	r3, [r7, #4]
 8007434:	687b      	ldr	r3, [r7, #4]
	  HAL_NVIC_SetPriority(TIM3_IRQn, 3, 0);
 8007436:	2200      	movs	r2, #0
 8007438:	2103      	movs	r1, #3
 800743a:	201d      	movs	r0, #29
 800743c:	f7fa fcad 	bl	8001d9a <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8007440:	201d      	movs	r0, #29
 8007442:	f7fa fcc6 	bl	8001dd2 <HAL_NVIC_EnableIRQ>
}
 8007446:	bf00      	nop
 8007448:	3708      	adds	r7, #8
 800744a:	46bd      	mov	sp, r7
 800744c:	bd80      	pop	{r7, pc}
 800744e:	bf00      	nop
 8007450:	40021000 	.word	0x40021000

08007454 <HAL_i2c1_MspInit>:
//			I2C1
// PB8 : I2C1 SCL
// PB9 : I2C1 SDA
//===================================================================
void HAL_i2c1_MspInit(void)
{
 8007454:	b580      	push	{r7, lr}
 8007456:	b08a      	sub	sp, #40	; 0x28
 8007458:	af00      	add	r7, sp, #0

	  GPIO_InitTypeDef  GPIO_InitStruct;

	  __HAL_RCC_GPIOA_CLK_ENABLE();
 800745a:	4b3b      	ldr	r3, [pc, #236]	; (8007548 <HAL_i2c1_MspInit+0xf4>)
 800745c:	699b      	ldr	r3, [r3, #24]
 800745e:	4a3a      	ldr	r2, [pc, #232]	; (8007548 <HAL_i2c1_MspInit+0xf4>)
 8007460:	f043 0304 	orr.w	r3, r3, #4
 8007464:	6193      	str	r3, [r2, #24]
 8007466:	4b38      	ldr	r3, [pc, #224]	; (8007548 <HAL_i2c1_MspInit+0xf4>)
 8007468:	699b      	ldr	r3, [r3, #24]
 800746a:	f003 0304 	and.w	r3, r3, #4
 800746e:	613b      	str	r3, [r7, #16]
 8007470:	693b      	ldr	r3, [r7, #16]
	  __HAL_RCC_GPIOB_CLK_ENABLE();
 8007472:	4b35      	ldr	r3, [pc, #212]	; (8007548 <HAL_i2c1_MspInit+0xf4>)
 8007474:	699b      	ldr	r3, [r3, #24]
 8007476:	4a34      	ldr	r2, [pc, #208]	; (8007548 <HAL_i2c1_MspInit+0xf4>)
 8007478:	f043 0308 	orr.w	r3, r3, #8
 800747c:	6193      	str	r3, [r2, #24]
 800747e:	4b32      	ldr	r3, [pc, #200]	; (8007548 <HAL_i2c1_MspInit+0xf4>)
 8007480:	699b      	ldr	r3, [r3, #24]
 8007482:	f003 0308 	and.w	r3, r3, #8
 8007486:	60fb      	str	r3, [r7, #12]
 8007488:	68fb      	ldr	r3, [r7, #12]
	  __HAL_RCC_GPIOC_CLK_ENABLE();
 800748a:	4b2f      	ldr	r3, [pc, #188]	; (8007548 <HAL_i2c1_MspInit+0xf4>)
 800748c:	699b      	ldr	r3, [r3, #24]
 800748e:	4a2e      	ldr	r2, [pc, #184]	; (8007548 <HAL_i2c1_MspInit+0xf4>)
 8007490:	f043 0310 	orr.w	r3, r3, #16
 8007494:	6193      	str	r3, [r2, #24]
 8007496:	4b2c      	ldr	r3, [pc, #176]	; (8007548 <HAL_i2c1_MspInit+0xf4>)
 8007498:	699b      	ldr	r3, [r3, #24]
 800749a:	f003 0310 	and.w	r3, r3, #16
 800749e:	60bb      	str	r3, [r7, #8]
 80074a0:	68bb      	ldr	r3, [r7, #8]

	  __HAL_RCC_AFIO_CLK_ENABLE();
 80074a2:	4b29      	ldr	r3, [pc, #164]	; (8007548 <HAL_i2c1_MspInit+0xf4>)
 80074a4:	699b      	ldr	r3, [r3, #24]
 80074a6:	4a28      	ldr	r2, [pc, #160]	; (8007548 <HAL_i2c1_MspInit+0xf4>)
 80074a8:	f043 0301 	orr.w	r3, r3, #1
 80074ac:	6193      	str	r3, [r2, #24]
 80074ae:	4b26      	ldr	r3, [pc, #152]	; (8007548 <HAL_i2c1_MspInit+0xf4>)
 80074b0:	699b      	ldr	r3, [r3, #24]
 80074b2:	f003 0301 	and.w	r3, r3, #1
 80074b6:	607b      	str	r3, [r7, #4]
 80074b8:	687b      	ldr	r3, [r7, #4]
	  __HAL_AFIO_REMAP_I2C1_ENABLE();
 80074ba:	4b24      	ldr	r3, [pc, #144]	; (800754c <HAL_i2c1_MspInit+0xf8>)
 80074bc:	685b      	ldr	r3, [r3, #4]
 80074be:	627b      	str	r3, [r7, #36]	; 0x24
 80074c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074c2:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80074c6:	627b      	str	r3, [r7, #36]	; 0x24
 80074c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074ca:	f043 0302 	orr.w	r3, r3, #2
 80074ce:	627b      	str	r3, [r7, #36]	; 0x24
 80074d0:	4a1e      	ldr	r2, [pc, #120]	; (800754c <HAL_i2c1_MspInit+0xf8>)
 80074d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074d4:	6053      	str	r3, [r2, #4]

	  __HAL_RCC_I2C1_CLK_ENABLE();
 80074d6:	4b1c      	ldr	r3, [pc, #112]	; (8007548 <HAL_i2c1_MspInit+0xf4>)
 80074d8:	69db      	ldr	r3, [r3, #28]
 80074da:	4a1b      	ldr	r2, [pc, #108]	; (8007548 <HAL_i2c1_MspInit+0xf4>)
 80074dc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80074e0:	61d3      	str	r3, [r2, #28]
 80074e2:	4b19      	ldr	r3, [pc, #100]	; (8007548 <HAL_i2c1_MspInit+0xf4>)
 80074e4:	69db      	ldr	r3, [r3, #28]
 80074e6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80074ea:	603b      	str	r3, [r7, #0]
 80074ec:	683b      	ldr	r3, [r7, #0]

	  GPIO_InitStruct.Pin       = GPIO_PIN_8;
 80074ee:	f44f 7380 	mov.w	r3, #256	; 0x100
 80074f2:	617b      	str	r3, [r7, #20]
	  GPIO_InitStruct.Mode      = GPIO_MODE_AF_OD;
 80074f4:	2312      	movs	r3, #18
 80074f6:	61bb      	str	r3, [r7, #24]
	  GPIO_InitStruct.Pull      = GPIO_PULLUP;
 80074f8:	2301      	movs	r3, #1
 80074fa:	61fb      	str	r3, [r7, #28]
	  GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_HIGH;
 80074fc:	2303      	movs	r3, #3
 80074fe:	623b      	str	r3, [r7, #32]

	  HAL_GPIO_Init( GPIOB, &GPIO_InitStruct);
 8007500:	f107 0314 	add.w	r3, r7, #20
 8007504:	4619      	mov	r1, r3
 8007506:	4812      	ldr	r0, [pc, #72]	; (8007550 <HAL_i2c1_MspInit+0xfc>)
 8007508:	f7fa fd24 	bl	8001f54 <HAL_GPIO_Init>

	  GPIO_InitStruct.Pin       = GPIO_PIN_9;
 800750c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007510:	617b      	str	r3, [r7, #20]
	  HAL_GPIO_Init( GPIOB, &GPIO_InitStruct);
 8007512:	f107 0314 	add.w	r3, r7, #20
 8007516:	4619      	mov	r1, r3
 8007518:	480d      	ldr	r0, [pc, #52]	; (8007550 <HAL_i2c1_MspInit+0xfc>)
 800751a:	f7fa fd1b 	bl	8001f54 <HAL_GPIO_Init>

	  HAL_NVIC_SetPriority(I2C1_ER_IRQn, 4, 1);
 800751e:	2201      	movs	r2, #1
 8007520:	2104      	movs	r1, #4
 8007522:	2020      	movs	r0, #32
 8007524:	f7fa fc39 	bl	8001d9a <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8007528:	2020      	movs	r0, #32
 800752a:	f7fa fc52 	bl	8001dd2 <HAL_NVIC_EnableIRQ>
	  HAL_NVIC_SetPriority(I2C1_EV_IRQn, 4, 2);
 800752e:	2202      	movs	r2, #2
 8007530:	2104      	movs	r1, #4
 8007532:	201f      	movs	r0, #31
 8007534:	f7fa fc31 	bl	8001d9a <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8007538:	201f      	movs	r0, #31
 800753a:	f7fa fc4a 	bl	8001dd2 <HAL_NVIC_EnableIRQ>
}
 800753e:	bf00      	nop
 8007540:	3728      	adds	r7, #40	; 0x28
 8007542:	46bd      	mov	sp, r7
 8007544:	bd80      	pop	{r7, pc}
 8007546:	bf00      	nop
 8007548:	40021000 	.word	0x40021000
 800754c:	40010000 	.word	0x40010000
 8007550:	40010c00 	.word	0x40010c00

08007554 <HAL_pushButton_MspInit>:
//===================================================================
//			GPIO USER PUSH BUTTON
// PC13
//===================================================================
void HAL_pushButton_MspInit(void)
{
 8007554:	b580      	push	{r7, lr}
 8007556:	b086      	sub	sp, #24
 8007558:	af00      	add	r7, sp, #0
	  GPIO_InitTypeDef GPIO_InitStruct;
	  __HAL_RCC_GPIOC_CLK_ENABLE();
 800755a:	4b0e      	ldr	r3, [pc, #56]	; (8007594 <HAL_pushButton_MspInit+0x40>)
 800755c:	699b      	ldr	r3, [r3, #24]
 800755e:	4a0d      	ldr	r2, [pc, #52]	; (8007594 <HAL_pushButton_MspInit+0x40>)
 8007560:	f043 0310 	orr.w	r3, r3, #16
 8007564:	6193      	str	r3, [r2, #24]
 8007566:	4b0b      	ldr	r3, [pc, #44]	; (8007594 <HAL_pushButton_MspInit+0x40>)
 8007568:	699b      	ldr	r3, [r3, #24]
 800756a:	f003 0310 	and.w	r3, r3, #16
 800756e:	607b      	str	r3, [r7, #4]
 8007570:	687b      	ldr	r3, [r7, #4]

	  /*Configure GPIO pin : PC13 */
	  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8007572:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007576:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007578:	2300      	movs	r3, #0
 800757a:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800757c:	2300      	movs	r3, #0
 800757e:	613b      	str	r3, [r7, #16]
	  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007580:	f107 0308 	add.w	r3, r7, #8
 8007584:	4619      	mov	r1, r3
 8007586:	4804      	ldr	r0, [pc, #16]	; (8007598 <HAL_pushButton_MspInit+0x44>)
 8007588:	f7fa fce4 	bl	8001f54 <HAL_GPIO_Init>
}
 800758c:	bf00      	nop
 800758e:	3718      	adds	r7, #24
 8007590:	46bd      	mov	sp, r7
 8007592:	bd80      	pop	{r7, pc}
 8007594:	40021000 	.word	0x40021000
 8007598:	40011000 	.word	0x40011000

0800759c <HAL_vl6180x_GPIO1_MspInit>:
//===================================================================
//			vl6180x_GPIO1
// PB0 = INT
//===================================================================
void HAL_vl6180x_GPIO1_MspInit(void)
{
 800759c:	b580      	push	{r7, lr}
 800759e:	b086      	sub	sp, #24
 80075a0:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct;

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80075a2:	4b12      	ldr	r3, [pc, #72]	; (80075ec <HAL_vl6180x_GPIO1_MspInit+0x50>)
 80075a4:	699b      	ldr	r3, [r3, #24]
 80075a6:	4a11      	ldr	r2, [pc, #68]	; (80075ec <HAL_vl6180x_GPIO1_MspInit+0x50>)
 80075a8:	f043 0308 	orr.w	r3, r3, #8
 80075ac:	6193      	str	r3, [r2, #24]
 80075ae:	4b0f      	ldr	r3, [pc, #60]	; (80075ec <HAL_vl6180x_GPIO1_MspInit+0x50>)
 80075b0:	699b      	ldr	r3, [r3, #24]
 80075b2:	f003 0308 	and.w	r3, r3, #8
 80075b6:	607b      	str	r3, [r7, #4]
 80075b8:	687b      	ldr	r3, [r7, #4]

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80075ba:	2301      	movs	r3, #1
 80075bc:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80075be:	4b0c      	ldr	r3, [pc, #48]	; (80075f0 <HAL_vl6180x_GPIO1_MspInit+0x54>)
 80075c0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80075c2:	2300      	movs	r3, #0
 80075c4:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80075c6:	f107 0308 	add.w	r3, r7, #8
 80075ca:	4619      	mov	r1, r3
 80075cc:	4809      	ldr	r0, [pc, #36]	; (80075f4 <HAL_vl6180x_GPIO1_MspInit+0x58>)
 80075ce:	f7fa fcc1 	bl	8001f54 <HAL_GPIO_Init>

    HAL_NVIC_SetPriority(EXTI0_IRQn, 7, 1);
 80075d2:	2201      	movs	r2, #1
 80075d4:	2107      	movs	r1, #7
 80075d6:	2006      	movs	r0, #6
 80075d8:	f7fa fbdf 	bl	8001d9a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80075dc:	2006      	movs	r0, #6
 80075de:	f7fa fbf8 	bl	8001dd2 <HAL_NVIC_EnableIRQ>
}
 80075e2:	bf00      	nop
 80075e4:	3718      	adds	r7, #24
 80075e6:	46bd      	mov	sp, r7
 80075e8:	bd80      	pop	{r7, pc}
 80075ea:	bf00      	nop
 80075ec:	40021000 	.word	0x40021000
 80075f0:	10110000 	.word	0x10110000
 80075f4:	40010c00 	.word	0x40010c00

080075f8 <HAL_GPIO_PA10_MspInit>:


void HAL_GPIO_PA10_MspInit(void)
{
 80075f8:	b580      	push	{r7, lr}
 80075fa:	b086      	sub	sp, #24
 80075fc:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct;

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80075fe:	4b0e      	ldr	r3, [pc, #56]	; (8007638 <HAL_GPIO_PA10_MspInit+0x40>)
 8007600:	699b      	ldr	r3, [r3, #24]
 8007602:	4a0d      	ldr	r2, [pc, #52]	; (8007638 <HAL_GPIO_PA10_MspInit+0x40>)
 8007604:	f043 0304 	orr.w	r3, r3, #4
 8007608:	6193      	str	r3, [r2, #24]
 800760a:	4b0b      	ldr	r3, [pc, #44]	; (8007638 <HAL_GPIO_PA10_MspInit+0x40>)
 800760c:	699b      	ldr	r3, [r3, #24]
 800760e:	f003 0304 	and.w	r3, r3, #4
 8007612:	607b      	str	r3, [r7, #4]
 8007614:	687b      	ldr	r3, [r7, #4]

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8007616:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800761a:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800761c:	2301      	movs	r3, #1
 800761e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007620:	2300      	movs	r3, #0
 8007622:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007624:	f107 0308 	add.w	r3, r7, #8
 8007628:	4619      	mov	r1, r3
 800762a:	4804      	ldr	r0, [pc, #16]	; (800763c <HAL_GPIO_PA10_MspInit+0x44>)
 800762c:	f7fa fc92 	bl	8001f54 <HAL_GPIO_Init>


}
 8007630:	bf00      	nop
 8007632:	3718      	adds	r7, #24
 8007634:	46bd      	mov	sp, r7
 8007636:	bd80      	pop	{r7, pc}
 8007638:	40021000 	.word	0x40021000
 800763c:	40010800 	.word	0x40010800

08007640 <NMI_Handler>:
//===================================================================
// Cortex-M3 Processor Exceptions Handlers
//===================================================================

void NMI_Handler(void)
{
 8007640:	b480      	push	{r7}
 8007642:	af00      	add	r7, sp, #0
}
 8007644:	bf00      	nop
 8007646:	46bd      	mov	sp, r7
 8007648:	bc80      	pop	{r7}
 800764a:	4770      	bx	lr

0800764c <HardFault_Handler>:

void HardFault_Handler(void)
{
 800764c:	b480      	push	{r7}
 800764e:	af00      	add	r7, sp, #0
  while (1)
 8007650:	e7fe      	b.n	8007650 <HardFault_Handler+0x4>

08007652 <MemManage_Handler>:
  {
  }
}

void MemManage_Handler(void)
{
 8007652:	b480      	push	{r7}
 8007654:	af00      	add	r7, sp, #0
  while (1)
 8007656:	e7fe      	b.n	8007656 <MemManage_Handler+0x4>

08007658 <BusFault_Handler>:
  {
  }
}

void BusFault_Handler(void)
{
 8007658:	b480      	push	{r7}
 800765a:	af00      	add	r7, sp, #0
  while (1)
 800765c:	e7fe      	b.n	800765c <BusFault_Handler+0x4>

0800765e <UsageFault_Handler>:
  {
  }
}

void UsageFault_Handler(void)
{
 800765e:	b480      	push	{r7}
 8007660:	af00      	add	r7, sp, #0
  while (1)
 8007662:	e7fe      	b.n	8007662 <UsageFault_Handler+0x4>

08007664 <SVC_Handler>:
  {
  }
}

void SVC_Handler(void)
{
 8007664:	b480      	push	{r7}
 8007666:	af00      	add	r7, sp, #0
}
 8007668:	bf00      	nop
 800766a:	46bd      	mov	sp, r7
 800766c:	bc80      	pop	{r7}
 800766e:	4770      	bx	lr

08007670 <DebugMon_Handler>:

void DebugMon_Handler(void)
{
 8007670:	b480      	push	{r7}
 8007672:	af00      	add	r7, sp, #0
}
 8007674:	bf00      	nop
 8007676:	46bd      	mov	sp, r7
 8007678:	bc80      	pop	{r7}
 800767a:	4770      	bx	lr

0800767c <PendSV_Handler>:

void PendSV_Handler(void)
{
 800767c:	b480      	push	{r7}
 800767e:	af00      	add	r7, sp, #0
}
 8007680:	bf00      	nop
 8007682:	46bd      	mov	sp, r7
 8007684:	bc80      	pop	{r7}
 8007686:	4770      	bx	lr

08007688 <SysTick_Handler>:

void SysTick_Handler(void)
{
 8007688:	b580      	push	{r7, lr}
 800768a:	af00      	add	r7, sp, #0
  HAL_IncTick();
 800768c:	f7f9 fc66 	bl	8000f5c <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
 8007690:	f7fa fbe4 	bl	8001e5c <HAL_SYSTICK_IRQHandler>
}
 8007694:	bf00      	nop
 8007696:	bd80      	pop	{r7, pc}

08007698 <EXTI0_IRQHandler>:
/*  available peripheral interrupt handler's name please refer to the startup */
/*  file (startup_stm32f1xx.s).                                               */
//==============================================================================

void EXTI0_IRQHandler(void)
{
 8007698:	b580      	push	{r7, lr}
 800769a:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 800769c:	2001      	movs	r0, #1
 800769e:	f7fa fdf9 	bl	8002294 <HAL_GPIO_EXTI_IRQHandler>
}
 80076a2:	bf00      	nop
 80076a4:	bd80      	pop	{r7, pc}
	...

080076a8 <I2C1_EV_IRQHandler>:

void I2C1_EV_IRQHandler(void)
{
 80076a8:	b580      	push	{r7, lr}
 80076aa:	af00      	add	r7, sp, #0
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80076ac:	4802      	ldr	r0, [pc, #8]	; (80076b8 <I2C1_EV_IRQHandler+0x10>)
 80076ae:	f7fb fa71 	bl	8002b94 <HAL_I2C_EV_IRQHandler>
}
 80076b2:	bf00      	nop
 80076b4:	bd80      	pop	{r7, pc}
 80076b6:	bf00      	nop
 80076b8:	200003c4 	.word	0x200003c4

080076bc <I2C1_ER_IRQHandler>:

void I2C1_ER_IRQHandler(void)
{
 80076bc:	b580      	push	{r7, lr}
 80076be:	af00      	add	r7, sp, #0
  HAL_I2C_ER_IRQHandler(&hi2c1);
 80076c0:	4802      	ldr	r0, [pc, #8]	; (80076cc <I2C1_ER_IRQHandler+0x10>)
 80076c2:	f7fb fb6b 	bl	8002d9c <HAL_I2C_ER_IRQHandler>
}
 80076c6:	bf00      	nop
 80076c8:	bd80      	pop	{r7, pc}
 80076ca:	bf00      	nop
 80076cc:	200003c4 	.word	0x200003c4

080076d0 <USB_LP_CAN1_RX0_IRQHandler>:

void USB_LP_CAN1_RX0_IRQHandler(void) {
 80076d0:	b580      	push	{r7, lr}
 80076d2:	af00      	add	r7, sp, #0
    HAL_CAN_IRQHandler(&CanHandle);
 80076d4:	4802      	ldr	r0, [pc, #8]	; (80076e0 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 80076d6:	f7fa f80d 	bl	80016f4 <HAL_CAN_IRQHandler>
}
 80076da:	bf00      	nop
 80076dc:	bd80      	pop	{r7, pc}
 80076de:	bf00      	nop
 80076e0:	20000314 	.word	0x20000314

080076e4 <TIM3_IRQHandler>:

void TIM3_IRQHandler(void)
{
 80076e4:	b580      	push	{r7, lr}
 80076e6:	af00      	add	r7, sp, #0
  HAL_TIM_IRQHandler(&TimHandle_period);
 80076e8:	4802      	ldr	r0, [pc, #8]	; (80076f4 <TIM3_IRQHandler+0x10>)
 80076ea:	f7fd fb9f 	bl	8004e2c <HAL_TIM_IRQHandler>
}
 80076ee:	bf00      	nop
 80076f0:	bd80      	pop	{r7, pc}
 80076f2:	bf00      	nop
 80076f4:	20000674 	.word	0x20000674

080076f8 <USART3_IRQHandler>:

void USART3_IRQHandler(void)
{
 80076f8:	b580      	push	{r7, lr}
 80076fa:	af00      	add	r7, sp, #0
  HAL_UART_IRQHandler(&UartDxlHandle);
 80076fc:	4802      	ldr	r0, [pc, #8]	; (8007708 <USART3_IRQHandler+0x10>)
 80076fe:	f7fd fe17 	bl	8005330 <HAL_UART_IRQHandler>
}
 8007702:	bf00      	nop
 8007704:	bd80      	pop	{r7, pc}
 8007706:	bf00      	nop
 8007708:	20000210 	.word	0x20000210

0800770c <USART2_IRQHandler>:

void USART2_IRQHandler(void)
{
 800770c:	b580      	push	{r7, lr}
 800770e:	af00      	add	r7, sp, #0
  HAL_UART_IRQHandler(&Uart2Handle);
 8007710:	4802      	ldr	r0, [pc, #8]	; (800771c <USART2_IRQHandler+0x10>)
 8007712:	f7fd fe0d 	bl	8005330 <HAL_UART_IRQHandler>
}
 8007716:	bf00      	nop
 8007718:	bd80      	pop	{r7, pc}
 800771a:	bf00      	nop
 800771c:	20000268 	.word	0x20000268

08007720 <_sbrk>:
	}
	return len;
}

caddr_t _sbrk(int incr)
{
 8007720:	b580      	push	{r7, lr}
 8007722:	b084      	sub	sp, #16
 8007724:	af00      	add	r7, sp, #0
 8007726:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8007728:	4b11      	ldr	r3, [pc, #68]	; (8007770 <_sbrk+0x50>)
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	2b00      	cmp	r3, #0
 800772e:	d102      	bne.n	8007736 <_sbrk+0x16>
		heap_end = &end;
 8007730:	4b0f      	ldr	r3, [pc, #60]	; (8007770 <_sbrk+0x50>)
 8007732:	4a10      	ldr	r2, [pc, #64]	; (8007774 <_sbrk+0x54>)
 8007734:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8007736:	4b0e      	ldr	r3, [pc, #56]	; (8007770 <_sbrk+0x50>)
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 800773c:	4b0c      	ldr	r3, [pc, #48]	; (8007770 <_sbrk+0x50>)
 800773e:	681a      	ldr	r2, [r3, #0]
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	4413      	add	r3, r2
 8007744:	466a      	mov	r2, sp
 8007746:	4293      	cmp	r3, r2
 8007748:	d907      	bls.n	800775a <_sbrk+0x3a>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 800774a:	f003 f9a3 	bl	800aa94 <__errno>
 800774e:	4603      	mov	r3, r0
 8007750:	220c      	movs	r2, #12
 8007752:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8007754:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007758:	e006      	b.n	8007768 <_sbrk+0x48>
	}

	heap_end += incr;
 800775a:	4b05      	ldr	r3, [pc, #20]	; (8007770 <_sbrk+0x50>)
 800775c:	681a      	ldr	r2, [r3, #0]
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	4413      	add	r3, r2
 8007762:	4a03      	ldr	r2, [pc, #12]	; (8007770 <_sbrk+0x50>)
 8007764:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8007766:	68fb      	ldr	r3, [r7, #12]
}
 8007768:	4618      	mov	r0, r3
 800776a:	3710      	adds	r7, #16
 800776c:	46bd      	mov	sp, r7
 800776e:	bd80      	pop	{r7, pc}
 8007770:	200001d4 	.word	0x200001d4
 8007774:	200006c0 	.word	0x200006c0

08007778 <systemClock_Config>:

#include "systemClock.h"


void systemClock_Config(void)
{
 8007778:	b580      	push	{r7, lr}
 800777a:	b090      	sub	sp, #64	; 0x40
 800777c:	af00      	add	r7, sp, #0
	 RCC_OscInitTypeDef RCC_OscInitStruct;
	 RCC_ClkInitTypeDef RCC_ClkInitStruct;

	 RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800777e:	2302      	movs	r3, #2
 8007780:	61bb      	str	r3, [r7, #24]
	 RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8007782:	2301      	movs	r3, #1
 8007784:	62bb      	str	r3, [r7, #40]	; 0x28
	 RCC_OscInitStruct.HSICalibrationValue = 16;
 8007786:	2310      	movs	r3, #16
 8007788:	62fb      	str	r3, [r7, #44]	; 0x2c
	 RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800778a:	2302      	movs	r3, #2
 800778c:	637b      	str	r3, [r7, #52]	; 0x34
	 RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 800778e:	2300      	movs	r3, #0
 8007790:	63bb      	str	r3, [r7, #56]	; 0x38
	 RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8007792:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8007796:	63fb      	str	r3, [r7, #60]	; 0x3c
	 HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8007798:	f107 0318 	add.w	r3, r7, #24
 800779c:	4618      	mov	r0, r3
 800779e:	f7fc ff25 	bl	80045ec <HAL_RCC_OscConfig>

	 RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_SYSCLK;
 80077a2:	2301      	movs	r3, #1
 80077a4:	607b      	str	r3, [r7, #4]
	 RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80077a6:	2302      	movs	r3, #2
 80077a8:	60bb      	str	r3, [r7, #8]
	 RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80077aa:	2300      	movs	r3, #0
 80077ac:	60fb      	str	r3, [r7, #12]
	 RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80077ae:	2300      	movs	r3, #0
 80077b0:	613b      	str	r3, [r7, #16]
	 RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80077b2:	2300      	movs	r3, #0
 80077b4:	617b      	str	r3, [r7, #20]
	 HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1);
 80077b6:	1d3b      	adds	r3, r7, #4
 80077b8:	2101      	movs	r1, #1
 80077ba:	4618      	mov	r0, r3
 80077bc:	f7fd f97a 	bl	8004ab4 <HAL_RCC_ClockConfig>

	 HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 80077c0:	f7fd fae2 	bl	8004d88 <HAL_RCC_GetHCLKFreq>
 80077c4:	4603      	mov	r3, r0
 80077c6:	4a0a      	ldr	r2, [pc, #40]	; (80077f0 <systemClock_Config+0x78>)
 80077c8:	fba2 2303 	umull	r2, r3, r2, r3
 80077cc:	099b      	lsrs	r3, r3, #6
 80077ce:	4618      	mov	r0, r3
 80077d0:	f7fa fb1b 	bl	8001e0a <HAL_SYSTICK_Config>
	 HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 80077d4:	2004      	movs	r0, #4
 80077d6:	f7fa fb25 	bl	8001e24 <HAL_SYSTICK_CLKSourceConfig>

	  /* SysTick_IRQn interrupt configuration */
	  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80077da:	2200      	movs	r2, #0
 80077dc:	2100      	movs	r1, #0
 80077de:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80077e2:	f7fa fada 	bl	8001d9a <HAL_NVIC_SetPriority>

}
 80077e6:	bf00      	nop
 80077e8:	3740      	adds	r7, #64	; 0x40
 80077ea:	46bd      	mov	sp, r7
 80077ec:	bd80      	pop	{r7, pc}
 80077ee:	bf00      	nop
 80077f0:	10624dd3 	.word	0x10624dd3

080077f4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80077f4:	b480      	push	{r7}
 80077f6:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80077f8:	4b15      	ldr	r3, [pc, #84]	; (8007850 <SystemInit+0x5c>)
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	4a14      	ldr	r2, [pc, #80]	; (8007850 <SystemInit+0x5c>)
 80077fe:	f043 0301 	orr.w	r3, r3, #1
 8007802:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= (uint32_t)0xF8FF0000;
 8007804:	4b12      	ldr	r3, [pc, #72]	; (8007850 <SystemInit+0x5c>)
 8007806:	685a      	ldr	r2, [r3, #4]
 8007808:	4911      	ldr	r1, [pc, #68]	; (8007850 <SystemInit+0x5c>)
 800780a:	4b12      	ldr	r3, [pc, #72]	; (8007854 <SystemInit+0x60>)
 800780c:	4013      	ands	r3, r2
 800780e:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8007810:	4b0f      	ldr	r3, [pc, #60]	; (8007850 <SystemInit+0x5c>)
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	4a0e      	ldr	r2, [pc, #56]	; (8007850 <SystemInit+0x5c>)
 8007816:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800781a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800781e:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8007820:	4b0b      	ldr	r3, [pc, #44]	; (8007850 <SystemInit+0x5c>)
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	4a0a      	ldr	r2, [pc, #40]	; (8007850 <SystemInit+0x5c>)
 8007826:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800782a:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 800782c:	4b08      	ldr	r3, [pc, #32]	; (8007850 <SystemInit+0x5c>)
 800782e:	685b      	ldr	r3, [r3, #4]
 8007830:	4a07      	ldr	r2, [pc, #28]	; (8007850 <SystemInit+0x5c>)
 8007832:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8007836:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
 8007838:	4b05      	ldr	r3, [pc, #20]	; (8007850 <SystemInit+0x5c>)
 800783a:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 800783e:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8007840:	4b05      	ldr	r3, [pc, #20]	; (8007858 <SystemInit+0x64>)
 8007842:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8007846:	609a      	str	r2, [r3, #8]
#endif 
}
 8007848:	bf00      	nop
 800784a:	46bd      	mov	sp, r7
 800784c:	bc80      	pop	{r7}
 800784e:	4770      	bx	lr
 8007850:	40021000 	.word	0x40021000
 8007854:	f8ff0000 	.word	0xf8ff0000
 8007858:	e000ed00 	.word	0xe000ed00

0800785c <num2str>:
#include "util.h"

//=================================================================
void num2str(char *s, unsigned int number, unsigned int base, unsigned int size, int sp)
{
 800785c:	b480      	push	{r7}
 800785e:	b089      	sub	sp, #36	; 0x24
 8007860:	af00      	add	r7, sp, #0
 8007862:	60f8      	str	r0, [r7, #12]
 8007864:	60b9      	str	r1, [r7, #8]
 8007866:	607a      	str	r2, [r7, #4]
 8007868:	603b      	str	r3, [r7, #0]
        static char  hexChars[] = "0123456789ABCDEF";

        char *p=s;
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	617b      	str	r3, [r7, #20]
        unsigned int i;
        char tmp;

        // get digits
        do {
                *s++=hexChars[number % base];
 800786e:	68bb      	ldr	r3, [r7, #8]
 8007870:	687a      	ldr	r2, [r7, #4]
 8007872:	fbb3 f2f2 	udiv	r2, r3, r2
 8007876:	6879      	ldr	r1, [r7, #4]
 8007878:	fb01 f202 	mul.w	r2, r1, r2
 800787c:	1a9a      	subs	r2, r3, r2
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	1c59      	adds	r1, r3, #1
 8007882:	60f9      	str	r1, [r7, #12]
 8007884:	4935      	ldr	r1, [pc, #212]	; (800795c <num2str+0x100>)
 8007886:	5c8a      	ldrb	r2, [r1, r2]
 8007888:	701a      	strb	r2, [r3, #0]
        } while (number /= base);
 800788a:	68ba      	ldr	r2, [r7, #8]
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007892:	60bb      	str	r3, [r7, #8]
 8007894:	68bb      	ldr	r3, [r7, #8]
 8007896:	2b00      	cmp	r3, #0
 8007898:	d1e9      	bne.n	800786e <num2str+0x12>
        *s='\0';
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	2200      	movs	r2, #0
 800789e:	701a      	strb	r2, [r3, #0]

        // reverse string
        cnt=s-p;
 80078a0:	68fa      	ldr	r2, [r7, #12]
 80078a2:	697b      	ldr	r3, [r7, #20]
 80078a4:	1ad3      	subs	r3, r2, r3
 80078a6:	613b      	str	r3, [r7, #16]
        for (i=0;i<cnt/2;i++) {
 80078a8:	2300      	movs	r3, #0
 80078aa:	61fb      	str	r3, [r7, #28]
 80078ac:	e01a      	b.n	80078e4 <num2str+0x88>
                tmp=p[i]; p[i] = p[cnt-i-1]; p[cnt-i-1]=tmp;
 80078ae:	697a      	ldr	r2, [r7, #20]
 80078b0:	69fb      	ldr	r3, [r7, #28]
 80078b2:	4413      	add	r3, r2
 80078b4:	781b      	ldrb	r3, [r3, #0]
 80078b6:	76fb      	strb	r3, [r7, #27]
 80078b8:	693a      	ldr	r2, [r7, #16]
 80078ba:	69fb      	ldr	r3, [r7, #28]
 80078bc:	1ad3      	subs	r3, r2, r3
 80078be:	3b01      	subs	r3, #1
 80078c0:	697a      	ldr	r2, [r7, #20]
 80078c2:	441a      	add	r2, r3
 80078c4:	6979      	ldr	r1, [r7, #20]
 80078c6:	69fb      	ldr	r3, [r7, #28]
 80078c8:	440b      	add	r3, r1
 80078ca:	7812      	ldrb	r2, [r2, #0]
 80078cc:	701a      	strb	r2, [r3, #0]
 80078ce:	693a      	ldr	r2, [r7, #16]
 80078d0:	69fb      	ldr	r3, [r7, #28]
 80078d2:	1ad3      	subs	r3, r2, r3
 80078d4:	3b01      	subs	r3, #1
 80078d6:	697a      	ldr	r2, [r7, #20]
 80078d8:	4413      	add	r3, r2
 80078da:	7efa      	ldrb	r2, [r7, #27]
 80078dc:	701a      	strb	r2, [r3, #0]
        for (i=0;i<cnt/2;i++) {
 80078de:	69fb      	ldr	r3, [r7, #28]
 80078e0:	3301      	adds	r3, #1
 80078e2:	61fb      	str	r3, [r7, #28]
 80078e4:	693b      	ldr	r3, [r7, #16]
 80078e6:	085b      	lsrs	r3, r3, #1
 80078e8:	69fa      	ldr	r2, [r7, #28]
 80078ea:	429a      	cmp	r2, r3
 80078ec:	d3df      	bcc.n	80078ae <num2str+0x52>
        }

        // add extra space
        if (cnt<size) {
 80078ee:	693a      	ldr	r2, [r7, #16]
 80078f0:	683b      	ldr	r3, [r7, #0]
 80078f2:	429a      	cmp	r2, r3
 80078f4:	d22d      	bcs.n	8007952 <num2str+0xf6>
                for (i=cnt;i==0;i--)
 80078f6:	693b      	ldr	r3, [r7, #16]
 80078f8:	61fb      	str	r3, [r7, #28]
 80078fa:	e00e      	b.n	800791a <num2str+0xbe>
                		{p[i+size-cnt]=p[i];}
 80078fc:	697a      	ldr	r2, [r7, #20]
 80078fe:	69fb      	ldr	r3, [r7, #28]
 8007900:	441a      	add	r2, r3
 8007902:	69f9      	ldr	r1, [r7, #28]
 8007904:	683b      	ldr	r3, [r7, #0]
 8007906:	4419      	add	r1, r3
 8007908:	693b      	ldr	r3, [r7, #16]
 800790a:	1acb      	subs	r3, r1, r3
 800790c:	6979      	ldr	r1, [r7, #20]
 800790e:	440b      	add	r3, r1
 8007910:	7812      	ldrb	r2, [r2, #0]
 8007912:	701a      	strb	r2, [r3, #0]
                for (i=cnt;i==0;i--)
 8007914:	69fb      	ldr	r3, [r7, #28]
 8007916:	3b01      	subs	r3, #1
 8007918:	61fb      	str	r3, [r7, #28]
 800791a:	69fb      	ldr	r3, [r7, #28]
 800791c:	2b00      	cmp	r3, #0
 800791e:	d0ed      	beq.n	80078fc <num2str+0xa0>
                if (sp) tmp=' '; else tmp='0';
 8007920:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007922:	2b00      	cmp	r3, #0
 8007924:	d002      	beq.n	800792c <num2str+0xd0>
 8007926:	2320      	movs	r3, #32
 8007928:	76fb      	strb	r3, [r7, #27]
 800792a:	e001      	b.n	8007930 <num2str+0xd4>
 800792c:	2330      	movs	r3, #48	; 0x30
 800792e:	76fb      	strb	r3, [r7, #27]
                for (i=0;i<size-cnt;i++) p[i]=tmp;
 8007930:	2300      	movs	r3, #0
 8007932:	61fb      	str	r3, [r7, #28]
 8007934:	e007      	b.n	8007946 <num2str+0xea>
 8007936:	697a      	ldr	r2, [r7, #20]
 8007938:	69fb      	ldr	r3, [r7, #28]
 800793a:	4413      	add	r3, r2
 800793c:	7efa      	ldrb	r2, [r7, #27]
 800793e:	701a      	strb	r2, [r3, #0]
 8007940:	69fb      	ldr	r3, [r7, #28]
 8007942:	3301      	adds	r3, #1
 8007944:	61fb      	str	r3, [r7, #28]
 8007946:	683a      	ldr	r2, [r7, #0]
 8007948:	693b      	ldr	r3, [r7, #16]
 800794a:	1ad3      	subs	r3, r2, r3
 800794c:	69fa      	ldr	r2, [r7, #28]
 800794e:	429a      	cmp	r2, r3
 8007950:	d3f1      	bcc.n	8007936 <num2str+0xda>
        }
}
 8007952:	bf00      	nop
 8007954:	3724      	adds	r7, #36	; 0x24
 8007956:	46bd      	mov	sp, r7
 8007958:	bc80      	pop	{r7}
 800795a:	4770      	bx	lr
 800795c:	20000010 	.word	0x20000010

08007960 <str2num>:

//=================================================================
unsigned int str2num(char *s, unsigned base)
{
 8007960:	b480      	push	{r7}
 8007962:	b087      	sub	sp, #28
 8007964:	af00      	add	r7, sp, #0
 8007966:	6078      	str	r0, [r7, #4]
 8007968:	6039      	str	r1, [r7, #0]
	unsigned int u=0, d;
 800796a:	2300      	movs	r3, #0
 800796c:	617b      	str	r3, [r7, #20]
	char ch=*s++;
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	1c5a      	adds	r2, r3, #1
 8007972:	607a      	str	r2, [r7, #4]
 8007974:	781b      	ldrb	r3, [r3, #0]
 8007976:	73fb      	strb	r3, [r7, #15]
	while (ch) {
 8007978:	e02e      	b.n	80079d8 <str2num+0x78>
		if ((ch>='0') && (ch<='9')) d=ch-'0';
 800797a:	7bfb      	ldrb	r3, [r7, #15]
 800797c:	2b2f      	cmp	r3, #47	; 0x2f
 800797e:	d906      	bls.n	800798e <str2num+0x2e>
 8007980:	7bfb      	ldrb	r3, [r7, #15]
 8007982:	2b39      	cmp	r3, #57	; 0x39
 8007984:	d803      	bhi.n	800798e <str2num+0x2e>
 8007986:	7bfb      	ldrb	r3, [r7, #15]
 8007988:	3b30      	subs	r3, #48	; 0x30
 800798a:	613b      	str	r3, [r7, #16]
 800798c:	e018      	b.n	80079c0 <str2num+0x60>
		else if ((base==16) && (ch>='A') && (ch<='F')) d=ch-'A'+10;
 800798e:	683b      	ldr	r3, [r7, #0]
 8007990:	2b10      	cmp	r3, #16
 8007992:	d109      	bne.n	80079a8 <str2num+0x48>
 8007994:	7bfb      	ldrb	r3, [r7, #15]
 8007996:	2b40      	cmp	r3, #64	; 0x40
 8007998:	d906      	bls.n	80079a8 <str2num+0x48>
 800799a:	7bfb      	ldrb	r3, [r7, #15]
 800799c:	2b46      	cmp	r3, #70	; 0x46
 800799e:	d803      	bhi.n	80079a8 <str2num+0x48>
 80079a0:	7bfb      	ldrb	r3, [r7, #15]
 80079a2:	3b37      	subs	r3, #55	; 0x37
 80079a4:	613b      	str	r3, [r7, #16]
 80079a6:	e00b      	b.n	80079c0 <str2num+0x60>
		else if ((base==16) && (ch>='a') && (ch<='f')) d=ch-'a'+10;
 80079a8:	683b      	ldr	r3, [r7, #0]
 80079aa:	2b10      	cmp	r3, #16
 80079ac:	d117      	bne.n	80079de <str2num+0x7e>
 80079ae:	7bfb      	ldrb	r3, [r7, #15]
 80079b0:	2b60      	cmp	r3, #96	; 0x60
 80079b2:	d914      	bls.n	80079de <str2num+0x7e>
 80079b4:	7bfb      	ldrb	r3, [r7, #15]
 80079b6:	2b66      	cmp	r3, #102	; 0x66
 80079b8:	d811      	bhi.n	80079de <str2num+0x7e>
 80079ba:	7bfb      	ldrb	r3, [r7, #15]
 80079bc:	3b57      	subs	r3, #87	; 0x57
 80079be:	613b      	str	r3, [r7, #16]
		else break;
		u=d+base*u;
 80079c0:	683b      	ldr	r3, [r7, #0]
 80079c2:	697a      	ldr	r2, [r7, #20]
 80079c4:	fb02 f303 	mul.w	r3, r2, r3
 80079c8:	693a      	ldr	r2, [r7, #16]
 80079ca:	4413      	add	r3, r2
 80079cc:	617b      	str	r3, [r7, #20]
		ch=*s++;
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	1c5a      	adds	r2, r3, #1
 80079d2:	607a      	str	r2, [r7, #4]
 80079d4:	781b      	ldrb	r3, [r3, #0]
 80079d6:	73fb      	strb	r3, [r7, #15]
	while (ch) {
 80079d8:	7bfb      	ldrb	r3, [r7, #15]
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d1cd      	bne.n	800797a <str2num+0x1a>
	}
	return u;
 80079de:	697b      	ldr	r3, [r7, #20]
}
 80079e0:	4618      	mov	r0, r3
 80079e2:	371c      	adds	r7, #28
 80079e4:	46bd      	mov	sp, r7
 80079e6:	bc80      	pop	{r7}
 80079e8:	4770      	bx	lr

080079ea <reverse>:

//=================================================================
void reverse(char *str, int len)
{
 80079ea:	b480      	push	{r7}
 80079ec:	b087      	sub	sp, #28
 80079ee:	af00      	add	r7, sp, #0
 80079f0:	6078      	str	r0, [r7, #4]
 80079f2:	6039      	str	r1, [r7, #0]
    int i=0, j=len-1, temp;
 80079f4:	2300      	movs	r3, #0
 80079f6:	617b      	str	r3, [r7, #20]
 80079f8:	683b      	ldr	r3, [r7, #0]
 80079fa:	3b01      	subs	r3, #1
 80079fc:	613b      	str	r3, [r7, #16]
    while (i<j)
 80079fe:	e018      	b.n	8007a32 <reverse+0x48>
    {
        temp = str[i];
 8007a00:	697b      	ldr	r3, [r7, #20]
 8007a02:	687a      	ldr	r2, [r7, #4]
 8007a04:	4413      	add	r3, r2
 8007a06:	781b      	ldrb	r3, [r3, #0]
 8007a08:	60fb      	str	r3, [r7, #12]
        str[i] = str[j];
 8007a0a:	693b      	ldr	r3, [r7, #16]
 8007a0c:	687a      	ldr	r2, [r7, #4]
 8007a0e:	441a      	add	r2, r3
 8007a10:	697b      	ldr	r3, [r7, #20]
 8007a12:	6879      	ldr	r1, [r7, #4]
 8007a14:	440b      	add	r3, r1
 8007a16:	7812      	ldrb	r2, [r2, #0]
 8007a18:	701a      	strb	r2, [r3, #0]
        str[j] = temp;
 8007a1a:	693b      	ldr	r3, [r7, #16]
 8007a1c:	687a      	ldr	r2, [r7, #4]
 8007a1e:	4413      	add	r3, r2
 8007a20:	68fa      	ldr	r2, [r7, #12]
 8007a22:	b2d2      	uxtb	r2, r2
 8007a24:	701a      	strb	r2, [r3, #0]
        i++; j--;
 8007a26:	697b      	ldr	r3, [r7, #20]
 8007a28:	3301      	adds	r3, #1
 8007a2a:	617b      	str	r3, [r7, #20]
 8007a2c:	693b      	ldr	r3, [r7, #16]
 8007a2e:	3b01      	subs	r3, #1
 8007a30:	613b      	str	r3, [r7, #16]
    while (i<j)
 8007a32:	697a      	ldr	r2, [r7, #20]
 8007a34:	693b      	ldr	r3, [r7, #16]
 8007a36:	429a      	cmp	r2, r3
 8007a38:	dbe2      	blt.n	8007a00 <reverse+0x16>
    }
}
 8007a3a:	bf00      	nop
 8007a3c:	bf00      	nop
 8007a3e:	371c      	adds	r7, #28
 8007a40:	46bd      	mov	sp, r7
 8007a42:	bc80      	pop	{r7}
 8007a44:	4770      	bx	lr
	...

08007a48 <intToStr>:

//=================================================================
int intToStr(int x, char str[], int d)
{
 8007a48:	b580      	push	{r7, lr}
 8007a4a:	b086      	sub	sp, #24
 8007a4c:	af00      	add	r7, sp, #0
 8007a4e:	60f8      	str	r0, [r7, #12]
 8007a50:	60b9      	str	r1, [r7, #8]
 8007a52:	607a      	str	r2, [r7, #4]
    int i = 0;
 8007a54:	2300      	movs	r3, #0
 8007a56:	617b      	str	r3, [r7, #20]
    while (x)
 8007a58:	e01d      	b.n	8007a96 <intToStr+0x4e>
    {
        str[i++] = (x%10) + '0';
 8007a5a:	68fa      	ldr	r2, [r7, #12]
 8007a5c:	4b1d      	ldr	r3, [pc, #116]	; (8007ad4 <intToStr+0x8c>)
 8007a5e:	fb83 1302 	smull	r1, r3, r3, r2
 8007a62:	1099      	asrs	r1, r3, #2
 8007a64:	17d3      	asrs	r3, r2, #31
 8007a66:	1ac9      	subs	r1, r1, r3
 8007a68:	460b      	mov	r3, r1
 8007a6a:	009b      	lsls	r3, r3, #2
 8007a6c:	440b      	add	r3, r1
 8007a6e:	005b      	lsls	r3, r3, #1
 8007a70:	1ad1      	subs	r1, r2, r3
 8007a72:	b2ca      	uxtb	r2, r1
 8007a74:	697b      	ldr	r3, [r7, #20]
 8007a76:	1c59      	adds	r1, r3, #1
 8007a78:	6179      	str	r1, [r7, #20]
 8007a7a:	4619      	mov	r1, r3
 8007a7c:	68bb      	ldr	r3, [r7, #8]
 8007a7e:	440b      	add	r3, r1
 8007a80:	3230      	adds	r2, #48	; 0x30
 8007a82:	b2d2      	uxtb	r2, r2
 8007a84:	701a      	strb	r2, [r3, #0]
        x = x/10;
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	4a12      	ldr	r2, [pc, #72]	; (8007ad4 <intToStr+0x8c>)
 8007a8a:	fb82 1203 	smull	r1, r2, r2, r3
 8007a8e:	1092      	asrs	r2, r2, #2
 8007a90:	17db      	asrs	r3, r3, #31
 8007a92:	1ad3      	subs	r3, r2, r3
 8007a94:	60fb      	str	r3, [r7, #12]
    while (x)
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d1de      	bne.n	8007a5a <intToStr+0x12>
    }

    // If number of digits required is more, then
    // add 0s at the beginning
    while (i < d)
 8007a9c:	e007      	b.n	8007aae <intToStr+0x66>
        str[i++] = '0';
 8007a9e:	697b      	ldr	r3, [r7, #20]
 8007aa0:	1c5a      	adds	r2, r3, #1
 8007aa2:	617a      	str	r2, [r7, #20]
 8007aa4:	461a      	mov	r2, r3
 8007aa6:	68bb      	ldr	r3, [r7, #8]
 8007aa8:	4413      	add	r3, r2
 8007aaa:	2230      	movs	r2, #48	; 0x30
 8007aac:	701a      	strb	r2, [r3, #0]
    while (i < d)
 8007aae:	697a      	ldr	r2, [r7, #20]
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	429a      	cmp	r2, r3
 8007ab4:	dbf3      	blt.n	8007a9e <intToStr+0x56>

    reverse(str, i);
 8007ab6:	6979      	ldr	r1, [r7, #20]
 8007ab8:	68b8      	ldr	r0, [r7, #8]
 8007aba:	f7ff ff96 	bl	80079ea <reverse>
    str[i] = '\0';
 8007abe:	697b      	ldr	r3, [r7, #20]
 8007ac0:	68ba      	ldr	r2, [r7, #8]
 8007ac2:	4413      	add	r3, r2
 8007ac4:	2200      	movs	r2, #0
 8007ac6:	701a      	strb	r2, [r3, #0]
    return i;
 8007ac8:	697b      	ldr	r3, [r7, #20]
}
 8007aca:	4618      	mov	r0, r3
 8007acc:	3718      	adds	r7, #24
 8007ace:	46bd      	mov	sp, r7
 8007ad0:	bd80      	pop	{r7, pc}
 8007ad2:	bf00      	nop
 8007ad4:	66666667 	.word	0x66666667

08007ad8 <float2str>:
//=================================================================
void float2str( char *res, float n, int afterpoint)
{
 8007ad8:	b580      	push	{r7, lr}
 8007ada:	b088      	sub	sp, #32
 8007adc:	af00      	add	r7, sp, #0
 8007ade:	60f8      	str	r0, [r7, #12]
 8007ae0:	60b9      	str	r1, [r7, #8]
 8007ae2:	607a      	str	r2, [r7, #4]
    // Extract integer part
    int ipart = (int)n;
 8007ae4:	68b8      	ldr	r0, [r7, #8]
 8007ae6:	f7f9 f9ad 	bl	8000e44 <__aeabi_f2iz>
 8007aea:	4603      	mov	r3, r0
 8007aec:	61fb      	str	r3, [r7, #28]

    // Extract floating part
    float fpart = n - (float)ipart;
 8007aee:	69f8      	ldr	r0, [r7, #28]
 8007af0:	f7f9 f804 	bl	8000afc <__aeabi_i2f>
 8007af4:	4603      	mov	r3, r0
 8007af6:	4619      	mov	r1, r3
 8007af8:	68b8      	ldr	r0, [r7, #8]
 8007afa:	f7f8 ff49 	bl	8000990 <__aeabi_fsub>
 8007afe:	4603      	mov	r3, r0
 8007b00:	61bb      	str	r3, [r7, #24]

    // convert integer part to string
    int i = intToStr(ipart, res, 0);
 8007b02:	2200      	movs	r2, #0
 8007b04:	68f9      	ldr	r1, [r7, #12]
 8007b06:	69f8      	ldr	r0, [r7, #28]
 8007b08:	f7ff ff9e 	bl	8007a48 <intToStr>
 8007b0c:	6178      	str	r0, [r7, #20]

    // check for display option after point
    if (afterpoint != 0)
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d022      	beq.n	8007b5a <float2str+0x82>
    {
        res[i] = '.';  // add dot
 8007b14:	697b      	ldr	r3, [r7, #20]
 8007b16:	68fa      	ldr	r2, [r7, #12]
 8007b18:	4413      	add	r3, r2
 8007b1a:	222e      	movs	r2, #46	; 0x2e
 8007b1c:	701a      	strb	r2, [r3, #0]

        // Get the value of fraction part upto given no.
        // of points after dot. The third parameter is needed
        // to handle cases like 233.007
        fpart = fpart * (float)myPow(10.0, afterpoint);
 8007b1e:	687a      	ldr	r2, [r7, #4]
 8007b20:	f04f 0000 	mov.w	r0, #0
 8007b24:	490f      	ldr	r1, [pc, #60]	; (8007b64 <float2str+0x8c>)
 8007b26:	f000 f81f 	bl	8007b68 <myPow>
 8007b2a:	4602      	mov	r2, r0
 8007b2c:	460b      	mov	r3, r1
 8007b2e:	4610      	mov	r0, r2
 8007b30:	4619      	mov	r1, r3
 8007b32:	f7f8 fed9 	bl	80008e8 <__aeabi_d2f>
 8007b36:	4603      	mov	r3, r0
 8007b38:	4619      	mov	r1, r3
 8007b3a:	69b8      	ldr	r0, [r7, #24]
 8007b3c:	f7f9 f832 	bl	8000ba4 <__aeabi_fmul>
 8007b40:	4603      	mov	r3, r0
 8007b42:	61bb      	str	r3, [r7, #24]

        intToStr((int)fpart, res + i + 1, afterpoint);
 8007b44:	69b8      	ldr	r0, [r7, #24]
 8007b46:	f7f9 f97d 	bl	8000e44 <__aeabi_f2iz>
 8007b4a:	697b      	ldr	r3, [r7, #20]
 8007b4c:	3301      	adds	r3, #1
 8007b4e:	68fa      	ldr	r2, [r7, #12]
 8007b50:	4413      	add	r3, r2
 8007b52:	687a      	ldr	r2, [r7, #4]
 8007b54:	4619      	mov	r1, r3
 8007b56:	f7ff ff77 	bl	8007a48 <intToStr>
    }
}
 8007b5a:	bf00      	nop
 8007b5c:	3720      	adds	r7, #32
 8007b5e:	46bd      	mov	sp, r7
 8007b60:	bd80      	pop	{r7, pc}
 8007b62:	bf00      	nop
 8007b64:	40240000 	.word	0x40240000

08007b68 <myPow>:
//=================================================================
double myPow(double x, int n) {
 8007b68:	b580      	push	{r7, lr}
 8007b6a:	b088      	sub	sp, #32
 8007b6c:	af00      	add	r7, sp, #0
 8007b6e:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8007b72:	607a      	str	r2, [r7, #4]
    unsigned int p = abs(n);
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	bfb8      	it	lt
 8007b7a:	425b      	neglt	r3, r3
 8007b7c:	61fb      	str	r3, [r7, #28]
    double result = 1;
 8007b7e:	f04f 0200 	mov.w	r2, #0
 8007b82:	4b1b      	ldr	r3, [pc, #108]	; (8007bf0 <myPow+0x88>)
 8007b84:	e9c7 2304 	strd	r2, r3, [r7, #16]
    while(p > 0)
 8007b88:	e01b      	b.n	8007bc2 <myPow+0x5a>
    {
        if(p & 1) // if bit is set
 8007b8a:	69fb      	ldr	r3, [r7, #28]
 8007b8c:	f003 0301 	and.w	r3, r3, #1
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d009      	beq.n	8007ba8 <myPow+0x40>
        {
            result = result * x;
 8007b94:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007b98:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8007b9c:	f7f8 fc92 	bl	80004c4 <__aeabi_dmul>
 8007ba0:	4602      	mov	r2, r0
 8007ba2:	460b      	mov	r3, r1
 8007ba4:	e9c7 2304 	strd	r2, r3, [r7, #16]
        }
        p = p >> 1;
 8007ba8:	69fb      	ldr	r3, [r7, #28]
 8007baa:	085b      	lsrs	r3, r3, #1
 8007bac:	61fb      	str	r3, [r7, #28]
        x = x * x;
 8007bae:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007bb2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007bb6:	f7f8 fc85 	bl	80004c4 <__aeabi_dmul>
 8007bba:	4602      	mov	r2, r0
 8007bbc:	460b      	mov	r3, r1
 8007bbe:	e9c7 2302 	strd	r2, r3, [r7, #8]
    while(p > 0)
 8007bc2:	69fb      	ldr	r3, [r7, #28]
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d1e0      	bne.n	8007b8a <myPow+0x22>
    }

    if(n < 0)
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	da09      	bge.n	8007be2 <myPow+0x7a>
    {
        return 1/result;
 8007bce:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8007bd2:	f04f 0000 	mov.w	r0, #0
 8007bd6:	4906      	ldr	r1, [pc, #24]	; (8007bf0 <myPow+0x88>)
 8007bd8:	f7f8 fd9e 	bl	8000718 <__aeabi_ddiv>
 8007bdc:	4602      	mov	r2, r0
 8007bde:	460b      	mov	r3, r1
 8007be0:	e001      	b.n	8007be6 <myPow+0x7e>
    }
    return result;
 8007be2:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
}
 8007be6:	4610      	mov	r0, r2
 8007be8:	4619      	mov	r1, r3
 8007bea:	3720      	adds	r7, #32
 8007bec:	46bd      	mov	sp, r7
 8007bee:	bd80      	pop	{r7, pc}
 8007bf0:	3ff00000 	.word	0x3ff00000

08007bf4 <VL6180x_UpdateByte>:
static int VL6180x_RangeStaticInit(VL6180xDev_t dev);
static int  VL6180x_UpscaleStaticInit(VL6180xDev_t dev);

//==========================================================

int VL6180x_UpdateByte(VL6180xDev_t dev, uint16_t index, uint8_t AndData, uint8_t OrData){
 8007bf4:	b590      	push	{r4, r7, lr}
 8007bf6:	b085      	sub	sp, #20
 8007bf8:	af00      	add	r7, sp, #0
 8007bfa:	4604      	mov	r4, r0
 8007bfc:	4608      	mov	r0, r1
 8007bfe:	4611      	mov	r1, r2
 8007c00:	461a      	mov	r2, r3
 8007c02:	4623      	mov	r3, r4
 8007c04:	71fb      	strb	r3, [r7, #7]
 8007c06:	4603      	mov	r3, r0
 8007c08:	80bb      	strh	r3, [r7, #4]
 8007c0a:	460b      	mov	r3, r1
 8007c0c:	71bb      	strb	r3, [r7, #6]
 8007c0e:	4613      	mov	r3, r2
 8007c10:	70fb      	strb	r3, [r7, #3]

    int  status;
    uint8_t buffer[3];


    buffer[0]=index>>8;
 8007c12:	88bb      	ldrh	r3, [r7, #4]
 8007c14:	0a1b      	lsrs	r3, r3, #8
 8007c16:	b29b      	uxth	r3, r3
 8007c18:	b2db      	uxtb	r3, r3
 8007c1a:	723b      	strb	r3, [r7, #8]
    buffer[1]=index&0xFF;
 8007c1c:	88bb      	ldrh	r3, [r7, #4]
 8007c1e:	b2db      	uxtb	r3, r3
 8007c20:	727b      	strb	r3, [r7, #9]

    status=VL6180x_I2CWrite(dev, (uint8_t *)buffer,(uint8_t)2);
 8007c22:	f107 0108 	add.w	r1, r7, #8
 8007c26:	79fb      	ldrb	r3, [r7, #7]
 8007c28:	2202      	movs	r2, #2
 8007c2a:	4618      	mov	r0, r3
 8007c2c:	f002 f94e 	bl	8009ecc <VL6180x_I2CWrite>
 8007c30:	60f8      	str	r0, [r7, #12]
    if( !status ){
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d11b      	bne.n	8007c70 <VL6180x_UpdateByte+0x7c>
        /* read data direct onto buffer */
        status=VL6180x_I2CRead(dev, &buffer[2],1);
 8007c38:	f107 0308 	add.w	r3, r7, #8
 8007c3c:	1c99      	adds	r1, r3, #2
 8007c3e:	79fb      	ldrb	r3, [r7, #7]
 8007c40:	2201      	movs	r2, #1
 8007c42:	4618      	mov	r0, r3
 8007c44:	f002 f957 	bl	8009ef6 <VL6180x_I2CRead>
 8007c48:	60f8      	str	r0, [r7, #12]
        if( !status ){
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d10f      	bne.n	8007c70 <VL6180x_UpdateByte+0x7c>
            buffer[2]=(buffer[2]&AndData)|OrData;
 8007c50:	7aba      	ldrb	r2, [r7, #10]
 8007c52:	79bb      	ldrb	r3, [r7, #6]
 8007c54:	4013      	ands	r3, r2
 8007c56:	b2da      	uxtb	r2, r3
 8007c58:	78fb      	ldrb	r3, [r7, #3]
 8007c5a:	4313      	orrs	r3, r2
 8007c5c:	b2db      	uxtb	r3, r3
 8007c5e:	72bb      	strb	r3, [r7, #10]
            status=VL6180x_I2CWrite(dev, buffer, (uint8_t)3);
 8007c60:	f107 0108 	add.w	r1, r7, #8
 8007c64:	79fb      	ldrb	r3, [r7, #7]
 8007c66:	2203      	movs	r2, #3
 8007c68:	4618      	mov	r0, r3
 8007c6a:	f002 f92f 	bl	8009ecc <VL6180x_I2CWrite>
 8007c6e:	60f8      	str	r0, [r7, #12]
        }
    }



    return status;
 8007c70:	68fb      	ldr	r3, [r7, #12]
}
 8007c72:	4618      	mov	r0, r3
 8007c74:	3714      	adds	r7, #20
 8007c76:	46bd      	mov	sp, r7
 8007c78:	bd90      	pop	{r4, r7, pc}

08007c7a <VL6180x_WaitDeviceBooted>:
//================================================================

int VL6180x_WaitDeviceBooted(VL6180xDev_t dev)
{
 8007c7a:	b580      	push	{r7, lr}
 8007c7c:	b084      	sub	sp, #16
 8007c7e:	af00      	add	r7, sp, #0
 8007c80:	4603      	mov	r3, r0
 8007c82:	71fb      	strb	r3, [r7, #7]
	uint8_t FreshOutReset;
	int status;

	do {
		status = i2c1_ReadReg16Byte(VL6180x_I2C_ADDRESS, SYSTEM_FRESH_OUT_OF_RESET, &FreshOutReset);
 8007c84:	f107 030b 	add.w	r3, r7, #11
 8007c88:	461a      	mov	r2, r3
 8007c8a:	2116      	movs	r1, #22
 8007c8c:	2052      	movs	r0, #82	; 0x52
 8007c8e:	f7fe fa1d 	bl	80060cc <i2c1_ReadReg16Byte>
 8007c92:	60f8      	str	r0, [r7, #12]
	} while (FreshOutReset != 1 && status == 0);
 8007c94:	7afb      	ldrb	r3, [r7, #11]
 8007c96:	2b01      	cmp	r3, #1
 8007c98:	d002      	beq.n	8007ca0 <VL6180x_WaitDeviceBooted+0x26>
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d0f1      	beq.n	8007c84 <VL6180x_WaitDeviceBooted+0xa>

	return status;
 8007ca0:	68fb      	ldr	r3, [r7, #12]
}
 8007ca2:	4618      	mov	r0, r3
 8007ca4:	3710      	adds	r7, #16
 8007ca6:	46bd      	mov	sp, r7
 8007ca8:	bd80      	pop	{r7, pc}

08007caa <VL6180x_Identification>:

//================================================================**

uint8_t VL6180x_Identification(VL6180xDev_t dev)
{
 8007caa:	b580      	push	{r7, lr}
 8007cac:	b084      	sub	sp, #16
 8007cae:	af00      	add	r7, sp, #0
 8007cb0:	4603      	mov	r3, r0
 8007cb2:	71fb      	strb	r3, [r7, #7]
	uint8_t Id;
	i2c1_ReadReg16Byte(VL6180x_I2C_ADDRESS, IDENTIFICATION_MODEL_ID, &Id);
 8007cb4:	f107 030f 	add.w	r3, r7, #15
 8007cb8:	461a      	mov	r2, r3
 8007cba:	2100      	movs	r1, #0
 8007cbc:	2052      	movs	r0, #82	; 0x52
 8007cbe:	f7fe fa05 	bl	80060cc <i2c1_ReadReg16Byte>
	return Id;
 8007cc2:	7bfb      	ldrb	r3, [r7, #15]
}
 8007cc4:	4618      	mov	r0, r3
 8007cc6:	3710      	adds	r7, #16
 8007cc8:	46bd      	mov	sp, r7
 8007cca:	bd80      	pop	{r7, pc}

08007ccc <VL6180x_InitData>:

//================================================================
int VL6180x_InitData(VL6180xDev_t dev)
{
 8007ccc:	b580      	push	{r7, lr}
 8007cce:	b088      	sub	sp, #32
 8007cd0:	af00      	add	r7, sp, #0
 8007cd2:	4603      	mov	r3, r0
 8007cd4:	71fb      	strb	r3, [r7, #7]
	uint32_t CalValue;
	uint16_t u16;
	uint32_t XTalkCompRate_KCps;


	VL6180xDevDataSet(dev, EceFactorM, DEF_ECE_FACTOR_M);
 8007cd6:	4b49      	ldr	r3, [pc, #292]	; (8007dfc <VL6180x_InitData+0x130>)
 8007cd8:	2255      	movs	r2, #85	; 0x55
 8007cda:	811a      	strh	r2, [r3, #8]
	VL6180xDevDataSet(dev, EceFactorD, DEF_ECE_FACTOR_D);
 8007cdc:	4b47      	ldr	r3, [pc, #284]	; (8007dfc <VL6180x_InitData+0x130>)
 8007cde:	2264      	movs	r2, #100	; 0x64
 8007ce0:	815a      	strh	r2, [r3, #10]

	VL6180xDevDataSet(dev, RangeIgnore.Enabled, 0);
 8007ce2:	4b46      	ldr	r3, [pc, #280]	; (8007dfc <VL6180x_InitData+0x130>)
 8007ce4:	2200      	movs	r2, #0
 8007ce6:	741a      	strb	r2, [r3, #16]

#ifdef VL6180x_HAVE_UPSCALE_DATA
	VL6180xDevDataSet(dev, UpscaleFactor,  DEF_UPSCALE);
 8007ce8:	4b44      	ldr	r3, [pc, #272]	; (8007dfc <VL6180x_InitData+0x130>)
 8007cea:	2201      	movs	r2, #1
 8007cec:	761a      	strb	r2, [r3, #24]
#endif

#ifdef VL6180x_HAVE_ALS_DATA
	VL6180xDevDataSet(dev, IntegrationPeriod, DEF_INT_PEFRIOD);
 8007cee:	4b43      	ldr	r3, [pc, #268]	; (8007dfc <VL6180x_InitData+0x130>)
 8007cf0:	2264      	movs	r2, #100	; 0x64
 8007cf2:	825a      	strh	r2, [r3, #18]
	VL6180xDevDataSet(dev, AlsGainCode, DEF_ALS_GAIN);
 8007cf4:	4b41      	ldr	r3, [pc, #260]	; (8007dfc <VL6180x_InitData+0x130>)
 8007cf6:	2201      	movs	r2, #1
 8007cf8:	829a      	strh	r2, [r3, #20]
	VL6180xDevDataSet(dev, AlsScaler, DEF_ALS_SCALER);
 8007cfa:	4b40      	ldr	r3, [pc, #256]	; (8007dfc <VL6180x_InitData+0x130>)
 8007cfc:	2201      	movs	r2, #1
 8007cfe:	82da      	strh	r2, [r3, #22]
#endif

#ifdef VL6180x_HAVE_WRAP_AROUND_DATA
	VL6180xDevDataSet(dev, WrapAroundFilterActive, (VL6180x_WRAP_AROUND_FILTER_SUPPORT > 0));
 8007d00:	4b3e      	ldr	r3, [pc, #248]	; (8007dfc <VL6180x_InitData+0x130>)
 8007d02:	2201      	movs	r2, #1
 8007d04:	765a      	strb	r2, [r3, #25]
	VL6180xDevDataSet(dev, DMaxEnable, DEF_DMAX_ENABLE);
 8007d06:	4b3d      	ldr	r3, [pc, #244]	; (8007dfc <VL6180x_InitData+0x130>)
 8007d08:	2201      	movs	r2, #1
 8007d0a:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
#endif

	_DMax_OneTimeInit(dev);
 8007d0e:	79fb      	ldrb	r3, [r7, #7]
 8007d10:	4618      	mov	r0, r3
 8007d12:	f001 fee5 	bl	8009ae0 <_DMax_OneTimeInit>
	do {

		HAL_Delay(500);
 8007d16:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8007d1a:	f7f9 f93b 	bl	8000f94 <HAL_Delay>
		/* backup offset initial value from nvm these must be done prior any over call that use offset */
		status = i2c1_ReadReg16Byte(VL6180x_I2C_ADDRESS, SYSRANGE_PART_TO_PART_RANGE_OFFSET, (uint8_t *)&offset);
 8007d1e:	f107 0313 	add.w	r3, r7, #19
 8007d22:	461a      	mov	r2, r3
 8007d24:	2124      	movs	r1, #36	; 0x24
 8007d26:	2052      	movs	r0, #82	; 0x52
 8007d28:	f7fe f9d0 	bl	80060cc <i2c1_ReadReg16Byte>
 8007d2c:	61f8      	str	r0, [r7, #28]
		if (status) {
 8007d2e:	69fb      	ldr	r3, [r7, #28]
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d003      	beq.n	8007d3c <VL6180x_InitData+0x70>
			term_printf("SYSRANGE_PART_TO_PART_RANGE_OFFSET rd fail\n\r");
 8007d34:	4832      	ldr	r0, [pc, #200]	; (8007e00 <VL6180x_InitData+0x134>)
 8007d36:	f7fe fb25 	bl	8006384 <term_printf>
			break;
 8007d3a:	e05a      	b.n	8007df2 <VL6180x_InitData+0x126>
		}
		VL6180xDevDataSet(dev, Part2PartOffsetNVM, offset);
 8007d3c:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8007d40:	4b2e      	ldr	r3, [pc, #184]	; (8007dfc <VL6180x_InitData+0x130>)
 8007d42:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

		status = i2c1_ReadReg16Word32(VL6180x_I2C_ADDRESS, SYSRANGE_RANGE_IGNORE_THRESHOLD, &CalValue);
 8007d46:	f107 030c 	add.w	r3, r7, #12
 8007d4a:	461a      	mov	r2, r3
 8007d4c:	2126      	movs	r1, #38	; 0x26
 8007d4e:	2052      	movs	r0, #82	; 0x52
 8007d50:	f7fe fa30 	bl	80061b4 <i2c1_ReadReg16Word32>
 8007d54:	61f8      	str	r0, [r7, #28]
		if (status) {
 8007d56:	69fb      	ldr	r3, [r7, #28]
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d003      	beq.n	8007d64 <VL6180x_InitData+0x98>
			term_printf("Part2PartAmbNVM rd fail\n\r");
 8007d5c:	4829      	ldr	r0, [pc, #164]	; (8007e04 <VL6180x_InitData+0x138>)
 8007d5e:	f7fe fb11 	bl	8006384 <term_printf>
			break;
 8007d62:	e046      	b.n	8007df2 <VL6180x_InitData+0x126>
		}
		if ((CalValue&0xFFFF0000) == 0) {
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	0c1b      	lsrs	r3, r3, #16
 8007d68:	041b      	lsls	r3, r3, #16
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d101      	bne.n	8007d72 <VL6180x_InitData+0xa6>
			CalValue = 0x00CE03F8;
 8007d6e:	4b26      	ldr	r3, [pc, #152]	; (8007e08 <VL6180x_InitData+0x13c>)
 8007d70:	60fb      	str	r3, [r7, #12]
		}
		VL6180xDevDataSet(dev, Part2PartAmbNVM, CalValue);
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	4a21      	ldr	r2, [pc, #132]	; (8007dfc <VL6180x_InitData+0x130>)
 8007d76:	6013      	str	r3, [r2, #0]

		status = i2c1_ReadReg16Word16(VL6180x_I2C_ADDRESS, SYSRANGE_CROSSTALK_COMPENSATION_RATE , &u16);
 8007d78:	f107 030a 	add.w	r3, r7, #10
 8007d7c:	461a      	mov	r2, r3
 8007d7e:	211e      	movs	r1, #30
 8007d80:	2052      	movs	r0, #82	; 0x52
 8007d82:	f7fe f9d9 	bl	8006138 <i2c1_ReadReg16Word16>
 8007d86:	61f8      	str	r0, [r7, #28]
		if (status) {
 8007d88:	69fb      	ldr	r3, [r7, #28]
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d003      	beq.n	8007d96 <VL6180x_InitData+0xca>
			term_printf("SYSRANGE_CROSSTALK_COMPENSATION_RATE rd fail\n\r ");
 8007d8e:	481f      	ldr	r0, [pc, #124]	; (8007e0c <VL6180x_InitData+0x140>)
 8007d90:	f7fe faf8 	bl	8006384 <term_printf>
			break;
 8007d94:	e02d      	b.n	8007df2 <VL6180x_InitData+0x126>
		}
		XTalkCompRate_KCps = Fix7_2_KCPs(u16);
 8007d96:	897b      	ldrh	r3, [r7, #10]
 8007d98:	461a      	mov	r2, r3
 8007d9a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007d9e:	fb02 f303 	mul.w	r3, r2, r3
 8007da2:	09db      	lsrs	r3, r3, #7
 8007da4:	61bb      	str	r3, [r7, #24]
		VL6180xDevDataSet(dev, XTalkCompRate_KCps, XTalkCompRate_KCps);
 8007da6:	4a15      	ldr	r2, [pc, #84]	; (8007dfc <VL6180x_InitData+0x130>)
 8007da8:	69bb      	ldr	r3, [r7, #24]
 8007daa:	6053      	str	r3, [r2, #4]

		dmax_status = _DMax_InitData(dev);
 8007dac:	79fb      	ldrb	r3, [r7, #7]
 8007dae:	4618      	mov	r0, r3
 8007db0:	f001 fef4 	bl	8009b9c <_DMax_InitData>
 8007db4:	6178      	str	r0, [r7, #20]
		if (dmax_status < 0) {
 8007db6:	697b      	ldr	r3, [r7, #20]
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	da03      	bge.n	8007dc4 <VL6180x_InitData+0xf8>
			term_printf("DMax init failure\n\r");
 8007dbc:	4814      	ldr	r0, [pc, #80]	; (8007e10 <VL6180x_InitData+0x144>)
 8007dbe:	f7fe fae1 	bl	8006384 <term_printf>
			break;
 8007dc2:	e016      	b.n	8007df2 <VL6180x_InitData+0x126>
		}

		/* Read or wait for fresh out of reset  */
		status = i2c1_ReadReg16Byte(VL6180x_I2C_ADDRESS, SYSTEM_FRESH_OUT_OF_RESET, &FreshOutReset);
 8007dc4:	f107 0312 	add.w	r3, r7, #18
 8007dc8:	461a      	mov	r2, r3
 8007dca:	2116      	movs	r1, #22
 8007dcc:	2052      	movs	r0, #82	; 0x52
 8007dce:	f7fe f97d 	bl	80060cc <i2c1_ReadReg16Byte>
 8007dd2:	61f8      	str	r0, [r7, #28]
		if (status) {
 8007dd4:	69fb      	ldr	r3, [r7, #28]
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d003      	beq.n	8007de2 <VL6180x_InitData+0x116>
			term_printf("SYSTEM_FRESH_OUT_OF_RESET rd fail\n\r");
 8007dda:	480e      	ldr	r0, [pc, #56]	; (8007e14 <VL6180x_InitData+0x148>)
 8007ddc:	f7fe fad2 	bl	8006384 <term_printf>
			break;
 8007de0:	e007      	b.n	8007df2 <VL6180x_InitData+0x126>
		}
		if (FreshOutReset != 1 || dmax_status)
 8007de2:	7cbb      	ldrb	r3, [r7, #18]
 8007de4:	2b01      	cmp	r3, #1
 8007de6:	d102      	bne.n	8007dee <VL6180x_InitData+0x122>
 8007de8:	697b      	ldr	r3, [r7, #20]
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d001      	beq.n	8007df2 <VL6180x_InitData+0x126>
			status = CALIBRATION_WARNING;
 8007dee:	2301      	movs	r3, #1
 8007df0:	61fb      	str	r3, [r7, #28]

	} while (0);

	return status;
 8007df2:	69fb      	ldr	r3, [r7, #28]
}
 8007df4:	4618      	mov	r0, r3
 8007df6:	3720      	adds	r7, #32
 8007df8:	46bd      	mov	sp, r7
 8007dfa:	bd80      	pop	{r7, pc}
 8007dfc:	20000070 	.word	0x20000070
 8007e00:	0800b840 	.word	0x0800b840
 8007e04:	0800b870 	.word	0x0800b870
 8007e08:	00ce03f8 	.word	0x00ce03f8
 8007e0c:	0800b88c 	.word	0x0800b88c
 8007e10:	0800b8bc 	.word	0x0800b8bc
 8007e14:	0800b8d0 	.word	0x0800b8d0

08007e18 <VL6180x_GetUpperLimit>:
	}
	return status;
}
//======================================================================
uint16_t VL6180x_GetUpperLimit(VL6180xDev_t dev)
{
 8007e18:	b480      	push	{r7}
 8007e1a:	b085      	sub	sp, #20
 8007e1c:	af00      	add	r7, sp, #0
 8007e1e:	4603      	mov	r3, r0
 8007e20:	71fb      	strb	r3, [r7, #7]
	uint16_t limit;
	int scaling;
	scaling = _GetUpscale(dev);
 8007e22:	4b07      	ldr	r3, [pc, #28]	; (8007e40 <VL6180x_GetUpperLimit+0x28>)
 8007e24:	7e1b      	ldrb	r3, [r3, #24]
 8007e26:	60fb      	str	r3, [r7, #12]
	limit = UpperLimitLookUP[scaling - 1];
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	3b01      	subs	r3, #1
 8007e2c:	4a05      	ldr	r2, [pc, #20]	; (8007e44 <VL6180x_GetUpperLimit+0x2c>)
 8007e2e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007e32:	817b      	strh	r3, [r7, #10]
	return limit;
 8007e34:	897b      	ldrh	r3, [r7, #10]
}
 8007e36:	4618      	mov	r0, r3
 8007e38:	3714      	adds	r7, #20
 8007e3a:	46bd      	mov	sp, r7
 8007e3c:	bc80      	pop	{r7}
 8007e3e:	4770      	bx	lr
 8007e40:	20000070 	.word	0x20000070
 8007e44:	0800b694 	.word	0x0800b694

08007e48 <VL6180x_StaticInit>:
//======================================================================
int VL6180x_StaticInit(VL6180xDev_t dev)
{
 8007e48:	b580      	push	{r7, lr}
 8007e4a:	b086      	sub	sp, #24
 8007e4c:	af00      	add	r7, sp, #0
 8007e4e:	4603      	mov	r3, r0
 8007e50:	71fb      	strb	r3, [r7, #7]
	int status = 0, init_status;
 8007e52:	2300      	movs	r3, #0
 8007e54:	617b      	str	r3, [r7, #20]
	if (_GetUpscale(dev) == 1 && !(VL6180x_UPSCALE_SUPPORT < 0))
		init_status = VL6180x_RangeStaticInit(dev);
	else
		init_status = VL6180x_UpscaleStaticInit(dev);
 8007e56:	79fb      	ldrb	r3, [r7, #7]
 8007e58:	4618      	mov	r0, r3
 8007e5a:	f000 fdcf 	bl	80089fc <VL6180x_UpscaleStaticInit>
 8007e5e:	6138      	str	r0, [r7, #16]

	if (init_status < 0) {
 8007e60:	693b      	ldr	r3, [r7, #16]
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	da03      	bge.n	8007e6e <VL6180x_StaticInit+0x26>
		term_printf("StaticInit fail");
 8007e66:	4822      	ldr	r0, [pc, #136]	; (8007ef0 <VL6180x_StaticInit+0xa8>)
 8007e68:	f7fe fa8c 	bl	8006384 <term_printf>
		goto error;
 8007e6c:	e03a      	b.n	8007ee4 <VL6180x_StaticInit+0x9c>
	} else if (init_status > 0) {
 8007e6e:	693b      	ldr	r3, [r7, #16]
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	dd02      	ble.n	8007e7a <VL6180x_StaticInit+0x32>
		term_printf("StaticInit warning");
 8007e74:	481f      	ldr	r0, [pc, #124]	; (8007ef4 <VL6180x_StaticInit+0xac>)
 8007e76:	f7fe fa85 	bl	8006384 <term_printf>
	#if REFRESH_CACHED_DATA_AFTER_INIT
	#ifdef VL6180x_HAVE_ALS_DATA
	/* update cached value after tuning applied */
	do {
		uint8_t data;
		status =  i2c1_ReadReg16Byte(VL6180x_I2C_ADDRESS, FW_ALS_RESULT_SCALER, &data);
 8007e7a:	f107 030f 	add.w	r3, r7, #15
 8007e7e:	461a      	mov	r2, r3
 8007e80:	f44f 7190 	mov.w	r1, #288	; 0x120
 8007e84:	2052      	movs	r0, #82	; 0x52
 8007e86:	f7fe f921 	bl	80060cc <i2c1_ReadReg16Byte>
 8007e8a:	6178      	str	r0, [r7, #20]
		if (status)
 8007e8c:	697b      	ldr	r3, [r7, #20]
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d115      	bne.n	8007ebe <VL6180x_StaticInit+0x76>
			break;
		VL6180xDevDataSet(dev, AlsScaler, data);
 8007e92:	7bfb      	ldrb	r3, [r7, #15]
 8007e94:	b29a      	uxth	r2, r3
 8007e96:	4b18      	ldr	r3, [pc, #96]	; (8007ef8 <VL6180x_StaticInit+0xb0>)
 8007e98:	82da      	strh	r2, [r3, #22]

		status =  i2c1_ReadReg16Byte(VL6180x_I2C_ADDRESS, SYSALS_ANALOGUE_GAIN, &data);
 8007e9a:	f107 030f 	add.w	r3, r7, #15
 8007e9e:	461a      	mov	r2, r3
 8007ea0:	213f      	movs	r1, #63	; 0x3f
 8007ea2:	2052      	movs	r0, #82	; 0x52
 8007ea4:	f7fe f912 	bl	80060cc <i2c1_ReadReg16Byte>
 8007ea8:	6178      	str	r0, [r7, #20]
		if (status)
 8007eaa:	697b      	ldr	r3, [r7, #20]
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d108      	bne.n	8007ec2 <VL6180x_StaticInit+0x7a>
			break;
		VL6180x_AlsSetAnalogueGain(dev, data);
 8007eb0:	7bfa      	ldrb	r2, [r7, #15]
 8007eb2:	79fb      	ldrb	r3, [r7, #7]
 8007eb4:	4611      	mov	r1, r2
 8007eb6:	4618      	mov	r0, r3
 8007eb8:	f000 f9de 	bl	8008278 <VL6180x_AlsSetAnalogueGain>
 8007ebc:	e002      	b.n	8007ec4 <VL6180x_StaticInit+0x7c>
			break;
 8007ebe:	bf00      	nop
 8007ec0:	e000      	b.n	8007ec4 <VL6180x_StaticInit+0x7c>
			break;
 8007ec2:	bf00      	nop
	} while (0);
	#endif
	#endif /* REFRESH_CACHED_DATA_AFTER_INIT */
	if (status < 0) {
 8007ec4:	697b      	ldr	r3, [r7, #20]
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	da02      	bge.n	8007ed0 <VL6180x_StaticInit+0x88>
		term_printf("StaticInit fail");
 8007eca:	4809      	ldr	r0, [pc, #36]	; (8007ef0 <VL6180x_StaticInit+0xa8>)
 8007ecc:	f7fe fa5a 	bl	8006384 <term_printf>
	}
	if (!status && init_status) {
 8007ed0:	697b      	ldr	r3, [r7, #20]
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d105      	bne.n	8007ee2 <VL6180x_StaticInit+0x9a>
 8007ed6:	693b      	ldr	r3, [r7, #16]
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d002      	beq.n	8007ee2 <VL6180x_StaticInit+0x9a>
		status = init_status;
 8007edc:	693b      	ldr	r3, [r7, #16]
 8007ede:	617b      	str	r3, [r7, #20]
 8007ee0:	e000      	b.n	8007ee4 <VL6180x_StaticInit+0x9c>
	}
error:
 8007ee2:	bf00      	nop
	return status;
 8007ee4:	697b      	ldr	r3, [r7, #20]
}
 8007ee6:	4618      	mov	r0, r3
 8007ee8:	3718      	adds	r7, #24
 8007eea:	46bd      	mov	sp, r7
 8007eec:	bd80      	pop	{r7, pc}
 8007eee:	bf00      	nop
 8007ef0:	0800b90c 	.word	0x0800b90c
 8007ef4:	0800b91c 	.word	0x0800b91c
 8007ef8:	20000070 	.word	0x20000070

08007efc <VL6180x_SetGroupParamHold>:
//================================================================
int VL6180x_SetGroupParamHold(VL6180xDev_t dev, int Hold)
{
 8007efc:	b580      	push	{r7, lr}
 8007efe:	b084      	sub	sp, #16
 8007f00:	af00      	add	r7, sp, #0
 8007f02:	4603      	mov	r3, r0
 8007f04:	6039      	str	r1, [r7, #0]
 8007f06:	71fb      	strb	r3, [r7, #7]
	int status;
	uint8_t value;
	if (Hold)
 8007f08:	683b      	ldr	r3, [r7, #0]
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d002      	beq.n	8007f14 <VL6180x_SetGroupParamHold+0x18>
		value = 1;
 8007f0e:	2301      	movs	r3, #1
 8007f10:	73fb      	strb	r3, [r7, #15]
 8007f12:	e001      	b.n	8007f18 <VL6180x_SetGroupParamHold+0x1c>
	else
		value = 0;
 8007f14:	2300      	movs	r3, #0
 8007f16:	73fb      	strb	r3, [r7, #15]
	status = i2c1_WriteReg16Byte(VL6180x_I2C_ADDRESS, SYSTEM_GROUPED_PARAMETER_HOLD, value);
 8007f18:	7bfb      	ldrb	r3, [r7, #15]
 8007f1a:	461a      	mov	r2, r3
 8007f1c:	2117      	movs	r1, #23
 8007f1e:	2052      	movs	r0, #82	; 0x52
 8007f20:	f7fe f850 	bl	8005fc4 <i2c1_WriteReg16Byte>
 8007f24:	60b8      	str	r0, [r7, #8]
	return status;
 8007f26:	68bb      	ldr	r3, [r7, #8]

}
 8007f28:	4618      	mov	r0, r3
 8007f2a:	3710      	adds	r7, #16
 8007f2c:	46bd      	mov	sp, r7
 8007f2e:	bd80      	pop	{r7, pc}

08007f30 <VL6180x_Prepare>:
//================================================================
int VL6180x_Prepare(VL6180xDev_t dev)
{
 8007f30:	b580      	push	{r7, lr}
 8007f32:	b084      	sub	sp, #16
 8007f34:	af00      	add	r7, sp, #0
 8007f36:	4603      	mov	r3, r0
 8007f38:	71fb      	strb	r3, [r7, #7]
	int status;
	LOG_FUNCTION_START("");

	do {
		status = VL6180x_StaticInit(dev);
 8007f3a:	79fb      	ldrb	r3, [r7, #7]
 8007f3c:	4618      	mov	r0, r3
 8007f3e:	f7ff ff83 	bl	8007e48 <VL6180x_StaticInit>
 8007f42:	60f8      	str	r0, [r7, #12]
		if (status < 0)
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	db53      	blt.n	8007ff2 <VL6180x_Prepare+0xc2>
			break;

		/* set range InterruptMode to new sample */
		status = VL6180x_RangeConfigInterrupt(dev, CONFIG_GPIO_INTERRUPT_NEW_SAMPLE_READY);
 8007f4a:	79fb      	ldrb	r3, [r7, #7]
 8007f4c:	2104      	movs	r1, #4
 8007f4e:	4618      	mov	r0, r3
 8007f50:	f000 fde0 	bl	8008b14 <VL6180x_RangeConfigInterrupt>
 8007f54:	60f8      	str	r0, [r7, #12]
		if (status)
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d14c      	bne.n	8007ff6 <VL6180x_Prepare+0xc6>
			break;

		/* set default threshold */
		status = VL6180x_RangeSetRawThresholds(dev, 10, 200);
 8007f5c:	79fb      	ldrb	r3, [r7, #7]
 8007f5e:	22c8      	movs	r2, #200	; 0xc8
 8007f60:	210a      	movs	r1, #10
 8007f62:	4618      	mov	r0, r3
 8007f64:	f000 fb1c 	bl	80085a0 <VL6180x_RangeSetRawThresholds>
 8007f68:	60f8      	str	r0, [r7, #12]
		if (status) {
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d003      	beq.n	8007f78 <VL6180x_Prepare+0x48>
			term_printf("VL6180x_RangeSetRawThresholds fail");
 8007f70:	4828      	ldr	r0, [pc, #160]	; (8008014 <VL6180x_Prepare+0xe4>)
 8007f72:	f7fe fa07 	bl	8006384 <term_printf>
			break;
 8007f76:	e047      	b.n	8008008 <VL6180x_Prepare+0xd8>
		}
	#if VL6180x_ALS_SUPPORT
		status = VL6180x_AlsSetIntegrationPeriod(dev, 100);
 8007f78:	79fb      	ldrb	r3, [r7, #7]
 8007f7a:	2164      	movs	r1, #100	; 0x64
 8007f7c:	4618      	mov	r0, r3
 8007f7e:	f000 f9c9 	bl	8008314 <VL6180x_AlsSetIntegrationPeriod>
 8007f82:	60f8      	str	r0, [r7, #12]
		if (status)
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d137      	bne.n	8007ffa <VL6180x_Prepare+0xca>
			break;
		status = VL6180x_AlsSetInterMeasurementPeriod(dev,  200);
 8007f8a:	79fb      	ldrb	r3, [r7, #7]
 8007f8c:	21c8      	movs	r1, #200	; 0xc8
 8007f8e:	4618      	mov	r0, r3
 8007f90:	f000 f99c 	bl	80082cc <VL6180x_AlsSetInterMeasurementPeriod>
 8007f94:	60f8      	str	r0, [r7, #12]
		if (status)
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d130      	bne.n	8007ffe <VL6180x_Prepare+0xce>
			break;
		status = VL6180x_AlsSetAnalogueGain(dev,  0);
 8007f9c:	79fb      	ldrb	r3, [r7, #7]
 8007f9e:	2100      	movs	r1, #0
 8007fa0:	4618      	mov	r0, r3
 8007fa2:	f000 f969 	bl	8008278 <VL6180x_AlsSetAnalogueGain>
 8007fa6:	60f8      	str	r0, [r7, #12]
		if (status)
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d129      	bne.n	8008002 <VL6180x_Prepare+0xd2>
			break;
		status = VL6180x_AlsSetThresholds(dev, 0, 0xFF);
 8007fae:	79fb      	ldrb	r3, [r7, #7]
 8007fb0:	22ff      	movs	r2, #255	; 0xff
 8007fb2:	2100      	movs	r1, #0
 8007fb4:	4618      	mov	r0, r3
 8007fb6:	f000 f93f 	bl	8008238 <VL6180x_AlsSetThresholds>
 8007fba:	60f8      	str	r0, [r7, #12]
		if (status)
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d121      	bne.n	8008006 <VL6180x_Prepare+0xd6>
			break;
		/* set Als InterruptMode to new sample */
		status = VL6180x_AlsConfigInterrupt(dev, CONFIG_GPIO_INTERRUPT_NEW_SAMPLE_READY);
 8007fc2:	79fb      	ldrb	r3, [r7, #7]
 8007fc4:	2104      	movs	r1, #4
 8007fc6:	4618      	mov	r0, r3
 8007fc8:	f000 f912 	bl	80081f0 <VL6180x_AlsConfigInterrupt>
 8007fcc:	60f8      	str	r0, [r7, #12]
		if (status) {
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d003      	beq.n	8007fdc <VL6180x_Prepare+0xac>
			term_printf("VL6180x_AlsConfigInterrupt fail\n\r");
 8007fd4:	4810      	ldr	r0, [pc, #64]	; (8008018 <VL6180x_Prepare+0xe8>)
 8007fd6:	f7fe f9d5 	bl	8006384 <term_printf>
			break;
 8007fda:	e015      	b.n	8008008 <VL6180x_Prepare+0xd8>
		}
	#endif
	#if VL6180x_WRAP_AROUND_FILTER_SUPPORT
		_filter_Init(dev);
 8007fdc:	79fb      	ldrb	r3, [r7, #7]
 8007fde:	4618      	mov	r0, r3
 8007fe0:	f000 ff12 	bl	8008e08 <_filter_Init>
	#endif
		/* make sure to reset any left previous condition that can hangs first poll */
		status = VL6180x_ClearAllInterrupt(dev);
 8007fe4:	79fb      	ldrb	r3, [r7, #7]
 8007fe6:	2107      	movs	r1, #7
 8007fe8:	4618      	mov	r0, r3
 8007fea:	f000 fb6c 	bl	80086c6 <VL6180x_ClearInterrupt>
 8007fee:	60f8      	str	r0, [r7, #12]
 8007ff0:	e00a      	b.n	8008008 <VL6180x_Prepare+0xd8>
			break;
 8007ff2:	bf00      	nop
 8007ff4:	e008      	b.n	8008008 <VL6180x_Prepare+0xd8>
			break;
 8007ff6:	bf00      	nop
 8007ff8:	e006      	b.n	8008008 <VL6180x_Prepare+0xd8>
			break;
 8007ffa:	bf00      	nop
 8007ffc:	e004      	b.n	8008008 <VL6180x_Prepare+0xd8>
			break;
 8007ffe:	bf00      	nop
 8008000:	e002      	b.n	8008008 <VL6180x_Prepare+0xd8>
			break;
 8008002:	bf00      	nop
 8008004:	e000      	b.n	8008008 <VL6180x_Prepare+0xd8>
			break;
 8008006:	bf00      	nop
	} while (0);


	return status;
 8008008:	68fb      	ldr	r3, [r7, #12]
}
 800800a:	4618      	mov	r0, r3
 800800c:	3710      	adds	r7, #16
 800800e:	46bd      	mov	sp, r7
 8008010:	bd80      	pop	{r7, pc}
 8008012:	bf00      	nop
 8008014:	0800b930 	.word	0x0800b930
 8008018:	0800b954 	.word	0x0800b954

0800801c <VL6180x_AlsGetLux>:
//================================================================
#if VL6180x_ALS_SUPPORT
int VL6180x_AlsGetLux(VL6180xDev_t dev, lux_t *pLux)
{
 800801c:	b580      	push	{r7, lr}
 800801e:	b08a      	sub	sp, #40	; 0x28
 8008020:	af00      	add	r7, sp, #0
 8008022:	4603      	mov	r3, r0
 8008024:	6039      	str	r1, [r7, #0]
 8008026:	71fb      	strb	r3, [r7, #7]
	int status;
	uint16_t RawAls;
	uint32_t luxValue = 0;
 8008028:	2300      	movs	r3, #0
 800802a:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t AlsScaler;

	#if LUXRES_FIX_PREC !=  GAIN_FIX_PREC
	#error "LUXRES_FIX_PREC != GAIN_FIX_PREC  review these code to be correct"
	#endif
	const uint32_t LuxResxIntIme = (uint32_t)(0.56f * DEF_INT_PEFRIOD * (1 << LUXRES_FIX_PREC));
 800802c:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8008030:	623b      	str	r3, [r7, #32]

	status = i2c1_ReadReg16Word16(VL6180x_I2C_ADDRESS, RESULT_ALS_VAL, &RawAls);
 8008032:	f107 030a 	add.w	r3, r7, #10
 8008036:	461a      	mov	r2, r3
 8008038:	2150      	movs	r1, #80	; 0x50
 800803a:	2052      	movs	r0, #82	; 0x52
 800803c:	f7fe f87c 	bl	8006138 <i2c1_ReadReg16Word16>
 8008040:	61f8      	str	r0, [r7, #28]
	if (!status) {
 8008042:	69fb      	ldr	r3, [r7, #28]
 8008044:	2b00      	cmp	r3, #0
 8008046:	d126      	bne.n	8008096 <VL6180x_AlsGetLux+0x7a>
		/* wer are yet here at no fix point */
		IntPeriod = VL6180xDevDataGet(dev, IntegrationPeriod);
 8008048:	4b15      	ldr	r3, [pc, #84]	; (80080a0 <VL6180x_AlsGetLux+0x84>)
 800804a:	8a5b      	ldrh	r3, [r3, #18]
 800804c:	61bb      	str	r3, [r7, #24]
		AlsScaler = VL6180xDevDataGet(dev, AlsScaler);
 800804e:	4b14      	ldr	r3, [pc, #80]	; (80080a0 <VL6180x_AlsGetLux+0x84>)
 8008050:	8adb      	ldrh	r3, [r3, #22]
 8008052:	617b      	str	r3, [r7, #20]
		IntPeriod++; /* what stored is real time  ms -1 and it can be 0 for or 0 or 1ms */
 8008054:	69bb      	ldr	r3, [r7, #24]
 8008056:	3301      	adds	r3, #1
 8008058:	61bb      	str	r3, [r7, #24]
		luxValue = (uint32_t)RawAls * LuxResxIntIme; /* max # 16+8bits + 6bit (0.56*100)  */
 800805a:	897b      	ldrh	r3, [r7, #10]
 800805c:	461a      	mov	r2, r3
 800805e:	6a3b      	ldr	r3, [r7, #32]
 8008060:	fb02 f303 	mul.w	r3, r2, r3
 8008064:	627b      	str	r3, [r7, #36]	; 0x24
		luxValue /= IntPeriod;                         /* max # 16+8bits + 6bit 16+8+1 to 9 bit */
 8008066:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008068:	69bb      	ldr	r3, [r7, #24]
 800806a:	fbb2 f3f3 	udiv	r3, r2, r3
 800806e:	627b      	str	r3, [r7, #36]	; 0x24
		/* between  29 - 21 bit */
		AlsAnGain = VL6180xDevDataGet(dev, AlsGainCode);
 8008070:	4b0b      	ldr	r3, [pc, #44]	; (80080a0 <VL6180x_AlsGetLux+0x84>)
 8008072:	8a9b      	ldrh	r3, [r3, #20]
 8008074:	613b      	str	r3, [r7, #16]
		GainFix = AlsGainLookUp[AlsAnGain];
 8008076:	4a0b      	ldr	r2, [pc, #44]	; (80080a4 <VL6180x_AlsGetLux+0x88>)
 8008078:	693b      	ldr	r3, [r7, #16]
 800807a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800807e:	60fb      	str	r3, [r7, #12]
		luxValue = luxValue / (AlsScaler * GainFix);
 8008080:	697b      	ldr	r3, [r7, #20]
 8008082:	68fa      	ldr	r2, [r7, #12]
 8008084:	fb02 f303 	mul.w	r3, r2, r3
 8008088:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800808a:	fbb2 f3f3 	udiv	r3, r2, r3
 800808e:	627b      	str	r3, [r7, #36]	; 0x24
		*pLux = luxValue;
 8008090:	683b      	ldr	r3, [r7, #0]
 8008092:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008094:	601a      	str	r2, [r3, #0]
	}
	return status;
 8008096:	69fb      	ldr	r3, [r7, #28]
}
 8008098:	4618      	mov	r0, r3
 800809a:	3728      	adds	r7, #40	; 0x28
 800809c:	46bd      	mov	sp, r7
 800809e:	bd80      	pop	{r7, pc}
 80080a0:	20000070 	.word	0x20000070
 80080a4:	0800b69c 	.word	0x0800b69c

080080a8 <VL6180x_AlsGetMeasurement>:
//================================================================
int VL6180x_AlsGetMeasurement(VL6180xDev_t dev, VL6180x_AlsData_t *pAlsData)
{
 80080a8:	b580      	push	{r7, lr}
 80080aa:	b084      	sub	sp, #16
 80080ac:	af00      	add	r7, sp, #0
 80080ae:	4603      	mov	r3, r0
 80080b0:	6039      	str	r1, [r7, #0]
 80080b2:	71fb      	strb	r3, [r7, #7]
	int status;
	uint8_t ErrStatus;

	status = VL6180x_AlsGetLux(dev, &pAlsData->lux);
 80080b4:	683a      	ldr	r2, [r7, #0]
 80080b6:	79fb      	ldrb	r3, [r7, #7]
 80080b8:	4611      	mov	r1, r2
 80080ba:	4618      	mov	r0, r3
 80080bc:	f7ff ffae 	bl	800801c <VL6180x_AlsGetLux>
 80080c0:	60f8      	str	r0, [r7, #12]
	if (!status) {
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d10d      	bne.n	80080e4 <VL6180x_AlsGetMeasurement+0x3c>
		status = i2c1_ReadReg16Byte(VL6180x_I2C_ADDRESS, RESULT_ALS_STATUS, &ErrStatus);
 80080c8:	f107 030b 	add.w	r3, r7, #11
 80080cc:	461a      	mov	r2, r3
 80080ce:	214e      	movs	r1, #78	; 0x4e
 80080d0:	2052      	movs	r0, #82	; 0x52
 80080d2:	f7fd fffb 	bl	80060cc <i2c1_ReadReg16Byte>
 80080d6:	60f8      	str	r0, [r7, #12]
		pAlsData->errorStatus = ErrStatus >> 4;
 80080d8:	7afb      	ldrb	r3, [r7, #11]
 80080da:	091b      	lsrs	r3, r3, #4
 80080dc:	b2db      	uxtb	r3, r3
 80080de:	461a      	mov	r2, r3
 80080e0:	683b      	ldr	r3, [r7, #0]
 80080e2:	605a      	str	r2, [r3, #4]
	}

	return status;
 80080e4:	68fb      	ldr	r3, [r7, #12]
}
 80080e6:	4618      	mov	r0, r3
 80080e8:	3710      	adds	r7, #16
 80080ea:	46bd      	mov	sp, r7
 80080ec:	bd80      	pop	{r7, pc}
	...

080080f0 <VL6180x_AlsPollMeasurement>:

//================================================================
int VL6180x_AlsPollMeasurement(VL6180xDev_t dev, VL6180x_AlsData_t *pAlsData)
{
 80080f0:	b580      	push	{r7, lr}
 80080f2:	b086      	sub	sp, #24
 80080f4:	af00      	add	r7, sp, #0
 80080f6:	4603      	mov	r3, r0
 80080f8:	6039      	str	r1, [r7, #0]
 80080fa:	71fb      	strb	r3, [r7, #7]
		////VL6180x_ErrLog("VL6180x_AlsClearInterrupt fail");
		goto over;
	}
	#endif

	status = VL6180x_AlsSetSystemMode(dev, MODE_START_STOP | MODE_SINGLESHOT);
 80080fc:	79fb      	ldrb	r3, [r7, #7]
 80080fe:	2101      	movs	r1, #1
 8008100:	4618      	mov	r0, r3
 8008102:	f000 f85a 	bl	80081ba <VL6180x_AlsSetSystemMode>
 8008106:	6178      	str	r0, [r7, #20]
	if (status) {
 8008108:	697b      	ldr	r3, [r7, #20]
 800810a:	2b00      	cmp	r3, #0
 800810c:	d003      	beq.n	8008116 <VL6180x_AlsPollMeasurement+0x26>
		term_printf("VL6180x_AlsSetSystemMode fail\n\r");
 800810e:	481b      	ldr	r0, [pc, #108]	; (800817c <VL6180x_AlsPollMeasurement+0x8c>)
 8008110:	f7fe f938 	bl	8006384 <term_printf>
		goto over;
 8008114:	e02d      	b.n	8008172 <VL6180x_AlsPollMeasurement+0x82>
	}

	/* poll for new sample ready */
	while (1) {
		status = VL6180x_AlsGetInterruptStatus(dev, &IntStatus);
 8008116:	f107 020f 	add.w	r2, r7, #15
 800811a:	79fb      	ldrb	r3, [r7, #7]
 800811c:	4611      	mov	r1, r2
 800811e:	4618      	mov	r0, r3
 8008120:	f000 f830 	bl	8008184 <VL6180x_AlsGetInterruptStatus>
 8008124:	6178      	str	r0, [r7, #20]
		if (status) {
 8008126:	697b      	ldr	r3, [r7, #20]
 8008128:	2b00      	cmp	r3, #0
 800812a:	d103      	bne.n	8008134 <VL6180x_AlsPollMeasurement+0x44>
			break;
		}
		if (IntStatus == RES_INT_STAT_GPIO_NEW_SAMPLE_READY) {
 800812c:	7bfb      	ldrb	r3, [r7, #15]
 800812e:	2b04      	cmp	r3, #4
 8008130:	d002      	beq.n	8008138 <VL6180x_AlsPollMeasurement+0x48>
		status = VL6180x_AlsGetInterruptStatus(dev, &IntStatus);
 8008132:	e7f0      	b.n	8008116 <VL6180x_AlsPollMeasurement+0x26>
			break;
 8008134:	bf00      	nop
 8008136:	e000      	b.n	800813a <VL6180x_AlsPollMeasurement+0x4a>
			break; /* break on new data (status is 0)  */
 8008138:	bf00      	nop
		}

	//	VL6180x_PollDelay(dev);
	};

	if (!status) {
 800813a:	697b      	ldr	r3, [r7, #20]
 800813c:	2b00      	cmp	r3, #0
 800813e:	d105      	bne.n	800814c <VL6180x_AlsPollMeasurement+0x5c>
		status = VL6180x_AlsGetMeasurement(dev, pAlsData);
 8008140:	79fb      	ldrb	r3, [r7, #7]
 8008142:	6839      	ldr	r1, [r7, #0]
 8008144:	4618      	mov	r0, r3
 8008146:	f7ff ffaf 	bl	80080a8 <VL6180x_AlsGetMeasurement>
 800814a:	6178      	str	r0, [r7, #20]
	}

	ClrStatus = VL6180x_AlsClearInterrupt(dev);
 800814c:	79fb      	ldrb	r3, [r7, #7]
 800814e:	2102      	movs	r1, #2
 8008150:	4618      	mov	r0, r3
 8008152:	f000 fab8 	bl	80086c6 <VL6180x_ClearInterrupt>
 8008156:	6138      	str	r0, [r7, #16]
	if (ClrStatus) {
 8008158:	693b      	ldr	r3, [r7, #16]
 800815a:	2b00      	cmp	r3, #0
 800815c:	d008      	beq.n	8008170 <VL6180x_AlsPollMeasurement+0x80>
		term_printf("VL6180x_AlsClearInterrupt fail\n\r");
 800815e:	4808      	ldr	r0, [pc, #32]	; (8008180 <VL6180x_AlsPollMeasurement+0x90>)
 8008160:	f7fe f910 	bl	8006384 <term_printf>
		if (!status) {
 8008164:	697b      	ldr	r3, [r7, #20]
 8008166:	2b00      	cmp	r3, #0
 8008168:	d102      	bne.n	8008170 <VL6180x_AlsPollMeasurement+0x80>
		    status = ClrStatus; /* leave previous if already on error */
 800816a:	693b      	ldr	r3, [r7, #16]
 800816c:	617b      	str	r3, [r7, #20]
 800816e:	e000      	b.n	8008172 <VL6180x_AlsPollMeasurement+0x82>
		}
	}
over:
 8008170:	bf00      	nop


	return status;
 8008172:	697b      	ldr	r3, [r7, #20]
}
 8008174:	4618      	mov	r0, r3
 8008176:	3718      	adds	r7, #24
 8008178:	46bd      	mov	sp, r7
 800817a:	bd80      	pop	{r7, pc}
 800817c:	0800b978 	.word	0x0800b978
 8008180:	0800b998 	.word	0x0800b998

08008184 <VL6180x_AlsGetInterruptStatus>:
//================================================================
int VL6180x_AlsGetInterruptStatus(VL6180xDev_t dev, uint8_t *pIntStatus)
{
 8008184:	b580      	push	{r7, lr}
 8008186:	b084      	sub	sp, #16
 8008188:	af00      	add	r7, sp, #0
 800818a:	4603      	mov	r3, r0
 800818c:	6039      	str	r1, [r7, #0]
 800818e:	71fb      	strb	r3, [r7, #7]
	int status;
	uint8_t IntStatus;

	status = i2c1_ReadReg16Byte(VL6180x_I2C_ADDRESS, RESULT_INTERRUPT_STATUS_GPIO, &IntStatus);
 8008190:	f107 030b 	add.w	r3, r7, #11
 8008194:	461a      	mov	r2, r3
 8008196:	214f      	movs	r1, #79	; 0x4f
 8008198:	2052      	movs	r0, #82	; 0x52
 800819a:	f7fd ff97 	bl	80060cc <i2c1_ReadReg16Byte>
 800819e:	60f8      	str	r0, [r7, #12]
	*pIntStatus = (IntStatus >> 3) & 0x07;
 80081a0:	7afb      	ldrb	r3, [r7, #11]
 80081a2:	08db      	lsrs	r3, r3, #3
 80081a4:	b2db      	uxtb	r3, r3
 80081a6:	f003 0307 	and.w	r3, r3, #7
 80081aa:	b2da      	uxtb	r2, r3
 80081ac:	683b      	ldr	r3, [r7, #0]
 80081ae:	701a      	strb	r2, [r3, #0]

	return status;
 80081b0:	68fb      	ldr	r3, [r7, #12]
}
 80081b2:	4618      	mov	r0, r3
 80081b4:	3710      	adds	r7, #16
 80081b6:	46bd      	mov	sp, r7
 80081b8:	bd80      	pop	{r7, pc}

080081ba <VL6180x_AlsSetSystemMode>:
	LOG_FUNCTION_END(status);
	return status;
}
//================================================================
int VL6180x_AlsSetSystemMode(VL6180xDev_t dev, uint8_t mode)
{
 80081ba:	b580      	push	{r7, lr}
 80081bc:	b084      	sub	sp, #16
 80081be:	af00      	add	r7, sp, #0
 80081c0:	4603      	mov	r3, r0
 80081c2:	460a      	mov	r2, r1
 80081c4:	71fb      	strb	r3, [r7, #7]
 80081c6:	4613      	mov	r3, r2
 80081c8:	71bb      	strb	r3, [r7, #6]
	int status;
	LOG_FUNCTION_START("%d", (int)mode);
	/* FIXME if we are called back to back real fast we are not checking
	 * if previous mode "set" got absorbed => bit 0 must be 0 so that wr 1 work */
	if (mode <= 3) {
 80081ca:	79bb      	ldrb	r3, [r7, #6]
 80081cc:	2b03      	cmp	r3, #3
 80081ce:	d807      	bhi.n	80081e0 <VL6180x_AlsSetSystemMode+0x26>
		status = i2c1_WriteReg16Byte(VL6180x_I2C_ADDRESS, SYSALS_START, mode);
 80081d0:	79bb      	ldrb	r3, [r7, #6]
 80081d2:	461a      	mov	r2, r3
 80081d4:	2138      	movs	r1, #56	; 0x38
 80081d6:	2052      	movs	r0, #82	; 0x52
 80081d8:	f7fd fef4 	bl	8005fc4 <i2c1_WriteReg16Byte>
 80081dc:	60f8      	str	r0, [r7, #12]
 80081de:	e002      	b.n	80081e6 <VL6180x_AlsSetSystemMode+0x2c>
	} else {
		status = INVALID_PARAMS;
 80081e0:	f06f 0301 	mvn.w	r3, #1
 80081e4:	60fb      	str	r3, [r7, #12]
	}
	LOG_FUNCTION_END(status);
	return status;
 80081e6:	68fb      	ldr	r3, [r7, #12]
}
 80081e8:	4618      	mov	r0, r3
 80081ea:	3710      	adds	r7, #16
 80081ec:	46bd      	mov	sp, r7
 80081ee:	bd80      	pop	{r7, pc}

080081f0 <VL6180x_AlsConfigInterrupt>:
//================================================================
int VL6180x_AlsConfigInterrupt(VL6180xDev_t dev, uint8_t ConfigGpioInt)
{
 80081f0:	b580      	push	{r7, lr}
 80081f2:	b084      	sub	sp, #16
 80081f4:	af00      	add	r7, sp, #0
 80081f6:	4603      	mov	r3, r0
 80081f8:	460a      	mov	r2, r1
 80081fa:	71fb      	strb	r3, [r7, #7]
 80081fc:	4613      	mov	r3, r2
 80081fe:	71bb      	strb	r3, [r7, #6]
	int status;

	if (ConfigGpioInt <= CONFIG_GPIO_INTERRUPT_NEW_SAMPLE_READY) {
 8008200:	79bb      	ldrb	r3, [r7, #6]
 8008202:	2b04      	cmp	r3, #4
 8008204:	d809      	bhi.n	800821a <VL6180x_AlsConfigInterrupt+0x2a>
		status = VL6180x_UpdateByte(dev, SYSTEM_INTERRUPT_CONFIG_GPIO, (uint8_t)(~CONFIG_GPIO_ALS_MASK), (ConfigGpioInt << 3));
 8008206:	79bb      	ldrb	r3, [r7, #6]
 8008208:	00db      	lsls	r3, r3, #3
 800820a:	b2db      	uxtb	r3, r3
 800820c:	79f8      	ldrb	r0, [r7, #7]
 800820e:	22c7      	movs	r2, #199	; 0xc7
 8008210:	2114      	movs	r1, #20
 8008212:	f7ff fcef 	bl	8007bf4 <VL6180x_UpdateByte>
 8008216:	60f8      	str	r0, [r7, #12]
 8008218:	e007      	b.n	800822a <VL6180x_AlsConfigInterrupt+0x3a>
	} else {
		term_printf("Invalid config mode param %d\n\r", (int)ConfigGpioInt);
 800821a:	79bb      	ldrb	r3, [r7, #6]
 800821c:	4619      	mov	r1, r3
 800821e:	4805      	ldr	r0, [pc, #20]	; (8008234 <VL6180x_AlsConfigInterrupt+0x44>)
 8008220:	f7fe f8b0 	bl	8006384 <term_printf>
		status = INVALID_PARAMS;
 8008224:	f06f 0301 	mvn.w	r3, #1
 8008228:	60fb      	str	r3, [r7, #12]
	}
	LOG_FUNCTION_END(status);
	return status;
 800822a:	68fb      	ldr	r3, [r7, #12]
}
 800822c:	4618      	mov	r0, r3
 800822e:	3710      	adds	r7, #16
 8008230:	46bd      	mov	sp, r7
 8008232:	bd80      	pop	{r7, pc}
 8008234:	0800b9bc 	.word	0x0800b9bc

08008238 <VL6180x_AlsSetThresholds>:
//================================================================
int VL6180x_AlsSetThresholds(VL6180xDev_t dev, uint8_t low, uint8_t high)
{
 8008238:	b580      	push	{r7, lr}
 800823a:	b084      	sub	sp, #16
 800823c:	af00      	add	r7, sp, #0
 800823e:	4603      	mov	r3, r0
 8008240:	71fb      	strb	r3, [r7, #7]
 8008242:	460b      	mov	r3, r1
 8008244:	71bb      	strb	r3, [r7, #6]
 8008246:	4613      	mov	r3, r2
 8008248:	717b      	strb	r3, [r7, #5]
	int status;

	status = i2c1_WriteReg16Byte(VL6180x_I2C_ADDRESS, SYSALS_THRESH_LOW, low);
 800824a:	79bb      	ldrb	r3, [r7, #6]
 800824c:	461a      	mov	r2, r3
 800824e:	213c      	movs	r1, #60	; 0x3c
 8008250:	2052      	movs	r0, #82	; 0x52
 8008252:	f7fd feb7 	bl	8005fc4 <i2c1_WriteReg16Byte>
 8008256:	60f8      	str	r0, [r7, #12]
	if (!status) {
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	2b00      	cmp	r3, #0
 800825c:	d106      	bne.n	800826c <VL6180x_AlsSetThresholds+0x34>
		status = i2c1_WriteReg16Byte(VL6180x_I2C_ADDRESS, SYSALS_THRESH_HIGH, high);
 800825e:	797b      	ldrb	r3, [r7, #5]
 8008260:	461a      	mov	r2, r3
 8008262:	213a      	movs	r1, #58	; 0x3a
 8008264:	2052      	movs	r0, #82	; 0x52
 8008266:	f7fd fead 	bl	8005fc4 <i2c1_WriteReg16Byte>
 800826a:	60f8      	str	r0, [r7, #12]
	}
	return status;
 800826c:	68fb      	ldr	r3, [r7, #12]
}
 800826e:	4618      	mov	r0, r3
 8008270:	3710      	adds	r7, #16
 8008272:	46bd      	mov	sp, r7
 8008274:	bd80      	pop	{r7, pc}
	...

08008278 <VL6180x_AlsSetAnalogueGain>:
//================================================================
int VL6180x_AlsSetAnalogueGain(VL6180xDev_t dev, uint8_t gain)
{
 8008278:	b580      	push	{r7, lr}
 800827a:	b084      	sub	sp, #16
 800827c:	af00      	add	r7, sp, #0
 800827e:	4603      	mov	r3, r0
 8008280:	460a      	mov	r2, r1
 8008282:	71fb      	strb	r3, [r7, #7]
 8008284:	4613      	mov	r3, r2
 8008286:	71bb      	strb	r3, [r7, #6]
	int status;
	uint8_t GainTotal;

	gain &= ~0x40;
 8008288:	79bb      	ldrb	r3, [r7, #6]
 800828a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800828e:	71bb      	strb	r3, [r7, #6]
	if (gain > 7) {
 8008290:	79bb      	ldrb	r3, [r7, #6]
 8008292:	2b07      	cmp	r3, #7
 8008294:	d901      	bls.n	800829a <VL6180x_AlsSetAnalogueGain+0x22>
		gain = 7;
 8008296:	2307      	movs	r3, #7
 8008298:	71bb      	strb	r3, [r7, #6]
	}
	GainTotal = gain | 0x40;
 800829a:	79bb      	ldrb	r3, [r7, #6]
 800829c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80082a0:	73fb      	strb	r3, [r7, #15]

	status = i2c1_WriteReg16Byte(VL6180x_I2C_ADDRESS, SYSALS_ANALOGUE_GAIN, GainTotal);
 80082a2:	7bfb      	ldrb	r3, [r7, #15]
 80082a4:	461a      	mov	r2, r3
 80082a6:	213f      	movs	r1, #63	; 0x3f
 80082a8:	2052      	movs	r0, #82	; 0x52
 80082aa:	f7fd fe8b 	bl	8005fc4 <i2c1_WriteReg16Byte>
 80082ae:	60b8      	str	r0, [r7, #8]
	if (!status) {
 80082b0:	68bb      	ldr	r3, [r7, #8]
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d103      	bne.n	80082be <VL6180x_AlsSetAnalogueGain+0x46>
		VL6180xDevDataSet(dev, AlsGainCode, gain);
 80082b6:	79bb      	ldrb	r3, [r7, #6]
 80082b8:	b29a      	uxth	r2, r3
 80082ba:	4b03      	ldr	r3, [pc, #12]	; (80082c8 <VL6180x_AlsSetAnalogueGain+0x50>)
 80082bc:	829a      	strh	r2, [r3, #20]
	}

	return status;
 80082be:	68bb      	ldr	r3, [r7, #8]
}
 80082c0:	4618      	mov	r0, r3
 80082c2:	3710      	adds	r7, #16
 80082c4:	46bd      	mov	sp, r7
 80082c6:	bd80      	pop	{r7, pc}
 80082c8:	20000070 	.word	0x20000070

080082cc <VL6180x_AlsSetInterMeasurementPeriod>:
//================================================================
int VL6180x_AlsSetInterMeasurementPeriod(VL6180xDev_t dev,  uint16_t intermeasurement_period_ms)
{
 80082cc:	b580      	push	{r7, lr}
 80082ce:	b084      	sub	sp, #16
 80082d0:	af00      	add	r7, sp, #0
 80082d2:	4603      	mov	r3, r0
 80082d4:	460a      	mov	r2, r1
 80082d6:	71fb      	strb	r3, [r7, #7]
 80082d8:	4613      	mov	r3, r2
 80082da:	80bb      	strh	r3, [r7, #4]
	int status;

	/* clipping: range is 0-2550ms */
	if (intermeasurement_period_ms >= 255 * 10)
 80082dc:	88bb      	ldrh	r3, [r7, #4]
 80082de:	f640 12f5 	movw	r2, #2549	; 0x9f5
 80082e2:	4293      	cmp	r3, r2
 80082e4:	d902      	bls.n	80082ec <VL6180x_AlsSetInterMeasurementPeriod+0x20>
		intermeasurement_period_ms = 255 * 10;
 80082e6:	f640 13f6 	movw	r3, #2550	; 0x9f6
 80082ea:	80bb      	strh	r3, [r7, #4]
	status = i2c1_WriteReg16Byte(VL6180x_I2C_ADDRESS, SYSALS_INTERMEASUREMENT_PERIOD, (uint8_t)(intermeasurement_period_ms / 10));
 80082ec:	88bb      	ldrh	r3, [r7, #4]
 80082ee:	4a08      	ldr	r2, [pc, #32]	; (8008310 <VL6180x_AlsSetInterMeasurementPeriod+0x44>)
 80082f0:	fba2 2303 	umull	r2, r3, r2, r3
 80082f4:	08db      	lsrs	r3, r3, #3
 80082f6:	b29b      	uxth	r3, r3
 80082f8:	b2db      	uxtb	r3, r3
 80082fa:	461a      	mov	r2, r3
 80082fc:	213e      	movs	r1, #62	; 0x3e
 80082fe:	2052      	movs	r0, #82	; 0x52
 8008300:	f7fd fe60 	bl	8005fc4 <i2c1_WriteReg16Byte>
 8008304:	60f8      	str	r0, [r7, #12]

	return status;
 8008306:	68fb      	ldr	r3, [r7, #12]
}
 8008308:	4618      	mov	r0, r3
 800830a:	3710      	adds	r7, #16
 800830c:	46bd      	mov	sp, r7
 800830e:	bd80      	pop	{r7, pc}
 8008310:	cccccccd 	.word	0xcccccccd

08008314 <VL6180x_AlsSetIntegrationPeriod>:
//================================================================
int VL6180x_AlsSetIntegrationPeriod(VL6180xDev_t dev, uint16_t period_ms)
{
 8008314:	b580      	push	{r7, lr}
 8008316:	b084      	sub	sp, #16
 8008318:	af00      	add	r7, sp, #0
 800831a:	4603      	mov	r3, r0
 800831c:	460a      	mov	r2, r1
 800831e:	71fb      	strb	r3, [r7, #7]
 8008320:	4613      	mov	r3, r2
 8008322:	80bb      	strh	r3, [r7, #4]
	int status;
	uint16_t SetIntegrationPeriod;


	if (period_ms >= 1)
 8008324:	88bb      	ldrh	r3, [r7, #4]
 8008326:	2b00      	cmp	r3, #0
 8008328:	d003      	beq.n	8008332 <VL6180x_AlsSetIntegrationPeriod+0x1e>
		SetIntegrationPeriod = period_ms - 1;
 800832a:	88bb      	ldrh	r3, [r7, #4]
 800832c:	3b01      	subs	r3, #1
 800832e:	81fb      	strh	r3, [r7, #14]
 8008330:	e001      	b.n	8008336 <VL6180x_AlsSetIntegrationPeriod+0x22>
	else
		SetIntegrationPeriod = period_ms;
 8008332:	88bb      	ldrh	r3, [r7, #4]
 8008334:	81fb      	strh	r3, [r7, #14]

	if (SetIntegrationPeriod > 464) {
 8008336:	89fb      	ldrh	r3, [r7, #14]
 8008338:	f5b3 7fe8 	cmp.w	r3, #464	; 0x1d0
 800833c:	d903      	bls.n	8008346 <VL6180x_AlsSetIntegrationPeriod+0x32>
		SetIntegrationPeriod = 464;
 800833e:	f44f 73e8 	mov.w	r3, #464	; 0x1d0
 8008342:	81fb      	strh	r3, [r7, #14]
 8008344:	e005      	b.n	8008352 <VL6180x_AlsSetIntegrationPeriod+0x3e>
	} else if (SetIntegrationPeriod == 255)   {
 8008346:	89fb      	ldrh	r3, [r7, #14]
 8008348:	2bff      	cmp	r3, #255	; 0xff
 800834a:	d102      	bne.n	8008352 <VL6180x_AlsSetIntegrationPeriod+0x3e>
		SetIntegrationPeriod++; /* can't write 255 since this causes the device to lock out.*/
 800834c:	89fb      	ldrh	r3, [r7, #14]
 800834e:	3301      	adds	r3, #1
 8008350:	81fb      	strh	r3, [r7, #14]
	}

	status = i2c1_WriteReg16Word16(VL6180x_I2C_ADDRESS, SYSALS_INTEGRATION_PERIOD, SetIntegrationPeriod);
 8008352:	89fb      	ldrh	r3, [r7, #14]
 8008354:	461a      	mov	r2, r3
 8008356:	2140      	movs	r1, #64	; 0x40
 8008358:	2052      	movs	r0, #82	; 0x52
 800835a:	f7fd fe59 	bl	8006010 <i2c1_WriteReg16Word16>
 800835e:	60b8      	str	r0, [r7, #8]
	if (!status) {
 8008360:	68bb      	ldr	r3, [r7, #8]
 8008362:	2b00      	cmp	r3, #0
 8008364:	d102      	bne.n	800836c <VL6180x_AlsSetIntegrationPeriod+0x58>
		VL6180xDevDataSet(dev, IntegrationPeriod, SetIntegrationPeriod) ;
 8008366:	4a04      	ldr	r2, [pc, #16]	; (8008378 <VL6180x_AlsSetIntegrationPeriod+0x64>)
 8008368:	89fb      	ldrh	r3, [r7, #14]
 800836a:	8253      	strh	r3, [r2, #18]
	}

	return status;
 800836c:	68bb      	ldr	r3, [r7, #8]
}
 800836e:	4618      	mov	r0, r3
 8008370:	3710      	adds	r7, #16
 8008372:	46bd      	mov	sp, r7
 8008374:	bd80      	pop	{r7, pc}
 8008376:	bf00      	nop
 8008378:	20000070 	.word	0x20000070

0800837c <VL6180x_RangePollMeasurement>:
#endif /* HAVE_ALS_SUPPORT */
//================================================================
int VL6180x_RangePollMeasurement(VL6180xDev_t dev, VL6180x_RangeData_t *pRangeData)
{
 800837c:	b580      	push	{r7, lr}
 800837e:	b086      	sub	sp, #24
 8008380:	af00      	add	r7, sp, #0
 8008382:	4603      	mov	r3, r0
 8008384:	6039      	str	r1, [r7, #0]
 8008386:	71fb      	strb	r3, [r7, #7]
		////VL6180x_ErrLog("VL6180x_RangeClearInterrupt fail");
		goto done;
	}
	#endif
	/* //![single_shot_snipet] */
	status = VL6180x_RangeSetSystemMode(dev, MODE_START_STOP | MODE_SINGLESHOT);
 8008388:	79fb      	ldrb	r3, [r7, #7]
 800838a:	2101      	movs	r1, #1
 800838c:	4618      	mov	r0, r3
 800838e:	f000 fc63 	bl	8008c58 <VL6180x_RangeSetSystemMode>
 8008392:	6178      	str	r0, [r7, #20]
	if (status) {
 8008394:	697b      	ldr	r3, [r7, #20]
 8008396:	2b00      	cmp	r3, #0
 8008398:	d130      	bne.n	80083fc <VL6180x_RangePollMeasurement+0x80>
	}


	/* poll for new sample ready */
	while (1) {
		status = VL6180x_RangeGetInterruptStatus(dev, &IntStatus.val);
 800839a:	f107 020c 	add.w	r2, r7, #12
 800839e:	79fb      	ldrb	r3, [r7, #7]
 80083a0:	4611      	mov	r1, r2
 80083a2:	4618      	mov	r0, r3
 80083a4:	f000 f976 	bl	8008694 <VL6180x_RangeGetInterruptStatus>
 80083a8:	6178      	str	r0, [r7, #20]
		if (status) {
 80083aa:	697b      	ldr	r3, [r7, #20]
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d10c      	bne.n	80083ca <VL6180x_RangePollMeasurement+0x4e>
			break;
		}
		if (IntStatus.status.Range == RES_INT_STAT_GPIO_NEW_SAMPLE_READY || IntStatus.status.Error != 0) {
 80083b0:	7b3b      	ldrb	r3, [r7, #12]
 80083b2:	f003 0307 	and.w	r3, r3, #7
 80083b6:	b2db      	uxtb	r3, r3
 80083b8:	2b04      	cmp	r3, #4
 80083ba:	d007      	beq.n	80083cc <VL6180x_RangePollMeasurement+0x50>
 80083bc:	7b3b      	ldrb	r3, [r7, #12]
 80083be:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80083c2:	b2db      	uxtb	r3, r3
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d101      	bne.n	80083cc <VL6180x_RangePollMeasurement+0x50>
		status = VL6180x_RangeGetInterruptStatus(dev, &IntStatus.val);
 80083c8:	e7e7      	b.n	800839a <VL6180x_RangePollMeasurement+0x1e>
			break;
 80083ca:	bf00      	nop

	//	VL6180x_PollDelay(dev);
	}
	/* //![single_shot_snipet] */

	if (!status) {
 80083cc:	697b      	ldr	r3, [r7, #20]
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d105      	bne.n	80083de <VL6180x_RangePollMeasurement+0x62>
		status = VL6180x_RangeGetMeasurement(dev, pRangeData);
 80083d2:	79fb      	ldrb	r3, [r7, #7]
 80083d4:	6839      	ldr	r1, [r7, #0]
 80083d6:	4618      	mov	r0, r3
 80083d8:	f000 f818 	bl	800840c <VL6180x_RangeGetMeasurement>
 80083dc:	6178      	str	r0, [r7, #20]
	}

	/*  clear range interrupt source */
	ClrStatus = VL6180x_RangeClearInterrupt(dev);
 80083de:	79fb      	ldrb	r3, [r7, #7]
 80083e0:	2101      	movs	r1, #1
 80083e2:	4618      	mov	r0, r3
 80083e4:	f000 f96f 	bl	80086c6 <VL6180x_ClearInterrupt>
 80083e8:	6138      	str	r0, [r7, #16]
	if (ClrStatus) {
 80083ea:	693b      	ldr	r3, [r7, #16]
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d007      	beq.n	8008400 <VL6180x_RangePollMeasurement+0x84>
	//	//VL6180x_ErrLog("VL6180x_RangeClearInterrupt fail");
		/*  leave initial status if already in error  */
		if (!status) {
 80083f0:	697b      	ldr	r3, [r7, #20]
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d104      	bne.n	8008400 <VL6180x_RangePollMeasurement+0x84>
			status = ClrStatus;
 80083f6:	693b      	ldr	r3, [r7, #16]
 80083f8:	617b      	str	r3, [r7, #20]
 80083fa:	e002      	b.n	8008402 <VL6180x_RangePollMeasurement+0x86>
		goto done;
 80083fc:	bf00      	nop
 80083fe:	e000      	b.n	8008402 <VL6180x_RangePollMeasurement+0x86>
		}
	}
done:
 8008400:	bf00      	nop
	return status;
 8008402:	697b      	ldr	r3, [r7, #20]
}
 8008404:	4618      	mov	r0, r3
 8008406:	3718      	adds	r7, #24
 8008408:	46bd      	mov	sp, r7
 800840a:	bd80      	pop	{r7, pc}

0800840c <VL6180x_RangeGetMeasurement>:
#endif /* VL6180x_CACHED_REG */

//================================================================

int VL6180x_RangeGetMeasurement(VL6180xDev_t dev, VL6180x_RangeData_t *pRangeData)
{
 800840c:	b580      	push	{r7, lr}
 800840e:	b084      	sub	sp, #16
 8008410:	af00      	add	r7, sp, #0
 8008412:	4603      	mov	r3, r0
 8008414:	6039      	str	r1, [r7, #0]
 8008416:	71fb      	strb	r3, [r7, #7]
	int status;
	uint16_t RawRate;
	uint8_t RawStatus;

	status = _CachedRegs_Fetch(dev);
 8008418:	2300      	movs	r3, #0
 800841a:	60fb      	str	r3, [r7, #12]
	if (status) {
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	2b00      	cmp	r3, #0
 8008420:	d003      	beq.n	800842a <VL6180x_RangeGetMeasurement+0x1e>
		term_printf("Cache register read fai\n\rl");
 8008422:	4837      	ldr	r0, [pc, #220]	; (8008500 <VL6180x_RangeGetMeasurement+0xf4>)
 8008424:	f7fd ffae 	bl	8006384 <term_printf>
		goto error;
 8008428:	e064      	b.n	80084f4 <VL6180x_RangeGetMeasurement+0xe8>
	}
	status = VL6180x_RangeGetResult(dev, &pRangeData->range_mm);
 800842a:	683a      	ldr	r2, [r7, #0]
 800842c:	79fb      	ldrb	r3, [r7, #7]
 800842e:	4611      	mov	r1, r2
 8008430:	4618      	mov	r0, r3
 8008432:	f000 f893 	bl	800855c <VL6180x_RangeGetResult>
 8008436:	60f8      	str	r0, [r7, #12]
	if (!status) {
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	2b00      	cmp	r3, #0
 800843c:	d155      	bne.n	80084ea <VL6180x_RangeGetMeasurement+0xde>
		status = VL6180x_GetCachedWord(dev, RESULT_RANGE_SIGNAL_RATE, &RawRate);
 800843e:	f107 030a 	add.w	r3, r7, #10
 8008442:	461a      	mov	r2, r3
 8008444:	2166      	movs	r1, #102	; 0x66
 8008446:	2052      	movs	r0, #82	; 0x52
 8008448:	f7fd fe76 	bl	8006138 <i2c1_ReadReg16Word16>
 800844c:	60f8      	str	r0, [r7, #12]
		if (!status) {
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	2b00      	cmp	r3, #0
 8008452:	d146      	bne.n	80084e2 <VL6180x_RangeGetMeasurement+0xd6>
			pRangeData->signalRate_mcps = VL6180x_9to7Conv(RawRate);
 8008454:	897b      	ldrh	r3, [r7, #10]
 8008456:	461a      	mov	r2, r3
 8008458:	683b      	ldr	r3, [r7, #0]
 800845a:	605a      	str	r2, [r3, #4]
			status = VL6180x_GetCachedByte(dev, RESULT_RANGE_STATUS, &RawStatus);
 800845c:	f107 0309 	add.w	r3, r7, #9
 8008460:	461a      	mov	r2, r3
 8008462:	214d      	movs	r1, #77	; 0x4d
 8008464:	2052      	movs	r0, #82	; 0x52
 8008466:	f7fd fe31 	bl	80060cc <i2c1_ReadReg16Byte>
 800846a:	60f8      	str	r0, [r7, #12]
			if (!status) {
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	2b00      	cmp	r3, #0
 8008470:	d106      	bne.n	8008480 <VL6180x_RangeGetMeasurement+0x74>
				pRangeData->errorStatus = RawStatus >> 4;
 8008472:	7a7b      	ldrb	r3, [r7, #9]
 8008474:	091b      	lsrs	r3, r3, #4
 8008476:	b2db      	uxtb	r3, r3
 8008478:	461a      	mov	r2, r3
 800847a:	683b      	ldr	r3, [r7, #0]
 800847c:	609a      	str	r2, [r3, #8]
 800847e:	e002      	b.n	8008486 <VL6180x_RangeGetMeasurement+0x7a>
			} else {
			term_printf("Rd RESULT_RANGE_STATUS fail\n\r");
 8008480:	4820      	ldr	r0, [pc, #128]	; (8008504 <VL6180x_RangeGetMeasurement+0xf8>)
 8008482:	f7fd ff7f 	bl	8006384 <term_printf>
			}
	#if VL6180x_WRAP_AROUND_FILTER_SUPPORT || VL6180x_HAVE_DMAX_RANGING
			status = _GetRateResult(dev, pRangeData);
 8008486:	79fb      	ldrb	r3, [r7, #7]
 8008488:	6839      	ldr	r1, [r7, #0]
 800848a:	4618      	mov	r0, r3
 800848c:	f001 fa4e 	bl	800992c <_GetRateResult>
 8008490:	60f8      	str	r0, [r7, #12]
			if (status)
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	2b00      	cmp	r3, #0
 8008496:	d12c      	bne.n	80084f2 <VL6180x_RangeGetMeasurement+0xe6>
				goto error;
	#endif
	#if VL6180x_WRAP_AROUND_FILTER_SUPPORT
			/* if enabled run filter */
			if (_IsWrapArroundActive(dev)) {
 8008498:	4b1b      	ldr	r3, [pc, #108]	; (8008508 <VL6180x_RangeGetMeasurement+0xfc>)
 800849a:	7e5b      	ldrb	r3, [r3, #25]
 800849c:	2b00      	cmp	r3, #0
 800849e:	d015      	beq.n	80084cc <VL6180x_RangeGetMeasurement+0xc0>
				status = _filter_GetResult(dev, pRangeData);
 80084a0:	79fb      	ldrb	r3, [r7, #7]
 80084a2:	6839      	ldr	r1, [r7, #0]
 80084a4:	4618      	mov	r0, r3
 80084a6:	f001 f9ef 	bl	8009888 <_filter_GetResult>
 80084aa:	60f8      	str	r0, [r7, #12]
				if (!status) {
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d10c      	bne.n	80084cc <VL6180x_RangeGetMeasurement+0xc0>
					/* patch the range status and measure if it is filtered */
					if(pRangeData->FilteredData.filterError != NoError) {
 80084b2:	683b      	ldr	r3, [r7, #0]
 80084b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d008      	beq.n	80084cc <VL6180x_RangeGetMeasurement+0xc0>
						pRangeData->errorStatus = pRangeData->FilteredData.filterError;
 80084ba:	683b      	ldr	r3, [r7, #0]
 80084bc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80084be:	683b      	ldr	r3, [r7, #0]
 80084c0:	609a      	str	r2, [r3, #8]
						pRangeData->range_mm = pRangeData->FilteredData.range_mm;
 80084c2:	683b      	ldr	r3, [r7, #0]
 80084c4:	8c1b      	ldrh	r3, [r3, #32]
 80084c6:	461a      	mov	r2, r3
 80084c8:	683b      	ldr	r3, [r7, #0]
 80084ca:	601a      	str	r2, [r3, #0]
				}
			}
	#endif

	#if VL6180x_HAVE_DMAX_RANGING
			if (_IsDMaxActive(dev)) {
 80084cc:	4b0e      	ldr	r3, [pc, #56]	; (8008508 <VL6180x_RangeGetMeasurement+0xfc>)
 80084ce:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d00e      	beq.n	80084f4 <VL6180x_RangeGetMeasurement+0xe8>
				_DMax_Compute(dev, pRangeData);
 80084d6:	79fb      	ldrb	r3, [r7, #7]
 80084d8:	6839      	ldr	r1, [r7, #0]
 80084da:	4618      	mov	r0, r3
 80084dc:	f001 fc20 	bl	8009d20 <_DMax_Compute>
 80084e0:	e008      	b.n	80084f4 <VL6180x_RangeGetMeasurement+0xe8>
			}
	#endif
		} else {
		term_printf("Rd RESULT_RANGE_SIGNAL_RATE fail\n\r");
 80084e2:	480a      	ldr	r0, [pc, #40]	; (800850c <VL6180x_RangeGetMeasurement+0x100>)
 80084e4:	f7fd ff4e 	bl	8006384 <term_printf>
 80084e8:	e004      	b.n	80084f4 <VL6180x_RangeGetMeasurement+0xe8>
		}
	} else {
		term_printf("VL6180x_GetRangeResult fail\n\r");
 80084ea:	4809      	ldr	r0, [pc, #36]	; (8008510 <VL6180x_RangeGetMeasurement+0x104>)
 80084ec:	f7fd ff4a 	bl	8006384 <term_printf>
 80084f0:	e000      	b.n	80084f4 <VL6180x_RangeGetMeasurement+0xe8>
				goto error;
 80084f2:	bf00      	nop
	}
error:
	_CachedRegs_Flush(dev);

	return status;
 80084f4:	68fb      	ldr	r3, [r7, #12]
}
 80084f6:	4618      	mov	r0, r3
 80084f8:	3710      	adds	r7, #16
 80084fa:	46bd      	mov	sp, r7
 80084fc:	bd80      	pop	{r7, pc}
 80084fe:	bf00      	nop
 8008500:	0800b9dc 	.word	0x0800b9dc
 8008504:	0800b9f8 	.word	0x0800b9f8
 8008508:	20000070 	.word	0x20000070
 800850c:	0800ba18 	.word	0x0800ba18
 8008510:	0800ba3c 	.word	0x0800ba3c

08008514 <VL6180x_FilterSetState>:
	LOG_FUNCTION_END(status) ;
	return status;
}
//=============================================================================
int VL6180x_FilterSetState(VL6180xDev_t dev, int state)
{
 8008514:	b480      	push	{r7}
 8008516:	b085      	sub	sp, #20
 8008518:	af00      	add	r7, sp, #0
 800851a:	4603      	mov	r3, r0
 800851c:	6039      	str	r1, [r7, #0]
 800851e:	71fb      	strb	r3, [r7, #7]
	int status;
	#if VL6180x_WRAP_AROUND_FILTER_SUPPORT
	VL6180xDevDataSet(dev, WrapAroundFilterActive, state);
 8008520:	683b      	ldr	r3, [r7, #0]
 8008522:	b2da      	uxtb	r2, r3
 8008524:	4b04      	ldr	r3, [pc, #16]	; (8008538 <VL6180x_FilterSetState+0x24>)
 8008526:	765a      	strb	r2, [r3, #25]
	status = 0;
 8008528:	2300      	movs	r3, #0
 800852a:	60fb      	str	r3, [r7, #12]
	#else
	status =  NOT_SUPPORTED;
	#endif
	return status;
 800852c:	68fb      	ldr	r3, [r7, #12]
}
 800852e:	4618      	mov	r0, r3
 8008530:	3714      	adds	r7, #20
 8008532:	46bd      	mov	sp, r7
 8008534:	bc80      	pop	{r7}
 8008536:	4770      	bx	lr
 8008538:	20000070 	.word	0x20000070

0800853c <VL6180x_FilterGetState>:
//=============================================================================
int VL6180x_FilterGetState(VL6180xDev_t dev)
{
 800853c:	b480      	push	{r7}
 800853e:	b085      	sub	sp, #20
 8008540:	af00      	add	r7, sp, #0
 8008542:	4603      	mov	r3, r0
 8008544:	71fb      	strb	r3, [r7, #7]
	int status;
	#if VL6180x_WRAP_AROUND_FILTER_SUPPORT
	status = VL6180xDevDataGet(dev, WrapAroundFilterActive);
 8008546:	4b04      	ldr	r3, [pc, #16]	; (8008558 <VL6180x_FilterGetState+0x1c>)
 8008548:	7e5b      	ldrb	r3, [r3, #25]
 800854a:	60fb      	str	r3, [r7, #12]
	#else
	status = 0;
	#endif
	return status;
 800854c:	68fb      	ldr	r3, [r7, #12]
}
 800854e:	4618      	mov	r0, r3
 8008550:	3714      	adds	r7, #20
 8008552:	46bd      	mov	sp, r7
 8008554:	bc80      	pop	{r7}
 8008556:	4770      	bx	lr
 8008558:	20000070 	.word	0x20000070

0800855c <VL6180x_RangeGetResult>:
//=============================================================================
int VL6180x_RangeGetResult(VL6180xDev_t dev, int32_t *pRange_mm)
{
 800855c:	b580      	push	{r7, lr}
 800855e:	b086      	sub	sp, #24
 8008560:	af00      	add	r7, sp, #0
 8008562:	4603      	mov	r3, r0
 8008564:	6039      	str	r1, [r7, #0]
 8008566:	71fb      	strb	r3, [r7, #7]
	int status;
	uint8_t RawRange;
	int32_t Upscale;
	status = VL6180x_GetCachedByte(dev, RESULT_RANGE_VAL, &RawRange);
 8008568:	f107 030f 	add.w	r3, r7, #15
 800856c:	461a      	mov	r2, r3
 800856e:	2162      	movs	r1, #98	; 0x62
 8008570:	2052      	movs	r0, #82	; 0x52
 8008572:	f7fd fdab 	bl	80060cc <i2c1_ReadReg16Byte>
 8008576:	6178      	str	r0, [r7, #20]
	if (!status) {
 8008578:	697b      	ldr	r3, [r7, #20]
 800857a:	2b00      	cmp	r3, #0
 800857c:	d109      	bne.n	8008592 <VL6180x_RangeGetResult+0x36>
		Upscale = _GetUpscale(dev);
 800857e:	4b07      	ldr	r3, [pc, #28]	; (800859c <VL6180x_RangeGetResult+0x40>)
 8008580:	7e1b      	ldrb	r3, [r3, #24]
 8008582:	613b      	str	r3, [r7, #16]
		*pRange_mm = Upscale * (int32_t)RawRange;
 8008584:	7bfb      	ldrb	r3, [r7, #15]
 8008586:	461a      	mov	r2, r3
 8008588:	693b      	ldr	r3, [r7, #16]
 800858a:	fb03 f202 	mul.w	r2, r3, r2
 800858e:	683b      	ldr	r3, [r7, #0]
 8008590:	601a      	str	r2, [r3, #0]
	}
	return status;
 8008592:	697b      	ldr	r3, [r7, #20]
}
 8008594:	4618      	mov	r0, r3
 8008596:	3718      	adds	r7, #24
 8008598:	46bd      	mov	sp, r7
 800859a:	bd80      	pop	{r7, pc}
 800859c:	20000070 	.word	0x20000070

080085a0 <VL6180x_RangeSetRawThresholds>:
//=============================================================================
int VL6180x_RangeSetRawThresholds(VL6180xDev_t dev, uint8_t low, uint8_t high)
{
 80085a0:	b580      	push	{r7, lr}
 80085a2:	b084      	sub	sp, #16
 80085a4:	af00      	add	r7, sp, #0
 80085a6:	4603      	mov	r3, r0
 80085a8:	71fb      	strb	r3, [r7, #7]
 80085aa:	460b      	mov	r3, r1
 80085ac:	71bb      	strb	r3, [r7, #6]
 80085ae:	4613      	mov	r3, r2
 80085b0:	717b      	strb	r3, [r7, #5]
	int status;
	status = i2c1_WriteReg16Byte(VL6180x_I2C_ADDRESS, SYSRANGE_THRESH_HIGH, high);
 80085b2:	797b      	ldrb	r3, [r7, #5]
 80085b4:	461a      	mov	r2, r3
 80085b6:	2119      	movs	r1, #25
 80085b8:	2052      	movs	r0, #82	; 0x52
 80085ba:	f7fd fd03 	bl	8005fc4 <i2c1_WriteReg16Byte>
 80085be:	60f8      	str	r0, [r7, #12]
	if (!status) {
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d106      	bne.n	80085d4 <VL6180x_RangeSetRawThresholds+0x34>
		status = i2c1_WriteReg16Byte(VL6180x_I2C_ADDRESS, SYSRANGE_THRESH_LOW, low);
 80085c6:	79bb      	ldrb	r3, [r7, #6]
 80085c8:	461a      	mov	r2, r3
 80085ca:	211a      	movs	r1, #26
 80085cc:	2052      	movs	r0, #82	; 0x52
 80085ce:	f7fd fcf9 	bl	8005fc4 <i2c1_WriteReg16Byte>
 80085d2:	60f8      	str	r0, [r7, #12]
	}
	return status;
 80085d4:	68fb      	ldr	r3, [r7, #12]
}
 80085d6:	4618      	mov	r0, r3
 80085d8:	3710      	adds	r7, #16
 80085da:	46bd      	mov	sp, r7
 80085dc:	bd80      	pop	{r7, pc}
	...

080085e0 <VL6180x_RangeSetThresholds>:
//=============================================================================
int VL6180x_RangeSetThresholds(VL6180xDev_t dev, uint16_t low, uint16_t high, int UseSafeParamHold)
{
 80085e0:	b580      	push	{r7, lr}
 80085e2:	b088      	sub	sp, #32
 80085e4:	af00      	add	r7, sp, #0
 80085e6:	607b      	str	r3, [r7, #4]
 80085e8:	4603      	mov	r3, r0
 80085ea:	73fb      	strb	r3, [r7, #15]
 80085ec:	460b      	mov	r3, r1
 80085ee:	81bb      	strh	r3, [r7, #12]
 80085f0:	4613      	mov	r3, r2
 80085f2:	817b      	strh	r3, [r7, #10]
	int status;
	int scale;
	scale = _GetUpscale(dev, UpscaleFactor);
 80085f4:	4b25      	ldr	r3, [pc, #148]	; (800868c <VL6180x_RangeSetThresholds+0xac>)
 80085f6:	7e1b      	ldrb	r3, [r3, #24]
 80085f8:	61bb      	str	r3, [r7, #24]
	if (low > scale * 255 || high > scale * 255) {
 80085fa:	89b9      	ldrh	r1, [r7, #12]
 80085fc:	69ba      	ldr	r2, [r7, #24]
 80085fe:	4613      	mov	r3, r2
 8008600:	021b      	lsls	r3, r3, #8
 8008602:	1a9b      	subs	r3, r3, r2
 8008604:	4299      	cmp	r1, r3
 8008606:	dc06      	bgt.n	8008616 <VL6180x_RangeSetThresholds+0x36>
 8008608:	8979      	ldrh	r1, [r7, #10]
 800860a:	69ba      	ldr	r2, [r7, #24]
 800860c:	4613      	mov	r3, r2
 800860e:	021b      	lsls	r3, r3, #8
 8008610:	1a9b      	subs	r3, r3, r2
 8008612:	4299      	cmp	r1, r3
 8008614:	dd03      	ble.n	800861e <VL6180x_RangeSetThresholds+0x3e>
		status = INVALID_PARAMS;
 8008616:	f06f 0301 	mvn.w	r3, #1
 800861a:	61fb      	str	r3, [r7, #28]
 800861c:	e030      	b.n	8008680 <VL6180x_RangeSetThresholds+0xa0>
	} else {
		do {
			if (UseSafeParamHold) {
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	2b00      	cmp	r3, #0
 8008622:	d008      	beq.n	8008636 <VL6180x_RangeSetThresholds+0x56>
				status = VL6180x_SetGroupParamHold(dev, 1);
 8008624:	7bfb      	ldrb	r3, [r7, #15]
 8008626:	2101      	movs	r1, #1
 8008628:	4618      	mov	r0, r3
 800862a:	f7ff fc67 	bl	8007efc <VL6180x_SetGroupParamHold>
 800862e:	61f8      	str	r0, [r7, #28]
				if (status)
 8008630:	69fb      	ldr	r3, [r7, #28]
 8008632:	2b00      	cmp	r3, #0
 8008634:	d123      	bne.n	800867e <VL6180x_RangeSetThresholds+0x9e>
					break;
		    }
		    status = VL6180x_RangeSetRawThresholds(dev, (uint8_t)(low / scale), (uint8_t)(high / scale));
 8008636:	89ba      	ldrh	r2, [r7, #12]
 8008638:	69bb      	ldr	r3, [r7, #24]
 800863a:	fb92 f3f3 	sdiv	r3, r2, r3
 800863e:	b2d9      	uxtb	r1, r3
 8008640:	897a      	ldrh	r2, [r7, #10]
 8008642:	69bb      	ldr	r3, [r7, #24]
 8008644:	fb92 f3f3 	sdiv	r3, r2, r3
 8008648:	b2da      	uxtb	r2, r3
 800864a:	7bfb      	ldrb	r3, [r7, #15]
 800864c:	4618      	mov	r0, r3
 800864e:	f7ff ffa7 	bl	80085a0 <VL6180x_RangeSetRawThresholds>
 8008652:	61f8      	str	r0, [r7, #28]
		    if (status) {
 8008654:	69fb      	ldr	r3, [r7, #28]
 8008656:	2b00      	cmp	r3, #0
 8008658:	d002      	beq.n	8008660 <VL6180x_RangeSetThresholds+0x80>
				term_printf("VL6180x_RangeSetRawThresholds fail\n\r");
 800865a:	480d      	ldr	r0, [pc, #52]	; (8008690 <VL6180x_RangeSetThresholds+0xb0>)
 800865c:	f7fd fe92 	bl	8006384 <term_printf>
		    }
		    if (UseSafeParamHold) {
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	2b00      	cmp	r3, #0
 8008664:	d00c      	beq.n	8008680 <VL6180x_RangeSetThresholds+0xa0>
				int HoldStatus;
				/* tryt to unset param hold vene if previous fail */
				HoldStatus = VL6180x_SetGroupParamHold(dev, 0);
 8008666:	7bfb      	ldrb	r3, [r7, #15]
 8008668:	2100      	movs	r1, #0
 800866a:	4618      	mov	r0, r3
 800866c:	f7ff fc46 	bl	8007efc <VL6180x_SetGroupParamHold>
 8008670:	6178      	str	r0, [r7, #20]
				if (!status)
 8008672:	69fb      	ldr	r3, [r7, #28]
 8008674:	2b00      	cmp	r3, #0
 8008676:	d103      	bne.n	8008680 <VL6180x_RangeSetThresholds+0xa0>
					status = HoldStatus;
 8008678:	697b      	ldr	r3, [r7, #20]
 800867a:	61fb      	str	r3, [r7, #28]
 800867c:	e000      	b.n	8008680 <VL6180x_RangeSetThresholds+0xa0>
					break;
 800867e:	bf00      	nop
		    }
		} while (0);
	}
	return status;
 8008680:	69fb      	ldr	r3, [r7, #28]
}
 8008682:	4618      	mov	r0, r3
 8008684:	3720      	adds	r7, #32
 8008686:	46bd      	mov	sp, r7
 8008688:	bd80      	pop	{r7, pc}
 800868a:	bf00      	nop
 800868c:	20000070 	.word	0x20000070
 8008690:	0800baa0 	.word	0x0800baa0

08008694 <VL6180x_RangeGetInterruptStatus>:
	} while (0);
	return status;
}
//=============================================================================
int VL6180x_RangeGetInterruptStatus(VL6180xDev_t dev, uint8_t *pIntStatus)
{
 8008694:	b580      	push	{r7, lr}
 8008696:	b084      	sub	sp, #16
 8008698:	af00      	add	r7, sp, #0
 800869a:	4603      	mov	r3, r0
 800869c:	6039      	str	r1, [r7, #0]
 800869e:	71fb      	strb	r3, [r7, #7]
	int status;
	uint8_t IntStatus;
	status = VL6180x_GetCachedByte(dev, RESULT_INTERRUPT_STATUS_GPIO, &IntStatus);
 80086a0:	f107 030b 	add.w	r3, r7, #11
 80086a4:	461a      	mov	r2, r3
 80086a6:	214f      	movs	r1, #79	; 0x4f
 80086a8:	2052      	movs	r0, #82	; 0x52
 80086aa:	f7fd fd0f 	bl	80060cc <i2c1_ReadReg16Byte>
 80086ae:	60f8      	str	r0, [r7, #12]
	*pIntStatus = IntStatus & 0xC7;
 80086b0:	7afb      	ldrb	r3, [r7, #11]
 80086b2:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 80086b6:	b2da      	uxtb	r2, r3
 80086b8:	683b      	ldr	r3, [r7, #0]
 80086ba:	701a      	strb	r2, [r3, #0]
	return status;
 80086bc:	68fb      	ldr	r3, [r7, #12]
}
 80086be:	4618      	mov	r0, r3
 80086c0:	3710      	adds	r7, #16
 80086c2:	46bd      	mov	sp, r7
 80086c4:	bd80      	pop	{r7, pc}

080086c6 <VL6180x_ClearInterrupt>:
	status = i2c1_ReadReg16Byte(VL6180x_I2C_ADDRESS, RESULT_INTERRUPT_STATUS_GPIO, IntStatus);
	return status;
}
//=============================================================================
int VL6180x_ClearInterrupt(VL6180xDev_t dev, uint8_t IntClear)
{
 80086c6:	b580      	push	{r7, lr}
 80086c8:	b084      	sub	sp, #16
 80086ca:	af00      	add	r7, sp, #0
 80086cc:	4603      	mov	r3, r0
 80086ce:	460a      	mov	r2, r1
 80086d0:	71fb      	strb	r3, [r7, #7]
 80086d2:	4613      	mov	r3, r2
 80086d4:	71bb      	strb	r3, [r7, #6]
	int status;
	if (IntClear <= 7) {
 80086d6:	79bb      	ldrb	r3, [r7, #6]
 80086d8:	2b07      	cmp	r3, #7
 80086da:	d807      	bhi.n	80086ec <VL6180x_ClearInterrupt+0x26>
		status = i2c1_WriteReg16Byte(VL6180x_I2C_ADDRESS, SYSTEM_INTERRUPT_CLEAR, IntClear);
 80086dc:	79bb      	ldrb	r3, [r7, #6]
 80086de:	461a      	mov	r2, r3
 80086e0:	2115      	movs	r1, #21
 80086e2:	2052      	movs	r0, #82	; 0x52
 80086e4:	f7fd fc6e 	bl	8005fc4 <i2c1_WriteReg16Byte>
 80086e8:	60f8      	str	r0, [r7, #12]
 80086ea:	e002      	b.n	80086f2 <VL6180x_ClearInterrupt+0x2c>
	} else {
		status = INVALID_PARAMS;
 80086ec:	f06f 0301 	mvn.w	r3, #1
 80086f0:	60fb      	str	r3, [r7, #12]
	}
	return status;
 80086f2:	68fb      	ldr	r3, [r7, #12]
}
 80086f4:	4618      	mov	r0, r3
 80086f6:	3710      	adds	r7, #16
 80086f8:	46bd      	mov	sp, r7
 80086fa:	bd80      	pop	{r7, pc}

080086fc <_UpscaleInitPatch0>:
	return status;
}
//=============================================================================
#if VL6180x_UPSCALE_SUPPORT != 1
static int _UpscaleInitPatch0(VL6180xDev_t dev)
{
 80086fc:	b580      	push	{r7, lr}
 80086fe:	b084      	sub	sp, #16
 8008700:	af00      	add	r7, sp, #0
 8008702:	4603      	mov	r3, r0
 8008704:	71fb      	strb	r3, [r7, #7]
	int status;
	uint32_t CalValue = 0;
 8008706:	2300      	movs	r3, #0
 8008708:	60fb      	str	r3, [r7, #12]
	CalValue = VL6180xDevDataGet(dev, Part2PartAmbNVM);
 800870a:	4b07      	ldr	r3, [pc, #28]	; (8008728 <_UpscaleInitPatch0+0x2c>)
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	60fb      	str	r3, [r7, #12]
	status = i2c1_WriteReg16Word32(VL6180x_I2C_ADDRESS, 0xDA, CalValue);
 8008710:	68fa      	ldr	r2, [r7, #12]
 8008712:	21da      	movs	r1, #218	; 0xda
 8008714:	2052      	movs	r0, #82	; 0x52
 8008716:	f7fd fca7 	bl	8006068 <i2c1_WriteReg16Word32>
 800871a:	60b8      	str	r0, [r7, #8]
	return status;
 800871c:	68bb      	ldr	r3, [r7, #8]
}
 800871e:	4618      	mov	r0, r3
 8008720:	3710      	adds	r7, #16
 8008722:	46bd      	mov	sp, r7
 8008724:	bd80      	pop	{r7, pc}
 8008726:	bf00      	nop
 8008728:	20000070 	.word	0x20000070

0800872c <VL6180x_UpscaleRegInit>:
//=============================================================================
/* only include up-scaling register setting when up-scale support is configured in */
int VL6180x_UpscaleRegInit(VL6180xDev_t dev)
{
 800872c:	b580      	push	{r7, lr}
 800872e:	b082      	sub	sp, #8
 8008730:	af00      	add	r7, sp, #0
 8008732:	4603      	mov	r3, r0
 8008734:	71fb      	strb	r3, [r7, #7]
	/*  apply REGISTER_TUNING_ER02_100614_CustomerView.txt */
	i2c1_WriteReg16Byte(VL6180x_I2C_ADDRESS, 0x0207, 0x01);
 8008736:	2201      	movs	r2, #1
 8008738:	f240 2107 	movw	r1, #519	; 0x207
 800873c:	2052      	movs	r0, #82	; 0x52
 800873e:	f7fd fc41 	bl	8005fc4 <i2c1_WriteReg16Byte>
	i2c1_WriteReg16Byte(VL6180x_I2C_ADDRESS, 0x0208, 0x01);
 8008742:	2201      	movs	r2, #1
 8008744:	f44f 7102 	mov.w	r1, #520	; 0x208
 8008748:	2052      	movs	r0, #82	; 0x52
 800874a:	f7fd fc3b 	bl	8005fc4 <i2c1_WriteReg16Byte>
	i2c1_WriteReg16Byte(VL6180x_I2C_ADDRESS, 0x0096, 0x00);
 800874e:	2200      	movs	r2, #0
 8008750:	2196      	movs	r1, #150	; 0x96
 8008752:	2052      	movs	r0, #82	; 0x52
 8008754:	f7fd fc36 	bl	8005fc4 <i2c1_WriteReg16Byte>
	i2c1_WriteReg16Byte(VL6180x_I2C_ADDRESS, 0x0097, 0x54);
 8008758:	2254      	movs	r2, #84	; 0x54
 800875a:	2197      	movs	r1, #151	; 0x97
 800875c:	2052      	movs	r0, #82	; 0x52
 800875e:	f7fd fc31 	bl	8005fc4 <i2c1_WriteReg16Byte>
	i2c1_WriteReg16Byte(VL6180x_I2C_ADDRESS, 0x00e3, 0x00);
 8008762:	2200      	movs	r2, #0
 8008764:	21e3      	movs	r1, #227	; 0xe3
 8008766:	2052      	movs	r0, #82	; 0x52
 8008768:	f7fd fc2c 	bl	8005fc4 <i2c1_WriteReg16Byte>
	i2c1_WriteReg16Byte(VL6180x_I2C_ADDRESS, 0x00e4, 0x04);
 800876c:	2204      	movs	r2, #4
 800876e:	21e4      	movs	r1, #228	; 0xe4
 8008770:	2052      	movs	r0, #82	; 0x52
 8008772:	f7fd fc27 	bl	8005fc4 <i2c1_WriteReg16Byte>
	i2c1_WriteReg16Byte(VL6180x_I2C_ADDRESS, 0x00e5, 0x02);
 8008776:	2202      	movs	r2, #2
 8008778:	21e5      	movs	r1, #229	; 0xe5
 800877a:	2052      	movs	r0, #82	; 0x52
 800877c:	f7fd fc22 	bl	8005fc4 <i2c1_WriteReg16Byte>
	i2c1_WriteReg16Byte(VL6180x_I2C_ADDRESS, 0x00e6, 0x01);
 8008780:	2201      	movs	r2, #1
 8008782:	21e6      	movs	r1, #230	; 0xe6
 8008784:	2052      	movs	r0, #82	; 0x52
 8008786:	f7fd fc1d 	bl	8005fc4 <i2c1_WriteReg16Byte>
	i2c1_WriteReg16Byte(VL6180x_I2C_ADDRESS, 0x00e7, 0x03);
 800878a:	2203      	movs	r2, #3
 800878c:	21e7      	movs	r1, #231	; 0xe7
 800878e:	2052      	movs	r0, #82	; 0x52
 8008790:	f7fd fc18 	bl	8005fc4 <i2c1_WriteReg16Byte>
	i2c1_WriteReg16Byte(VL6180x_I2C_ADDRESS, 0x00f5, 0x02);
 8008794:	2202      	movs	r2, #2
 8008796:	21f5      	movs	r1, #245	; 0xf5
 8008798:	2052      	movs	r0, #82	; 0x52
 800879a:	f7fd fc13 	bl	8005fc4 <i2c1_WriteReg16Byte>
	i2c1_WriteReg16Byte(VL6180x_I2C_ADDRESS, 0x00d9, 0x05);
 800879e:	2205      	movs	r2, #5
 80087a0:	21d9      	movs	r1, #217	; 0xd9
 80087a2:	2052      	movs	r0, #82	; 0x52
 80087a4:	f7fd fc0e 	bl	8005fc4 <i2c1_WriteReg16Byte>

	_UpscaleInitPatch0(dev);
 80087a8:	79fb      	ldrb	r3, [r7, #7]
 80087aa:	4618      	mov	r0, r3
 80087ac:	f7ff ffa6 	bl	80086fc <_UpscaleInitPatch0>

	i2c1_WriteReg16Byte(VL6180x_I2C_ADDRESS, 0x009f, 0x00);
 80087b0:	2200      	movs	r2, #0
 80087b2:	219f      	movs	r1, #159	; 0x9f
 80087b4:	2052      	movs	r0, #82	; 0x52
 80087b6:	f7fd fc05 	bl	8005fc4 <i2c1_WriteReg16Byte>
	i2c1_WriteReg16Byte(VL6180x_I2C_ADDRESS, 0x00a3, 0x28);
 80087ba:	2228      	movs	r2, #40	; 0x28
 80087bc:	21a3      	movs	r1, #163	; 0xa3
 80087be:	2052      	movs	r0, #82	; 0x52
 80087c0:	f7fd fc00 	bl	8005fc4 <i2c1_WriteReg16Byte>
	i2c1_WriteReg16Byte(VL6180x_I2C_ADDRESS, 0x00b7, 0x00);
 80087c4:	2200      	movs	r2, #0
 80087c6:	21b7      	movs	r1, #183	; 0xb7
 80087c8:	2052      	movs	r0, #82	; 0x52
 80087ca:	f7fd fbfb 	bl	8005fc4 <i2c1_WriteReg16Byte>
	i2c1_WriteReg16Byte(VL6180x_I2C_ADDRESS, 0x00bb, 0x28);
 80087ce:	2228      	movs	r2, #40	; 0x28
 80087d0:	21bb      	movs	r1, #187	; 0xbb
 80087d2:	2052      	movs	r0, #82	; 0x52
 80087d4:	f7fd fbf6 	bl	8005fc4 <i2c1_WriteReg16Byte>
	i2c1_WriteReg16Byte(VL6180x_I2C_ADDRESS, 0x00b2, 0x09);
 80087d8:	2209      	movs	r2, #9
 80087da:	21b2      	movs	r1, #178	; 0xb2
 80087dc:	2052      	movs	r0, #82	; 0x52
 80087de:	f7fd fbf1 	bl	8005fc4 <i2c1_WriteReg16Byte>
	i2c1_WriteReg16Byte(VL6180x_I2C_ADDRESS, 0x00ca, 0x09);
 80087e2:	2209      	movs	r2, #9
 80087e4:	21ca      	movs	r1, #202	; 0xca
 80087e6:	2052      	movs	r0, #82	; 0x52
 80087e8:	f7fd fbec 	bl	8005fc4 <i2c1_WriteReg16Byte>
	i2c1_WriteReg16Byte(VL6180x_I2C_ADDRESS, 0x0198, 0x01);
 80087ec:	2201      	movs	r2, #1
 80087ee:	f44f 71cc 	mov.w	r1, #408	; 0x198
 80087f2:	2052      	movs	r0, #82	; 0x52
 80087f4:	f7fd fbe6 	bl	8005fc4 <i2c1_WriteReg16Byte>
	i2c1_WriteReg16Byte(VL6180x_I2C_ADDRESS, 0x01b0, 0x17);
 80087f8:	2217      	movs	r2, #23
 80087fa:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 80087fe:	2052      	movs	r0, #82	; 0x52
 8008800:	f7fd fbe0 	bl	8005fc4 <i2c1_WriteReg16Byte>
	i2c1_WriteReg16Byte(VL6180x_I2C_ADDRESS, 0x01ad, 0x00);
 8008804:	2200      	movs	r2, #0
 8008806:	f240 11ad 	movw	r1, #429	; 0x1ad
 800880a:	2052      	movs	r0, #82	; 0x52
 800880c:	f7fd fbda 	bl	8005fc4 <i2c1_WriteReg16Byte>
	i2c1_WriteReg16Byte(VL6180x_I2C_ADDRESS, 0x00ff, 0x05);
 8008810:	2205      	movs	r2, #5
 8008812:	21ff      	movs	r1, #255	; 0xff
 8008814:	2052      	movs	r0, #82	; 0x52
 8008816:	f7fd fbd5 	bl	8005fc4 <i2c1_WriteReg16Byte>
	i2c1_WriteReg16Byte(VL6180x_I2C_ADDRESS, 0x0100, 0x05);
 800881a:	2205      	movs	r2, #5
 800881c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8008820:	2052      	movs	r0, #82	; 0x52
 8008822:	f7fd fbcf 	bl	8005fc4 <i2c1_WriteReg16Byte>
	i2c1_WriteReg16Byte(VL6180x_I2C_ADDRESS, 0x0199, 0x05);
 8008826:	2205      	movs	r2, #5
 8008828:	f240 1199 	movw	r1, #409	; 0x199
 800882c:	2052      	movs	r0, #82	; 0x52
 800882e:	f7fd fbc9 	bl	8005fc4 <i2c1_WriteReg16Byte>
	i2c1_WriteReg16Byte(VL6180x_I2C_ADDRESS, 0x01a6, 0x1b);
 8008832:	221b      	movs	r2, #27
 8008834:	f44f 71d3 	mov.w	r1, #422	; 0x1a6
 8008838:	2052      	movs	r0, #82	; 0x52
 800883a:	f7fd fbc3 	bl	8005fc4 <i2c1_WriteReg16Byte>
	i2c1_WriteReg16Byte(VL6180x_I2C_ADDRESS, 0x01ac, 0x3e);
 800883e:	223e      	movs	r2, #62	; 0x3e
 8008840:	f44f 71d6 	mov.w	r1, #428	; 0x1ac
 8008844:	2052      	movs	r0, #82	; 0x52
 8008846:	f7fd fbbd 	bl	8005fc4 <i2c1_WriteReg16Byte>
	i2c1_WriteReg16Byte(VL6180x_I2C_ADDRESS, 0x01a7, 0x1f);
 800884a:	221f      	movs	r2, #31
 800884c:	f240 11a7 	movw	r1, #423	; 0x1a7
 8008850:	2052      	movs	r0, #82	; 0x52
 8008852:	f7fd fbb7 	bl	8005fc4 <i2c1_WriteReg16Byte>
	i2c1_WriteReg16Byte(VL6180x_I2C_ADDRESS, 0x0030, 0x00);
 8008856:	2200      	movs	r2, #0
 8008858:	2130      	movs	r1, #48	; 0x30
 800885a:	2052      	movs	r0, #82	; 0x52
 800885c:	f7fd fbb2 	bl	8005fc4 <i2c1_WriteReg16Byte>
	i2c1_WriteReg16Byte(VL6180x_I2C_ADDRESS, 0x0011, 0x10);
 8008860:	2210      	movs	r2, #16
 8008862:	2111      	movs	r1, #17
 8008864:	2052      	movs	r0, #82	; 0x52
 8008866:	f7fd fbad 	bl	8005fc4 <i2c1_WriteReg16Byte>
	i2c1_WriteReg16Byte(VL6180x_I2C_ADDRESS, 0x010a, 0x30);
 800886a:	2230      	movs	r2, #48	; 0x30
 800886c:	f44f 7185 	mov.w	r1, #266	; 0x10a
 8008870:	2052      	movs	r0, #82	; 0x52
 8008872:	f7fd fba7 	bl	8005fc4 <i2c1_WriteReg16Byte>
	i2c1_WriteReg16Byte(VL6180x_I2C_ADDRESS, 0x003f, 0x46);
 8008876:	2246      	movs	r2, #70	; 0x46
 8008878:	213f      	movs	r1, #63	; 0x3f
 800887a:	2052      	movs	r0, #82	; 0x52
 800887c:	f7fd fba2 	bl	8005fc4 <i2c1_WriteReg16Byte>
	i2c1_WriteReg16Byte(VL6180x_I2C_ADDRESS, 0x0031, 0xFF);
 8008880:	22ff      	movs	r2, #255	; 0xff
 8008882:	2131      	movs	r1, #49	; 0x31
 8008884:	2052      	movs	r0, #82	; 0x52
 8008886:	f7fd fb9d 	bl	8005fc4 <i2c1_WriteReg16Byte>
	i2c1_WriteReg16Byte(VL6180x_I2C_ADDRESS, 0x0040, 0x63);
 800888a:	2263      	movs	r2, #99	; 0x63
 800888c:	2140      	movs	r1, #64	; 0x40
 800888e:	2052      	movs	r0, #82	; 0x52
 8008890:	f7fd fb98 	bl	8005fc4 <i2c1_WriteReg16Byte>
	i2c1_WriteReg16Byte(VL6180x_I2C_ADDRESS, 0x002e, 0x01);
 8008894:	2201      	movs	r2, #1
 8008896:	212e      	movs	r1, #46	; 0x2e
 8008898:	2052      	movs	r0, #82	; 0x52
 800889a:	f7fd fb93 	bl	8005fc4 <i2c1_WriteReg16Byte>
	i2c1_WriteReg16Byte(VL6180x_I2C_ADDRESS, 0x002c, 0xff);
 800889e:	22ff      	movs	r2, #255	; 0xff
 80088a0:	212c      	movs	r1, #44	; 0x2c
 80088a2:	2052      	movs	r0, #82	; 0x52
 80088a4:	f7fd fb8e 	bl	8005fc4 <i2c1_WriteReg16Byte>
	i2c1_WriteReg16Byte(VL6180x_I2C_ADDRESS, 0x001b, 0x09);
 80088a8:	2209      	movs	r2, #9
 80088aa:	211b      	movs	r1, #27
 80088ac:	2052      	movs	r0, #82	; 0x52
 80088ae:	f7fd fb89 	bl	8005fc4 <i2c1_WriteReg16Byte>
	i2c1_WriteReg16Byte(VL6180x_I2C_ADDRESS, 0x003e, 0x31);
 80088b2:	2231      	movs	r2, #49	; 0x31
 80088b4:	213e      	movs	r1, #62	; 0x3e
 80088b6:	2052      	movs	r0, #82	; 0x52
 80088b8:	f7fd fb84 	bl	8005fc4 <i2c1_WriteReg16Byte>
	i2c1_WriteReg16Byte(VL6180x_I2C_ADDRESS, 0x0014, 0x24);
 80088bc:	2224      	movs	r2, #36	; 0x24
 80088be:	2114      	movs	r1, #20
 80088c0:	2052      	movs	r0, #82	; 0x52
 80088c2:	f7fd fb7f 	bl	8005fc4 <i2c1_WriteReg16Byte>
#if VL6180x_EXTENDED_RANGE
	VL6180x_RangeSetMaxConvergenceTime(dev, 63);
#else
	VL6180x_RangeSetMaxConvergenceTime(dev, 50);
 80088c6:	79fb      	ldrb	r3, [r7, #7]
 80088c8:	2132      	movs	r1, #50	; 0x32
 80088ca:	4618      	mov	r0, r3
 80088cc:	f000 f95e 	bl	8008b8c <VL6180x_RangeSetMaxConvergenceTime>
#endif
	return 0;
 80088d0:	2300      	movs	r3, #0
}
 80088d2:	4618      	mov	r0, r3
 80088d4:	3708      	adds	r7, #8
 80088d6:	46bd      	mov	sp, r7
 80088d8:	bd80      	pop	{r7, pc}
	...

080088dc <VL6180x_UpscaleSetScaling>:
#else
#define VL6180x_UpscaleRegInit(...) -1
#endif
//=============================================================================
int VL6180x_UpscaleSetScaling(VL6180xDev_t dev, uint8_t scaling)
{
 80088dc:	b580      	push	{r7, lr}
 80088de:	b086      	sub	sp, #24
 80088e0:	af00      	add	r7, sp, #0
 80088e2:	4603      	mov	r3, r0
 80088e4:	460a      	mov	r2, r1
 80088e6:	71fb      	strb	r3, [r7, #7]
 80088e8:	4613      	mov	r3, r2
 80088ea:	71bb      	strb	r3, [r7, #6]
	/* we are in fixed config so only allow configured factor */
	#define min_scaling VL6180x_UPSCALE_SUPPORT
	#define max_scaling VL6180x_UPSCALE_SUPPORT
#endif

	if (scaling >= min_scaling  && scaling <= max_scaling) {
 80088ec:	79bb      	ldrb	r3, [r7, #6]
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d065      	beq.n	80089be <VL6180x_UpscaleSetScaling+0xe2>
 80088f2:	79bb      	ldrb	r3, [r7, #6]
 80088f4:	2b03      	cmp	r3, #3
 80088f6:	d862      	bhi.n	80089be <VL6180x_UpscaleSetScaling+0xe2>

		Scaler = ScalerLookUP[scaling - 1];
 80088f8:	79bb      	ldrb	r3, [r7, #6]
 80088fa:	3b01      	subs	r3, #1
 80088fc:	4a35      	ldr	r2, [pc, #212]	; (80089d4 <VL6180x_UpscaleSetScaling+0xf8>)
 80088fe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008902:	823b      	strh	r3, [r7, #16]
		status = i2c1_WriteReg16Word16(VL6180x_I2C_ADDRESS, RANGE_SCALER, Scaler);
 8008904:	8a3b      	ldrh	r3, [r7, #16]
 8008906:	461a      	mov	r2, r3
 8008908:	2196      	movs	r1, #150	; 0x96
 800890a:	2052      	movs	r0, #82	; 0x52
 800890c:	f7fd fb80 	bl	8006010 <i2c1_WriteReg16Word16>
 8008910:	6178      	str	r0, [r7, #20]
		_SetUpscale(dev, scaling);
 8008912:	4a31      	ldr	r2, [pc, #196]	; (80089d8 <VL6180x_UpscaleSetScaling+0xfc>)
 8008914:	79bb      	ldrb	r3, [r7, #6]
 8008916:	7613      	strb	r3, [r2, #24]

		/* Apply scaling on  part-2-part offset */
		Offset = VL6180xDevDataGet(dev, Part2PartOffsetNVM) / scaling;
 8008918:	4b2f      	ldr	r3, [pc, #188]	; (80089d8 <VL6180x_UpscaleSetScaling+0xfc>)
 800891a:	f993 3091 	ldrsb.w	r3, [r3, #145]	; 0x91
 800891e:	461a      	mov	r2, r3
 8008920:	79bb      	ldrb	r3, [r7, #6]
 8008922:	fb92 f3f3 	sdiv	r3, r2, r3
 8008926:	73fb      	strb	r3, [r7, #15]
		status = i2c1_WriteReg16Byte(VL6180x_I2C_ADDRESS, SYSRANGE_PART_TO_PART_RANGE_OFFSET, Offset);
 8008928:	7bfb      	ldrb	r3, [r7, #15]
 800892a:	461a      	mov	r2, r3
 800892c:	2124      	movs	r1, #36	; 0x24
 800892e:	2052      	movs	r0, #82	; 0x52
 8008930:	f7fd fb48 	bl	8005fc4 <i2c1_WriteReg16Byte>
 8008934:	6178      	str	r0, [r7, #20]

		/* Apply scaling on CrossTalkValidHeight */
		if (status == 0) {
 8008936:	697b      	ldr	r3, [r7, #20]
 8008938:	2b00      	cmp	r3, #0
 800893a:	d10a      	bne.n	8008952 <VL6180x_UpscaleSetScaling+0x76>
			status = i2c1_WriteReg16Byte(VL6180x_I2C_ADDRESS, SYSRANGE_CROSSTALK_VALID_HEIGHT,
									DEF_CROSS_TALK_VALID_HEIGHT_VALUE /  scaling);
 800893c:	79bb      	ldrb	r3, [r7, #6]
 800893e:	2214      	movs	r2, #20
 8008940:	fb92 f3f3 	sdiv	r3, r2, r3
			status = i2c1_WriteReg16Byte(VL6180x_I2C_ADDRESS, SYSRANGE_CROSSTALK_VALID_HEIGHT,
 8008944:	b2db      	uxtb	r3, r3
 8008946:	461a      	mov	r2, r3
 8008948:	2121      	movs	r1, #33	; 0x21
 800894a:	2052      	movs	r0, #82	; 0x52
 800894c:	f7fd fb3a 	bl	8005fc4 <i2c1_WriteReg16Byte>
 8008950:	6178      	str	r0, [r7, #20]
		}
		/* Apply scaling on RangeIgnore ValidHeight if enabled */
		if( status == 0){
 8008952:	697b      	ldr	r3, [r7, #20]
 8008954:	2b00      	cmp	r3, #0
 8008956:	d119      	bne.n	800898c <VL6180x_UpscaleSetScaling+0xb0>
			if(  VL6180xDevDataGet(dev, RangeIgnore.Enabled) !=0 ){
 8008958:	4b1f      	ldr	r3, [pc, #124]	; (80089d8 <VL6180x_UpscaleSetScaling+0xfc>)
 800895a:	7c1b      	ldrb	r3, [r3, #16]
 800895c:	2b00      	cmp	r3, #0
 800895e:	d015      	beq.n	800898c <VL6180x_UpscaleSetScaling+0xb0>
				ValidHeight = VL6180xDevDataGet(dev, RangeIgnore.ValidHeight);
 8008960:	4b1d      	ldr	r3, [pc, #116]	; (80089d8 <VL6180x_UpscaleSetScaling+0xfc>)
 8008962:	899b      	ldrh	r3, [r3, #12]
 8008964:	827b      	strh	r3, [r7, #18]
				ValidHeight  /= _GetUpscale(dev);
 8008966:	8a7b      	ldrh	r3, [r7, #18]
 8008968:	4a1b      	ldr	r2, [pc, #108]	; (80089d8 <VL6180x_UpscaleSetScaling+0xfc>)
 800896a:	7e12      	ldrb	r2, [r2, #24]
 800896c:	fb93 f3f2 	sdiv	r3, r3, r2
 8008970:	827b      	strh	r3, [r7, #18]
				if( ValidHeight > 255 )
 8008972:	8a7b      	ldrh	r3, [r7, #18]
 8008974:	2bff      	cmp	r3, #255	; 0xff
 8008976:	d901      	bls.n	800897c <VL6180x_UpscaleSetScaling+0xa0>
					ValidHeight = 255;
 8008978:	23ff      	movs	r3, #255	; 0xff
 800897a:	827b      	strh	r3, [r7, #18]

				status = i2c1_WriteReg16Byte(VL6180x_I2C_ADDRESS, SYSRANGE_RANGE_IGNORE_VALID_HEIGHT,
 800897c:	8a7b      	ldrh	r3, [r7, #18]
 800897e:	b2db      	uxtb	r3, r3
 8008980:	461a      	mov	r2, r3
 8008982:	2125      	movs	r1, #37	; 0x25
 8008984:	2052      	movs	r0, #82	; 0x52
 8008986:	f7fd fb1d 	bl	8005fc4 <i2c1_WriteReg16Byte>
 800898a:	6178      	str	r0, [r7, #20]
							ValidHeight );
			}
		}

#if !VL6180x_EXTENDED_RANGE
		if (status == 0) {
 800898c:	697b      	ldr	r3, [r7, #20]
 800898e:	2b00      	cmp	r3, #0
 8008990:	d10c      	bne.n	80089ac <VL6180x_UpscaleSetScaling+0xd0>
			status = VL6180x_RangeSetEceState(dev, scaling == 1); /* enable ece only at 1x scaling */
 8008992:	79bb      	ldrb	r3, [r7, #6]
 8008994:	2b01      	cmp	r3, #1
 8008996:	bf0c      	ite	eq
 8008998:	2301      	moveq	r3, #1
 800899a:	2300      	movne	r3, #0
 800899c:	b2db      	uxtb	r3, r3
 800899e:	461a      	mov	r2, r3
 80089a0:	79fb      	ldrb	r3, [r7, #7]
 80089a2:	4611      	mov	r1, r2
 80089a4:	4618      	mov	r0, r3
 80089a6:	f000 f8d7 	bl	8008b58 <VL6180x_RangeSetEceState>
 80089aa:	6178      	str	r0, [r7, #20]
		}
		if (status == 0 && !VL6180x_EXTENDED_RANGE && scaling != 1) {
 80089ac:	697b      	ldr	r3, [r7, #20]
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d109      	bne.n	80089c6 <VL6180x_UpscaleSetScaling+0xea>
 80089b2:	79bb      	ldrb	r3, [r7, #6]
 80089b4:	2b01      	cmp	r3, #1
 80089b6:	d006      	beq.n	80089c6 <VL6180x_UpscaleSetScaling+0xea>
			status = NOT_GUARANTEED ;
 80089b8:	2303      	movs	r3, #3
 80089ba:	617b      	str	r3, [r7, #20]
		if (status == 0 && !VL6180x_EXTENDED_RANGE && scaling != 1) {
 80089bc:	e003      	b.n	80089c6 <VL6180x_UpscaleSetScaling+0xea>
		}
#endif
	} else {
		status = INVALID_PARAMS;
 80089be:	f06f 0301 	mvn.w	r3, #1
 80089c2:	617b      	str	r3, [r7, #20]
 80089c4:	e000      	b.n	80089c8 <VL6180x_UpscaleSetScaling+0xec>
		if (status == 0 && !VL6180x_EXTENDED_RANGE && scaling != 1) {
 80089c6:	bf00      	nop
	}
#undef min_scaling
#undef max_scaling
	return status;
 80089c8:	697b      	ldr	r3, [r7, #20]
}
 80089ca:	4618      	mov	r0, r3
 80089cc:	3718      	adds	r7, #24
 80089ce:	46bd      	mov	sp, r7
 80089d0:	bd80      	pop	{r7, pc}
 80089d2:	bf00      	nop
 80089d4:	0800b68c 	.word	0x0800b68c
 80089d8:	20000070 	.word	0x20000070

080089dc <VL6180x_UpscaleGetScaling>:
//=============================================================================
int VL6180x_UpscaleGetScaling(VL6180xDev_t dev)
{
 80089dc:	b480      	push	{r7}
 80089de:	b085      	sub	sp, #20
 80089e0:	af00      	add	r7, sp, #0
 80089e2:	4603      	mov	r3, r0
 80089e4:	71fb      	strb	r3, [r7, #7]
	int status;
	status = _GetUpscale(dev);
 80089e6:	4b04      	ldr	r3, [pc, #16]	; (80089f8 <VL6180x_UpscaleGetScaling+0x1c>)
 80089e8:	7e1b      	ldrb	r3, [r3, #24]
 80089ea:	60fb      	str	r3, [r7, #12]
	return status;
 80089ec:	68fb      	ldr	r3, [r7, #12]
}
 80089ee:	4618      	mov	r0, r3
 80089f0:	3714      	adds	r7, #20
 80089f2:	46bd      	mov	sp, r7
 80089f4:	bc80      	pop	{r7}
 80089f6:	4770      	bx	lr
 80089f8:	20000070 	.word	0x20000070

080089fc <VL6180x_UpscaleStaticInit>:

//=============================================================================
static int  VL6180x_UpscaleStaticInit(VL6180xDev_t dev)
{
 80089fc:	b580      	push	{r7, lr}
 80089fe:	b084      	sub	sp, #16
 8008a00:	af00      	add	r7, sp, #0
 8008a02:	4603      	mov	r3, r0
 8008a04:	71fb      	strb	r3, [r7, #7]
	/* todo make these a fail macro in case only 1x is suppoted */
	int status;
	do {
		status = VL6180x_UpscaleRegInit(dev);
 8008a06:	79fb      	ldrb	r3, [r7, #7]
 8008a08:	4618      	mov	r0, r3
 8008a0a:	f7ff fe8f 	bl	800872c <VL6180x_UpscaleRegInit>
 8008a0e:	60f8      	str	r0, [r7, #12]
		if (status) {
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	2b00      	cmp	r3, #0
			////VL6180x_ErrLog("VL6180x_RangeSetEceState fail");
			break;
		}
#endif
	} while (0);
	if (!status) {
 8008a14:	68fb      	ldr	r3, [r7, #12]
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d10c      	bne.n	8008a34 <VL6180x_UpscaleStaticInit+0x38>
		/*  must write the scaler at least once to the device to ensure the scaler is in a known state. */
		status = VL6180x_UpscaleSetScaling(dev, _GetUpscale(dev));
 8008a1a:	4b09      	ldr	r3, [pc, #36]	; (8008a40 <VL6180x_UpscaleStaticInit+0x44>)
 8008a1c:	7e1a      	ldrb	r2, [r3, #24]
 8008a1e:	79fb      	ldrb	r3, [r7, #7]
 8008a20:	4611      	mov	r1, r2
 8008a22:	4618      	mov	r0, r3
 8008a24:	f7ff ff5a 	bl	80088dc <VL6180x_UpscaleSetScaling>
 8008a28:	60f8      	str	r0, [r7, #12]
		i2c1_WriteReg16Byte(VL6180x_I2C_ADDRESS, 0x016, 0x00); /* change fresh out of set status to 0 */
 8008a2a:	2200      	movs	r2, #0
 8008a2c:	2116      	movs	r1, #22
 8008a2e:	2052      	movs	r0, #82	; 0x52
 8008a30:	f7fd fac8 	bl	8005fc4 <i2c1_WriteReg16Byte>
	}
	return status;
 8008a34:	68fb      	ldr	r3, [r7, #12]
}
 8008a36:	4618      	mov	r0, r3
 8008a38:	3710      	adds	r7, #16
 8008a3a:	46bd      	mov	sp, r7
 8008a3c:	bd80      	pop	{r7, pc}
 8008a3e:	bf00      	nop
 8008a40:	20000070 	.word	0x20000070

08008a44 <VL6180x_SetupGPIOx>:
	}
	return status;
}
//=============================================================================
int VL6180x_SetupGPIOx(VL6180xDev_t dev, int pin,  uint8_t IntFunction, int  ActiveHigh)
{
 8008a44:	b580      	push	{r7, lr}
 8008a46:	b086      	sub	sp, #24
 8008a48:	af00      	add	r7, sp, #0
 8008a4a:	60b9      	str	r1, [r7, #8]
 8008a4c:	607b      	str	r3, [r7, #4]
 8008a4e:	4603      	mov	r3, r0
 8008a50:	73fb      	strb	r3, [r7, #15]
 8008a52:	4613      	mov	r3, r2
 8008a54:	73bb      	strb	r3, [r7, #14]
	int status;
	if (((pin == 0) || (pin == 1))  && IsValidGPIOFunction(IntFunction)) {
 8008a56:	68bb      	ldr	r3, [r7, #8]
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	d002      	beq.n	8008a62 <VL6180x_SetupGPIOx+0x1e>
 8008a5c:	68bb      	ldr	r3, [r7, #8]
 8008a5e:	2b01      	cmp	r3, #1
 8008a60:	d12f      	bne.n	8008ac2 <VL6180x_SetupGPIOx+0x7e>
 8008a62:	7bbb      	ldrb	r3, [r7, #14]
 8008a64:	2b08      	cmp	r3, #8
 8008a66:	d002      	beq.n	8008a6e <VL6180x_SetupGPIOx+0x2a>
 8008a68:	7bbb      	ldrb	r3, [r7, #14]
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	d129      	bne.n	8008ac2 <VL6180x_SetupGPIOx+0x7e>
		uint16_t RegIndex;
		uint8_t value = 0;
 8008a6e:	2300      	movs	r3, #0
 8008a70:	747b      	strb	r3, [r7, #17]

		if (pin == 0)
 8008a72:	68bb      	ldr	r3, [r7, #8]
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	d102      	bne.n	8008a7e <VL6180x_SetupGPIOx+0x3a>
		   RegIndex = SYSTEM_MODE_GPIO0;
 8008a78:	2310      	movs	r3, #16
 8008a7a:	827b      	strh	r3, [r7, #18]
 8008a7c:	e001      	b.n	8008a82 <VL6180x_SetupGPIOx+0x3e>
		else
		   RegIndex = SYSTEM_MODE_GPIO1;
 8008a7e:	2311      	movs	r3, #17
 8008a80:	827b      	strh	r3, [r7, #18]

		if (ActiveHigh)
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	d003      	beq.n	8008a90 <VL6180x_SetupGPIOx+0x4c>
		   value |= GPIOx_POLARITY_SELECT_MASK;
 8008a88:	7c7b      	ldrb	r3, [r7, #17]
 8008a8a:	f043 0320 	orr.w	r3, r3, #32
 8008a8e:	747b      	strb	r3, [r7, #17]

		value |=  IntFunction << GPIOx_FUNCTIONALITY_SELECT_SHIFT;
 8008a90:	7bbb      	ldrb	r3, [r7, #14]
 8008a92:	005b      	lsls	r3, r3, #1
 8008a94:	b25a      	sxtb	r2, r3
 8008a96:	f997 3011 	ldrsb.w	r3, [r7, #17]
 8008a9a:	4313      	orrs	r3, r2
 8008a9c:	b25b      	sxtb	r3, r3
 8008a9e:	747b      	strb	r3, [r7, #17]
		status = i2c1_WriteReg16Byte(VL6180x_I2C_ADDRESS, RegIndex, value);
 8008aa0:	7c7a      	ldrb	r2, [r7, #17]
 8008aa2:	8a7b      	ldrh	r3, [r7, #18]
 8008aa4:	4619      	mov	r1, r3
 8008aa6:	2052      	movs	r0, #82	; 0x52
 8008aa8:	f7fd fa8c 	bl	8005fc4 <i2c1_WriteReg16Byte>
 8008aac:	6178      	str	r0, [r7, #20]
		if (status) {
 8008aae:	697b      	ldr	r3, [r7, #20]
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	d010      	beq.n	8008ad6 <VL6180x_SetupGPIOx+0x92>
			term_printf("SYSTEM_MODE_GPIO%d wr fail", (int)pin-SYSTEM_MODE_GPIO0);
 8008ab4:	68bb      	ldr	r3, [r7, #8]
 8008ab6:	3b10      	subs	r3, #16
 8008ab8:	4619      	mov	r1, r3
 8008aba:	480a      	ldr	r0, [pc, #40]	; (8008ae4 <VL6180x_SetupGPIOx+0xa0>)
 8008abc:	f7fd fc62 	bl	8006384 <term_printf>
	if (((pin == 0) || (pin == 1))  && IsValidGPIOFunction(IntFunction)) {
 8008ac0:	e009      	b.n	8008ad6 <VL6180x_SetupGPIOx+0x92>
		}
	} else {
		term_printf("Invalid pin %d or function %d", (int)pin, (int) IntFunction);
 8008ac2:	7bbb      	ldrb	r3, [r7, #14]
 8008ac4:	461a      	mov	r2, r3
 8008ac6:	68b9      	ldr	r1, [r7, #8]
 8008ac8:	4807      	ldr	r0, [pc, #28]	; (8008ae8 <VL6180x_SetupGPIOx+0xa4>)
 8008aca:	f7fd fc5b 	bl	8006384 <term_printf>
		status = INVALID_PARAMS;
 8008ace:	f06f 0301 	mvn.w	r3, #1
 8008ad2:	617b      	str	r3, [r7, #20]
 8008ad4:	e000      	b.n	8008ad8 <VL6180x_SetupGPIOx+0x94>
	if (((pin == 0) || (pin == 1))  && IsValidGPIOFunction(IntFunction)) {
 8008ad6:	bf00      	nop
	}
	return status;
 8008ad8:	697b      	ldr	r3, [r7, #20]
}
 8008ada:	4618      	mov	r0, r3
 8008adc:	3718      	adds	r7, #24
 8008ade:	46bd      	mov	sp, r7
 8008ae0:	bd80      	pop	{r7, pc}
 8008ae2:	bf00      	nop
 8008ae4:	0800bb44 	.word	0x0800bb44
 8008ae8:	0800bb60 	.word	0x0800bb60

08008aec <VL6180x_SetupGPIO1>:
	status = VL6180x_SetGPIOxFunctionality(dev, pin, GPIOx_SELECT_OFF);
	return status;
}
//=============================================================================
int VL6180x_SetupGPIO1(VL6180xDev_t dev, uint8_t IntFunction, int ActiveHigh)
{
 8008aec:	b580      	push	{r7, lr}
 8008aee:	b084      	sub	sp, #16
 8008af0:	af00      	add	r7, sp, #0
 8008af2:	4603      	mov	r3, r0
 8008af4:	603a      	str	r2, [r7, #0]
 8008af6:	71fb      	strb	r3, [r7, #7]
 8008af8:	460b      	mov	r3, r1
 8008afa:	71bb      	strb	r3, [r7, #6]
	int status;
	status = VL6180x_SetupGPIOx(dev, 1, IntFunction, ActiveHigh);
 8008afc:	79ba      	ldrb	r2, [r7, #6]
 8008afe:	79f8      	ldrb	r0, [r7, #7]
 8008b00:	683b      	ldr	r3, [r7, #0]
 8008b02:	2101      	movs	r1, #1
 8008b04:	f7ff ff9e 	bl	8008a44 <VL6180x_SetupGPIOx>
 8008b08:	60f8      	str	r0, [r7, #12]
	return status;
 8008b0a:	68fb      	ldr	r3, [r7, #12]
}
 8008b0c:	4618      	mov	r0, r3
 8008b0e:	3710      	adds	r7, #16
 8008b10:	46bd      	mov	sp, r7
 8008b12:	bd80      	pop	{r7, pc}

08008b14 <VL6180x_RangeConfigInterrupt>:
//=============================================================================
int VL6180x_RangeConfigInterrupt(VL6180xDev_t dev, uint8_t ConfigGpioInt)
{
 8008b14:	b580      	push	{r7, lr}
 8008b16:	b084      	sub	sp, #16
 8008b18:	af00      	add	r7, sp, #0
 8008b1a:	4603      	mov	r3, r0
 8008b1c:	460a      	mov	r2, r1
 8008b1e:	71fb      	strb	r3, [r7, #7]
 8008b20:	4613      	mov	r3, r2
 8008b22:	71bb      	strb	r3, [r7, #6]
	int status;
	if (ConfigGpioInt <= CONFIG_GPIO_INTERRUPT_NEW_SAMPLE_READY) {
 8008b24:	79bb      	ldrb	r3, [r7, #6]
 8008b26:	2b04      	cmp	r3, #4
 8008b28:	d807      	bhi.n	8008b3a <VL6180x_RangeConfigInterrupt+0x26>
		status = VL6180x_UpdateByte(dev, SYSTEM_INTERRUPT_CONFIG_GPIO,
 8008b2a:	79bb      	ldrb	r3, [r7, #6]
 8008b2c:	79f8      	ldrb	r0, [r7, #7]
 8008b2e:	22f8      	movs	r2, #248	; 0xf8
 8008b30:	2114      	movs	r1, #20
 8008b32:	f7ff f85f 	bl	8007bf4 <VL6180x_UpdateByte>
 8008b36:	60f8      	str	r0, [r7, #12]
 8008b38:	e007      	b.n	8008b4a <VL6180x_RangeConfigInterrupt+0x36>
									(uint8_t)(~CONFIG_GPIO_RANGE_MASK),
									ConfigGpioInt);
	} else {
		term_printf("Invalid config mode param %d", (int)ConfigGpioInt);
 8008b3a:	79bb      	ldrb	r3, [r7, #6]
 8008b3c:	4619      	mov	r1, r3
 8008b3e:	4805      	ldr	r0, [pc, #20]	; (8008b54 <VL6180x_RangeConfigInterrupt+0x40>)
 8008b40:	f7fd fc20 	bl	8006384 <term_printf>
		status = INVALID_PARAMS;
 8008b44:	f06f 0301 	mvn.w	r3, #1
 8008b48:	60fb      	str	r3, [r7, #12]
	}
	return status;
 8008b4a:	68fb      	ldr	r3, [r7, #12]
}
 8008b4c:	4618      	mov	r0, r3
 8008b4e:	3710      	adds	r7, #16
 8008b50:	46bd      	mov	sp, r7
 8008b52:	bd80      	pop	{r7, pc}
 8008b54:	0800bb80 	.word	0x0800bb80

08008b58 <VL6180x_RangeSetEceState>:
	} while (0);
	return status;
}
//=============================================================================
int VL6180x_RangeSetEceState(VL6180xDev_t dev, int enable)
{
 8008b58:	b580      	push	{r7, lr}
 8008b5a:	b084      	sub	sp, #16
 8008b5c:	af00      	add	r7, sp, #0
 8008b5e:	4603      	mov	r3, r0
 8008b60:	6039      	str	r1, [r7, #0]
 8008b62:	71fb      	strb	r3, [r7, #7]
	int status;
	uint8_t or_mask;
	if (enable)
 8008b64:	683b      	ldr	r3, [r7, #0]
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	d002      	beq.n	8008b70 <VL6180x_RangeSetEceState+0x18>
		or_mask = RANGE_CHECK_ECE_ENABLE_MASK;
 8008b6a:	2301      	movs	r3, #1
 8008b6c:	73fb      	strb	r3, [r7, #15]
 8008b6e:	e001      	b.n	8008b74 <VL6180x_RangeSetEceState+0x1c>
	else
		or_mask = 0;
 8008b70:	2300      	movs	r3, #0
 8008b72:	73fb      	strb	r3, [r7, #15]
	status = VL6180x_UpdateByte(dev, SYSRANGE_RANGE_CHECK_ENABLES, ~RANGE_CHECK_ECE_ENABLE_MASK, or_mask);
 8008b74:	7bfb      	ldrb	r3, [r7, #15]
 8008b76:	79f8      	ldrb	r0, [r7, #7]
 8008b78:	22fe      	movs	r2, #254	; 0xfe
 8008b7a:	212d      	movs	r1, #45	; 0x2d
 8008b7c:	f7ff f83a 	bl	8007bf4 <VL6180x_UpdateByte>
 8008b80:	60b8      	str	r0, [r7, #8]
	return status;
 8008b82:	68bb      	ldr	r3, [r7, #8]
}
 8008b84:	4618      	mov	r0, r3
 8008b86:	3710      	adds	r7, #16
 8008b88:	46bd      	mov	sp, r7
 8008b8a:	bd80      	pop	{r7, pc}

08008b8c <VL6180x_RangeSetMaxConvergenceTime>:
//=============================================================================
int VL6180x_RangeSetMaxConvergenceTime(VL6180xDev_t dev, uint8_t  MaxConTime_msec)
{
 8008b8c:	b580      	push	{r7, lr}
 8008b8e:	b084      	sub	sp, #16
 8008b90:	af00      	add	r7, sp, #0
 8008b92:	4603      	mov	r3, r0
 8008b94:	460a      	mov	r2, r1
 8008b96:	71fb      	strb	r3, [r7, #7]
 8008b98:	4613      	mov	r3, r2
 8008b9a:	71bb      	strb	r3, [r7, #6]
	int status = 0;
 8008b9c:	2300      	movs	r3, #0
 8008b9e:	60fb      	str	r3, [r7, #12]

	do {
		status = i2c1_WriteReg16Byte(VL6180x_I2C_ADDRESS, SYSRANGE_MAX_CONVERGENCE_TIME, MaxConTime_msec);
 8008ba0:	79bb      	ldrb	r3, [r7, #6]
 8008ba2:	461a      	mov	r2, r3
 8008ba4:	211c      	movs	r1, #28
 8008ba6:	2052      	movs	r0, #82	; 0x52
 8008ba8:	f7fd fa0c 	bl	8005fc4 <i2c1_WriteReg16Byte>
 8008bac:	60f8      	str	r0, [r7, #12]
		if (status) {
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	d10d      	bne.n	8008bd0 <VL6180x_RangeSetMaxConvergenceTime+0x44>
			break;
		}
		status = VL6180x_RangeSetEarlyConvergenceEestimateThreshold(dev);
 8008bb4:	79fb      	ldrb	r3, [r7, #7]
 8008bb6:	4618      	mov	r0, r3
 8008bb8:	f000 f872 	bl	8008ca0 <VL6180x_RangeSetEarlyConvergenceEestimateThreshold>
 8008bbc:	60f8      	str	r0, [r7, #12]
		if (status) {
 8008bbe:	68fb      	ldr	r3, [r7, #12]
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	d107      	bne.n	8008bd4 <VL6180x_RangeSetMaxConvergenceTime+0x48>
			break;
		}
		status = _DMax_InitData(dev);
 8008bc4:	79fb      	ldrb	r3, [r7, #7]
 8008bc6:	4618      	mov	r0, r3
 8008bc8:	f000 ffe8 	bl	8009b9c <_DMax_InitData>
 8008bcc:	60f8      	str	r0, [r7, #12]
 8008bce:	e002      	b.n	8008bd6 <VL6180x_RangeSetMaxConvergenceTime+0x4a>
			break;
 8008bd0:	bf00      	nop
 8008bd2:	e000      	b.n	8008bd6 <VL6180x_RangeSetMaxConvergenceTime+0x4a>
			break;
 8008bd4:	bf00      	nop
	} while (0);

	return status;
 8008bd6:	68fb      	ldr	r3, [r7, #12]
}
 8008bd8:	4618      	mov	r0, r3
 8008bda:	3710      	adds	r7, #16
 8008bdc:	46bd      	mov	sp, r7
 8008bde:	bd80      	pop	{r7, pc}

08008be0 <VL6180x_RangeSetInterMeasPeriod>:
//=============================================================================
int VL6180x_RangeSetInterMeasPeriod(VL6180xDev_t dev, uint32_t  InterMeasTime_msec)
{
 8008be0:	b580      	push	{r7, lr}
 8008be2:	b084      	sub	sp, #16
 8008be4:	af00      	add	r7, sp, #0
 8008be6:	4603      	mov	r3, r0
 8008be8:	6039      	str	r1, [r7, #0]
 8008bea:	71fb      	strb	r3, [r7, #7]
	uint8_t SetTime;
	int status;
	do {
		if (InterMeasTime_msec > 2550) {
 8008bec:	683b      	ldr	r3, [r7, #0]
 8008bee:	f640 12f6 	movw	r2, #2550	; 0x9f6
 8008bf2:	4293      	cmp	r3, r2
 8008bf4:	d903      	bls.n	8008bfe <VL6180x_RangeSetInterMeasPeriod+0x1e>
			status = INVALID_PARAMS;
 8008bf6:	f06f 0301 	mvn.w	r3, #1
 8008bfa:	60fb      	str	r3, [r7, #12]
			break;
 8008bfc:	e022      	b.n	8008c44 <VL6180x_RangeSetInterMeasPeriod+0x64>
		}
		/* doc in not 100% clear and confusing about the limit practically all value are OK but 0
		 * that can hang device in continuous mode */
		if (InterMeasTime_msec < 10) {
 8008bfe:	683b      	ldr	r3, [r7, #0]
 8008c00:	2b09      	cmp	r3, #9
 8008c02:	d801      	bhi.n	8008c08 <VL6180x_RangeSetInterMeasPeriod+0x28>
			InterMeasTime_msec = 10;
 8008c04:	230a      	movs	r3, #10
 8008c06:	603b      	str	r3, [r7, #0]
		}
		SetTime = (uint8_t)(InterMeasTime_msec / 10);
 8008c08:	683b      	ldr	r3, [r7, #0]
 8008c0a:	4a11      	ldr	r2, [pc, #68]	; (8008c50 <VL6180x_RangeSetInterMeasPeriod+0x70>)
 8008c0c:	fba2 2303 	umull	r2, r3, r2, r3
 8008c10:	08db      	lsrs	r3, r3, #3
 8008c12:	72fb      	strb	r3, [r7, #11]
		status = i2c1_WriteReg16Byte(VL6180x_I2C_ADDRESS, SYSRANGE_INTERMEASUREMENT_PERIOD, SetTime);
 8008c14:	7afb      	ldrb	r3, [r7, #11]
 8008c16:	461a      	mov	r2, r3
 8008c18:	211b      	movs	r1, #27
 8008c1a:	2052      	movs	r0, #82	; 0x52
 8008c1c:	f7fd f9d2 	bl	8005fc4 <i2c1_WriteReg16Byte>
 8008c20:	60f8      	str	r0, [r7, #12]
		if (status) {
 8008c22:	68fb      	ldr	r3, [r7, #12]
 8008c24:	2b00      	cmp	r3, #0
 8008c26:	d003      	beq.n	8008c30 <VL6180x_RangeSetInterMeasPeriod+0x50>
			term_printf("SYSRANGE_INTERMEASUREMENT_PERIOD wr fail");
 8008c28:	480a      	ldr	r0, [pc, #40]	; (8008c54 <VL6180x_RangeSetInterMeasPeriod+0x74>)
 8008c2a:	f7fd fbab 	bl	8006384 <term_printf>
 8008c2e:	e009      	b.n	8008c44 <VL6180x_RangeSetInterMeasPeriod+0x64>
		} else if (SetTime != InterMeasTime_msec / 10) {
 8008c30:	7afa      	ldrb	r2, [r7, #11]
 8008c32:	683b      	ldr	r3, [r7, #0]
 8008c34:	4906      	ldr	r1, [pc, #24]	; (8008c50 <VL6180x_RangeSetInterMeasPeriod+0x70>)
 8008c36:	fba1 1303 	umull	r1, r3, r1, r3
 8008c3a:	08db      	lsrs	r3, r3, #3
 8008c3c:	429a      	cmp	r2, r3
 8008c3e:	d001      	beq.n	8008c44 <VL6180x_RangeSetInterMeasPeriod+0x64>
			status = MIN_CLIPED;  /* on success change status to clip if it did */
 8008c40:	2302      	movs	r3, #2
 8008c42:	60fb      	str	r3, [r7, #12]
		}
	} while (0);
	return status;
 8008c44:	68fb      	ldr	r3, [r7, #12]
}
 8008c46:	4618      	mov	r0, r3
 8008c48:	3710      	adds	r7, #16
 8008c4a:	46bd      	mov	sp, r7
 8008c4c:	bd80      	pop	{r7, pc}
 8008c4e:	bf00      	nop
 8008c50:	cccccccd 	.word	0xcccccccd
 8008c54:	0800bba0 	.word	0x0800bba0

08008c58 <VL6180x_RangeSetSystemMode>:
	}
	return status;
}
//=============================================================================
int VL6180x_RangeSetSystemMode(VL6180xDev_t dev, uint8_t  mode)
{
 8008c58:	b580      	push	{r7, lr}
 8008c5a:	b084      	sub	sp, #16
 8008c5c:	af00      	add	r7, sp, #0
 8008c5e:	4603      	mov	r3, r0
 8008c60:	460a      	mov	r2, r1
 8008c62:	71fb      	strb	r3, [r7, #7]
 8008c64:	4613      	mov	r3, r2
 8008c66:	71bb      	strb	r3, [r7, #6]
	int status;
	/* FIXME we are not checking device is ready via @a VL6180x_RangeWaitDeviceReady
	 * so if called back to back real fast we are not checking
	 * if previous mode "set" got absorbed => bit 0 must be 0 so that it work
	 */
	if (mode <= 3) {
 8008c68:	79bb      	ldrb	r3, [r7, #6]
 8008c6a:	2b03      	cmp	r3, #3
 8008c6c:	d80d      	bhi.n	8008c8a <VL6180x_RangeSetSystemMode+0x32>
		status = i2c1_WriteReg16Byte(VL6180x_I2C_ADDRESS, SYSRANGE_START, mode);
 8008c6e:	79bb      	ldrb	r3, [r7, #6]
 8008c70:	461a      	mov	r2, r3
 8008c72:	2118      	movs	r1, #24
 8008c74:	2052      	movs	r0, #82	; 0x52
 8008c76:	f7fd f9a5 	bl	8005fc4 <i2c1_WriteReg16Byte>
 8008c7a:	60f8      	str	r0, [r7, #12]
		if (status) {
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	d006      	beq.n	8008c90 <VL6180x_RangeSetSystemMode+0x38>
		    term_printf("SYSRANGE_START wr fail");
 8008c82:	4806      	ldr	r0, [pc, #24]	; (8008c9c <VL6180x_RangeSetSystemMode+0x44>)
 8008c84:	f7fd fb7e 	bl	8006384 <term_printf>
 8008c88:	e002      	b.n	8008c90 <VL6180x_RangeSetSystemMode+0x38>
		}
	} else {
		status = INVALID_PARAMS;
 8008c8a:	f06f 0301 	mvn.w	r3, #1
 8008c8e:	60fb      	str	r3, [r7, #12]
	}
	return status;
 8008c90:	68fb      	ldr	r3, [r7, #12]
}
 8008c92:	4618      	mov	r0, r3
 8008c94:	3710      	adds	r7, #16
 8008c96:	46bd      	mov	sp, r7
 8008c98:	bd80      	pop	{r7, pc}
 8008c9a:	bf00      	nop
 8008c9c:	0800bbcc 	.word	0x0800bbcc

08008ca0 <VL6180x_RangeSetEarlyConvergenceEestimateThreshold>:
	status = VL6180x_RangeSetSystemMode(dev, MODE_START_STOP | MODE_SINGLESHOT);
	return status;
}
//=============================================================================
static int VL6180x_RangeSetEarlyConvergenceEestimateThreshold(VL6180xDev_t dev)
{
 8008ca0:	b580      	push	{r7, lr}
 8008ca2:	b08e      	sub	sp, #56	; 0x38
 8008ca4:	af00      	add	r7, sp, #0
 8008ca6:	4603      	mov	r3, r0
 8008ca8:	71fb      	strb	r3, [r7, #7]
	int status;

	const uint32_t cMicroSecPerMilliSec  = 1000;
 8008caa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8008cae:	633b      	str	r3, [r7, #48]	; 0x30
	const uint32_t cEceSampleTime_us     = 500;
 8008cb0:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8008cb4:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t ece_factor_m          = VL6180xDevDataGet(dev, EceFactorM);
 8008cb6:	4b2b      	ldr	r3, [pc, #172]	; (8008d64 <VL6180x_RangeSetEarlyConvergenceEestimateThreshold+0xc4>)
 8008cb8:	891b      	ldrh	r3, [r3, #8]
 8008cba:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t ece_factor_d          = VL6180xDevDataGet(dev, EceFactorD);
 8008cbc:	4b29      	ldr	r3, [pc, #164]	; (8008d64 <VL6180x_RangeSetEarlyConvergenceEestimateThreshold+0xc4>)
 8008cbe:	895b      	ldrh	r3, [r3, #10]
 8008cc0:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t  u8;
	uint32_t maxConv_ms;
	int32_t AveTime;

	do {
		status = i2c1_ReadReg16Byte(VL6180x_I2C_ADDRESS, SYSRANGE_MAX_CONVERGENCE_TIME, &u8);
 8008cc2:	f107 030f 	add.w	r3, r7, #15
 8008cc6:	461a      	mov	r2, r3
 8008cc8:	211c      	movs	r1, #28
 8008cca:	2052      	movs	r0, #82	; 0x52
 8008ccc:	f7fd f9fe 	bl	80060cc <i2c1_ReadReg16Byte>
 8008cd0:	6378      	str	r0, [r7, #52]	; 0x34
		if (status) {
 8008cd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	d003      	beq.n	8008ce0 <VL6180x_RangeSetEarlyConvergenceEestimateThreshold+0x40>
			term_printf("SYSRANGE_MAX_CONVERGENCE_TIME rd fail");
 8008cd8:	4823      	ldr	r0, [pc, #140]	; (8008d68 <VL6180x_RangeSetEarlyConvergenceEestimateThreshold+0xc8>)
 8008cda:	f7fd fb53 	bl	8006384 <term_printf>
			break;
 8008cde:	e03c      	b.n	8008d5a <VL6180x_RangeSetEarlyConvergenceEestimateThreshold+0xba>
		}
		maxConv_ms = u8;
 8008ce0:	7bfb      	ldrb	r3, [r7, #15]
 8008ce2:	623b      	str	r3, [r7, #32]
		AveTime = _GetAveTotalTime(dev);
 8008ce4:	79fb      	ldrb	r3, [r7, #7]
 8008ce6:	4618      	mov	r0, r3
 8008ce8:	f000 f842 	bl	8008d70 <_GetAveTotalTime>
 8008cec:	61f8      	str	r0, [r7, #28]
		if (AveTime < 0) {
 8008cee:	69fb      	ldr	r3, [r7, #28]
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	da03      	bge.n	8008cfc <VL6180x_RangeSetEarlyConvergenceEestimateThreshold+0x5c>
			status = -1;
 8008cf4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008cf8:	637b      	str	r3, [r7, #52]	; 0x34
			break;
 8008cfa:	e02e      	b.n	8008d5a <VL6180x_RangeSetEarlyConvergenceEestimateThreshold+0xba>
		}

		convergTime_us = maxConv_ms * cMicroSecPerMilliSec - AveTime;
 8008cfc:	6a3b      	ldr	r3, [r7, #32]
 8008cfe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008d00:	fb03 f202 	mul.w	r2, r3, r2
 8008d04:	69fb      	ldr	r3, [r7, #28]
 8008d06:	1ad3      	subs	r3, r2, r3
 8008d08:	61bb      	str	r3, [r7, #24]
		status = i2c1_ReadReg16Word32(VL6180x_I2C_ADDRESS, 0xB8, &fineThresh);
 8008d0a:	f107 0310 	add.w	r3, r7, #16
 8008d0e:	461a      	mov	r2, r3
 8008d10:	21b8      	movs	r1, #184	; 0xb8
 8008d12:	2052      	movs	r0, #82	; 0x52
 8008d14:	f7fd fa4e 	bl	80061b4 <i2c1_ReadReg16Word32>
 8008d18:	6378      	str	r0, [r7, #52]	; 0x34
		if (status) {
 8008d1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	d003      	beq.n	8008d28 <VL6180x_RangeSetEarlyConvergenceEestimateThreshold+0x88>
			term_printf("reg 0xB8 rd fail");
 8008d20:	4812      	ldr	r0, [pc, #72]	; (8008d6c <VL6180x_RangeSetEarlyConvergenceEestimateThreshold+0xcc>)
 8008d22:	f7fd fb2f 	bl	8006384 <term_printf>
			break;
 8008d26:	e018      	b.n	8008d5a <VL6180x_RangeSetEarlyConvergenceEestimateThreshold+0xba>
		}
		fineThresh *= 256;
 8008d28:	693b      	ldr	r3, [r7, #16]
 8008d2a:	021b      	lsls	r3, r3, #8
 8008d2c:	613b      	str	r3, [r7, #16]
		eceThresh = ece_factor_m * cEceSampleTime_us * fineThresh / (convergTime_us * ece_factor_d);
 8008d2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d30:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008d32:	fb02 f303 	mul.w	r3, r2, r3
 8008d36:	693a      	ldr	r2, [r7, #16]
 8008d38:	fb03 f202 	mul.w	r2, r3, r2
 8008d3c:	69bb      	ldr	r3, [r7, #24]
 8008d3e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008d40:	fb01 f303 	mul.w	r3, r1, r3
 8008d44:	fbb2 f3f3 	udiv	r3, r2, r3
 8008d48:	617b      	str	r3, [r7, #20]

		status = i2c1_WriteReg16Word16(VL6180x_I2C_ADDRESS, SYSRANGE_EARLY_CONVERGENCE_ESTIMATE, (uint16_t)eceThresh);
 8008d4a:	697b      	ldr	r3, [r7, #20]
 8008d4c:	b29b      	uxth	r3, r3
 8008d4e:	461a      	mov	r2, r3
 8008d50:	2122      	movs	r1, #34	; 0x22
 8008d52:	2052      	movs	r0, #82	; 0x52
 8008d54:	f7fd f95c 	bl	8006010 <i2c1_WriteReg16Word16>
 8008d58:	6378      	str	r0, [r7, #52]	; 0x34
	} while (0);

	return status;
 8008d5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8008d5c:	4618      	mov	r0, r3
 8008d5e:	3738      	adds	r7, #56	; 0x38
 8008d60:	46bd      	mov	sp, r7
 8008d62:	bd80      	pop	{r7, pc}
 8008d64:	20000070 	.word	0x20000070
 8008d68:	0800bbe4 	.word	0x0800bbe4
 8008d6c:	0800bc0c 	.word	0x0800bc0c

08008d70 <_GetAveTotalTime>:
/*
 * Return >0 = time
 *       <0 1 if fail to get read data from device to compute time
 */
static int32_t _GetAveTotalTime(VL6180xDev_t dev)
{
 8008d70:	b580      	push	{r7, lr}
 8008d72:	b08c      	sub	sp, #48	; 0x30
 8008d74:	af00      	add	r7, sp, #0
 8008d76:	4603      	mov	r3, r0
 8008d78:	71fb      	strb	r3, [r7, #7]
	uint32_t cFwOverhead_us = 24;
 8008d7a:	2318      	movs	r3, #24
 8008d7c:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t cVcpSetupTime_us = 70;
 8008d7e:	2346      	movs	r3, #70	; 0x46
 8008d80:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t cPLL2_StartupDelay_us = 200;
 8008d82:	23c8      	movs	r3, #200	; 0xc8
 8008d84:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t cMeasMask = 0x07;
 8008d86:	2307      	movs	r3, #7
 8008d88:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint32_t SamplePeriod;
	uint32_t SingleTime_us;
	int32_t TotalAveTime_us;
	uint8_t u8;
	int status;
	status = i2c1_ReadReg16Byte(VL6180x_I2C_ADDRESS, 0x109, &u8);
 8008d8c:	f107 030b 	add.w	r3, r7, #11
 8008d90:	461a      	mov	r2, r3
 8008d92:	f240 1109 	movw	r1, #265	; 0x109
 8008d96:	2052      	movs	r0, #82	; 0x52
 8008d98:	f7fd f998 	bl	80060cc <i2c1_ReadReg16Byte>
 8008d9c:	61f8      	str	r0, [r7, #28]
	if (status) {
 8008d9e:	69fb      	ldr	r3, [r7, #28]
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	d002      	beq.n	8008daa <_GetAveTotalTime+0x3a>
		//VL6180x_ErrLog("rd 0x109 fail");
		return -1;
 8008da4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008da8:	e029      	b.n	8008dfe <_GetAveTotalTime+0x8e>
	}
	Samples = u8 & cMeasMask;
 8008daa:	7afa      	ldrb	r2, [r7, #11]
 8008dac:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008db0:	4013      	ands	r3, r2
 8008db2:	b2db      	uxtb	r3, r3
 8008db4:	61bb      	str	r3, [r7, #24]
	status = i2c1_ReadReg16Byte(VL6180x_I2C_ADDRESS, READOUT_AVERAGING_SAMPLE_PERIOD, &u8);
 8008db6:	f107 030b 	add.w	r3, r7, #11
 8008dba:	461a      	mov	r2, r3
 8008dbc:	f44f 7185 	mov.w	r1, #266	; 0x10a
 8008dc0:	2052      	movs	r0, #82	; 0x52
 8008dc2:	f7fd f983 	bl	80060cc <i2c1_ReadReg16Byte>
 8008dc6:	61f8      	str	r0, [r7, #28]
	if (status) {
 8008dc8:	69fb      	ldr	r3, [r7, #28]
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	d002      	beq.n	8008dd4 <_GetAveTotalTime+0x64>
		//VL6180x_ErrLog("i2c READOUT_AVERAGING_SAMPLE_PERIOD fail");
		return -1;
 8008dce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008dd2:	e014      	b.n	8008dfe <_GetAveTotalTime+0x8e>
	}
	SamplePeriod = u8;
 8008dd4:	7afb      	ldrb	r3, [r7, #11]
 8008dd6:	617b      	str	r3, [r7, #20]
	SingleTime_us = cFwOverhead_us + cVcpSetupTime_us + (SamplePeriod * 10);
 8008dd8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008dda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ddc:	18d1      	adds	r1, r2, r3
 8008dde:	697a      	ldr	r2, [r7, #20]
 8008de0:	4613      	mov	r3, r2
 8008de2:	009b      	lsls	r3, r3, #2
 8008de4:	4413      	add	r3, r2
 8008de6:	005b      	lsls	r3, r3, #1
 8008de8:	440b      	add	r3, r1
 8008dea:	613b      	str	r3, [r7, #16]
	TotalAveTime_us = (Samples + 1) * SingleTime_us + cPLL2_StartupDelay_us;
 8008dec:	69bb      	ldr	r3, [r7, #24]
 8008dee:	3301      	adds	r3, #1
 8008df0:	693a      	ldr	r2, [r7, #16]
 8008df2:	fb03 f202 	mul.w	r2, r3, r2
 8008df6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008df8:	4413      	add	r3, r2
 8008dfa:	60fb      	str	r3, [r7, #12]
	return TotalAveTime_us;
 8008dfc:	68fb      	ldr	r3, [r7, #12]
}
 8008dfe:	4618      	mov	r0, r3
 8008e00:	3730      	adds	r7, #48	; 0x30
 8008e02:	46bd      	mov	sp, r7
 8008e04:	bd80      	pop	{r7, pc}
	...

08008e08 <_filter_Init>:
#define _FilterData(field) VL6180xDevDataGet(dev, FilterData.field)
/*
 * One time init
 */
int _filter_Init(VL6180xDev_t dev)
{
 8008e08:	b480      	push	{r7}
 8008e0a:	b085      	sub	sp, #20
 8008e0c:	af00      	add	r7, sp, #0
 8008e0e:	4603      	mov	r3, r0
 8008e10:	71fb      	strb	r3, [r7, #7]
	int i;
	_FilterData(MeasurementIndex) = 0;
 8008e12:	4b1d      	ldr	r3, [pc, #116]	; (8008e88 <_filter_Init+0x80>)
 8008e14:	2200      	movs	r2, #0
 8008e16:	61da      	str	r2, [r3, #28]

	_FilterData(Default_ZeroVal) = 0;
 8008e18:	4b1b      	ldr	r3, [pc, #108]	; (8008e88 <_filter_Init+0x80>)
 8008e1a:	2200      	movs	r2, #0
 8008e1c:	665a      	str	r2, [r3, #100]	; 0x64
	_FilterData(Default_VAVGVal) = 0;
 8008e1e:	4b1a      	ldr	r3, [pc, #104]	; (8008e88 <_filter_Init+0x80>)
 8008e20:	2200      	movs	r2, #0
 8008e22:	669a      	str	r2, [r3, #104]	; 0x68
	_FilterData(NoDelay_ZeroVal) = 0;
 8008e24:	4b18      	ldr	r3, [pc, #96]	; (8008e88 <_filter_Init+0x80>)
 8008e26:	2200      	movs	r2, #0
 8008e28:	66da      	str	r2, [r3, #108]	; 0x6c
	_FilterData(NoDelay_VAVGVal) = 0;
 8008e2a:	4b17      	ldr	r3, [pc, #92]	; (8008e88 <_filter_Init+0x80>)
 8008e2c:	2200      	movs	r2, #0
 8008e2e:	671a      	str	r2, [r3, #112]	; 0x70
	_FilterData(Previous_VAVGDiff) = 0;
 8008e30:	4b15      	ldr	r3, [pc, #84]	; (8008e88 <_filter_Init+0x80>)
 8008e32:	2200      	movs	r2, #0
 8008e34:	675a      	str	r2, [r3, #116]	; 0x74

	_FilterData(StdFilteredReads) = 0;
 8008e36:	4b14      	ldr	r3, [pc, #80]	; (8008e88 <_filter_Init+0x80>)
 8008e38:	2200      	movs	r2, #0
 8008e3a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
	_FilterData(FilteringOnGoingConsecutiveStates) = 0;
 8008e3e:	4b12      	ldr	r3, [pc, #72]	; (8008e88 <_filter_Init+0x80>)
 8008e40:	2200      	movs	r2, #0
 8008e42:	679a      	str	r2, [r3, #120]	; 0x78

	for (i = 0; i < FILTER_NBOF_SAMPLES; i++) {
 8008e44:	2300      	movs	r3, #0
 8008e46:	60fb      	str	r3, [r7, #12]
 8008e48:	e011      	b.n	8008e6e <_filter_Init+0x66>
		_FilterData(LastTrueRange)[i] = FILTER_INVALID_DISTANCE;
 8008e4a:	4a0f      	ldr	r2, [pc, #60]	; (8008e88 <_filter_Init+0x80>)
 8008e4c:	68fb      	ldr	r3, [r7, #12]
 8008e4e:	3310      	adds	r3, #16
 8008e50:	005b      	lsls	r3, r3, #1
 8008e52:	4413      	add	r3, r2
 8008e54:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008e58:	809a      	strh	r2, [r3, #4]
		_FilterData(LastReturnRates)[i] = 0;
 8008e5a:	4a0b      	ldr	r2, [pc, #44]	; (8008e88 <_filter_Init+0x80>)
 8008e5c:	68fb      	ldr	r3, [r7, #12]
 8008e5e:	330c      	adds	r3, #12
 8008e60:	009b      	lsls	r3, r3, #2
 8008e62:	4413      	add	r3, r2
 8008e64:	2200      	movs	r2, #0
 8008e66:	609a      	str	r2, [r3, #8]
	for (i = 0; i < FILTER_NBOF_SAMPLES; i++) {
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	3301      	adds	r3, #1
 8008e6c:	60fb      	str	r3, [r7, #12]
 8008e6e:	68fb      	ldr	r3, [r7, #12]
 8008e70:	2b09      	cmp	r3, #9
 8008e72:	ddea      	ble.n	8008e4a <_filter_Init+0x42>
	}
	_FilterData(MeasurementsSinceLastFlush)=0;
 8008e74:	4b04      	ldr	r3, [pc, #16]	; (8008e88 <_filter_Init+0x80>)
 8008e76:	2200      	movs	r2, #0
 8008e78:	621a      	str	r2, [r3, #32]
	return 0;
 8008e7a:	2300      	movs	r3, #0
}
 8008e7c:	4618      	mov	r0, r3
 8008e7e:	3714      	adds	r7, #20
 8008e80:	46bd      	mov	sp, r7
 8008e82:	bc80      	pop	{r7}
 8008e84:	4770      	bx	lr
 8008e86:	bf00      	nop
 8008e88:	20000070 	.word	0x20000070

08008e8c <_filter_StdDevDamper>:
									uint32_t SignalRate,
									const uint32_t StdDevLimitLowLight,
									const uint32_t StdDevLimitLowLightSNR,
									const uint32_t StdDevLimitHighLight,
									const uint32_t StdDevLimitHighLightSNR)
{
 8008e8c:	b480      	push	{r7}
 8008e8e:	b087      	sub	sp, #28
 8008e90:	af00      	add	r7, sp, #0
 8008e92:	60f8      	str	r0, [r7, #12]
 8008e94:	60b9      	str	r1, [r7, #8]
 8008e96:	607a      	str	r2, [r7, #4]
 8008e98:	603b      	str	r3, [r7, #0]
	uint32_t newStdDev;
	uint16_t SNR;

	if (AmbientRate > 0)
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	d008      	beq.n	8008eb2 <_filter_StdDevDamper+0x26>
		SNR = (uint16_t) ((100 * SignalRate) / AmbientRate);
 8008ea0:	68bb      	ldr	r3, [r7, #8]
 8008ea2:	2264      	movs	r2, #100	; 0x64
 8008ea4:	fb03 f202 	mul.w	r2, r3, r2
 8008ea8:	68fb      	ldr	r3, [r7, #12]
 8008eaa:	fbb2 f3f3 	udiv	r3, r2, r3
 8008eae:	827b      	strh	r3, [r7, #18]
 8008eb0:	e002      	b.n	8008eb8 <_filter_StdDevDamper+0x2c>
	else
		SNR = 9999;
 8008eb2:	f242 730f 	movw	r3, #9999	; 0x270f
 8008eb6:	827b      	strh	r3, [r7, #18]

	if (SNR >= StdDevLimitLowLightSNR) {
 8008eb8:	8a7b      	ldrh	r3, [r7, #18]
 8008eba:	683a      	ldr	r2, [r7, #0]
 8008ebc:	429a      	cmp	r2, r3
 8008ebe:	d802      	bhi.n	8008ec6 <_filter_StdDevDamper+0x3a>
		newStdDev = StdDevLimitLowLight;
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	617b      	str	r3, [r7, #20]
 8008ec4:	e016      	b.n	8008ef4 <_filter_StdDevDamper+0x68>
	} else {
		if (SNR <= StdDevLimitHighLightSNR)
 8008ec6:	8a7b      	ldrh	r3, [r7, #18]
 8008ec8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008eca:	429a      	cmp	r2, r3
 8008ecc:	d302      	bcc.n	8008ed4 <_filter_StdDevDamper+0x48>
			newStdDev = StdDevLimitHighLight;
 8008ece:	6a3b      	ldr	r3, [r7, #32]
 8008ed0:	617b      	str	r3, [r7, #20]
 8008ed2:	e00f      	b.n	8008ef4 <_filter_StdDevDamper+0x68>
		else {
			newStdDev = (uint32_t)(StdDevLimitHighLight -
									(SNR - StdDevLimitHighLightSNR) *
 8008ed4:	8a7a      	ldrh	r2, [r7, #18]
 8008ed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ed8:	1ad3      	subs	r3, r2, r3
									(StdDevLimitHighLight - StdDevLimitLowLight) /
 8008eda:	6a39      	ldr	r1, [r7, #32]
 8008edc:	687a      	ldr	r2, [r7, #4]
 8008ede:	1a8a      	subs	r2, r1, r2
									(SNR - StdDevLimitHighLightSNR) *
 8008ee0:	fb03 f202 	mul.w	r2, r3, r2
									(StdDevLimitLowLightSNR - StdDevLimitHighLightSNR));
 8008ee4:	6839      	ldr	r1, [r7, #0]
 8008ee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ee8:	1acb      	subs	r3, r1, r3
									(StdDevLimitHighLight - StdDevLimitLowLight) /
 8008eea:	fbb2 f3f3 	udiv	r3, r2, r3
			newStdDev = (uint32_t)(StdDevLimitHighLight -
 8008eee:	6a3a      	ldr	r2, [r7, #32]
 8008ef0:	1ad3      	subs	r3, r2, r3
 8008ef2:	617b      	str	r3, [r7, #20]
		}
	}

	return newStdDev;
 8008ef4:	697b      	ldr	r3, [r7, #20]
}
 8008ef6:	4618      	mov	r0, r3
 8008ef8:	371c      	adds	r7, #28
 8008efa:	46bd      	mov	sp, r7
 8008efc:	bc80      	pop	{r7}
 8008efe:	4770      	bx	lr

08008f00 <_filter_Start>:
								uint16_t m_trueRange_mm,
								uint16_t m_rawRange_mm,
								uint32_t m_rtnSignalRate,
								uint32_t m_rtnAmbientRate,
								uint16_t errorCode)
{
 8008f00:	b580      	push	{r7, lr}
 8008f02:	b0a8      	sub	sp, #160	; 0xa0
 8008f04:	af02      	add	r7, sp, #8
 8008f06:	607b      	str	r3, [r7, #4]
 8008f08:	4603      	mov	r3, r0
 8008f0a:	73fb      	strb	r3, [r7, #15]
 8008f0c:	460b      	mov	r3, r1
 8008f0e:	81bb      	strh	r3, [r7, #12]
 8008f10:	4613      	mov	r3, r2
 8008f12:	817b      	strh	r3, [r7, #10]
	int status;
	uint16_t m_newTrueRange_mm = 0;
 8008f14:	2300      	movs	r3, #0
 8008f16:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
	#if VL6180x_HAVE_MULTI_READ
	uint8_t MultiReadBuf[8];
	#endif
	uint16_t i;
	uint16_t bypassFilter = 0;
 8008f1a:	2300      	movs	r3, #0
 8008f1c:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
	uint16_t resetVAVGData = 1;
 8008f20:	2301      	movs	r3, #1
 8008f22:	f8a7 3090 	strh.w	r3, [r7, #144]	; 0x90

	uint16_t filterErrorCode = NoError;
 8008f26:	2300      	movs	r3, #0
 8008f28:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
	uint16_t filterErrorCodeOnRangingErrorCode = NoError;
 8008f2c:	2300      	movs	r3, #0
 8008f2e:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
	uint16_t registerValue;

	uint32_t register32BitsValue1;
	uint32_t register32BitsValue2;

	uint16_t ValidDistance = 0;
 8008f32:	2300      	movs	r3, #0
 8008f34:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
	uint16_t SuspicuousRangingZone = 0;
 8008f38:	2300      	movs	r3, #0
 8008f3a:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88

	uint16_t WrapAroundFlag = 0;
 8008f3e:	2300      	movs	r3, #0
 8008f40:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
	uint16_t NoWrapAroundFlag = 0;
 8008f44:	2300      	movs	r3, #0
 8008f46:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
	uint16_t NoWrapAroundHighConfidenceFlag = 0;
 8008f4a:	2300      	movs	r3, #0
 8008f4c:	f8a7 3082 	strh.w	r3, [r7, #130]	; 0x82

	uint16_t FlushFilter = 0;
 8008f50:	2300      	movs	r3, #0
 8008f52:	f8a7 3080 	strh.w	r3, [r7, #128]	; 0x80
	uint32_t RateChange = 0;
 8008f56:	2300      	movs	r3, #0
 8008f58:	67fb      	str	r3, [r7, #124]	; 0x7c

	uint16_t StdDevSamplesMinNeeded = 0;
 8008f5a:	2300      	movs	r3, #0
 8008f5c:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
	uint16_t StdDevSamples = 0;
 8008f60:	2300      	movs	r3, #0
 8008f62:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
	uint32_t StdDevDistanceSum = 0;
 8008f66:	2300      	movs	r3, #0
 8008f68:	677b      	str	r3, [r7, #116]	; 0x74
	uint32_t StdDevDistanceMean = 0;
 8008f6a:	2300      	movs	r3, #0
 8008f6c:	673b      	str	r3, [r7, #112]	; 0x70
	uint32_t StdDevDistance = 0;
 8008f6e:	2300      	movs	r3, #0
 8008f70:	66fb      	str	r3, [r7, #108]	; 0x6c
	uint32_t StdDevRateSum = 0;
 8008f72:	2300      	movs	r3, #0
 8008f74:	66bb      	str	r3, [r7, #104]	; 0x68
	uint32_t StdDevRateMean = 0;
 8008f76:	2300      	movs	r3, #0
 8008f78:	667b      	str	r3, [r7, #100]	; 0x64
	uint32_t StdDevRate = 0;
 8008f7a:	2300      	movs	r3, #0
 8008f7c:	663b      	str	r3, [r7, #96]	; 0x60
	uint32_t StdDevLimitWithTargetMove = 0;
 8008f7e:	2300      	movs	r3, #0
 8008f80:	65fb      	str	r3, [r7, #92]	; 0x5c
	uint32_t WrapAroundLowReturnRateLimit;
	uint32_t WrapAroundLowReturnRateLimit2;
	uint32_t WrapAroundLowReturnRateFilterLimit;
	uint32_t WrapAroundHighReturnRateFilterLimit;

	uint32_t MAX_VAVGDiff = 1800;
 8008f82:	f44f 63e1 	mov.w	r3, #1800	; 0x708
 8008f86:	64fb      	str	r3, [r7, #76]	; 0x4c

	uint8_t u8;//, u8_2;
	uint32_t XTalkCompRate_KCps;
	uint32_t StdDevLimit = 300;
 8008f88:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8008f8c:	64bb      	str	r3, [r7, #72]	; 0x48
	uint32_t MaxOrInvalidDistance =   255*_GetUpscale(dev);
 8008f8e:	4ba3      	ldr	r3, [pc, #652]	; (800921c <_filter_Start+0x31c>)
 8008f90:	7e1b      	ldrb	r3, [r3, #24]
 8008f92:	461a      	mov	r2, r3
 8008f94:	4613      	mov	r3, r2
 8008f96:	021b      	lsls	r3, r3, #8
 8008f98:	1a9b      	subs	r3, r3, r2
 8008f9a:	647b      	str	r3, [r7, #68]	; 0x44
	/* #define MaxOrInvalidDistance  (uint16_t) (255 * 3) */

	/* Check if distance is Valid or not */
	switch (errorCode) {
 8008f9c:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	; 0xa4
 8008fa0:	3b0c      	subs	r3, #12
 8008fa2:	2b03      	cmp	r3, #3
 8008fa4:	d825      	bhi.n	8008ff2 <_filter_Start+0xf2>
 8008fa6:	a201      	add	r2, pc, #4	; (adr r2, 8008fac <_filter_Start+0xac>)
 8008fa8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008fac:	08008fbd 	.word	0x08008fbd
 8008fb0:	08008fcb 	.word	0x08008fcb
 8008fb4:	08008fbd 	.word	0x08008fbd
 8008fb8:	08008fcb 	.word	0x08008fcb
	case Raw_Ranging_Algo_Underflow:
	case Ranging_Algo_Underflow:
		filterErrorCodeOnRangingErrorCode = RangingFiltered; /* If we have to go through filter, mean we have here a wraparound case */
 8008fbc:	2310      	movs	r3, #16
 8008fbe:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
		ValidDistance = 0;
 8008fc2:	2300      	movs	r3, #0
 8008fc4:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
		break;
 8008fc8:	e022      	b.n	8009010 <_filter_Start+0x110>
	case Raw_Ranging_Algo_Overflow:
	case Ranging_Algo_Overflow:
		filterErrorCodeOnRangingErrorCode = RangingFiltered; /* If we have to go through filter, mean we have here a wraparound case */
 8008fca:	2310      	movs	r3, #16
 8008fcc:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
		//m_trueRange_mm = MaxOrInvalidDistance;
		m_trueRange_mm = 200*_GetUpscale(dev);
 8008fd0:	4b92      	ldr	r3, [pc, #584]	; (800921c <_filter_Start+0x31c>)
 8008fd2:	7e1b      	ldrb	r3, [r3, #24]
 8008fd4:	b29b      	uxth	r3, r3
 8008fd6:	461a      	mov	r2, r3
 8008fd8:	0092      	lsls	r2, r2, #2
 8008fda:	4413      	add	r3, r2
 8008fdc:	461a      	mov	r2, r3
 8008fde:	0091      	lsls	r1, r2, #2
 8008fe0:	461a      	mov	r2, r3
 8008fe2:	460b      	mov	r3, r1
 8008fe4:	4413      	add	r3, r2
 8008fe6:	00db      	lsls	r3, r3, #3
 8008fe8:	81bb      	strh	r3, [r7, #12]
		ValidDistance = 1;
 8008fea:	2301      	movs	r3, #1
 8008fec:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
		break;
 8008ff0:	e00e      	b.n	8009010 <_filter_Start+0x110>
	default:
		if (m_rawRange_mm >= MaxOrInvalidDistance) {
 8008ff2:	897b      	ldrh	r3, [r7, #10]
 8008ff4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008ff6:	429a      	cmp	r2, r3
 8008ff8:	d806      	bhi.n	8009008 <_filter_Start+0x108>
			ValidDistance = 0;
 8008ffa:	2300      	movs	r3, #0
 8008ffc:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
			bypassFilter = 1; /* Bypass the filter in this case as produced distance is not usable (and also the VAVGVal and ZeroVal values) */
 8009000:	2301      	movs	r3, #1
 8009002:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
		} else {
			ValidDistance = 1;
		}
		break;
 8009006:	e002      	b.n	800900e <_filter_Start+0x10e>
			ValidDistance = 1;
 8009008:	2301      	movs	r3, #1
 800900a:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
		break;
 800900e:	bf00      	nop
	}
	m_newTrueRange_mm = m_trueRange_mm;
 8009010:	89bb      	ldrh	r3, [r7, #12]
 8009012:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

	XTalkCompRate_KCps = VL6180xDevDataGet(dev, XTalkCompRate_KCps);
 8009016:	4b81      	ldr	r3, [pc, #516]	; (800921c <_filter_Start+0x31c>)
 8009018:	685b      	ldr	r3, [r3, #4]
 800901a:	643b      	str	r3, [r7, #64]	; 0x40

	/* Update signal rate limits depending on crosstalk */
	SignalRateDMax = (uint32_t)_GetDMaxDataRetSignalAt400mm(dev) ;
 800901c:	4b7f      	ldr	r3, [pc, #508]	; (800921c <_filter_Start+0x31c>)
 800901e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009022:	63fb      	str	r3, [r7, #60]	; 0x3c
	WrapAroundLowReturnRateLimit = WrapAroundLowReturnRateLimit_ROM  + XTalkCompRate_KCps;
 8009024:	4b7e      	ldr	r3, [pc, #504]	; (8009220 <_filter_Start+0x320>)
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800902a:	4413      	add	r3, r2
 800902c:	63bb      	str	r3, [r7, #56]	; 0x38
	WrapAroundLowReturnRateLimit2 = ((WrapAroundLowReturnRateLimit2_ROM *
 800902e:	4b7d      	ldr	r3, [pc, #500]	; (8009224 <_filter_Start+0x324>)
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009034:	fb02 f303 	mul.w	r3, r2, r3
									SignalRateDMax) / 312) +
 8009038:	08db      	lsrs	r3, r3, #3
 800903a:	4a7b      	ldr	r2, [pc, #492]	; (8009228 <_filter_Start+0x328>)
 800903c:	fba2 2303 	umull	r2, r3, r2, r3
 8009040:	089b      	lsrs	r3, r3, #2
	WrapAroundLowReturnRateLimit2 = ((WrapAroundLowReturnRateLimit2_ROM *
 8009042:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009044:	4413      	add	r3, r2
 8009046:	637b      	str	r3, [r7, #52]	; 0x34
									XTalkCompRate_KCps;
	WrapAroundLowReturnRateFilterLimit = ((WrapAroundLowReturnRateFilterLimit_ROM *
 8009048:	4b78      	ldr	r3, [pc, #480]	; (800922c <_filter_Start+0x32c>)
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800904e:	fb02 f303 	mul.w	r3, r2, r3
									SignalRateDMax) / 312) + XTalkCompRate_KCps;
 8009052:	08db      	lsrs	r3, r3, #3
 8009054:	4a74      	ldr	r2, [pc, #464]	; (8009228 <_filter_Start+0x328>)
 8009056:	fba2 2303 	umull	r2, r3, r2, r3
 800905a:	089b      	lsrs	r3, r3, #2
	WrapAroundLowReturnRateFilterLimit = ((WrapAroundLowReturnRateFilterLimit_ROM *
 800905c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800905e:	4413      	add	r3, r2
 8009060:	633b      	str	r3, [r7, #48]	; 0x30
	WrapAroundHighReturnRateFilterLimit = ((WrapAroundHighReturnRateFilterLimit_ROM *
 8009062:	4b73      	ldr	r3, [pc, #460]	; (8009230 <_filter_Start+0x330>)
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009068:	fb02 f303 	mul.w	r3, r2, r3
									SignalRateDMax) / 312) + XTalkCompRate_KCps;
 800906c:	08db      	lsrs	r3, r3, #3
 800906e:	4a6e      	ldr	r2, [pc, #440]	; (8009228 <_filter_Start+0x328>)
 8009070:	fba2 2303 	umull	r2, r3, r2, r3
 8009074:	089b      	lsrs	r3, r3, #2
	WrapAroundHighReturnRateFilterLimit = ((WrapAroundHighReturnRateFilterLimit_ROM *
 8009076:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009078:	4413      	add	r3, r2
 800907a:	62fb      	str	r3, [r7, #44]	; 0x2c


	/* Checks on low range data */
	if ((m_rawRange_mm < WrapAroundLowRawRangeLimit) && (m_rtnSignalRate < WrapAroundLowReturnRateLimit)) {
 800907c:	4b6d      	ldr	r3, [pc, #436]	; (8009234 <_filter_Start+0x334>)
 800907e:	881b      	ldrh	r3, [r3, #0]
 8009080:	897a      	ldrh	r2, [r7, #10]
 8009082:	429a      	cmp	r2, r3
 8009084:	d209      	bcs.n	800909a <_filter_Start+0x19a>
 8009086:	687a      	ldr	r2, [r7, #4]
 8009088:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800908a:	429a      	cmp	r2, r3
 800908c:	d205      	bcs.n	800909a <_filter_Start+0x19a>
		filterErrorCode = RangingFiltered; /* On this condition, wraparound case is ensured */
 800908e:	2310      	movs	r3, #16
 8009090:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
		bypassFilter = 1;
 8009094:	2301      	movs	r3, #1
 8009096:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
	}
	if ((m_rawRange_mm < WrapAroundLowRawRangeLimit2) && (m_rtnSignalRate < WrapAroundLowReturnRateLimit2)) {
 800909a:	4b67      	ldr	r3, [pc, #412]	; (8009238 <_filter_Start+0x338>)
 800909c:	881b      	ldrh	r3, [r3, #0]
 800909e:	897a      	ldrh	r2, [r7, #10]
 80090a0:	429a      	cmp	r2, r3
 80090a2:	d209      	bcs.n	80090b8 <_filter_Start+0x1b8>
 80090a4:	687a      	ldr	r2, [r7, #4]
 80090a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80090a8:	429a      	cmp	r2, r3
 80090aa:	d205      	bcs.n	80090b8 <_filter_Start+0x1b8>
		filterErrorCode = RangingFiltered; /* On this condition, wraparound case is ensured */
 80090ac:	2310      	movs	r3, #16
 80090ae:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
		bypassFilter = 1;
 80090b2:	2301      	movs	r3, #1
 80090b4:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
	}
	if ((m_rawRange_mm < WrapAroundLowRawRangeLimit2) && (m_rtnSignalRate < (WrapAroundLowReturnRateLimit2 + WrapAroundLowRawRangeLimit2SuspicuousAddedSignalRate))) {
 80090b8:	4b5f      	ldr	r3, [pc, #380]	; (8009238 <_filter_Start+0x338>)
 80090ba:	881b      	ldrh	r3, [r3, #0]
 80090bc:	897a      	ldrh	r2, [r7, #10]
 80090be:	429a      	cmp	r2, r3
 80090c0:	d209      	bcs.n	80090d6 <_filter_Start+0x1d6>
 80090c2:	4b5e      	ldr	r3, [pc, #376]	; (800923c <_filter_Start+0x33c>)
 80090c4:	681a      	ldr	r2, [r3, #0]
 80090c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80090c8:	4413      	add	r3, r2
 80090ca:	687a      	ldr	r2, [r7, #4]
 80090cc:	429a      	cmp	r2, r3
 80090ce:	d202      	bcs.n	80090d6 <_filter_Start+0x1d6>
		SuspicuousRangingZone = 1; /* On this area, we are in an highly suspicuous wraparound ares, filter parameter will be stengthen */
 80090d0:	2301      	movs	r3, #1
 80090d2:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
	}


	/* Checks on Ambient rate level */
	if (m_rtnAmbientRate > WrapAroundMaximumAmbientRateFilterLimit) {
 80090d6:	4b5a      	ldr	r3, [pc, #360]	; (8009240 <_filter_Start+0x340>)
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 80090de:	429a      	cmp	r2, r3
 80090e0:	d905      	bls.n	80090ee <_filter_Start+0x1ee>
		/* Too high ambient rate */
		FlushFilter = 1;
 80090e2:	2301      	movs	r3, #1
 80090e4:	f8a7 3080 	strh.w	r3, [r7, #128]	; 0x80
		bypassFilter = 1;
 80090e8:	2301      	movs	r3, #1
 80090ea:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
	}
    
	/*  Checks on Filter flush */
	if (m_rtnSignalRate < MinReturnRateFilterFlush) {
 80090ee:	4b55      	ldr	r3, [pc, #340]	; (8009244 <_filter_Start+0x344>)
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	687a      	ldr	r2, [r7, #4]
 80090f4:	429a      	cmp	r2, r3
 80090f6:	d205      	bcs.n	8009104 <_filter_Start+0x204>
		/* Completely lost target, so flush the filter */
		FlushFilter = 1;
 80090f8:	2301      	movs	r3, #1
 80090fa:	f8a7 3080 	strh.w	r3, [r7, #128]	; 0x80
		bypassFilter = 1;
 80090fe:	2301      	movs	r3, #1
 8009100:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
	}
	if (_FilterData(LastReturnRates)[0] != 0) {
 8009104:	4b45      	ldr	r3, [pc, #276]	; (800921c <_filter_Start+0x31c>)
 8009106:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009108:	2b00      	cmp	r3, #0
 800910a:	d01e      	beq.n	800914a <_filter_Start+0x24a>
		if (m_rtnSignalRate > _FilterData(LastReturnRates)[0])
 800910c:	4b43      	ldr	r3, [pc, #268]	; (800921c <_filter_Start+0x31c>)
 800910e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009110:	687a      	ldr	r2, [r7, #4]
 8009112:	429a      	cmp	r2, r3
 8009114:	d90c      	bls.n	8009130 <_filter_Start+0x230>
			RateChange = (100 *
						(m_rtnSignalRate - _FilterData(LastReturnRates)[0])) /
 8009116:	4b41      	ldr	r3, [pc, #260]	; (800921c <_filter_Start+0x31c>)
 8009118:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800911a:	687a      	ldr	r2, [r7, #4]
 800911c:	1ad3      	subs	r3, r2, r3
			RateChange = (100 *
 800911e:	2264      	movs	r2, #100	; 0x64
 8009120:	fb03 f202 	mul.w	r2, r3, r2
						_FilterData(LastReturnRates)[0];
 8009124:	4b3d      	ldr	r3, [pc, #244]	; (800921c <_filter_Start+0x31c>)
 8009126:	6b9b      	ldr	r3, [r3, #56]	; 0x38
			RateChange = (100 *
 8009128:	fbb2 f3f3 	udiv	r3, r2, r3
 800912c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800912e:	e00e      	b.n	800914e <_filter_Start+0x24e>
		else
			RateChange = (100 *
						(_FilterData(LastReturnRates)[0] - m_rtnSignalRate)) /
 8009130:	4b3a      	ldr	r3, [pc, #232]	; (800921c <_filter_Start+0x31c>)
 8009132:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	1ad3      	subs	r3, r2, r3
			RateChange = (100 *
 8009138:	2264      	movs	r2, #100	; 0x64
 800913a:	fb03 f202 	mul.w	r2, r3, r2
						_FilterData(LastReturnRates)[0];
 800913e:	4b37      	ldr	r3, [pc, #220]	; (800921c <_filter_Start+0x31c>)
 8009140:	6b9b      	ldr	r3, [r3, #56]	; 0x38
			RateChange = (100 *
 8009142:	fbb2 f3f3 	udiv	r3, r2, r3
 8009146:	67fb      	str	r3, [r7, #124]	; 0x7c
 8009148:	e001      	b.n	800914e <_filter_Start+0x24e>
	} else
		RateChange = 0;
 800914a:	2300      	movs	r3, #0
 800914c:	67fb      	str	r3, [r7, #124]	; 0x7c
	if (RateChange > MaxReturnRateChangeFilterFlush) {
 800914e:	4b3e      	ldr	r3, [pc, #248]	; (8009248 <_filter_Start+0x348>)
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8009154:	429a      	cmp	r2, r3
 8009156:	d902      	bls.n	800915e <_filter_Start+0x25e>
		FlushFilter = 1;
 8009158:	2301      	movs	r3, #1
 800915a:	f8a7 3080 	strh.w	r3, [r7, #128]	; 0x80
	}
	/* TODO optimize filter  using circular buffer */
	if (FlushFilter == 1) {
 800915e:	f8b7 3080 	ldrh.w	r3, [r7, #128]	; 0x80
 8009162:	2b01      	cmp	r3, #1
 8009164:	d124      	bne.n	80091b0 <_filter_Start+0x2b0>
		_FilterData(MeasurementIndex) = 0;
 8009166:	4b2d      	ldr	r3, [pc, #180]	; (800921c <_filter_Start+0x31c>)
 8009168:	2200      	movs	r2, #0
 800916a:	61da      	str	r2, [r3, #28]
		for (i = 0; i < FILTER_NBOF_SAMPLES; i++) {
 800916c:	2300      	movs	r3, #0
 800916e:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 8009172:	e015      	b.n	80091a0 <_filter_Start+0x2a0>
			_FilterData(LastTrueRange)[i] = FILTER_INVALID_DISTANCE;
 8009174:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 8009178:	4a28      	ldr	r2, [pc, #160]	; (800921c <_filter_Start+0x31c>)
 800917a:	3310      	adds	r3, #16
 800917c:	005b      	lsls	r3, r3, #1
 800917e:	4413      	add	r3, r2
 8009180:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009184:	809a      	strh	r2, [r3, #4]
			_FilterData(LastReturnRates)[i] = 0;
 8009186:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 800918a:	4a24      	ldr	r2, [pc, #144]	; (800921c <_filter_Start+0x31c>)
 800918c:	330c      	adds	r3, #12
 800918e:	009b      	lsls	r3, r3, #2
 8009190:	4413      	add	r3, r2
 8009192:	2200      	movs	r2, #0
 8009194:	609a      	str	r2, [r3, #8]
		for (i = 0; i < FILTER_NBOF_SAMPLES; i++) {
 8009196:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 800919a:	3301      	adds	r3, #1
 800919c:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 80091a0:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 80091a4:	2b09      	cmp	r3, #9
 80091a6:	d9e5      	bls.n	8009174 <_filter_Start+0x274>
		}
		_FilterData(MeasurementsSinceLastFlush)=0;
 80091a8:	4b1c      	ldr	r3, [pc, #112]	; (800921c <_filter_Start+0x31c>)
 80091aa:	2200      	movs	r2, #0
 80091ac:	621a      	str	r2, [r3, #32]
 80091ae:	e02d      	b.n	800920c <_filter_Start+0x30c>
	} else {
		for (i = (uint16_t) (FILTER_NBOF_SAMPLES - 1); i > 0; i--) {
 80091b0:	2309      	movs	r3, #9
 80091b2:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 80091b6:	e025      	b.n	8009204 <_filter_Start+0x304>
			_FilterData(LastTrueRange)[i] = _FilterData(LastTrueRange)[i - 1];
 80091b8:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 80091bc:	3b01      	subs	r3, #1
 80091be:	f8b7 2094 	ldrh.w	r2, [r7, #148]	; 0x94
 80091c2:	4916      	ldr	r1, [pc, #88]	; (800921c <_filter_Start+0x31c>)
 80091c4:	3310      	adds	r3, #16
 80091c6:	005b      	lsls	r3, r3, #1
 80091c8:	440b      	add	r3, r1
 80091ca:	8898      	ldrh	r0, [r3, #4]
 80091cc:	4913      	ldr	r1, [pc, #76]	; (800921c <_filter_Start+0x31c>)
 80091ce:	f102 0310 	add.w	r3, r2, #16
 80091d2:	005b      	lsls	r3, r3, #1
 80091d4:	440b      	add	r3, r1
 80091d6:	4602      	mov	r2, r0
 80091d8:	809a      	strh	r2, [r3, #4]
			_FilterData(LastReturnRates)[i] = _FilterData(LastReturnRates)[i - 1];
 80091da:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 80091de:	3b01      	subs	r3, #1
 80091e0:	f8b7 1094 	ldrh.w	r1, [r7, #148]	; 0x94
 80091e4:	4a0d      	ldr	r2, [pc, #52]	; (800921c <_filter_Start+0x31c>)
 80091e6:	330c      	adds	r3, #12
 80091e8:	009b      	lsls	r3, r3, #2
 80091ea:	4413      	add	r3, r2
 80091ec:	689a      	ldr	r2, [r3, #8]
 80091ee:	480b      	ldr	r0, [pc, #44]	; (800921c <_filter_Start+0x31c>)
 80091f0:	f101 030c 	add.w	r3, r1, #12
 80091f4:	009b      	lsls	r3, r3, #2
 80091f6:	4403      	add	r3, r0
 80091f8:	609a      	str	r2, [r3, #8]
		for (i = (uint16_t) (FILTER_NBOF_SAMPLES - 1); i > 0; i--) {
 80091fa:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 80091fe:	3b01      	subs	r3, #1
 8009200:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 8009204:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 8009208:	2b00      	cmp	r3, #0
 800920a:	d1d5      	bne.n	80091b8 <_filter_Start+0x2b8>
		}
	}

	if (ValidDistance == 1)
 800920c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8009210:	2b01      	cmp	r3, #1
 8009212:	d11b      	bne.n	800924c <_filter_Start+0x34c>
		_FilterData(LastTrueRange)[0] = m_trueRange_mm;
 8009214:	4a01      	ldr	r2, [pc, #4]	; (800921c <_filter_Start+0x31c>)
 8009216:	89bb      	ldrh	r3, [r7, #12]
 8009218:	8493      	strh	r3, [r2, #36]	; 0x24
 800921a:	e01b      	b.n	8009254 <_filter_Start+0x354>
 800921c:	20000070 	.word	0x20000070
 8009220:	0800bc20 	.word	0x0800bc20
 8009224:	0800bc24 	.word	0x0800bc24
 8009228:	1a41a41b 	.word	0x1a41a41b
 800922c:	0800bc28 	.word	0x0800bc28
 8009230:	0800bc2c 	.word	0x0800bc2c
 8009234:	0800bc30 	.word	0x0800bc30
 8009238:	0800bc32 	.word	0x0800bc32
 800923c:	0800bc34 	.word	0x0800bc34
 8009240:	0800bc38 	.word	0x0800bc38
 8009244:	0800bc3c 	.word	0x0800bc3c
 8009248:	0800bc40 	.word	0x0800bc40
	else
		_FilterData(LastTrueRange)[0] = FILTER_INVALID_DISTANCE;
 800924c:	4b93      	ldr	r3, [pc, #588]	; (800949c <_filter_Start+0x59c>)
 800924e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009252:	849a      	strh	r2, [r3, #36]	; 0x24
	_FilterData(LastReturnRates)[0] = m_rtnSignalRate;
 8009254:	4a91      	ldr	r2, [pc, #580]	; (800949c <_filter_Start+0x59c>)
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	6393      	str	r3, [r2, #56]	; 0x38
	_FilterData(MeasurementsSinceLastFlush)++;
 800925a:	4b90      	ldr	r3, [pc, #576]	; (800949c <_filter_Start+0x59c>)
 800925c:	6a1b      	ldr	r3, [r3, #32]
 800925e:	3301      	adds	r3, #1
 8009260:	4a8e      	ldr	r2, [pc, #568]	; (800949c <_filter_Start+0x59c>)
 8009262:	6213      	str	r3, [r2, #32]

	/* Check if we need to go through the filter or not */
	if (!(((m_rawRange_mm < WrapAroundHighRawRangeFilterLimit) &&
 8009264:	4b8e      	ldr	r3, [pc, #568]	; (80094a0 <_filter_Start+0x5a0>)
 8009266:	881b      	ldrh	r3, [r3, #0]
 8009268:	897a      	ldrh	r2, [r7, #10]
 800926a:	429a      	cmp	r2, r3
 800926c:	d203      	bcs.n	8009276 <_filter_Start+0x376>
 800926e:	687a      	ldr	r2, [r7, #4]
 8009270:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009272:	429a      	cmp	r2, r3
 8009274:	d30c      	bcc.n	8009290 <_filter_Start+0x390>
		(m_rtnSignalRate < WrapAroundLowReturnRateFilterLimit)) ||
		((m_rawRange_mm >= WrapAroundHighRawRangeFilterLimit) &&
 8009276:	4b8a      	ldr	r3, [pc, #552]	; (80094a0 <_filter_Start+0x5a0>)
 8009278:	881b      	ldrh	r3, [r3, #0]
	if (!(((m_rawRange_mm < WrapAroundHighRawRangeFilterLimit) &&
 800927a:	897a      	ldrh	r2, [r7, #10]
 800927c:	429a      	cmp	r2, r3
 800927e:	d303      	bcc.n	8009288 <_filter_Start+0x388>
		((m_rawRange_mm >= WrapAroundHighRawRangeFilterLimit) &&
 8009280:	687a      	ldr	r2, [r7, #4]
 8009282:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009284:	429a      	cmp	r2, r3
 8009286:	d303      	bcc.n	8009290 <_filter_Start+0x390>
		(m_rtnSignalRate < WrapAroundHighReturnRateFilterLimit))))
		bypassFilter = 1;
 8009288:	2301      	movs	r3, #1
 800928a:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
 800928e:	e015      	b.n	80092bc <_filter_Start+0x3bc>
	else {
		/* if some wraparound filtering due to some ranging error code has been detected, update the filter status and bypass the filter */
		if(filterErrorCodeOnRangingErrorCode!=NoError){
 8009290:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8009294:	2b00      	cmp	r3, #0
 8009296:	d011      	beq.n	80092bc <_filter_Start+0x3bc>
#ifndef PRESERVE_DEVICE_ERROR_CODE
			filterErrorCode = filterErrorCodeOnRangingErrorCode;
#else
			if((errorCode==Raw_Ranging_Algo_Underflow) || (errorCode==Ranging_Algo_Underflow)) {
 8009298:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	; 0xa4
 800929c:	2b0c      	cmp	r3, #12
 800929e:	d003      	beq.n	80092a8 <_filter_Start+0x3a8>
 80092a0:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	; 0xa4
 80092a4:	2b0e      	cmp	r3, #14
 80092a6:	d103      	bne.n	80092b0 <_filter_Start+0x3b0>
				/* Preserves the error codes except for Raw_Ranging_Algo_Underflow and Ranging_Algo_Underflow */
				filterErrorCode = filterErrorCodeOnRangingErrorCode;
 80092a8:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80092ac:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
			}
#endif
			bypassFilter = 1;
 80092b0:	2301      	movs	r3, #1
 80092b2:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
			resetVAVGData = 0;
 80092b6:	2300      	movs	r3, #0
 80092b8:	f8a7 3090 	strh.w	r3, [r7, #144]	; 0x90
		}
	}

	/* Check which kind of measurement has been made */
	status = i2c1_ReadReg16Byte(VL6180x_I2C_ADDRESS, 0x01AC, &u8);
 80092bc:	f107 0317 	add.w	r3, r7, #23
 80092c0:	461a      	mov	r2, r3
 80092c2:	f44f 71d6 	mov.w	r1, #428	; 0x1ac
 80092c6:	2052      	movs	r0, #82	; 0x52
 80092c8:	f7fc ff00 	bl	80060cc <i2c1_ReadReg16Byte>
 80092cc:	62b8      	str	r0, [r7, #40]	; 0x28
	if (status) {
 80092ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092d0:	2b00      	cmp	r3, #0
 80092d2:	f040 82c6 	bne.w	8009862 <_filter_Start+0x962>
		//VL6180x_ErrLog("0x01AC rd fail");
		goto done_err;
	}
	registerValue = u8;
 80092d6:	7dfb      	ldrb	r3, [r7, #23]
 80092d8:	84fb      	strh	r3, [r7, #38]	; 0x26
	register32BitsValue2 = ((uint32_t) MultiReadBuf[4] << 24)
			+ ((uint32_t) MultiReadBuf[5] << 16)
			+ ((uint32_t) MultiReadBuf[6] << 8)
			+ ((uint32_t) MultiReadBuf[7] << 0);
#else
	status = i2c1_ReadReg16Word32(VL6180x_I2C_ADDRESS, 0x10C, &register32BitsValue1); /* read 32 bits, lower 17 bits are the one useful */
 80092da:	f107 031c 	add.w	r3, r7, #28
 80092de:	461a      	mov	r2, r3
 80092e0:	f44f 7186 	mov.w	r1, #268	; 0x10c
 80092e4:	2052      	movs	r0, #82	; 0x52
 80092e6:	f7fc ff65 	bl	80061b4 <i2c1_ReadReg16Word32>
 80092ea:	62b8      	str	r0, [r7, #40]	; 0x28
	if (status) {
 80092ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	f040 82b9 	bne.w	8009866 <_filter_Start+0x966>
		//VL6180x_ErrLog("0x010C rd fail");
		goto done_err;
	}
	status = i2c1_ReadReg16Word32(VL6180x_I2C_ADDRESS, 0x0110, &	register32BitsValue2); /* read 32 bits, lower 17 bits are the one useful */
 80092f4:	f107 0318 	add.w	r3, r7, #24
 80092f8:	461a      	mov	r2, r3
 80092fa:	f44f 7188 	mov.w	r1, #272	; 0x110
 80092fe:	2052      	movs	r0, #82	; 0x52
 8009300:	f7fc ff58 	bl	80061b4 <i2c1_ReadReg16Word32>
 8009304:	62b8      	str	r0, [r7, #40]	; 0x28
	if (status) {
 8009306:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009308:	2b00      	cmp	r3, #0
 800930a:	f040 82ae 	bne.w	800986a <_filter_Start+0x96a>
		goto done_err;
	}
#endif


	if ((FlushFilter == 1) || ((bypassFilter == 1) && (resetVAVGData == 1))) {
 800930e:	f8b7 3080 	ldrh.w	r3, [r7, #128]	; 0x80
 8009312:	2b01      	cmp	r3, #1
 8009314:	d007      	beq.n	8009326 <_filter_Start+0x426>
 8009316:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 800931a:	2b01      	cmp	r3, #1
 800931c:	d121      	bne.n	8009362 <_filter_Start+0x462>
 800931e:	f8b7 3090 	ldrh.w	r3, [r7, #144]	; 0x90
 8009322:	2b01      	cmp	r3, #1
 8009324:	d11d      	bne.n	8009362 <_filter_Start+0x462>
		if (registerValue != 0x3E) {
 8009326:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8009328:	2b3e      	cmp	r3, #62	; 0x3e
 800932a:	d00a      	beq.n	8009342 <_filter_Start+0x442>
			status = i2c1_WriteReg16Byte(VL6180x_I2C_ADDRESS, 0x1AC, 0x3E);
 800932c:	223e      	movs	r2, #62	; 0x3e
 800932e:	f44f 71d6 	mov.w	r1, #428	; 0x1ac
 8009332:	2052      	movs	r0, #82	; 0x52
 8009334:	f7fc fe46 	bl	8005fc4 <i2c1_WriteReg16Byte>
 8009338:	62b8      	str	r0, [r7, #40]	; 0x28
			if (status) {
 800933a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800933c:	2b00      	cmp	r3, #0
 800933e:	f040 8296 	bne.w	800986e <_filter_Start+0x96e>
			//	//VL6180x_ErrLog("0x0F2 bypass wr fail");
			//	goto done_err;
			//}
		}
		/* Set both Default and NoDelay To same value */
		_FilterData(Default_ZeroVal) = register32BitsValue1;
 8009342:	69fb      	ldr	r3, [r7, #28]
 8009344:	4a55      	ldr	r2, [pc, #340]	; (800949c <_filter_Start+0x59c>)
 8009346:	6653      	str	r3, [r2, #100]	; 0x64
		_FilterData(Default_VAVGVal) = register32BitsValue2;
 8009348:	69bb      	ldr	r3, [r7, #24]
 800934a:	4a54      	ldr	r2, [pc, #336]	; (800949c <_filter_Start+0x59c>)
 800934c:	6693      	str	r3, [r2, #104]	; 0x68
		_FilterData(NoDelay_ZeroVal) = register32BitsValue1;
 800934e:	69fb      	ldr	r3, [r7, #28]
 8009350:	4a52      	ldr	r2, [pc, #328]	; (800949c <_filter_Start+0x59c>)
 8009352:	66d3      	str	r3, [r2, #108]	; 0x6c
		_FilterData(NoDelay_VAVGVal) = register32BitsValue2;
 8009354:	69bb      	ldr	r3, [r7, #24]
 8009356:	4a51      	ldr	r2, [pc, #324]	; (800949c <_filter_Start+0x59c>)
 8009358:	6713      	str	r3, [r2, #112]	; 0x70

		_FilterData(MeasurementIndex) = 0;
 800935a:	4b50      	ldr	r3, [pc, #320]	; (800949c <_filter_Start+0x59c>)
 800935c:	2200      	movs	r2, #0
 800935e:	61da      	str	r2, [r3, #28]
 8009360:	e030      	b.n	80093c4 <_filter_Start+0x4c4>
	} else {
		if (registerValue == 0x3E) {
 8009362:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8009364:	2b3e      	cmp	r3, #62	; 0x3e
 8009366:	d106      	bne.n	8009376 <_filter_Start+0x476>
			_FilterData(Default_ZeroVal) = register32BitsValue1;
 8009368:	69fb      	ldr	r3, [r7, #28]
 800936a:	4a4c      	ldr	r2, [pc, #304]	; (800949c <_filter_Start+0x59c>)
 800936c:	6653      	str	r3, [r2, #100]	; 0x64
			_FilterData(Default_VAVGVal) = register32BitsValue2;
 800936e:	69bb      	ldr	r3, [r7, #24]
 8009370:	4a4a      	ldr	r2, [pc, #296]	; (800949c <_filter_Start+0x59c>)
 8009372:	6693      	str	r3, [r2, #104]	; 0x68
 8009374:	e005      	b.n	8009382 <_filter_Start+0x482>
		} else {
			_FilterData(NoDelay_ZeroVal) = register32BitsValue1;
 8009376:	69fb      	ldr	r3, [r7, #28]
 8009378:	4a48      	ldr	r2, [pc, #288]	; (800949c <_filter_Start+0x59c>)
 800937a:	66d3      	str	r3, [r2, #108]	; 0x6c
			_FilterData(NoDelay_VAVGVal) = register32BitsValue2;
 800937c:	69bb      	ldr	r3, [r7, #24]
 800937e:	4a47      	ldr	r2, [pc, #284]	; (800949c <_filter_Start+0x59c>)
 8009380:	6713      	str	r3, [r2, #112]	; 0x70
		}

		if (_FilterData(MeasurementIndex) % WrapAroundNoDelayCheckPeriod == 0) {
 8009382:	4b46      	ldr	r3, [pc, #280]	; (800949c <_filter_Start+0x59c>)
 8009384:	69db      	ldr	r3, [r3, #28]
 8009386:	4a47      	ldr	r2, [pc, #284]	; (80094a4 <_filter_Start+0x5a4>)
 8009388:	8812      	ldrh	r2, [r2, #0]
 800938a:	fbb3 f1f2 	udiv	r1, r3, r2
 800938e:	fb01 f202 	mul.w	r2, r1, r2
 8009392:	1a9b      	subs	r3, r3, r2
 8009394:	2b00      	cmp	r3, #0
 8009396:	d102      	bne.n	800939e <_filter_Start+0x49e>
			u8 = 0x3C;
 8009398:	233c      	movs	r3, #60	; 0x3c
 800939a:	75fb      	strb	r3, [r7, #23]
 800939c:	e001      	b.n	80093a2 <_filter_Start+0x4a2>
			//u8_2 = 0x05;
		} else {
			u8 = 0x3E;
 800939e:	233e      	movs	r3, #62	; 0x3e
 80093a0:	75fb      	strb	r3, [r7, #23]
			//u8_2 = 0x01;
		}
		status = i2c1_WriteReg16Byte(VL6180x_I2C_ADDRESS, 0x01AC, u8);
 80093a2:	7dfb      	ldrb	r3, [r7, #23]
 80093a4:	461a      	mov	r2, r3
 80093a6:	f44f 71d6 	mov.w	r1, #428	; 0x1ac
 80093aa:	2052      	movs	r0, #82	; 0x52
 80093ac:	f7fc fe0a 	bl	8005fc4 <i2c1_WriteReg16Byte>
 80093b0:	62b8      	str	r0, [r7, #40]	; 0x28
		if (status) {
 80093b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093b4:	2b00      	cmp	r3, #0
 80093b6:	f040 825c 	bne.w	8009872 <_filter_Start+0x972>
		//status = i2c1_WriteReg16Byte(VL6180x_I2C_ADDRESS, 0x0F2, u8_2);
		//if (status) {
		//	//VL6180x_ErrLog("0x0F2  wr fail");
		//	goto done_err;
		//}
		_FilterData(MeasurementIndex)++;
 80093ba:	4b38      	ldr	r3, [pc, #224]	; (800949c <_filter_Start+0x59c>)
 80093bc:	69db      	ldr	r3, [r3, #28]
 80093be:	3301      	adds	r3, #1
 80093c0:	4a36      	ldr	r2, [pc, #216]	; (800949c <_filter_Start+0x59c>)
 80093c2:	61d3      	str	r3, [r2, #28]
	}

	if (bypassFilter == 1) {
 80093c4:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 80093c8:	2b01      	cmp	r3, #1
 80093ca:	d10d      	bne.n	80093e8 <_filter_Start+0x4e8>
		/* Do not go through the filter */

		/* Update filter error code */
		_FilterData(filterError) = filterErrorCode;
 80093cc:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80093d0:	4a32      	ldr	r2, [pc, #200]	; (800949c <_filter_Start+0x59c>)
 80093d2:	67d3      	str	r3, [r2, #124]	; 0x7c

		/* Update reported range */
		if(filterErrorCode==RangingFiltered)
 80093d4:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80093d8:	2b10      	cmp	r3, #16
 80093da:	d102      	bne.n	80093e2 <_filter_Start+0x4e2>
			m_newTrueRange_mm = MaxOrInvalidDistance; /* Set to invalid distance */
 80093dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80093de:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

		return m_newTrueRange_mm;
 80093e2:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 80093e6:	e247      	b.n	8009878 <_filter_Start+0x978>
	}

	/* Computes current VAVGDiff */
	if (_FilterData(Default_VAVGVal) > _FilterData(NoDelay_VAVGVal))
 80093e8:	4b2c      	ldr	r3, [pc, #176]	; (800949c <_filter_Start+0x59c>)
 80093ea:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80093ec:	4b2b      	ldr	r3, [pc, #172]	; (800949c <_filter_Start+0x59c>)
 80093ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80093f0:	429a      	cmp	r2, r3
 80093f2:	d906      	bls.n	8009402 <_filter_Start+0x502>
		VAVGDiff = _FilterData(Default_VAVGVal) - _FilterData(NoDelay_VAVGVal);
 80093f4:	4b29      	ldr	r3, [pc, #164]	; (800949c <_filter_Start+0x59c>)
 80093f6:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80093f8:	4b28      	ldr	r3, [pc, #160]	; (800949c <_filter_Start+0x59c>)
 80093fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80093fc:	1ad3      	subs	r3, r2, r3
 80093fe:	65bb      	str	r3, [r7, #88]	; 0x58
 8009400:	e001      	b.n	8009406 <_filter_Start+0x506>
	else
		VAVGDiff = 0;
 8009402:	2300      	movs	r3, #0
 8009404:	65bb      	str	r3, [r7, #88]	; 0x58
	_FilterData(Previous_VAVGDiff) = VAVGDiff;
 8009406:	4a25      	ldr	r2, [pc, #148]	; (800949c <_filter_Start+0x59c>)
 8009408:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800940a:	6753      	str	r3, [r2, #116]	; 0x74

	if(SuspicuousRangingZone==0)
 800940c:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 8009410:	2b00      	cmp	r3, #0
 8009412:	d103      	bne.n	800941c <_filter_Start+0x51c>
		MAX_VAVGDiff = MAX_VAVGDiff_ROM;
 8009414:	4b24      	ldr	r3, [pc, #144]	; (80094a8 <_filter_Start+0x5a8>)
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	64fb      	str	r3, [r7, #76]	; 0x4c
 800941a:	e006      	b.n	800942a <_filter_Start+0x52a>
	else
		/* In suspicuous area, strengthen the filter */
		MAX_VAVGDiff = MAX_VAVGDiff_ROM / SuspicuousMAX_VAVGDiffRatio;
 800941c:	4b22      	ldr	r3, [pc, #136]	; (80094a8 <_filter_Start+0x5a8>)
 800941e:	681a      	ldr	r2, [r3, #0]
 8009420:	4b22      	ldr	r3, [pc, #136]	; (80094ac <_filter_Start+0x5ac>)
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	fbb2 f3f3 	udiv	r3, r2, r3
 8009428:	64fb      	str	r3, [r7, #76]	; 0x4c

	/* Check the VAVGDiff */
	if (_FilterData(Default_ZeroVal) > _FilterData(NoDelay_ZeroVal))
 800942a:	4b1c      	ldr	r3, [pc, #112]	; (800949c <_filter_Start+0x59c>)
 800942c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800942e:	4b1b      	ldr	r3, [pc, #108]	; (800949c <_filter_Start+0x59c>)
 8009430:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009432:	429a      	cmp	r2, r3
 8009434:	d906      	bls.n	8009444 <_filter_Start+0x544>
		IdealVAVGDiff = _FilterData(Default_ZeroVal) - _FilterData(NoDelay_ZeroVal);
 8009436:	4b19      	ldr	r3, [pc, #100]	; (800949c <_filter_Start+0x59c>)
 8009438:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800943a:	4b18      	ldr	r3, [pc, #96]	; (800949c <_filter_Start+0x59c>)
 800943c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800943e:	1ad3      	subs	r3, r2, r3
 8009440:	657b      	str	r3, [r7, #84]	; 0x54
 8009442:	e005      	b.n	8009450 <_filter_Start+0x550>
	else
		IdealVAVGDiff = _FilterData(NoDelay_ZeroVal) - _FilterData(Default_ZeroVal);
 8009444:	4b15      	ldr	r3, [pc, #84]	; (800949c <_filter_Start+0x59c>)
 8009446:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8009448:	4b14      	ldr	r3, [pc, #80]	; (800949c <_filter_Start+0x59c>)
 800944a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800944c:	1ad3      	subs	r3, r2, r3
 800944e:	657b      	str	r3, [r7, #84]	; 0x54
	if (IdealVAVGDiff > MAX_VAVGDiff)
 8009450:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009452:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009454:	429a      	cmp	r2, r3
 8009456:	d904      	bls.n	8009462 <_filter_Start+0x562>
		MinVAVGDiff = IdealVAVGDiff - MAX_VAVGDiff;
 8009458:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800945a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800945c:	1ad3      	subs	r3, r2, r3
 800945e:	653b      	str	r3, [r7, #80]	; 0x50
 8009460:	e001      	b.n	8009466 <_filter_Start+0x566>
	else
		MinVAVGDiff = 0;
 8009462:	2300      	movs	r3, #0
 8009464:	653b      	str	r3, [r7, #80]	; 0x50
	MaxVAVGDiff = IdealVAVGDiff + MAX_VAVGDiff;
 8009466:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009468:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800946a:	4413      	add	r3, r2
 800946c:	623b      	str	r3, [r7, #32]
	if (VAVGDiff < MinVAVGDiff || VAVGDiff > MaxVAVGDiff) {
 800946e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009470:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009472:	429a      	cmp	r2, r3
 8009474:	d303      	bcc.n	800947e <_filter_Start+0x57e>
 8009476:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009478:	6a3b      	ldr	r3, [r7, #32]
 800947a:	429a      	cmp	r2, r3
 800947c:	d906      	bls.n	800948c <_filter_Start+0x58c>
		WrapAroundFlag = 1;
 800947e:	2301      	movs	r3, #1
 8009480:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
		filterErrorCode = RangingFiltered;
 8009484:	2310      	movs	r3, #16
 8009486:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 800948a:	e145      	b.n	8009718 <_filter_Start+0x818>
	} else {
		/* Go through filtering check */

		if(_FilterData(MeasurementIndex)<=1)
 800948c:	4b03      	ldr	r3, [pc, #12]	; (800949c <_filter_Start+0x59c>)
 800948e:	69db      	ldr	r3, [r3, #28]
 8009490:	2b01      	cmp	r3, #1
 8009492:	d80d      	bhi.n	80094b0 <_filter_Start+0x5b0>
			/* On measurement after a bypass, uses an increase number of samples */
			StdDevSamplesMinNeeded = MIN_FILTER_STDDEV_SAMPLES_AFTER_FLUSH_OR_BYPASS;
 8009494:	2305      	movs	r3, #5
 8009496:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
 800949a:	e00c      	b.n	80094b6 <_filter_Start+0x5b6>
 800949c:	20000070 	.word	0x20000070
 80094a0:	0800bc44 	.word	0x0800bc44
 80094a4:	0800bc46 	.word	0x0800bc46
 80094a8:	0800bc48 	.word	0x0800bc48
 80094ac:	0800bc4c 	.word	0x0800bc4c
		else
			StdDevSamplesMinNeeded = MIN_FILTER_STDDEV_SAMPLES;
 80094b0:	2303      	movs	r3, #3
 80094b2:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a

		/* StdDevLimit Damper on SNR */
		StdDevLimit = _filter_StdDevDamper(m_rtnAmbientRate, m_rtnSignalRate, StdDevLimitLowLight, StdDevLimitLowLightSNR, StdDevLimitHighLight, StdDevLimitHighLightSNR);
 80094b6:	4baf      	ldr	r3, [pc, #700]	; (8009774 <_filter_Start+0x874>)
 80094b8:	6819      	ldr	r1, [r3, #0]
 80094ba:	4baf      	ldr	r3, [pc, #700]	; (8009778 <_filter_Start+0x878>)
 80094bc:	6818      	ldr	r0, [r3, #0]
 80094be:	4baf      	ldr	r3, [pc, #700]	; (800977c <_filter_Start+0x87c>)
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	4aaf      	ldr	r2, [pc, #700]	; (8009780 <_filter_Start+0x880>)
 80094c4:	6812      	ldr	r2, [r2, #0]
 80094c6:	9201      	str	r2, [sp, #4]
 80094c8:	9300      	str	r3, [sp, #0]
 80094ca:	4603      	mov	r3, r0
 80094cc:	460a      	mov	r2, r1
 80094ce:	6879      	ldr	r1, [r7, #4]
 80094d0:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 80094d4:	f7ff fcda 	bl	8008e8c <_filter_StdDevDamper>
 80094d8:	64b8      	str	r0, [r7, #72]	; 0x48

		/* Standard deviations computations */
		StdDevSamples = 0;
 80094da:	2300      	movs	r3, #0
 80094dc:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
		StdDevDistanceSum = 0;
 80094e0:	2300      	movs	r3, #0
 80094e2:	677b      	str	r3, [r7, #116]	; 0x74
		StdDevDistanceMean = 0;
 80094e4:	2300      	movs	r3, #0
 80094e6:	673b      	str	r3, [r7, #112]	; 0x70
		StdDevDistance = 0;
 80094e8:	2300      	movs	r3, #0
 80094ea:	66fb      	str	r3, [r7, #108]	; 0x6c
		StdDevRateSum = 0;
 80094ec:	2300      	movs	r3, #0
 80094ee:	66bb      	str	r3, [r7, #104]	; 0x68
		StdDevRateMean = 0;
 80094f0:	2300      	movs	r3, #0
 80094f2:	667b      	str	r3, [r7, #100]	; 0x64
		StdDevRate = 0;
 80094f4:	2300      	movs	r3, #0
 80094f6:	663b      	str	r3, [r7, #96]	; 0x60
		for (i = 0; (i < FILTER_NBOF_SAMPLES) && (StdDevSamples < FILTER_STDDEV_SAMPLES); i++) {
 80094f8:	2300      	movs	r3, #0
 80094fa:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 80094fe:	e029      	b.n	8009554 <_filter_Start+0x654>
			if (_FilterData(LastTrueRange)[i] != FILTER_INVALID_DISTANCE) {
 8009500:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 8009504:	4a9f      	ldr	r2, [pc, #636]	; (8009784 <_filter_Start+0x884>)
 8009506:	3310      	adds	r3, #16
 8009508:	005b      	lsls	r3, r3, #1
 800950a:	4413      	add	r3, r2
 800950c:	889b      	ldrh	r3, [r3, #4]
 800950e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009512:	4293      	cmp	r3, r2
 8009514:	d019      	beq.n	800954a <_filter_Start+0x64a>
				StdDevSamples = (uint16_t) (StdDevSamples + 1);
 8009516:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 800951a:	3301      	adds	r3, #1
 800951c:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
				StdDevDistanceSum = (uint32_t) (StdDevDistanceSum + _FilterData(LastTrueRange)[i]);
 8009520:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 8009524:	4a97      	ldr	r2, [pc, #604]	; (8009784 <_filter_Start+0x884>)
 8009526:	3310      	adds	r3, #16
 8009528:	005b      	lsls	r3, r3, #1
 800952a:	4413      	add	r3, r2
 800952c:	889b      	ldrh	r3, [r3, #4]
 800952e:	461a      	mov	r2, r3
 8009530:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009532:	4413      	add	r3, r2
 8009534:	677b      	str	r3, [r7, #116]	; 0x74
				StdDevRateSum = (uint32_t) (StdDevRateSum + _FilterData(LastReturnRates)[i]);
 8009536:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 800953a:	4a92      	ldr	r2, [pc, #584]	; (8009784 <_filter_Start+0x884>)
 800953c:	330c      	adds	r3, #12
 800953e:	009b      	lsls	r3, r3, #2
 8009540:	4413      	add	r3, r2
 8009542:	689b      	ldr	r3, [r3, #8]
 8009544:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8009546:	4413      	add	r3, r2
 8009548:	66bb      	str	r3, [r7, #104]	; 0x68
		for (i = 0; (i < FILTER_NBOF_SAMPLES) && (StdDevSamples < FILTER_STDDEV_SAMPLES); i++) {
 800954a:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 800954e:	3301      	adds	r3, #1
 8009550:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 8009554:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 8009558:	2b09      	cmp	r3, #9
 800955a:	d803      	bhi.n	8009564 <_filter_Start+0x664>
 800955c:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8009560:	2b05      	cmp	r3, #5
 8009562:	d9cd      	bls.n	8009500 <_filter_Start+0x600>
			}
		}
		if (StdDevSamples > 0) {
 8009564:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8009568:	2b00      	cmp	r3, #0
 800956a:	d00b      	beq.n	8009584 <_filter_Start+0x684>
			StdDevDistanceMean = (uint32_t) (StdDevDistanceSum / StdDevSamples);
 800956c:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8009570:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8009572:	fbb2 f3f3 	udiv	r3, r2, r3
 8009576:	673b      	str	r3, [r7, #112]	; 0x70
			StdDevRateMean = (uint32_t) (StdDevRateSum / StdDevSamples);
 8009578:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 800957c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800957e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009582:	667b      	str	r3, [r7, #100]	; 0x64
		}
		/* TODO optimize shorten Std dev in aisngle loop computation using sum of x2 - (sum of x)2 */
		StdDevSamples = 0;
 8009584:	2300      	movs	r3, #0
 8009586:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
		StdDevDistanceSum = 0;
 800958a:	2300      	movs	r3, #0
 800958c:	677b      	str	r3, [r7, #116]	; 0x74
		StdDevRateSum = 0;
 800958e:	2300      	movs	r3, #0
 8009590:	66bb      	str	r3, [r7, #104]	; 0x68
		for (i = 0; (i < FILTER_NBOF_SAMPLES) && (StdDevSamples < FILTER_STDDEV_SAMPLES); i++) {
 8009592:	2300      	movs	r3, #0
 8009594:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 8009598:	e048      	b.n	800962c <_filter_Start+0x72c>
			if (_FilterData(LastTrueRange)[i] != FILTER_INVALID_DISTANCE) {
 800959a:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 800959e:	4a79      	ldr	r2, [pc, #484]	; (8009784 <_filter_Start+0x884>)
 80095a0:	3310      	adds	r3, #16
 80095a2:	005b      	lsls	r3, r3, #1
 80095a4:	4413      	add	r3, r2
 80095a6:	889b      	ldrh	r3, [r3, #4]
 80095a8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80095ac:	4293      	cmp	r3, r2
 80095ae:	d038      	beq.n	8009622 <_filter_Start+0x722>
				StdDevSamples = (uint16_t) (StdDevSamples + 1);
 80095b0:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 80095b4:	3301      	adds	r3, #1
 80095b6:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
				StdDevDistanceSum = (uint32_t) (StdDevDistanceSum +
									(int)(_FilterData(LastTrueRange)[i] -
 80095ba:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 80095be:	4a71      	ldr	r2, [pc, #452]	; (8009784 <_filter_Start+0x884>)
 80095c0:	3310      	adds	r3, #16
 80095c2:	005b      	lsls	r3, r3, #1
 80095c4:	4413      	add	r3, r2
 80095c6:	889b      	ldrh	r3, [r3, #4]
 80095c8:	461a      	mov	r2, r3
 80095ca:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80095cc:	1ad3      	subs	r3, r2, r3
 80095ce:	4619      	mov	r1, r3
											StdDevDistanceMean) *
											(int) (_FilterData(LastTrueRange)[i] -
 80095d0:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 80095d4:	4a6b      	ldr	r2, [pc, #428]	; (8009784 <_filter_Start+0x884>)
 80095d6:	3310      	adds	r3, #16
 80095d8:	005b      	lsls	r3, r3, #1
 80095da:	4413      	add	r3, r2
 80095dc:	889b      	ldrh	r3, [r3, #4]
 80095de:	461a      	mov	r2, r3
 80095e0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80095e2:	1ad3      	subs	r3, r2, r3
											StdDevDistanceMean) *
 80095e4:	fb01 f303 	mul.w	r3, r1, r3
 80095e8:	461a      	mov	r2, r3
				StdDevDistanceSum = (uint32_t) (StdDevDistanceSum +
 80095ea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80095ec:	4413      	add	r3, r2
 80095ee:	677b      	str	r3, [r7, #116]	; 0x74
													StdDevDistanceMean));
				StdDevRateSum = (uint32_t) (StdDevRateSum +
									(int) (_FilterData(LastReturnRates)[i] -
 80095f0:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 80095f4:	4a63      	ldr	r2, [pc, #396]	; (8009784 <_filter_Start+0x884>)
 80095f6:	330c      	adds	r3, #12
 80095f8:	009b      	lsls	r3, r3, #2
 80095fa:	4413      	add	r3, r2
 80095fc:	689a      	ldr	r2, [r3, #8]
 80095fe:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009600:	1ad3      	subs	r3, r2, r3
 8009602:	4619      	mov	r1, r3
											StdDevRateMean) *
											(int) (_FilterData(LastReturnRates)[i] -
 8009604:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 8009608:	4a5e      	ldr	r2, [pc, #376]	; (8009784 <_filter_Start+0x884>)
 800960a:	330c      	adds	r3, #12
 800960c:	009b      	lsls	r3, r3, #2
 800960e:	4413      	add	r3, r2
 8009610:	689a      	ldr	r2, [r3, #8]
 8009612:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009614:	1ad3      	subs	r3, r2, r3
											StdDevRateMean) *
 8009616:	fb01 f303 	mul.w	r3, r1, r3
 800961a:	461a      	mov	r2, r3
				StdDevRateSum = (uint32_t) (StdDevRateSum +
 800961c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800961e:	4413      	add	r3, r2
 8009620:	66bb      	str	r3, [r7, #104]	; 0x68
		for (i = 0; (i < FILTER_NBOF_SAMPLES) && (StdDevSamples < FILTER_STDDEV_SAMPLES); i++) {
 8009622:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 8009626:	3301      	adds	r3, #1
 8009628:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 800962c:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 8009630:	2b09      	cmp	r3, #9
 8009632:	d803      	bhi.n	800963c <_filter_Start+0x73c>
 8009634:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8009638:	2b05      	cmp	r3, #5
 800963a:	d9ae      	bls.n	800959a <_filter_Start+0x69a>
													StdDevRateMean));
			}
		}
		if (StdDevSamples >= StdDevSamplesMinNeeded) {
 800963c:	f8b7 2078 	ldrh.w	r2, [r7, #120]	; 0x78
 8009640:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8009644:	429a      	cmp	r2, r3
 8009646:	d30e      	bcc.n	8009666 <_filter_Start+0x766>
			StdDevDistance = (uint16_t) (StdDevDistanceSum / StdDevSamples);
 8009648:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 800964c:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800964e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009652:	b29b      	uxth	r3, r3
 8009654:	66fb      	str	r3, [r7, #108]	; 0x6c
			StdDevRate = (uint16_t) (StdDevRateSum / StdDevSamples);
 8009656:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 800965a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800965c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009660:	b29b      	uxth	r3, r3
 8009662:	663b      	str	r3, [r7, #96]	; 0x60
 8009664:	e003      	b.n	800966e <_filter_Start+0x76e>
		} else {
			StdDevDistance = 0;
 8009666:	2300      	movs	r3, #0
 8009668:	66fb      	str	r3, [r7, #108]	; 0x6c
			StdDevRate = 0;
 800966a:	2300      	movs	r3, #0
 800966c:	663b      	str	r3, [r7, #96]	; 0x60
		}

		/* Check Return rate standard deviation */
		if (StdDevRate < StdDevMovingTargetStdDevLimit) {
 800966e:	4b46      	ldr	r3, [pc, #280]	; (8009788 <_filter_Start+0x888>)
 8009670:	681b      	ldr	r3, [r3, #0]
 8009672:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8009674:	429a      	cmp	r2, r3
 8009676:	d249      	bcs.n	800970c <_filter_Start+0x80c>
			if (StdDevSamples < StdDevSamplesMinNeeded) {
 8009678:	f8b7 2078 	ldrh.w	r2, [r7, #120]	; 0x78
 800967c:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8009680:	429a      	cmp	r2, r3
 8009682:	d203      	bcs.n	800968c <_filter_Start+0x78c>
				//m_newTrueRange_mm = MaxOrInvalidDistance;
				filterErrorCode = RangingFiltered;
 8009684:	2310      	movs	r3, #16
 8009686:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 800968a:	e045      	b.n	8009718 <_filter_Start+0x818>
			} else {
				/* Check distance standard deviation */
				if (StdDevRate < StdDevMovingTargetReturnRateLimit)
 800968c:	4b3f      	ldr	r3, [pc, #252]	; (800978c <_filter_Start+0x88c>)
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8009692:	429a      	cmp	r2, r3
 8009694:	d20e      	bcs.n	80096b4 <_filter_Start+0x7b4>
					StdDevLimitWithTargetMove = StdDevLimit +
						(((StdDevMovingTargetStdDevForReturnRateLimit -
 8009696:	4b3e      	ldr	r3, [pc, #248]	; (8009790 <_filter_Start+0x890>)
 8009698:	681a      	ldr	r2, [r3, #0]
 800969a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800969c:	1ad3      	subs	r3, r2, r3
							StdDevLimit) * StdDevRate) /
 800969e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80096a0:	fb03 f202 	mul.w	r2, r3, r2
 80096a4:	4b39      	ldr	r3, [pc, #228]	; (800978c <_filter_Start+0x88c>)
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	fbb2 f3f3 	udiv	r3, r2, r3
					StdDevLimitWithTargetMove = StdDevLimit +
 80096ac:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80096ae:	4413      	add	r3, r2
 80096b0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80096b2:	e002      	b.n	80096ba <_filter_Start+0x7ba>
							StdDevMovingTargetReturnRateLimit);
				else
					StdDevLimitWithTargetMove = StdDevMovingTargetStdDevForReturnRateLimit;
 80096b4:	4b36      	ldr	r3, [pc, #216]	; (8009790 <_filter_Start+0x890>)
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	65fb      	str	r3, [r7, #92]	; 0x5c

				if(_FilterData(filterError)==NoError){
 80096ba:	4b32      	ldr	r3, [pc, #200]	; (8009784 <_filter_Start+0x884>)
 80096bc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80096be:	2b00      	cmp	r3, #0
 80096c0:	d105      	bne.n	80096ce <_filter_Start+0x7ce>
					/* No wrapAround detected yet, so relax constraints on the std dev */
					StdDevLimitWithTargetMove = StdDevLimitWithTargetMove * StdDevNoWrapDetectedMultiplier;
 80096c2:	4b34      	ldr	r3, [pc, #208]	; (8009794 <_filter_Start+0x894>)
 80096c4:	681a      	ldr	r2, [r3, #0]
 80096c6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80096c8:	fb02 f303 	mul.w	r3, r2, r3
 80096cc:	65fb      	str	r3, [r7, #92]	; 0x5c
				}

				if (((StdDevDistance * StdDevHighConfidenceSNRLimit) < StdDevLimit) && (StdDevSamples>=FILTER_STDDEV_SAMPLES)) {
 80096ce:	4b32      	ldr	r3, [pc, #200]	; (8009798 <_filter_Start+0x898>)
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80096d4:	fb02 f303 	mul.w	r3, r2, r3
 80096d8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80096da:	429a      	cmp	r2, r3
 80096dc:	d907      	bls.n	80096ee <_filter_Start+0x7ee>
 80096de:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 80096e2:	2b05      	cmp	r3, #5
 80096e4:	d903      	bls.n	80096ee <_filter_Start+0x7ee>
					NoWrapAroundHighConfidenceFlag = 1;
 80096e6:	2301      	movs	r3, #1
 80096e8:	f8a7 3082 	strh.w	r3, [r7, #130]	; 0x82
 80096ec:	e014      	b.n	8009718 <_filter_Start+0x818>
				} else {
					if (StdDevDistance < StdDevLimitWithTargetMove) {
 80096ee:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80096f0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80096f2:	429a      	cmp	r2, r3
 80096f4:	d203      	bcs.n	80096fe <_filter_Start+0x7fe>
							NoWrapAroundFlag = 1;
 80096f6:	2301      	movs	r3, #1
 80096f8:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
 80096fc:	e00c      	b.n	8009718 <_filter_Start+0x818>
						} else {
						WrapAroundFlag = 1;
 80096fe:	2301      	movs	r3, #1
 8009700:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
						filterErrorCode = RangingFiltered;
 8009704:	2310      	movs	r3, #16
 8009706:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 800970a:	e005      	b.n	8009718 <_filter_Start+0x818>
					}
				}
			}
		} else {
			/* Target moving too fast */
			WrapAroundFlag = 1;
 800970c:	2301      	movs	r3, #1
 800970e:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
			filterErrorCode = RangingFiltered;
 8009712:	2310      	movs	r3, #16
 8009714:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
		}
	}

	if (ValidDistance == 0) {
 8009718:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800971c:	2b00      	cmp	r3, #0
 800971e:	d10d      	bne.n	800973c <_filter_Start+0x83c>
		/* In case of invalid distance */
		if (_FilterData(StdFilteredReads) > 0)
 8009720:	4b18      	ldr	r3, [pc, #96]	; (8009784 <_filter_Start+0x884>)
 8009722:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009726:	2b00      	cmp	r3, #0
 8009728:	d067      	beq.n	80097fa <_filter_Start+0x8fa>
			_FilterData(StdFilteredReads) = (uint16_t) (_FilterData(StdFilteredReads) - 1);
 800972a:	4b16      	ldr	r3, [pc, #88]	; (8009784 <_filter_Start+0x884>)
 800972c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009730:	3b01      	subs	r3, #1
 8009732:	b29a      	uxth	r2, r3
 8009734:	4b13      	ldr	r3, [pc, #76]	; (8009784 <_filter_Start+0x884>)
 8009736:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800973a:	e05e      	b.n	80097fa <_filter_Start+0x8fa>
	} else {
		if (WrapAroundFlag == 1) {
 800973c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8009740:	2b01      	cmp	r3, #1
 8009742:	d12f      	bne.n	80097a4 <_filter_Start+0x8a4>
			_FilterData(StdFilteredReads) = (uint16_t) (_FilterData(StdFilteredReads) +
 8009744:	4b0f      	ldr	r3, [pc, #60]	; (8009784 <_filter_Start+0x884>)
 8009746:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800974a:	4b14      	ldr	r3, [pc, #80]	; (800979c <_filter_Start+0x89c>)
 800974c:	881b      	ldrh	r3, [r3, #0]
 800974e:	4413      	add	r3, r2
 8009750:	b29a      	uxth	r2, r3
 8009752:	4b0c      	ldr	r3, [pc, #48]	; (8009784 <_filter_Start+0x884>)
 8009754:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
											StdFilteredReadsIncrement);
			if (_FilterData(StdFilteredReads) > StdMaxFilteredReads)
 8009758:	4b0a      	ldr	r3, [pc, #40]	; (8009784 <_filter_Start+0x884>)
 800975a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800975e:	4b10      	ldr	r3, [pc, #64]	; (80097a0 <_filter_Start+0x8a0>)
 8009760:	881b      	ldrh	r3, [r3, #0]
 8009762:	429a      	cmp	r2, r3
 8009764:	d949      	bls.n	80097fa <_filter_Start+0x8fa>
				_FilterData(StdFilteredReads) = StdMaxFilteredReads;
 8009766:	4b0e      	ldr	r3, [pc, #56]	; (80097a0 <_filter_Start+0x8a0>)
 8009768:	881a      	ldrh	r2, [r3, #0]
 800976a:	4b06      	ldr	r3, [pc, #24]	; (8009784 <_filter_Start+0x884>)
 800976c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8009770:	e043      	b.n	80097fa <_filter_Start+0x8fa>
 8009772:	bf00      	nop
 8009774:	0800bc50 	.word	0x0800bc50
 8009778:	0800bc54 	.word	0x0800bc54
 800977c:	0800bc58 	.word	0x0800bc58
 8009780:	0800bc5c 	.word	0x0800bc5c
 8009784:	20000070 	.word	0x20000070
 8009788:	0800bc60 	.word	0x0800bc60
 800978c:	0800bc64 	.word	0x0800bc64
 8009790:	0800bc68 	.word	0x0800bc68
 8009794:	0800bc6c 	.word	0x0800bc6c
 8009798:	0800bc70 	.word	0x0800bc70
 800979c:	0800bc74 	.word	0x0800bc74
 80097a0:	0800bc76 	.word	0x0800bc76
		} else {
			if (NoWrapAroundFlag == 1) {
 80097a4:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 80097a8:	2b01      	cmp	r3, #1
 80097aa:	d11e      	bne.n	80097ea <_filter_Start+0x8ea>
				if (_FilterData(StdFilteredReads) > 0) {
 80097ac:	4b34      	ldr	r3, [pc, #208]	; (8009880 <_filter_Start+0x980>)
 80097ae:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80097b2:	2b00      	cmp	r3, #0
 80097b4:	d021      	beq.n	80097fa <_filter_Start+0x8fa>
					filterErrorCode = RangingFiltered;
 80097b6:	2310      	movs	r3, #16
 80097b8:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
					if (_FilterData(StdFilteredReads) > StdFilteredReadsDecrement)
 80097bc:	4b30      	ldr	r3, [pc, #192]	; (8009880 <_filter_Start+0x980>)
 80097be:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80097c2:	4b30      	ldr	r3, [pc, #192]	; (8009884 <_filter_Start+0x984>)
 80097c4:	881b      	ldrh	r3, [r3, #0]
 80097c6:	429a      	cmp	r2, r3
 80097c8:	d90a      	bls.n	80097e0 <_filter_Start+0x8e0>
						_FilterData(StdFilteredReads) = (uint16_t) (_FilterData(StdFilteredReads) -
 80097ca:	4b2d      	ldr	r3, [pc, #180]	; (8009880 <_filter_Start+0x980>)
 80097cc:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80097d0:	4b2c      	ldr	r3, [pc, #176]	; (8009884 <_filter_Start+0x984>)
 80097d2:	881b      	ldrh	r3, [r3, #0]
 80097d4:	1ad3      	subs	r3, r2, r3
 80097d6:	b29a      	uxth	r2, r3
 80097d8:	4b29      	ldr	r3, [pc, #164]	; (8009880 <_filter_Start+0x980>)
 80097da:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80097de:	e00c      	b.n	80097fa <_filter_Start+0x8fa>
														StdFilteredReadsDecrement);
					else
						_FilterData(StdFilteredReads) = 0;
 80097e0:	4b27      	ldr	r3, [pc, #156]	; (8009880 <_filter_Start+0x980>)
 80097e2:	2200      	movs	r2, #0
 80097e4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80097e8:	e007      	b.n	80097fa <_filter_Start+0x8fa>
				}
			} else {
				if (NoWrapAroundHighConfidenceFlag == 1) {
 80097ea:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
 80097ee:	2b01      	cmp	r3, #1
 80097f0:	d103      	bne.n	80097fa <_filter_Start+0x8fa>
					_FilterData(StdFilteredReads) = 0;
 80097f2:	4b23      	ldr	r3, [pc, #140]	; (8009880 <_filter_Start+0x980>)
 80097f4:	2200      	movs	r2, #0
 80097f6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
	}

	/* If we detect a change from no Error to RangingFilteringOnGoing, then it means that
	 * the filter detected a change in te scene, so discard all previous measurements.
	 */
	if((_FilterData(filterError) == NoError) && (filterErrorCode!=NoError)) {
 80097fa:	4b21      	ldr	r3, [pc, #132]	; (8009880 <_filter_Start+0x980>)
 80097fc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80097fe:	2b00      	cmp	r3, #0
 8009800:	d121      	bne.n	8009846 <_filter_Start+0x946>
 8009802:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8009806:	2b00      	cmp	r3, #0
 8009808:	d01d      	beq.n	8009846 <_filter_Start+0x946>
		for (i = 1; i < FILTER_NBOF_SAMPLES; i++) {
 800980a:	2301      	movs	r3, #1
 800980c:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 8009810:	e015      	b.n	800983e <_filter_Start+0x93e>
			_FilterData(LastTrueRange)[i] = FILTER_INVALID_DISTANCE;
 8009812:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 8009816:	4a1a      	ldr	r2, [pc, #104]	; (8009880 <_filter_Start+0x980>)
 8009818:	3310      	adds	r3, #16
 800981a:	005b      	lsls	r3, r3, #1
 800981c:	4413      	add	r3, r2
 800981e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009822:	809a      	strh	r2, [r3, #4]
			_FilterData(LastReturnRates)[i] = 0;
 8009824:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 8009828:	4a15      	ldr	r2, [pc, #84]	; (8009880 <_filter_Start+0x980>)
 800982a:	330c      	adds	r3, #12
 800982c:	009b      	lsls	r3, r3, #2
 800982e:	4413      	add	r3, r2
 8009830:	2200      	movs	r2, #0
 8009832:	609a      	str	r2, [r3, #8]
		for (i = 1; i < FILTER_NBOF_SAMPLES; i++) {
 8009834:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 8009838:	3301      	adds	r3, #1
 800983a:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 800983e:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 8009842:	2b09      	cmp	r3, #9
 8009844:	d9e5      	bls.n	8009812 <_filter_Start+0x912>
		}
	}

	/* Update filter error code */
	_FilterData(filterError) = filterErrorCode;
 8009846:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800984a:	4a0d      	ldr	r2, [pc, #52]	; (8009880 <_filter_Start+0x980>)
 800984c:	67d3      	str	r3, [r2, #124]	; 0x7c

	/* Update reported range */
	if(filterErrorCode==RangingFiltered)
 800984e:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8009852:	2b10      	cmp	r3, #16
 8009854:	d102      	bne.n	800985c <_filter_Start+0x95c>
		m_newTrueRange_mm = MaxOrInvalidDistance; /* Set to invalid distance */
 8009856:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009858:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

	return m_newTrueRange_mm;
 800985c:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8009860:	e00a      	b.n	8009878 <_filter_Start+0x978>
		goto done_err;
 8009862:	bf00      	nop
 8009864:	e006      	b.n	8009874 <_filter_Start+0x974>
		goto done_err;
 8009866:	bf00      	nop
 8009868:	e004      	b.n	8009874 <_filter_Start+0x974>
		goto done_err;
 800986a:	bf00      	nop
 800986c:	e002      	b.n	8009874 <_filter_Start+0x974>
				goto done_err;
 800986e:	bf00      	nop
 8009870:	e000      	b.n	8009874 <_filter_Start+0x974>
			goto done_err;
 8009872:	bf00      	nop
done_err:
	return -1;
 8009874:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff

#undef MaxOrInvalidDistance
}
 8009878:	4618      	mov	r0, r3
 800987a:	3798      	adds	r7, #152	; 0x98
 800987c:	46bd      	mov	sp, r7
 800987e:	bd80      	pop	{r7, pc}
 8009880:	20000070 	.word	0x20000070
 8009884:	0800bc78 	.word	0x0800bc78

08009888 <_filter_GetResult>:

//=============================================================================
static int _filter_GetResult(VL6180xDev_t dev, VL6180x_RangeData_t *pRangeData)
{
 8009888:	b5b0      	push	{r4, r5, r7, lr}
 800988a:	b08a      	sub	sp, #40	; 0x28
 800988c:	af02      	add	r7, sp, #8
 800988e:	4603      	mov	r3, r0
 8009890:	6039      	str	r1, [r7, #0]
 8009892:	71fb      	strb	r3, [r7, #7]
	uint32_t m_rawRange_mm = 0;
 8009894:	2300      	movs	r3, #0
 8009896:	61bb      	str	r3, [r7, #24]
	int32_t  FilteredRange;
	const uint8_t scaler = _GetUpscale(dev);
 8009898:	4b23      	ldr	r3, [pc, #140]	; (8009928 <_filter_GetResult+0xa0>)
 800989a:	7e1b      	ldrb	r3, [r3, #24]
 800989c:	75fb      	strb	r3, [r7, #23]
	uint8_t u8;
	int status;

	do {
		status = VL6180x_GetCachedByte(dev, RESULT_RANGE_RAW, &u8);
 800989e:	f107 030f 	add.w	r3, r7, #15
 80098a2:	461a      	mov	r2, r3
 80098a4:	2164      	movs	r1, #100	; 0x64
 80098a6:	2052      	movs	r0, #82	; 0x52
 80098a8:	f7fc fc10 	bl	80060cc <i2c1_ReadReg16Byte>
 80098ac:	61f8      	str	r0, [r7, #28]
		if (status) {
 80098ae:	69fb      	ldr	r3, [r7, #28]
 80098b0:	2b00      	cmp	r3, #0
 80098b2:	d133      	bne.n	800991c <_filter_GetResult+0x94>
		    //VL6180x_ErrLog("RESULT_RANGE_RAW rd fail");
		    break;
		}
		m_rawRange_mm = u8;
 80098b4:	7bfb      	ldrb	r3, [r7, #15]
 80098b6:	61bb      	str	r3, [r7, #24]

		FilteredRange = _filter_Start(dev, pRangeData->range_mm, (m_rawRange_mm * scaler), pRangeData->rtnRate, pRangeData->rtnAmbRate, pRangeData->errorStatus);
 80098b8:	683b      	ldr	r3, [r7, #0]
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	b299      	uxth	r1, r3
 80098be:	7dfb      	ldrb	r3, [r7, #23]
 80098c0:	b29b      	uxth	r3, r3
 80098c2:	69ba      	ldr	r2, [r7, #24]
 80098c4:	b292      	uxth	r2, r2
 80098c6:	fb02 f303 	mul.w	r3, r2, r3
 80098ca:	b29c      	uxth	r4, r3
 80098cc:	683b      	ldr	r3, [r7, #0]
 80098ce:	691d      	ldr	r5, [r3, #16]
 80098d0:	683b      	ldr	r3, [r7, #0]
 80098d2:	68db      	ldr	r3, [r3, #12]
 80098d4:	683a      	ldr	r2, [r7, #0]
 80098d6:	6892      	ldr	r2, [r2, #8]
 80098d8:	b292      	uxth	r2, r2
 80098da:	79f8      	ldrb	r0, [r7, #7]
 80098dc:	9201      	str	r2, [sp, #4]
 80098de:	9300      	str	r3, [sp, #0]
 80098e0:	462b      	mov	r3, r5
 80098e2:	4622      	mov	r2, r4
 80098e4:	f7ff fb0c 	bl	8008f00 <_filter_Start>
 80098e8:	6138      	str	r0, [r7, #16]
		if (FilteredRange < 0) {
 80098ea:	693b      	ldr	r3, [r7, #16]
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	da03      	bge.n	80098f8 <_filter_GetResult+0x70>
		    status = -1;
 80098f0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80098f4:	61fb      	str	r3, [r7, #28]
		    break;
 80098f6:	e012      	b.n	800991e <_filter_GetResult+0x96>
		}
		pRangeData->FilteredData.range_mm = FilteredRange;
 80098f8:	693b      	ldr	r3, [r7, #16]
 80098fa:	b29a      	uxth	r2, r3
 80098fc:	683b      	ldr	r3, [r7, #0]
 80098fe:	841a      	strh	r2, [r3, #32]
		pRangeData->FilteredData.rawRange_mm = m_rawRange_mm * scaler;
 8009900:	7dfb      	ldrb	r3, [r7, #23]
 8009902:	b29b      	uxth	r3, r3
 8009904:	69ba      	ldr	r2, [r7, #24]
 8009906:	b292      	uxth	r2, r2
 8009908:	fb02 f303 	mul.w	r3, r2, r3
 800990c:	b29a      	uxth	r2, r3
 800990e:	683b      	ldr	r3, [r7, #0]
 8009910:	845a      	strh	r2, [r3, #34]	; 0x22
		pRangeData->FilteredData.filterError= _FilterData(filterError);
 8009912:	4b05      	ldr	r3, [pc, #20]	; (8009928 <_filter_GetResult+0xa0>)
 8009914:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8009916:	683b      	ldr	r3, [r7, #0]
 8009918:	625a      	str	r2, [r3, #36]	; 0x24
 800991a:	e000      	b.n	800991e <_filter_GetResult+0x96>
		    break;
 800991c:	bf00      	nop
	} while (0);
	return status;
 800991e:	69fb      	ldr	r3, [r7, #28]
}
 8009920:	4618      	mov	r0, r3
 8009922:	3720      	adds	r7, #32
 8009924:	46bd      	mov	sp, r7
 8009926:	bdb0      	pop	{r4, r5, r7, pc}
 8009928:	20000070 	.word	0x20000070

0800992c <_GetRateResult>:
#endif /* VL6180x_WRAP_AROUND_FILTER_SUPPORT */

#ifdef VL6180x_HAVE_RATE_DATA
//=============================================================================
static int _GetRateResult(VL6180xDev_t dev, VL6180x_RangeData_t *pRangeData)
{
 800992c:	b580      	push	{r7, lr}
 800992e:	b08c      	sub	sp, #48	; 0x30
 8009930:	af00      	add	r7, sp, #0
 8009932:	4603      	mov	r3, r0
 8009934:	6039      	str	r1, [r7, #0]
 8009936:	71fb      	strb	r3, [r7, #7]
	uint32_t m_rtnConvTime = 0;
 8009938:	2300      	movs	r3, #0
 800993a:	617b      	str	r3, [r7, #20]
	uint32_t m_rtnSignalRate = 0;
 800993c:	2300      	movs	r3, #0
 800993e:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t m_rtnAmbientRate = 0;
 8009940:	2300      	movs	r3, #0
 8009942:	623b      	str	r3, [r7, #32]
	uint32_t m_rtnSignalCount = 0;
 8009944:	2300      	movs	r3, #0
 8009946:	613b      	str	r3, [r7, #16]
	uint32_t m_rtnAmbientCount = 0;
 8009948:	2300      	movs	r3, #0
 800994a:	60fb      	str	r3, [r7, #12]
	uint32_t m_refConvTime = 0;
 800994c:	2300      	movs	r3, #0
 800994e:	60bb      	str	r3, [r7, #8]
	uint32_t cRtnSignalCountMax = 0x7FFFFFFF;
 8009950:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8009954:	61fb      	str	r3, [r7, #28]
	uint32_t cDllPeriods = 6;
 8009956:	2306      	movs	r3, #6
 8009958:	61bb      	str	r3, [r7, #24]
	uint32_t calcConvTime = 0;
 800995a:	2300      	movs	r3, #0
 800995c:	62fb      	str	r3, [r7, #44]	; 0x2c

	int status;

	do {
		status = VL6180x_GetCachedDWord(dev, RESULT_RANGE_RETURN_SIGNAL_COUNT, &m_rtnSignalCount);
 800995e:	f107 0310 	add.w	r3, r7, #16
 8009962:	461a      	mov	r2, r3
 8009964:	216c      	movs	r1, #108	; 0x6c
 8009966:	2052      	movs	r0, #82	; 0x52
 8009968:	f7fc fc24 	bl	80061b4 <i2c1_ReadReg16Word32>
 800996c:	62b8      	str	r0, [r7, #40]	; 0x28
		if (status) {
 800996e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009970:	2b00      	cmp	r3, #0
 8009972:	d156      	bne.n	8009a22 <_GetRateResult+0xf6>
			//VL6180x_ErrLog("RESULT_RANGE_RETURN_SIGNAL_COUNT rd fail");
			break;
		}
		if (m_rtnSignalCount > cRtnSignalCountMax) {
 8009974:	693b      	ldr	r3, [r7, #16]
 8009976:	69fa      	ldr	r2, [r7, #28]
 8009978:	429a      	cmp	r2, r3
 800997a:	d201      	bcs.n	8009980 <_GetRateResult+0x54>
			m_rtnSignalCount = 0;
 800997c:	2300      	movs	r3, #0
 800997e:	613b      	str	r3, [r7, #16]
		}

		status = VL6180x_GetCachedDWord(dev, RESULT_RANGE_RETURN_AMB_COUNT, &m_rtnAmbientCount);
 8009980:	f107 030c 	add.w	r3, r7, #12
 8009984:	461a      	mov	r2, r3
 8009986:	2174      	movs	r1, #116	; 0x74
 8009988:	2052      	movs	r0, #82	; 0x52
 800998a:	f7fc fc13 	bl	80061b4 <i2c1_ReadReg16Word32>
 800998e:	62b8      	str	r0, [r7, #40]	; 0x28
		if (status) {
 8009990:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009992:	2b00      	cmp	r3, #0
 8009994:	d147      	bne.n	8009a26 <_GetRateResult+0xfa>
			//VL6180x_ErrLog("RESULT_RANGE_RETURN_AMB_COUNTrd fail");
			break;
		}


		status = VL6180x_GetCachedDWord(dev, RESULT_RANGE_RETURN_CONV_TIME, &m_rtnConvTime);
 8009996:	f107 0314 	add.w	r3, r7, #20
 800999a:	461a      	mov	r2, r3
 800999c:	217c      	movs	r1, #124	; 0x7c
 800999e:	2052      	movs	r0, #82	; 0x52
 80099a0:	f7fc fc08 	bl	80061b4 <i2c1_ReadReg16Word32>
 80099a4:	62b8      	str	r0, [r7, #40]	; 0x28
		if (status) {
 80099a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099a8:	2b00      	cmp	r3, #0
 80099aa:	d13e      	bne.n	8009a2a <_GetRateResult+0xfe>
			//VL6180x_ErrLog("RESULT_RANGE_RETURN_CONV_TIME rd fail");
			break;
		}

		status = VL6180x_GetCachedDWord(dev, RESULT_RANGE_REFERENCE_CONV_TIME, &m_refConvTime);
 80099ac:	f107 0308 	add.w	r3, r7, #8
 80099b0:	461a      	mov	r2, r3
 80099b2:	2180      	movs	r1, #128	; 0x80
 80099b4:	2052      	movs	r0, #82	; 0x52
 80099b6:	f7fc fbfd 	bl	80061b4 <i2c1_ReadReg16Word32>
 80099ba:	62b8      	str	r0, [r7, #40]	; 0x28
		if (status) {
 80099bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099be:	2b00      	cmp	r3, #0
 80099c0:	d135      	bne.n	8009a2e <_GetRateResult+0x102>
			//VL6180x_ErrLog("RESULT_RANGE_REFERENCE_CONV_TIME rd fail");
			break;
		}

		pRangeData->rtnConvTime = m_rtnConvTime;
 80099c2:	697a      	ldr	r2, [r7, #20]
 80099c4:	683b      	ldr	r3, [r7, #0]
 80099c6:	615a      	str	r2, [r3, #20]
		pRangeData->refConvTime = m_refConvTime;
 80099c8:	68ba      	ldr	r2, [r7, #8]
 80099ca:	683b      	ldr	r3, [r7, #0]
 80099cc:	619a      	str	r2, [r3, #24]

		calcConvTime = m_refConvTime;
 80099ce:	68bb      	ldr	r3, [r7, #8]
 80099d0:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (m_rtnConvTime > m_refConvTime) {
 80099d2:	697a      	ldr	r2, [r7, #20]
 80099d4:	68bb      	ldr	r3, [r7, #8]
 80099d6:	429a      	cmp	r2, r3
 80099d8:	d901      	bls.n	80099de <_GetRateResult+0xb2>
			calcConvTime = m_rtnConvTime;
 80099da:	697b      	ldr	r3, [r7, #20]
 80099dc:	62fb      	str	r3, [r7, #44]	; 0x2c
		}
		if (calcConvTime == 0)
 80099de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099e0:	2b00      	cmp	r3, #0
 80099e2:	d102      	bne.n	80099ea <_GetRateResult+0xbe>
			calcConvTime = 63000;
 80099e4:	f24f 6318 	movw	r3, #63000	; 0xf618
 80099e8:	62fb      	str	r3, [r7, #44]	; 0x2c

		m_rtnSignalRate = (m_rtnSignalCount * 1000) / calcConvTime;
 80099ea:	693b      	ldr	r3, [r7, #16]
 80099ec:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80099f0:	fb03 f202 	mul.w	r2, r3, r2
 80099f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80099fa:	627b      	str	r3, [r7, #36]	; 0x24
		m_rtnAmbientRate = (m_rtnAmbientCount * cDllPeriods * 1000) / calcConvTime;
 80099fc:	68fb      	ldr	r3, [r7, #12]
 80099fe:	69ba      	ldr	r2, [r7, #24]
 8009a00:	fb02 f303 	mul.w	r3, r2, r3
 8009a04:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8009a08:	fb03 f202 	mul.w	r2, r3, r2
 8009a0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009a12:	623b      	str	r3, [r7, #32]

		pRangeData->rtnRate = m_rtnSignalRate;
 8009a14:	683b      	ldr	r3, [r7, #0]
 8009a16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009a18:	611a      	str	r2, [r3, #16]
		pRangeData->rtnAmbRate = m_rtnAmbientRate;
 8009a1a:	683b      	ldr	r3, [r7, #0]
 8009a1c:	6a3a      	ldr	r2, [r7, #32]
 8009a1e:	60da      	str	r2, [r3, #12]
 8009a20:	e006      	b.n	8009a30 <_GetRateResult+0x104>
			break;
 8009a22:	bf00      	nop
 8009a24:	e004      	b.n	8009a30 <_GetRateResult+0x104>
			break;
 8009a26:	bf00      	nop
 8009a28:	e002      	b.n	8009a30 <_GetRateResult+0x104>
			break;
 8009a2a:	bf00      	nop
 8009a2c:	e000      	b.n	8009a30 <_GetRateResult+0x104>
			break;
 8009a2e:	bf00      	nop


	} while (0);
	return status;
 8009a30:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8009a32:	4618      	mov	r0, r3
 8009a34:	3730      	adds	r7, #48	; 0x30
 8009a36:	46bd      	mov	sp, r7
 8009a38:	bd80      	pop	{r7, pc}
	...

08009a3c <VL6180x_DMaxSetState>:
#endif /* VL6180x_HAVE_RATE_DATA */

//=============================================================================
int VL6180x_DMaxSetState(VL6180xDev_t dev, int state)
{
 8009a3c:	b580      	push	{r7, lr}
 8009a3e:	b084      	sub	sp, #16
 8009a40:	af00      	add	r7, sp, #0
 8009a42:	4603      	mov	r3, r0
 8009a44:	6039      	str	r1, [r7, #0]
 8009a46:	71fb      	strb	r3, [r7, #7]
	int status;
	LOG_FUNCTION_START("%d", state);
#if VL6180x_HAVE_DMAX_RANGING
	VL6180xDevDataSet(dev, DMaxEnable, state);
 8009a48:	683b      	ldr	r3, [r7, #0]
 8009a4a:	b2da      	uxtb	r2, r3
 8009a4c:	4b09      	ldr	r3, [pc, #36]	; (8009a74 <VL6180x_DMaxSetState+0x38>)
 8009a4e:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
	if (state) {
 8009a52:	683b      	ldr	r3, [r7, #0]
 8009a54:	2b00      	cmp	r3, #0
 8009a56:	d005      	beq.n	8009a64 <VL6180x_DMaxSetState+0x28>
		status = _DMax_InitData(dev);
 8009a58:	79fb      	ldrb	r3, [r7, #7]
 8009a5a:	4618      	mov	r0, r3
 8009a5c:	f000 f89e 	bl	8009b9c <_DMax_InitData>
 8009a60:	60f8      	str	r0, [r7, #12]
 8009a62:	e001      	b.n	8009a68 <VL6180x_DMaxSetState+0x2c>
	} else {
		status = 0;
 8009a64:	2300      	movs	r3, #0
 8009a66:	60fb      	str	r3, [r7, #12]
	}
#else
	status =  NOT_SUPPORTED;
#endif
	LOG_FUNCTION_END(status);
	return status;
 8009a68:	68fb      	ldr	r3, [r7, #12]
}
 8009a6a:	4618      	mov	r0, r3
 8009a6c:	3710      	adds	r7, #16
 8009a6e:	46bd      	mov	sp, r7
 8009a70:	bd80      	pop	{r7, pc}
 8009a72:	bf00      	nop
 8009a74:	20000070 	.word	0x20000070

08009a78 <VL6180x_SqrtUint32>:
/*
 * 32 bit integer square root with not so bad precision (integer result) and is quite fast
 * see http://en.wikipedia.org/wiki/Methods_of_computing_square_roots
 */
uint32_t VL6180x_SqrtUint32(uint32_t num)
{
 8009a78:	b480      	push	{r7}
 8009a7a:	b085      	sub	sp, #20
 8009a7c:	af00      	add	r7, sp, #0
 8009a7e:	6078      	str	r0, [r7, #4]
	uint32_t res = 0;
 8009a80:	2300      	movs	r3, #0
 8009a82:	60fb      	str	r3, [r7, #12]
	uint32_t bit = 1 << 30; /* The second-to-top bit is set: 1 << 30 for 32 bits */
 8009a84:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009a88:	60bb      	str	r3, [r7, #8]

	/* "bit" starts at the highest power of four <= the argument. */
	while (bit > num)
 8009a8a:	e002      	b.n	8009a92 <VL6180x_SqrtUint32+0x1a>
		bit >>= 2;
 8009a8c:	68bb      	ldr	r3, [r7, #8]
 8009a8e:	089b      	lsrs	r3, r3, #2
 8009a90:	60bb      	str	r3, [r7, #8]
	while (bit > num)
 8009a92:	68ba      	ldr	r2, [r7, #8]
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	429a      	cmp	r2, r3
 8009a98:	d8f8      	bhi.n	8009a8c <VL6180x_SqrtUint32+0x14>

	while (bit != 0) {
 8009a9a:	e017      	b.n	8009acc <VL6180x_SqrtUint32+0x54>
		if (num >= res + bit) {
 8009a9c:	68fa      	ldr	r2, [r7, #12]
 8009a9e:	68bb      	ldr	r3, [r7, #8]
 8009aa0:	4413      	add	r3, r2
 8009aa2:	687a      	ldr	r2, [r7, #4]
 8009aa4:	429a      	cmp	r2, r3
 8009aa6:	d30b      	bcc.n	8009ac0 <VL6180x_SqrtUint32+0x48>
		    num -= res + bit;
 8009aa8:	68fa      	ldr	r2, [r7, #12]
 8009aaa:	68bb      	ldr	r3, [r7, #8]
 8009aac:	4413      	add	r3, r2
 8009aae:	687a      	ldr	r2, [r7, #4]
 8009ab0:	1ad3      	subs	r3, r2, r3
 8009ab2:	607b      	str	r3, [r7, #4]
		    res = (res >> 1) + bit;
 8009ab4:	68fb      	ldr	r3, [r7, #12]
 8009ab6:	085b      	lsrs	r3, r3, #1
 8009ab8:	68ba      	ldr	r2, [r7, #8]
 8009aba:	4413      	add	r3, r2
 8009abc:	60fb      	str	r3, [r7, #12]
 8009abe:	e002      	b.n	8009ac6 <VL6180x_SqrtUint32+0x4e>
		} else
		    res >>= 1;
 8009ac0:	68fb      	ldr	r3, [r7, #12]
 8009ac2:	085b      	lsrs	r3, r3, #1
 8009ac4:	60fb      	str	r3, [r7, #12]
		bit >>= 2;
 8009ac6:	68bb      	ldr	r3, [r7, #8]
 8009ac8:	089b      	lsrs	r3, r3, #2
 8009aca:	60bb      	str	r3, [r7, #8]
	while (bit != 0) {
 8009acc:	68bb      	ldr	r3, [r7, #8]
 8009ace:	2b00      	cmp	r3, #0
 8009ad0:	d1e4      	bne.n	8009a9c <VL6180x_SqrtUint32+0x24>
	}
	return res;
 8009ad2:	68fb      	ldr	r3, [r7, #12]
}
 8009ad4:	4618      	mov	r0, r3
 8009ad6:	3714      	adds	r7, #20
 8009ad8:	46bd      	mov	sp, r7
 8009ada:	bc80      	pop	{r7}
 8009adc:	4770      	bx	lr
	...

08009ae0 <_DMax_OneTimeInit>:
#endif

//=============================================================================
/* DMax one time init */
void _DMax_OneTimeInit(VL6180xDev_t dev)
{
 8009ae0:	b480      	push	{r7}
 8009ae2:	b083      	sub	sp, #12
 8009ae4:	af00      	add	r7, sp, #0
 8009ae6:	4603      	mov	r3, r0
 8009ae8:	71fb      	strb	r3, [r7, #7]
	_DMaxData(ambTuningWindowFactor_K) = DEF_AMBIENT_TUNING;
 8009aea:	4b04      	ldr	r3, [pc, #16]	; (8009afc <_DMax_OneTimeInit+0x1c>)
 8009aec:	2250      	movs	r2, #80	; 0x50
 8009aee:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
}
 8009af2:	bf00      	nop
 8009af4:	370c      	adds	r7, #12
 8009af6:	46bd      	mov	sp, r7
 8009af8:	bc80      	pop	{r7}
 8009afa:	4770      	bx	lr
 8009afc:	20000070 	.word	0x20000070

08009b00 <_DMax_RawValueAtRateKCps>:

//=============================================================================
static uint32_t _DMax_RawValueAtRateKCps(VL6180xDev_t dev, int32_t rate)
{
 8009b00:	b580      	push	{r7, lr}
 8009b02:	b088      	sub	sp, #32
 8009b04:	af00      	add	r7, sp, #0
 8009b06:	4603      	mov	r3, r0
 8009b08:	6039      	str	r1, [r7, #0]
 8009b0a:	71fb      	strb	r3, [r7, #7]
	uint32_t RawDMax;
	DMaxFix_t retSignalAt400mm;
	uint32_t ambTuningWindowFactor_K;


	ambTuningWindowFactor_K = _DMaxData(ambTuningWindowFactor_K);
 8009b0c:	4b21      	ldr	r3, [pc, #132]	; (8009b94 <_DMax_RawValueAtRateKCps+0x94>)
 8009b0e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009b12:	617b      	str	r3, [r7, #20]
	snrLimit_K              = _DMaxData(snrLimit_K);
 8009b14:	4b1f      	ldr	r3, [pc, #124]	; (8009b94 <_DMax_RawValueAtRateKCps+0x94>)
 8009b16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009b1a:	613b      	str	r3, [r7, #16]
	retSignalAt400mm        = _DMaxData(retSignalAt400mm);
 8009b1c:	4b1d      	ldr	r3, [pc, #116]	; (8009b94 <_DMax_RawValueAtRateKCps+0x94>)
 8009b1e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009b22:	60fb      	str	r3, [r7, #12]
	/* 12 to 18 bits Kcps */
	if (rate > 0) {
 8009b24:	683b      	ldr	r3, [r7, #0]
 8009b26:	2b00      	cmp	r3, #0
 8009b28:	dd2c      	ble.n	8009b84 <_DMax_RawValueAtRateKCps+0x84>
		DMaxSq = 400 * 400 * 1000 / rate - (400 * 400 / 330);
 8009b2a:	4a1b      	ldr	r2, [pc, #108]	; (8009b98 <_DMax_RawValueAtRateKCps+0x98>)
 8009b2c:	683b      	ldr	r3, [r7, #0]
 8009b2e:	fb92 f3f3 	sdiv	r3, r2, r3
 8009b32:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8009b36:	61fb      	str	r3, [r7, #28]
		/* K of (1/RtnAmb -1/330 )=> 30bit- (12-18)bit  => 12-18 bits*/
		if (DMaxSq <= 0) {
 8009b38:	69fb      	ldr	r3, [r7, #28]
 8009b3a:	2b00      	cmp	r3, #0
 8009b3c:	dc02      	bgt.n	8009b44 <_DMax_RawValueAtRateKCps+0x44>
		    RawDMax = 0;
 8009b3e:	2300      	movs	r3, #0
 8009b40:	61bb      	str	r3, [r7, #24]
 8009b42:	e022      	b.n	8009b8a <_DMax_RawValueAtRateKCps+0x8a>
		} else {
		    /* value can be more 32 bit so base on raneg apply
			 * retSignalAt400mm before or after division to presevr accuracy */
		    if (DMaxSq < (2 << 12)) {
 8009b44:	69fb      	ldr	r3, [r7, #28]
 8009b46:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009b4a:	da0b      	bge.n	8009b64 <_DMax_RawValueAtRateKCps+0x64>
				DMaxSq = DMaxSq * retSignalAt400mm /
 8009b4c:	69fb      	ldr	r3, [r7, #28]
 8009b4e:	68fa      	ldr	r2, [r7, #12]
 8009b50:	fb02 f303 	mul.w	r3, r2, r3
 8009b54:	4619      	mov	r1, r3
							(snrLimit_K + ambTuningWindowFactor_K);
 8009b56:	693a      	ldr	r2, [r7, #16]
 8009b58:	697b      	ldr	r3, [r7, #20]
 8009b5a:	4413      	add	r3, r2
				DMaxSq = DMaxSq * retSignalAt400mm /
 8009b5c:	fbb1 f3f3 	udiv	r3, r1, r3
 8009b60:	61fb      	str	r3, [r7, #28]
 8009b62:	e009      	b.n	8009b78 <_DMax_RawValueAtRateKCps+0x78>
				/* max 12 + 12 to 18 -10 => 12-26 bit */
		    } else {
				DMaxSq = DMaxSq / (snrLimit_K + ambTuningWindowFactor_K) * retSignalAt400mm;
 8009b64:	69fa      	ldr	r2, [r7, #28]
 8009b66:	6939      	ldr	r1, [r7, #16]
 8009b68:	697b      	ldr	r3, [r7, #20]
 8009b6a:	440b      	add	r3, r1
 8009b6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009b70:	68fa      	ldr	r2, [r7, #12]
 8009b72:	fb02 f303 	mul.w	r3, r2, r3
 8009b76:	61fb      	str	r3, [r7, #28]
				/* 12 to 18 -10 + 12 to 18 *=> 12-26 bit */
		    }
		    RawDMax = VL6180x_SqrtUint32(DMaxSq);
 8009b78:	69fb      	ldr	r3, [r7, #28]
 8009b7a:	4618      	mov	r0, r3
 8009b7c:	f7ff ff7c 	bl	8009a78 <VL6180x_SqrtUint32>
 8009b80:	61b8      	str	r0, [r7, #24]
 8009b82:	e002      	b.n	8009b8a <_DMax_RawValueAtRateKCps+0x8a>
		}
	} else {
		RawDMax = 0x7FFFFFFF; /* bigest possibmle 32bit signed value */
 8009b84:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8009b88:	61bb      	str	r3, [r7, #24]
	}
	return RawDMax;
 8009b8a:	69bb      	ldr	r3, [r7, #24]
}
 8009b8c:	4618      	mov	r0, r3
 8009b8e:	3720      	adds	r7, #32
 8009b90:	46bd      	mov	sp, r7
 8009b92:	bd80      	pop	{r7, pc}
 8009b94:	20000070 	.word	0x20000070
 8009b98:	09896800 	.word	0x09896800

08009b9c <_DMax_InitData>:
 *  SYSRANGE_MAX_CONVERGENCE_TIME
 *  SYSRANGE_RANGE_CHECK_ENABLES    mask RANGE_CHECK_RANGE_ENABLE_MASK
 *  range 0xb8-0xbb (0xbb)
 */
static int _DMax_InitData(VL6180xDev_t dev)
{
 8009b9c:	b580      	push	{r7, lr}
 8009b9e:	b08c      	sub	sp, #48	; 0x30
 8009ba0:	af00      	add	r7, sp, #0
 8009ba2:	4603      	mov	r3, r0
 8009ba4:	71fb      	strb	r3, [r7, #7]
	int32_t minSignalNeeded;
	uint8_t SysRangeCheckEn;
	uint8_t snrLimit;
	static const int ROMABLE_DATA MaxConvTimeAdjust = -4;

	warning = 0;
 8009ba6:	2300      	movs	r3, #0
 8009ba8:	62bb      	str	r3, [r7, #40]	; 0x28

	LOG_FUNCTION_START("");
	do {
		status = i2c1_ReadReg16Byte(VL6180x_I2C_ADDRESS, 0x02A, &u8);
 8009baa:	f107 0313 	add.w	r3, r7, #19
 8009bae:	461a      	mov	r2, r3
 8009bb0:	212a      	movs	r1, #42	; 0x2a
 8009bb2:	2052      	movs	r0, #82	; 0x52
 8009bb4:	f7fc fa8a 	bl	80060cc <i2c1_ReadReg16Byte>
 8009bb8:	62f8      	str	r0, [r7, #44]	; 0x2c
		if (status) {
 8009bba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009bbc:	2b00      	cmp	r3, #0
 8009bbe:	f040 8096 	bne.w	8009cee <_DMax_InitData+0x152>
		    //VL6180x_ErrLog("Reg 0x02A rd fail");
		    break;
		}

		if (u8 == 0) {
 8009bc2:	7cfb      	ldrb	r3, [r7, #19]
 8009bc4:	2b00      	cmp	r3, #0
 8009bc6:	d103      	bne.n	8009bd0 <_DMax_InitData+0x34>
		    warning = CALIBRATION_WARNING;
 8009bc8:	2301      	movs	r3, #1
 8009bca:	62bb      	str	r3, [r7, #40]	; 0x28
		    u8 = 40; /* use a default average value */
 8009bcc:	2328      	movs	r3, #40	; 0x28
 8009bce:	74fb      	strb	r3, [r7, #19]
		}
		Reg2A_KCps = Fix7_2_KCPs(u8); /* convert to KCPs */
 8009bd0:	7cfb      	ldrb	r3, [r7, #19]
 8009bd2:	461a      	mov	r2, r3
 8009bd4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8009bd8:	fb02 f303 	mul.w	r3, r2, r3
 8009bdc:	09db      	lsrs	r3, r3, #7
 8009bde:	61fb      	str	r3, [r7, #28]

		status = i2c1_ReadReg16Byte(VL6180x_I2C_ADDRESS, SYSRANGE_RANGE_CHECK_ENABLES, &SysRangeCheckEn);
 8009be0:	f107 030a 	add.w	r3, r7, #10
 8009be4:	461a      	mov	r2, r3
 8009be6:	212d      	movs	r1, #45	; 0x2d
 8009be8:	2052      	movs	r0, #82	; 0x52
 8009bea:	f7fc fa6f 	bl	80060cc <i2c1_ReadReg16Byte>
 8009bee:	62f8      	str	r0, [r7, #44]	; 0x2c
		if (status) {
 8009bf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	d17d      	bne.n	8009cf2 <_DMax_InitData+0x156>
		    //VL6180x_ErrLog("SYSRANGE_RANGE_CHECK_ENABLES rd fail ");
		    break;
		}

		status = i2c1_ReadReg16Byte(VL6180x_I2C_ADDRESS, SYSRANGE_MAX_CONVERGENCE_TIME, &MaxConvTime);
 8009bf6:	f107 030b 	add.w	r3, r7, #11
 8009bfa:	461a      	mov	r2, r3
 8009bfc:	211c      	movs	r1, #28
 8009bfe:	2052      	movs	r0, #82	; 0x52
 8009c00:	f7fc fa64 	bl	80060cc <i2c1_ReadReg16Byte>
 8009c04:	62f8      	str	r0, [r7, #44]	; 0x2c
		if (status) {
 8009c06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c08:	2b00      	cmp	r3, #0
 8009c0a:	d174      	bne.n	8009cf6 <_DMax_InitData+0x15a>
		    //VL6180x_ErrLog("SYSRANGE_MAX_CONVERGENCE_TIME rd fail ");
			break;
		}

		status = i2c1_ReadReg16Word32(VL6180x_I2C_ADDRESS, 0x0B8, &RegB8);
 8009c0c:	f107 030c 	add.w	r3, r7, #12
 8009c10:	461a      	mov	r2, r3
 8009c12:	21b8      	movs	r1, #184	; 0xb8
 8009c14:	2052      	movs	r0, #82	; 0x52
 8009c16:	f7fc facd 	bl	80061b4 <i2c1_ReadReg16Word32>
 8009c1a:	62f8      	str	r0, [r7, #44]	; 0x2c
		if (status) {
 8009c1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c1e:	2b00      	cmp	r3, #0
 8009c20:	d16b      	bne.n	8009cfa <_DMax_InitData+0x15e>
		    //VL6180x_ErrLog("reg 0x0B8 rd fail ");
		    break;
		}

		status = i2c1_ReadReg16Byte(VL6180x_I2C_ADDRESS, SYSRANGE_MAX_AMBIENT_LEVEL_MULT, &snrLimit);
 8009c22:	f107 0309 	add.w	r3, r7, #9
 8009c26:	461a      	mov	r2, r3
 8009c28:	212c      	movs	r1, #44	; 0x2c
 8009c2a:	2052      	movs	r0, #82	; 0x52
 8009c2c:	f7fc fa4e 	bl	80060cc <i2c1_ReadReg16Byte>
 8009c30:	62f8      	str	r0, [r7, #44]	; 0x2c
		if (status) {
 8009c32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c34:	2b00      	cmp	r3, #0
 8009c36:	d162      	bne.n	8009cfe <_DMax_InitData+0x162>
		    //VL6180x_ErrLog("SYSRANGE_MAX_AMBIENT_LEVEL_MULT rd fail ");
		    break;
		}
		_DMaxData(snrLimit_K) = (int32_t)16 * 1000 / snrLimit;
 8009c38:	7a7b      	ldrb	r3, [r7, #9]
 8009c3a:	461a      	mov	r2, r3
 8009c3c:	f44f 537a 	mov.w	r3, #16000	; 0x3e80
 8009c40:	fb93 f3f2 	sdiv	r3, r3, r2
 8009c44:	4a34      	ldr	r2, [pc, #208]	; (8009d18 <_DMax_InitData+0x17c>)
 8009c46:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
		XTalkCompRate_KCps =   VL6180xDevDataGet(dev, XTalkCompRate_KCps);
 8009c4a:	4b33      	ldr	r3, [pc, #204]	; (8009d18 <_DMax_InitData+0x17c>)
 8009c4c:	685b      	ldr	r3, [r3, #4]
 8009c4e:	61bb      	str	r3, [r7, #24]

		if (Reg2A_KCps >= XTalkCompRate_KCps) {
 8009c50:	69fa      	ldr	r2, [r7, #28]
 8009c52:	69bb      	ldr	r3, [r7, #24]
 8009c54:	429a      	cmp	r2, r3
 8009c56:	d304      	bcc.n	8009c62 <_DMax_InitData+0xc6>
		    _DMaxData(retSignalAt400mm) = Reg2A_KCps;
 8009c58:	69fb      	ldr	r3, [r7, #28]
 8009c5a:	4a2f      	ldr	r2, [pc, #188]	; (8009d18 <_DMax_InitData+0x17c>)
 8009c5c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
 8009c60:	e003      	b.n	8009c6a <_DMax_InitData+0xce>
		} else{
		    _DMaxData(retSignalAt400mm) = 0;
 8009c62:	4b2d      	ldr	r3, [pc, #180]	; (8009d18 <_DMax_InitData+0x17c>)
 8009c64:	2200      	movs	r2, #0
 8009c66:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
			/* Reg2A_K - XTalkCompRate_KCp <0 is invalid */
		}

		/* if xtalk range check is off omit it in snr clipping */
		if (SysRangeCheckEn&RANGE_CHECK_RANGE_ENABLE_MASK) {
 8009c6a:	7abb      	ldrb	r3, [r7, #10]
 8009c6c:	f003 0302 	and.w	r3, r3, #2
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	d013      	beq.n	8009c9c <_DMax_InitData+0x100>
		    status = i2c1_ReadReg16Word16(VL6180x_I2C_ADDRESS, SYSRANGE_RANGE_IGNORE_THRESHOLD, &u16);
 8009c74:	f107 0310 	add.w	r3, r7, #16
 8009c78:	461a      	mov	r2, r3
 8009c7a:	2126      	movs	r1, #38	; 0x26
 8009c7c:	2052      	movs	r0, #82	; 0x52
 8009c7e:	f7fc fa5b 	bl	8006138 <i2c1_ReadReg16Word16>
 8009c82:	62f8      	str	r0, [r7, #44]	; 0x2c
		    if (status) {
 8009c84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c86:	2b00      	cmp	r3, #0
 8009c88:	d13b      	bne.n	8009d02 <_DMax_InitData+0x166>
				//VL6180x_ErrLog("SYSRANGE_RANGE_IGNORE_THRESHOLD rd fail ");
				break;
		    }
		    RangeIgnoreThreshold = Fix7_2_KCPs(u16);
 8009c8a:	8a3b      	ldrh	r3, [r7, #16]
 8009c8c:	461a      	mov	r2, r3
 8009c8e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8009c92:	fb02 f303 	mul.w	r3, r2, r3
 8009c96:	09db      	lsrs	r3, r3, #7
 8009c98:	627b      	str	r3, [r7, #36]	; 0x24
 8009c9a:	e001      	b.n	8009ca0 <_DMax_InitData+0x104>
		} else{
		    RangeIgnoreThreshold  = 0;
 8009c9c:	2300      	movs	r3, #0
 8009c9e:	627b      	str	r3, [r7, #36]	; 0x24
		}

		minSignalNeeded = (RegB8 * 256) / ((int32_t)MaxConvTime + (int32_t)MaxConvTimeAdjust);
 8009ca0:	68fb      	ldr	r3, [r7, #12]
 8009ca2:	021b      	lsls	r3, r3, #8
 8009ca4:	7afa      	ldrb	r2, [r7, #11]
 8009ca6:	4611      	mov	r1, r2
 8009ca8:	4a1c      	ldr	r2, [pc, #112]	; (8009d1c <_DMax_InitData+0x180>)
 8009caa:	6812      	ldr	r2, [r2, #0]
 8009cac:	440a      	add	r2, r1
 8009cae:	fbb3 f3f2 	udiv	r3, r3, r2
 8009cb2:	623b      	str	r3, [r7, #32]
		/* KCps 8+8 bit -(1 to 6 bit) => 15-10 bit */
		/* minSignalNeeded = max ( minSignalNeeded,  RangeIgnoreThreshold - XTalkCompRate_KCps) */
		if (minSignalNeeded  <= (int32_t)RangeIgnoreThreshold - (int32_t)XTalkCompRate_KCps)
 8009cb4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009cb6:	69bb      	ldr	r3, [r7, #24]
 8009cb8:	1ad3      	subs	r3, r2, r3
 8009cba:	6a3a      	ldr	r2, [r7, #32]
 8009cbc:	429a      	cmp	r2, r3
 8009cbe:	dc03      	bgt.n	8009cc8 <_DMax_InitData+0x12c>
		    minSignalNeeded  =  RangeIgnoreThreshold - XTalkCompRate_KCps;
 8009cc0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009cc2:	69bb      	ldr	r3, [r7, #24]
 8009cc4:	1ad3      	subs	r3, r2, r3
 8009cc6:	623b      	str	r3, [r7, #32]

		u32 = (minSignalNeeded*(uint32_t)snrLimit) / 16;
 8009cc8:	7a7b      	ldrb	r3, [r7, #9]
 8009cca:	461a      	mov	r2, r3
 8009ccc:	6a3b      	ldr	r3, [r7, #32]
 8009cce:	fb02 f303 	mul.w	r3, r2, r3
 8009cd2:	091b      	lsrs	r3, r3, #4
 8009cd4:	617b      	str	r3, [r7, #20]
		_DMaxData(ClipSnrLimit) = _DMax_RawValueAtRateKCps(dev, u32);
 8009cd6:	697a      	ldr	r2, [r7, #20]
 8009cd8:	79fb      	ldrb	r3, [r7, #7]
 8009cda:	4611      	mov	r1, r2
 8009cdc:	4618      	mov	r0, r3
 8009cde:	f7ff ff0f 	bl	8009b00 <_DMax_RawValueAtRateKCps>
 8009ce2:	4603      	mov	r3, r0
 8009ce4:	b29a      	uxth	r2, r3
 8009ce6:	4b0c      	ldr	r3, [pc, #48]	; (8009d18 <_DMax_InitData+0x17c>)
 8009ce8:	f8a3 208c 	strh.w	r2, [r3, #140]	; 0x8c
 8009cec:	e00a      	b.n	8009d04 <_DMax_InitData+0x168>
		    break;
 8009cee:	bf00      	nop
 8009cf0:	e008      	b.n	8009d04 <_DMax_InitData+0x168>
		    break;
 8009cf2:	bf00      	nop
 8009cf4:	e006      	b.n	8009d04 <_DMax_InitData+0x168>
			break;
 8009cf6:	bf00      	nop
 8009cf8:	e004      	b.n	8009d04 <_DMax_InitData+0x168>
		    break;
 8009cfa:	bf00      	nop
 8009cfc:	e002      	b.n	8009d04 <_DMax_InitData+0x168>
		    break;
 8009cfe:	bf00      	nop
 8009d00:	e000      	b.n	8009d04 <_DMax_InitData+0x168>
				break;
 8009d02:	bf00      	nop
		/* clip to dmax to min signal snr limit rate*/
	} while (0);
	if (!status)
 8009d04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d06:	2b00      	cmp	r3, #0
 8009d08:	d101      	bne.n	8009d0e <_DMax_InitData+0x172>
		status = warning;
 8009d0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d0c:	62fb      	str	r3, [r7, #44]	; 0x2c
	LOG_FUNCTION_END(status);
	return status;
 8009d0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8009d10:	4618      	mov	r0, r3
 8009d12:	3730      	adds	r7, #48	; 0x30
 8009d14:	46bd      	mov	sp, r7
 8009d16:	bd80      	pop	{r7, pc}
 8009d18:	20000070 	.word	0x20000070
 8009d1c:	0800bc7c 	.word	0x0800bc7c

08009d20 <_DMax_Compute>:
//=============================================================================
static int _DMax_Compute(VL6180xDev_t dev, VL6180x_RangeData_t *pRange)
{
 8009d20:	b580      	push	{r7, lr}
 8009d22:	b086      	sub	sp, #24
 8009d24:	af00      	add	r7, sp, #0
 8009d26:	4603      	mov	r3, r0
 8009d28:	6039      	str	r1, [r7, #0]
 8009d2a:	71fb      	strb	r3, [r7, #7]
	int32_t DMax;
	int scaling;
	uint16_t HwLimitAtScale;
	static const int ROMABLE_DATA rtnAmbLowLimit_KCps = 330 * 1000;

	rtnAmbRate = pRange->rtnAmbRate;
 8009d2c:	683b      	ldr	r3, [r7, #0]
 8009d2e:	68db      	ldr	r3, [r3, #12]
 8009d30:	613b      	str	r3, [r7, #16]
	if ((int)rtnAmbRate  < rtnAmbLowLimit_KCps) {
 8009d32:	693a      	ldr	r2, [r7, #16]
 8009d34:	4b18      	ldr	r3, [pc, #96]	; (8009d98 <_DMax_Compute+0x78>)
 8009d36:	681b      	ldr	r3, [r3, #0]
 8009d38:	429a      	cmp	r2, r3
 8009d3a:	da25      	bge.n	8009d88 <_DMax_Compute+0x68>
		DMax = _DMax_RawValueAtRateKCps(dev, rtnAmbRate);
 8009d3c:	693a      	ldr	r2, [r7, #16]
 8009d3e:	79fb      	ldrb	r3, [r7, #7]
 8009d40:	4611      	mov	r1, r2
 8009d42:	4618      	mov	r0, r3
 8009d44:	f7ff fedc 	bl	8009b00 <_DMax_RawValueAtRateKCps>
 8009d48:	4603      	mov	r3, r0
 8009d4a:	617b      	str	r3, [r7, #20]
		scaling = _GetUpscale(dev);
 8009d4c:	4b13      	ldr	r3, [pc, #76]	; (8009d9c <_DMax_Compute+0x7c>)
 8009d4e:	7e1b      	ldrb	r3, [r3, #24]
 8009d50:	60fb      	str	r3, [r7, #12]
		HwLimitAtScale = UpperLimitLookUP[scaling - 1];
 8009d52:	68fb      	ldr	r3, [r7, #12]
 8009d54:	3b01      	subs	r3, #1
 8009d56:	4a12      	ldr	r2, [pc, #72]	; (8009da0 <_DMax_Compute+0x80>)
 8009d58:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009d5c:	817b      	strh	r3, [r7, #10]

		if (DMax > _DMaxData(ClipSnrLimit)) {
 8009d5e:	4b0f      	ldr	r3, [pc, #60]	; (8009d9c <_DMax_Compute+0x7c>)
 8009d60:	f8b3 308c 	ldrh.w	r3, [r3, #140]	; 0x8c
 8009d64:	461a      	mov	r2, r3
 8009d66:	697b      	ldr	r3, [r7, #20]
 8009d68:	4293      	cmp	r3, r2
 8009d6a:	dd03      	ble.n	8009d74 <_DMax_Compute+0x54>
		    DMax = _DMaxData(ClipSnrLimit);
 8009d6c:	4b0b      	ldr	r3, [pc, #44]	; (8009d9c <_DMax_Compute+0x7c>)
 8009d6e:	f8b3 308c 	ldrh.w	r3, [r3, #140]	; 0x8c
 8009d72:	617b      	str	r3, [r7, #20]
		}
		if (DMax > HwLimitAtScale) {
 8009d74:	897b      	ldrh	r3, [r7, #10]
 8009d76:	697a      	ldr	r2, [r7, #20]
 8009d78:	429a      	cmp	r2, r3
 8009d7a:	dd01      	ble.n	8009d80 <_DMax_Compute+0x60>
		    DMax = HwLimitAtScale;
 8009d7c:	897b      	ldrh	r3, [r7, #10]
 8009d7e:	617b      	str	r3, [r7, #20]
		}
		pRange->DMax = DMax;
 8009d80:	697a      	ldr	r2, [r7, #20]
 8009d82:	683b      	ldr	r3, [r7, #0]
 8009d84:	61da      	str	r2, [r3, #28]
 8009d86:	e002      	b.n	8009d8e <_DMax_Compute+0x6e>
	} else {
		pRange->DMax = 0;
 8009d88:	683b      	ldr	r3, [r7, #0]
 8009d8a:	2200      	movs	r2, #0
 8009d8c:	61da      	str	r2, [r3, #28]
	}
	return 0;
 8009d8e:	2300      	movs	r3, #0
}
 8009d90:	4618      	mov	r0, r3
 8009d92:	3718      	adds	r7, #24
 8009d94:	46bd      	mov	sp, r7
 8009d96:	bd80      	pop	{r7, pc}
 8009d98:	0800bc80 	.word	0x0800bc80
 8009d9c:	20000070 	.word	0x20000070
 8009da0:	0800b694 	.word	0x0800b694

08009da4 <DISP_ExecLoopBody>:
const char *DISP_NextString;
/***************  DISPLAY PRIVATE *********************/
static char DISP_CurString[10];
static int DISP_Loop=0;

void DISP_ExecLoopBody(void){
 8009da4:	b580      	push	{r7, lr}
 8009da6:	af00      	add	r7, sp, #0
    if (DISP_NextString != NULL) {
 8009da8:	4b0d      	ldr	r3, [pc, #52]	; (8009de0 <DISP_ExecLoopBody+0x3c>)
 8009daa:	681b      	ldr	r3, [r3, #0]
 8009dac:	2b00      	cmp	r3, #0
 8009dae:	d00c      	beq.n	8009dca <DISP_ExecLoopBody+0x26>
        strncpy(DISP_CurString, DISP_NextString, sizeof(DISP_CurString) - 1);
 8009db0:	4b0b      	ldr	r3, [pc, #44]	; (8009de0 <DISP_ExecLoopBody+0x3c>)
 8009db2:	681b      	ldr	r3, [r3, #0]
 8009db4:	2209      	movs	r2, #9
 8009db6:	4619      	mov	r1, r3
 8009db8:	480a      	ldr	r0, [pc, #40]	; (8009de4 <DISP_ExecLoopBody+0x40>)
 8009dba:	f000 fec3 	bl	800ab44 <strncpy>
        DISP_CurString[sizeof(DISP_CurString) - 1] = 0;
 8009dbe:	4b09      	ldr	r3, [pc, #36]	; (8009de4 <DISP_ExecLoopBody+0x40>)
 8009dc0:	2200      	movs	r2, #0
 8009dc2:	725a      	strb	r2, [r3, #9]
        DISP_NextString = NULL;
 8009dc4:	4b06      	ldr	r3, [pc, #24]	; (8009de0 <DISP_ExecLoopBody+0x3c>)
 8009dc6:	2200      	movs	r2, #0
 8009dc8:	601a      	str	r2, [r3, #0]
    }
    XNUCLEO6180XA1_DisplayString(DISP_CurString, DigitDisplay_ms);
 8009dca:	2101      	movs	r1, #1
 8009dcc:	4805      	ldr	r0, [pc, #20]	; (8009de4 <DISP_ExecLoopBody+0x40>)
 8009dce:	f000 fdb5 	bl	800a93c <XNUCLEO6180XA1_DisplayString>
    DISP_Loop++;
 8009dd2:	4b05      	ldr	r3, [pc, #20]	; (8009de8 <DISP_ExecLoopBody+0x44>)
 8009dd4:	681b      	ldr	r3, [r3, #0]
 8009dd6:	3301      	adds	r3, #1
 8009dd8:	4a03      	ldr	r2, [pc, #12]	; (8009de8 <DISP_ExecLoopBody+0x44>)
 8009dda:	6013      	str	r3, [r2, #0]
}
 8009ddc:	bf00      	nop
 8009dde:	bd80      	pop	{r7, pc}
 8009de0:	200006b4 	.word	0x200006b4
 8009de4:	200001d8 	.word	0x200001d8
 8009de8:	200001e4 	.word	0x200001e4

08009dec <SetDisplayString>:
        DISP_ExecLoopBody();
    } while (1);
}
//============================================================

void SetDisplayString(const char *msg) {
 8009dec:	b480      	push	{r7}
 8009dee:	b083      	sub	sp, #12
 8009df0:	af00      	add	r7, sp, #0
 8009df2:	6078      	str	r0, [r7, #4]
    DISP_NextString=msg;
 8009df4:	4a03      	ldr	r2, [pc, #12]	; (8009e04 <SetDisplayString+0x18>)
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	6013      	str	r3, [r2, #0]
}
 8009dfa:	bf00      	nop
 8009dfc:	370c      	adds	r7, #12
 8009dfe:	46bd      	mov	sp, r7
 8009e00:	bc80      	pop	{r7}
 8009e02:	4770      	bx	lr
 8009e04:	200006b4 	.word	0x200006b4

08009e08 <HAL_GPIO_EXTI_Callback>:
//============================================================
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8009e08:	b580      	push	{r7, lr}
 8009e0a:	b082      	sub	sp, #8
 8009e0c:	af00      	add	r7, sp, #0
 8009e0e:	4603      	mov	r3, r0
 8009e10:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin==GPIO_PIN_0)
 8009e12:	88fb      	ldrh	r3, [r7, #6]
 8009e14:	2b01      	cmp	r3, #1
 8009e16:	d101      	bne.n	8009e1c <HAL_GPIO_EXTI_Callback+0x14>
	{
		XNUCLEO6180XA1_UserIntHandler();
 8009e18:	f000 f84a 	bl	8009eb0 <XNUCLEO6180XA1_UserIntHandler>
	}
}
 8009e1c:	bf00      	nop
 8009e1e:	3708      	adds	r7, #8
 8009e20:	46bd      	mov	sp, r7
 8009e22:	bd80      	pop	{r7, pc}

08009e24 <HAL_SYSTICK_Callback>:
//============================================================

void HAL_SYSTICK_Callback(void){
 8009e24:	b480      	push	{r7}
 8009e26:	af00      	add	r7, sp, #0
    g_TickCnt++;
 8009e28:	4b04      	ldr	r3, [pc, #16]	; (8009e3c <HAL_SYSTICK_Callback+0x18>)
 8009e2a:	681b      	ldr	r3, [r3, #0]
 8009e2c:	3301      	adds	r3, #1
 8009e2e:	4a03      	ldr	r2, [pc, #12]	; (8009e3c <HAL_SYSTICK_Callback+0x18>)
 8009e30:	6013      	str	r3, [r2, #0]
}
 8009e32:	bf00      	nop
 8009e34:	46bd      	mov	sp, r7
 8009e36:	bc80      	pop	{r7}
 8009e38:	4770      	bx	lr
 8009e3a:	bf00      	nop
 8009e3c:	20000204 	.word	0x20000204

08009e40 <XNUCLEO6180XA1_WaitMilliSec>:
//============================================================
void XNUCLEO6180XA1_WaitMilliSec(int n){
 8009e40:	b580      	push	{r7, lr}
 8009e42:	b082      	sub	sp, #8
 8009e44:	af00      	add	r7, sp, #0
 8009e46:	6078      	str	r0, [r7, #4]
    WaitMilliSec(n);
 8009e48:	6878      	ldr	r0, [r7, #4]
 8009e4a:	f000 f805 	bl	8009e58 <WaitMilliSec>
}
 8009e4e:	bf00      	nop
 8009e50:	3708      	adds	r7, #8
 8009e52:	46bd      	mov	sp, r7
 8009e54:	bd80      	pop	{r7, pc}
	...

08009e58 <WaitMilliSec>:
//============================================================
void WaitMilliSec(int ms){
 8009e58:	b480      	push	{r7}
 8009e5a:	b087      	sub	sp, #28
 8009e5c:	af00      	add	r7, sp, #0
 8009e5e:	6078      	str	r0, [r7, #4]
    uint32_t start, now;
    int dif;
    start=g_TickCnt;
 8009e60:	4b09      	ldr	r3, [pc, #36]	; (8009e88 <WaitMilliSec+0x30>)
 8009e62:	681b      	ldr	r3, [r3, #0]
 8009e64:	617b      	str	r3, [r7, #20]
    do{
        now=g_TickCnt;
 8009e66:	4b08      	ldr	r3, [pc, #32]	; (8009e88 <WaitMilliSec+0x30>)
 8009e68:	681b      	ldr	r3, [r3, #0]
 8009e6a:	613b      	str	r3, [r7, #16]
        dif= now -start;
 8009e6c:	693a      	ldr	r2, [r7, #16]
 8009e6e:	697b      	ldr	r3, [r7, #20]
 8009e70:	1ad3      	subs	r3, r2, r3
 8009e72:	60fb      	str	r3, [r7, #12]
    }
    while(dif<ms);
 8009e74:	68fa      	ldr	r2, [r7, #12]
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	429a      	cmp	r2, r3
 8009e7a:	dbf4      	blt.n	8009e66 <WaitMilliSec+0xe>
}
 8009e7c:	bf00      	nop
 8009e7e:	bf00      	nop
 8009e80:	371c      	adds	r7, #28
 8009e82:	46bd      	mov	sp, r7
 8009e84:	bc80      	pop	{r7}
 8009e86:	4770      	bx	lr
 8009e88:	20000204 	.word	0x20000204

08009e8c <BSP_GetPushButton>:
//============================================================
int BSP_GetPushButton(void){
 8009e8c:	b580      	push	{r7, lr}
 8009e8e:	b082      	sub	sp, #8
 8009e90:	af00      	add	r7, sp, #0
    GPIO_PinState state ;
    state = HAL_GPIO_ReadPin(BSP_BP_PORT, BSP_BP_PIN);
 8009e92:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8009e96:	4805      	ldr	r0, [pc, #20]	; (8009eac <BSP_GetPushButton+0x20>)
 8009e98:	f7f8 f9e4 	bl	8002264 <HAL_GPIO_ReadPin>
 8009e9c:	4603      	mov	r3, r0
 8009e9e:	71fb      	strb	r3, [r7, #7]
    return state;
 8009ea0:	79fb      	ldrb	r3, [r7, #7]
}
 8009ea2:	4618      	mov	r0, r3
 8009ea4:	3708      	adds	r7, #8
 8009ea6:	46bd      	mov	sp, r7
 8009ea8:	bd80      	pop	{r7, pc}
 8009eaa:	bf00      	nop
 8009eac:	40011000 	.word	0x40011000

08009eb0 <XNUCLEO6180XA1_UserIntHandler>:
//============================================================
volatile int IntrFired=0;
/* VL6180x shield user interrupt handler */
void XNUCLEO6180XA1_UserIntHandler(void){
 8009eb0:	b480      	push	{r7}
 8009eb2:	af00      	add	r7, sp, #0
    IntrFired ++;
 8009eb4:	4b04      	ldr	r3, [pc, #16]	; (8009ec8 <XNUCLEO6180XA1_UserIntHandler+0x18>)
 8009eb6:	681b      	ldr	r3, [r3, #0]
 8009eb8:	3301      	adds	r3, #1
 8009eba:	4a03      	ldr	r2, [pc, #12]	; (8009ec8 <XNUCLEO6180XA1_UserIntHandler+0x18>)
 8009ebc:	6013      	str	r3, [r2, #0]
}
 8009ebe:	bf00      	nop
 8009ec0:	46bd      	mov	sp, r7
 8009ec2:	bc80      	pop	{r7}
 8009ec4:	4770      	bx	lr
 8009ec6:	bf00      	nop
 8009ec8:	200001e8 	.word	0x200001e8

08009ecc <VL6180x_I2CWrite>:
//=================================================================================
int VL6180x_I2CWrite(VL6180xDev_t addr, uint8_t  *buff, uint8_t len){
 8009ecc:	b580      	push	{r7, lr}
 8009ece:	b084      	sub	sp, #16
 8009ed0:	af00      	add	r7, sp, #0
 8009ed2:	4603      	mov	r3, r0
 8009ed4:	6039      	str	r1, [r7, #0]
 8009ed6:	71fb      	strb	r3, [r7, #7]
 8009ed8:	4613      	mov	r3, r2
 8009eda:	71bb      	strb	r3, [r7, #6]
    int status;
    status = i2c1_WriteBuffer(addr,  buff, len);
 8009edc:	79fb      	ldrb	r3, [r7, #7]
 8009ede:	b29b      	uxth	r3, r3
 8009ee0:	79ba      	ldrb	r2, [r7, #6]
 8009ee2:	6839      	ldr	r1, [r7, #0]
 8009ee4:	4618      	mov	r0, r3
 8009ee6:	f7fb ffdf 	bl	8005ea8 <i2c1_WriteBuffer>
 8009eea:	60f8      	str	r0, [r7, #12]
    return status;
 8009eec:	68fb      	ldr	r3, [r7, #12]
}
 8009eee:	4618      	mov	r0, r3
 8009ef0:	3710      	adds	r7, #16
 8009ef2:	46bd      	mov	sp, r7
 8009ef4:	bd80      	pop	{r7, pc}

08009ef6 <VL6180x_I2CRead>:
//=================================================================================
int VL6180x_I2CRead(VL6180xDev_t addr, uint8_t  *buff, uint8_t len){
 8009ef6:	b580      	push	{r7, lr}
 8009ef8:	b084      	sub	sp, #16
 8009efa:	af00      	add	r7, sp, #0
 8009efc:	4603      	mov	r3, r0
 8009efe:	6039      	str	r1, [r7, #0]
 8009f00:	71fb      	strb	r3, [r7, #7]
 8009f02:	4613      	mov	r3, r2
 8009f04:	71bb      	strb	r3, [r7, #6]
    int status;
    status = i2c1_ReadBuffer(addr,  buff, len);
 8009f06:	79fb      	ldrb	r3, [r7, #7]
 8009f08:	b29b      	uxth	r3, r3
 8009f0a:	79ba      	ldrb	r2, [r7, #6]
 8009f0c:	6839      	ldr	r1, [r7, #0]
 8009f0e:	4618      	mov	r0, r3
 8009f10:	f7fb ffe4 	bl	8005edc <i2c1_ReadBuffer>
 8009f14:	60f8      	str	r0, [r7, #12]
    return status;
 8009f16:	68fb      	ldr	r3, [r7, #12]
}
 8009f18:	4618      	mov	r0, r3
 8009f1a:	3710      	adds	r7, #16
 8009f1c:	46bd      	mov	sp, r7
 8009f1e:	bd80      	pop	{r7, pc}

08009f20 <AbortErr>:
//=================================================================================
void AbortErr( const char * msg ){
 8009f20:	b480      	push	{r7}
 8009f22:	b083      	sub	sp, #12
 8009f24:	af00      	add	r7, sp, #0
 8009f26:	6078      	str	r0, [r7, #4]
    State.mode=  WaitForReset;
 8009f28:	4b03      	ldr	r3, [pc, #12]	; (8009f38 <AbortErr+0x18>)
 8009f2a:	2204      	movs	r2, #4
 8009f2c:	705a      	strb	r2, [r3, #1]
}
 8009f2e:	bf00      	nop
 8009f30:	370c      	adds	r7, #12
 8009f32:	46bd      	mov	sp, r7
 8009f34:	bc80      	pop	{r7}
 8009f36:	4770      	bx	lr
 8009f38:	20000250 	.word	0x20000250

08009f3c <AlsState>:
//=================================================================================
/**
 * ALS mode idle run loops
 */
int AlsState(void)
{
 8009f3c:	b580      	push	{r7, lr}
 8009f3e:	b082      	sub	sp, #8
 8009f40:	af00      	add	r7, sp, #0
    int status;
    status = VL6180x_AlsPollMeasurement(theVL6180xDev, &Als);
 8009f42:	4934      	ldr	r1, [pc, #208]	; (800a014 <AlsState+0xd8>)
 8009f44:	2052      	movs	r0, #82	; 0x52
 8009f46:	f7fe f8d3 	bl	80080f0 <VL6180x_AlsPollMeasurement>
 8009f4a:	6078      	str	r0, [r7, #4]
    if (status) {
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	2b00      	cmp	r3, #0
 8009f50:	d15a      	bne.n	800a008 <AlsState+0xcc>
       // SetDisplayString("Er 4");
    } else {
        if (Als.lux > 9999) {
 8009f52:	4b30      	ldr	r3, [pc, #192]	; (800a014 <AlsState+0xd8>)
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	f242 720f 	movw	r2, #9999	; 0x270f
 8009f5a:	4293      	cmp	r3, r2
 8009f5c:	d903      	bls.n	8009f66 <AlsState+0x2a>
        	term_printf("L----\n\r" );
 8009f5e:	482e      	ldr	r0, [pc, #184]	; (800a018 <AlsState+0xdc>)
 8009f60:	f7fc fa10 	bl	8006384 <term_printf>
 8009f64:	e04d      	b.n	800a002 <AlsState+0xc6>
        }
        else if (Als.lux > 999) {
 8009f66:	4b2b      	ldr	r3, [pc, #172]	; (800a014 <AlsState+0xd8>)
 8009f68:	681b      	ldr	r3, [r3, #0]
 8009f6a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009f6e:	d33b      	bcc.n	8009fe8 <AlsState+0xac>
        	term_printf("LUM:%d.%d\n\r", (int) Als.lux / 1000, (int) (Als.lux % 1000) / 10); /* show LX.YY  X k Lux 2 digit*/
 8009f70:	4b28      	ldr	r3, [pc, #160]	; (800a014 <AlsState+0xd8>)
 8009f72:	681b      	ldr	r3, [r3, #0]
 8009f74:	4a29      	ldr	r2, [pc, #164]	; (800a01c <AlsState+0xe0>)
 8009f76:	fb82 1203 	smull	r1, r2, r2, r3
 8009f7a:	1192      	asrs	r2, r2, #6
 8009f7c:	17db      	asrs	r3, r3, #31
 8009f7e:	1ad1      	subs	r1, r2, r3
 8009f80:	4b24      	ldr	r3, [pc, #144]	; (800a014 <AlsState+0xd8>)
 8009f82:	681a      	ldr	r2, [r3, #0]
 8009f84:	4b25      	ldr	r3, [pc, #148]	; (800a01c <AlsState+0xe0>)
 8009f86:	fba3 0302 	umull	r0, r3, r3, r2
 8009f8a:	099b      	lsrs	r3, r3, #6
 8009f8c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8009f90:	fb00 f303 	mul.w	r3, r0, r3
 8009f94:	1ad3      	subs	r3, r2, r3
 8009f96:	4a22      	ldr	r2, [pc, #136]	; (800a020 <AlsState+0xe4>)
 8009f98:	fb82 0203 	smull	r0, r2, r2, r3
 8009f9c:	1092      	asrs	r2, r2, #2
 8009f9e:	17db      	asrs	r3, r3, #31
 8009fa0:	1ad3      	subs	r3, r2, r3
 8009fa2:	461a      	mov	r2, r3
 8009fa4:	481f      	ldr	r0, [pc, #124]	; (800a024 <AlsState+0xe8>)
 8009fa6:	f7fc f9ed 	bl	8006384 <term_printf>
        	sprintf(buffer, "L%d.%02d", (int) Als.lux / 1000, (int) (Als.lux % 1000) / 10); /* show LX.YY  X k Lux 2 digit*/
 8009faa:	4b1a      	ldr	r3, [pc, #104]	; (800a014 <AlsState+0xd8>)
 8009fac:	681b      	ldr	r3, [r3, #0]
 8009fae:	4a1b      	ldr	r2, [pc, #108]	; (800a01c <AlsState+0xe0>)
 8009fb0:	fb82 1203 	smull	r1, r2, r2, r3
 8009fb4:	1192      	asrs	r2, r2, #6
 8009fb6:	17db      	asrs	r3, r3, #31
 8009fb8:	1ad1      	subs	r1, r2, r3
 8009fba:	4b16      	ldr	r3, [pc, #88]	; (800a014 <AlsState+0xd8>)
 8009fbc:	681a      	ldr	r2, [r3, #0]
 8009fbe:	4b17      	ldr	r3, [pc, #92]	; (800a01c <AlsState+0xe0>)
 8009fc0:	fba3 0302 	umull	r0, r3, r3, r2
 8009fc4:	099b      	lsrs	r3, r3, #6
 8009fc6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8009fca:	fb00 f303 	mul.w	r3, r0, r3
 8009fce:	1ad3      	subs	r3, r2, r3
 8009fd0:	4a13      	ldr	r2, [pc, #76]	; (800a020 <AlsState+0xe4>)
 8009fd2:	fb82 0203 	smull	r0, r2, r2, r3
 8009fd6:	1092      	asrs	r2, r2, #2
 8009fd8:	17db      	asrs	r3, r3, #31
 8009fda:	1ad3      	subs	r3, r2, r3
 8009fdc:	460a      	mov	r2, r1
 8009fde:	4912      	ldr	r1, [pc, #72]	; (800a028 <AlsState+0xec>)
 8009fe0:	4812      	ldr	r0, [pc, #72]	; (800a02c <AlsState+0xf0>)
 8009fe2:	f000 fd8f 	bl	800ab04 <siprintf>
 8009fe6:	e00c      	b.n	800a002 <AlsState+0xc6>
        } else {
        	term_printf( "lum:%d\n\r", (int) Als.lux);
 8009fe8:	4b0a      	ldr	r3, [pc, #40]	; (800a014 <AlsState+0xd8>)
 8009fea:	681b      	ldr	r3, [r3, #0]
 8009fec:	4619      	mov	r1, r3
 8009fee:	4810      	ldr	r0, [pc, #64]	; (800a030 <AlsState+0xf4>)
 8009ff0:	f7fc f9c8 	bl	8006384 <term_printf>
        	sprintf(buffer, "l%3d", (int) Als.lux);
 8009ff4:	4b07      	ldr	r3, [pc, #28]	; (800a014 <AlsState+0xd8>)
 8009ff6:	681b      	ldr	r3, [r3, #0]
 8009ff8:	461a      	mov	r2, r3
 8009ffa:	490e      	ldr	r1, [pc, #56]	; (800a034 <AlsState+0xf8>)
 8009ffc:	480b      	ldr	r0, [pc, #44]	; (800a02c <AlsState+0xf0>)
 8009ffe:	f000 fd81 	bl	800ab04 <siprintf>
        }

        SetDisplayString( buffer );
 800a002:	480a      	ldr	r0, [pc, #40]	; (800a02c <AlsState+0xf0>)
 800a004:	f7ff fef2 	bl	8009dec <SetDisplayString>
    }
    return Als.lux;
 800a008:	4b02      	ldr	r3, [pc, #8]	; (800a014 <AlsState+0xd8>)
 800a00a:	681b      	ldr	r3, [r3, #0]
}
 800a00c:	4618      	mov	r0, r3
 800a00e:	3708      	adds	r7, #8
 800a010:	46bd      	mov	sp, r7
 800a012:	bd80      	pop	{r7, pc}
 800a014:	20000208 	.word	0x20000208
 800a018:	0800bd84 	.word	0x0800bd84
 800a01c:	10624dd3 	.word	0x10624dd3
 800a020:	66666667 	.word	0x66666667
 800a024:	0800bd8c 	.word	0x0800bd8c
 800a028:	0800bd98 	.word	0x0800bd98
 800a02c:	2000025c 	.word	0x2000025c
 800a030:	0800bda4 	.word	0x0800bda4
 800a034:	0800bdb0 	.word	0x0800bdb0

0800a038 <InitAlsMode>:
//=================================================================================

void InitAlsMode(void){
 800a038:	b580      	push	{r7, lr}
 800a03a:	b082      	sub	sp, #8
 800a03c:	af00      	add	r7, sp, #0
    //anything after prepare and prior to go into AlsState
    int time = 100;
 800a03e:	2364      	movs	r3, #100	; 0x64
 800a040:	607b      	str	r3, [r7, #4]
    VL6180x_AlsSetIntegrationPeriod(theVL6180xDev, time);
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	b29b      	uxth	r3, r3
 800a046:	4619      	mov	r1, r3
 800a048:	2052      	movs	r0, #82	; 0x52
 800a04a:	f7fe f963 	bl	8008314 <VL6180x_AlsSetIntegrationPeriod>
}
 800a04e:	bf00      	nop
 800a050:	3708      	adds	r7, #8
 800a052:	46bd      	mov	sp, r7
 800a054:	bd80      	pop	{r7, pc}
	...

0800a058 <DoScalingSwap>:
/**
 * Manage UI and state for scale change
 *
 * @param scaling the next scaling factor
 */
void DoScalingSwap(int scaling){
 800a058:	b580      	push	{r7, lr}
 800a05a:	b082      	sub	sp, #8
 800a05c:	af00      	add	r7, sp, #0
 800a05e:	6078      	str	r0, [r7, #4]
    if( State.AutoScale){
 800a060:	4b21      	ldr	r3, [pc, #132]	; (800a0e8 <DoScalingSwap+0x90>)
 800a062:	781b      	ldrb	r3, [r3, #0]
 800a064:	f003 0302 	and.w	r3, r3, #2
 800a068:	b2db      	uxtb	r3, r3
 800a06a:	2b00      	cmp	r3, #0
 800a06c:	d014      	beq.n	800a098 <DoScalingSwap+0x40>
        if( State.FilterEn ){
 800a06e:	4b1e      	ldr	r3, [pc, #120]	; (800a0e8 <DoScalingSwap+0x90>)
 800a070:	781b      	ldrb	r3, [r3, #0]
 800a072:	f003 0304 	and.w	r3, r3, #4
 800a076:	b2db      	uxtb	r3, r3
 800a078:	2b00      	cmp	r3, #0
 800a07a:	d006      	beq.n	800a08a <DoScalingSwap+0x32>
        					SetDisplayString("Sf A");
 800a07c:	481b      	ldr	r0, [pc, #108]	; (800a0ec <DoScalingSwap+0x94>)
 800a07e:	f7ff feb5 	bl	8009dec <SetDisplayString>
        					term_printf("Sf A");
 800a082:	481a      	ldr	r0, [pc, #104]	; (800a0ec <DoScalingSwap+0x94>)
 800a084:	f7fc f97e 	bl	8006384 <term_printf>
 800a088:	e023      	b.n	800a0d2 <DoScalingSwap+0x7a>
        					}

		else 				{
							SetDisplayString("Sc A");
 800a08a:	4819      	ldr	r0, [pc, #100]	; (800a0f0 <DoScalingSwap+0x98>)
 800a08c:	f7ff feae 	bl	8009dec <SetDisplayString>
							term_printf("Sc A");
 800a090:	4817      	ldr	r0, [pc, #92]	; (800a0f0 <DoScalingSwap+0x98>)
 800a092:	f7fc f977 	bl	8006384 <term_printf>
 800a096:	e01c      	b.n	800a0d2 <DoScalingSwap+0x7a>
							}
    }
    else{
        if( State.FilterEn )
 800a098:	4b13      	ldr	r3, [pc, #76]	; (800a0e8 <DoScalingSwap+0x90>)
 800a09a:	781b      	ldrb	r3, [r3, #0]
 800a09c:	f003 0304 	and.w	r3, r3, #4
 800a0a0:	b2db      	uxtb	r3, r3
 800a0a2:	2b00      	cmp	r3, #0
 800a0a4:	d009      	beq.n	800a0ba <DoScalingSwap+0x62>
        {
			term_printf("Sf %d\n\r", (int)scaling);
 800a0a6:	6879      	ldr	r1, [r7, #4]
 800a0a8:	4812      	ldr	r0, [pc, #72]	; (800a0f4 <DoScalingSwap+0x9c>)
 800a0aa:	f7fc f96b 	bl	8006384 <term_printf>
        	sprintf(buffer, "Sf %d", (int)scaling);
 800a0ae:	687a      	ldr	r2, [r7, #4]
 800a0b0:	4911      	ldr	r1, [pc, #68]	; (800a0f8 <DoScalingSwap+0xa0>)
 800a0b2:	4812      	ldr	r0, [pc, #72]	; (800a0fc <DoScalingSwap+0xa4>)
 800a0b4:	f000 fd26 	bl	800ab04 <siprintf>
 800a0b8:	e008      	b.n	800a0cc <DoScalingSwap+0x74>
        }
        	else
        {
        	term_printf("Sc %d\n\r", (int)scaling);
 800a0ba:	6879      	ldr	r1, [r7, #4]
 800a0bc:	4810      	ldr	r0, [pc, #64]	; (800a100 <DoScalingSwap+0xa8>)
 800a0be:	f7fc f961 	bl	8006384 <term_printf>
    		sprintf(buffer, "Sc %d", (int)scaling);
 800a0c2:	687a      	ldr	r2, [r7, #4]
 800a0c4:	490f      	ldr	r1, [pc, #60]	; (800a104 <DoScalingSwap+0xac>)
 800a0c6:	480d      	ldr	r0, [pc, #52]	; (800a0fc <DoScalingSwap+0xa4>)
 800a0c8:	f000 fd1c 	bl	800ab04 <siprintf>
        }
        SetDisplayString(buffer);
 800a0cc:	480b      	ldr	r0, [pc, #44]	; (800a0fc <DoScalingSwap+0xa4>)
 800a0ce:	f7ff fe8d 	bl	8009dec <SetDisplayString>

    }
    State.mode = ScaleSwap;
 800a0d2:	4b05      	ldr	r3, [pc, #20]	; (800a0e8 <DoScalingSwap+0x90>)
 800a0d4:	2203      	movs	r2, #3
 800a0d6:	705a      	strb	r2, [r3, #1]
    TimeStarted=g_TickCnt;
 800a0d8:	4b0b      	ldr	r3, [pc, #44]	; (800a108 <DoScalingSwap+0xb0>)
 800a0da:	681b      	ldr	r3, [r3, #0]
 800a0dc:	4a0b      	ldr	r2, [pc, #44]	; (800a10c <DoScalingSwap+0xb4>)
 800a0de:	6013      	str	r3, [r2, #0]
}
 800a0e0:	bf00      	nop
 800a0e2:	3708      	adds	r7, #8
 800a0e4:	46bd      	mov	sp, r7
 800a0e6:	bd80      	pop	{r7, pc}
 800a0e8:	20000250 	.word	0x20000250
 800a0ec:	0800bdb8 	.word	0x0800bdb8
 800a0f0:	0800bdc0 	.word	0x0800bdc0
 800a0f4:	0800bdc8 	.word	0x0800bdc8
 800a0f8:	0800bdd0 	.word	0x0800bdd0
 800a0fc:	2000025c 	.word	0x2000025c
 800a100:	0800bdd8 	.word	0x0800bdd8
 800a104:	0800bde0 	.word	0x0800bde0
 800a108:	20000204 	.word	0x20000204
 800a10c:	20000258 	.word	0x20000258

0800a110 <PusbButton_WaitUnPress>:
 * As soon as time is elapsed -rb- is displayed  to let user know order
 * the  request to switch mode is taken into account
 *
 * @return True if button remain pressed more than specified time
 */
int PusbButton_WaitUnPress(void){
 800a110:	b580      	push	{r7, lr}
 800a112:	af00      	add	r7, sp, #0
    TimeStarted = g_TickCnt;
 800a114:	4b11      	ldr	r3, [pc, #68]	; (800a15c <PusbButton_WaitUnPress+0x4c>)
 800a116:	681b      	ldr	r3, [r3, #0]
 800a118:	4a11      	ldr	r2, [pc, #68]	; (800a160 <PusbButton_WaitUnPress+0x50>)
 800a11a:	6013      	str	r3, [r2, #0]
    while( !BSP_GetPushButton() ){ ; //
 800a11c:	e00c      	b.n	800a138 <PusbButton_WaitUnPress+0x28>
        DISP_ExecLoopBody();
 800a11e:	f7ff fe41 	bl	8009da4 <DISP_ExecLoopBody>
        if( g_TickCnt - TimeStarted> PressBPSwicthTime){
 800a122:	4b0e      	ldr	r3, [pc, #56]	; (800a15c <PusbButton_WaitUnPress+0x4c>)
 800a124:	681a      	ldr	r2, [r3, #0]
 800a126:	4b0e      	ldr	r3, [pc, #56]	; (800a160 <PusbButton_WaitUnPress+0x50>)
 800a128:	681b      	ldr	r3, [r3, #0]
 800a12a:	1ad3      	subs	r3, r2, r3
 800a12c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a130:	d902      	bls.n	800a138 <PusbButton_WaitUnPress+0x28>
        	term_printf(" rb \n\r");
 800a132:	480c      	ldr	r0, [pc, #48]	; (800a164 <PusbButton_WaitUnPress+0x54>)
 800a134:	f7fc f926 	bl	8006384 <term_printf>
    while( !BSP_GetPushButton() ){ ; //
 800a138:	f7ff fea8 	bl	8009e8c <BSP_GetPushButton>
 800a13c:	4603      	mov	r3, r0
 800a13e:	2b00      	cmp	r3, #0
 800a140:	d0ed      	beq.n	800a11e <PusbButton_WaitUnPress+0xe>
        }
    }
    return  g_TickCnt - TimeStarted>PressBPSwicthTime;
 800a142:	4b06      	ldr	r3, [pc, #24]	; (800a15c <PusbButton_WaitUnPress+0x4c>)
 800a144:	681a      	ldr	r2, [r3, #0]
 800a146:	4b06      	ldr	r3, [pc, #24]	; (800a160 <PusbButton_WaitUnPress+0x50>)
 800a148:	681b      	ldr	r3, [r3, #0]
 800a14a:	1ad3      	subs	r3, r2, r3
 800a14c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a150:	bf8c      	ite	hi
 800a152:	2301      	movhi	r3, #1
 800a154:	2300      	movls	r3, #0
 800a156:	b2db      	uxtb	r3, r3

}
 800a158:	4618      	mov	r0, r3
 800a15a:	bd80      	pop	{r7, pc}
 800a15c:	20000204 	.word	0x20000204
 800a160:	20000258 	.word	0x20000258
 800a164:	0800bde8 	.word	0x0800bde8

0800a168 <AlarmShowMode>:
//=================================================================================
void AlarmShowMode(const char *msg)
{
 800a168:	b480      	push	{r7}
 800a16a:	b083      	sub	sp, #12
 800a16c:	af00      	add	r7, sp, #0
 800a16e:	6078      	str	r0, [r7, #4]
   // SetDisplayString( msg);
    TimeStarted=g_TickCnt;
 800a170:	4b08      	ldr	r3, [pc, #32]	; (800a194 <AlarmShowMode+0x2c>)
 800a172:	681b      	ldr	r3, [r3, #0]
 800a174:	4a08      	ldr	r2, [pc, #32]	; (800a198 <AlarmShowMode+0x30>)
 800a176:	6013      	str	r3, [r2, #0]
    do {
       // DISP_ExecLoopBody();
    } while (g_TickCnt - TimeStarted < AlrmDispTime);
 800a178:	4b06      	ldr	r3, [pc, #24]	; (800a194 <AlarmShowMode+0x2c>)
 800a17a:	681a      	ldr	r2, [r3, #0]
 800a17c:	4b06      	ldr	r3, [pc, #24]	; (800a198 <AlarmShowMode+0x30>)
 800a17e:	681b      	ldr	r3, [r3, #0]
 800a180:	1ad3      	subs	r3, r2, r3
 800a182:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 800a186:	d3f7      	bcc.n	800a178 <AlarmShowMode+0x10>
}
 800a188:	bf00      	nop
 800a18a:	bf00      	nop
 800a18c:	370c      	adds	r7, #12
 800a18e:	46bd      	mov	sp, r7
 800a190:	bc80      	pop	{r7}
 800a192:	4770      	bx	lr
 800a194:	20000204 	.word	0x20000204
 800a198:	20000258 	.word	0x20000258

0800a19c <AlarmLowThreshUseCase>:
//=================================================================================
void AlarmLowThreshUseCase(void){
 800a19c:	b580      	push	{r7, lr}
 800a19e:	af00      	add	r7, sp, #0
    AlarmShowMode("A-Lo");
 800a1a0:	480d      	ldr	r0, [pc, #52]	; (800a1d8 <AlarmLowThreshUseCase+0x3c>)
 800a1a2:	f7ff ffe1 	bl	800a168 <AlarmShowMode>

    /* make sure from now on all register in group are not fetched by device */
    VL6180x_SetGroupParamHold(theVL6180xDev, 1);
 800a1a6:	2101      	movs	r1, #1
 800a1a8:	2052      	movs	r0, #82	; 0x52
 800a1aa:	f7fd fea7 	bl	8007efc <VL6180x_SetGroupParamHold>

    /* get interrupt whenever we go below 200mm */
    VL6180x_RangeSetThresholds(theVL6180xDev, 200, 0, 0 );
 800a1ae:	2300      	movs	r3, #0
 800a1b0:	2200      	movs	r2, #0
 800a1b2:	21c8      	movs	r1, #200	; 0xc8
 800a1b4:	2052      	movs	r0, #82	; 0x52
 800a1b6:	f7fe fa13 	bl	80085e0 <VL6180x_RangeSetThresholds>
    /* set range interrupt reporting low threshold*/
    VL6180x_RangeConfigInterrupt(theVL6180xDev, CONFIG_GPIO_INTERRUPT_LEVEL_LOW);
 800a1ba:	2101      	movs	r1, #1
 800a1bc:	2052      	movs	r0, #82	; 0x52
 800a1be:	f7fe fca9 	bl	8008b14 <VL6180x_RangeConfigInterrupt>

    /* leave device peak up all new register in group */
    VL6180x_SetGroupParamHold(theVL6180xDev, 0);
 800a1c2:	2100      	movs	r1, #0
 800a1c4:	2052      	movs	r0, #82	; 0x52
 800a1c6:	f7fd fe99 	bl	8007efc <VL6180x_SetGroupParamHold>

    /* clear any interrupt that should ensure a new edge get generated even if we missed it */
    VL6180x_RangeClearInterrupt(theVL6180xDev);
 800a1ca:	2101      	movs	r1, #1
 800a1cc:	2052      	movs	r0, #82	; 0x52
 800a1ce:	f7fe fa7a 	bl	80086c6 <VL6180x_ClearInterrupt>
}
 800a1d2:	bf00      	nop
 800a1d4:	bd80      	pop	{r7, pc}
 800a1d6:	bf00      	nop
 800a1d8:	0800bdf0 	.word	0x0800bdf0

0800a1dc <AlarmHighThreshUseCase>:
//=================================================================================
void AlarmHighThreshUseCase(void){
 800a1dc:	b580      	push	{r7, lr}
 800a1de:	af00      	add	r7, sp, #0
    AlarmShowMode("A-hi");
 800a1e0:	480d      	ldr	r0, [pc, #52]	; (800a218 <AlarmHighThreshUseCase+0x3c>)
 800a1e2:	f7ff ffc1 	bl	800a168 <AlarmShowMode>
    /* make sure from now on all register in group are not fetched by device */
    VL6180x_SetGroupParamHold(theVL6180xDev, 1);
 800a1e6:	2101      	movs	r1, #1
 800a1e8:	2052      	movs	r0, #82	; 0x52
 800a1ea:	f7fd fe87 	bl	8007efc <VL6180x_SetGroupParamHold>

    /* get interrupt whenever  higher than 200mm (low threshold don't care) */
    VL6180x_RangeSetThresholds(theVL6180xDev, 0, 200, 0 );
 800a1ee:	2300      	movs	r3, #0
 800a1f0:	22c8      	movs	r2, #200	; 0xc8
 800a1f2:	2100      	movs	r1, #0
 800a1f4:	2052      	movs	r0, #82	; 0x52
 800a1f6:	f7fe f9f3 	bl	80085e0 <VL6180x_RangeSetThresholds>

    /* set range interrupt reporting high threshold*/
    VL6180x_RangeConfigInterrupt(theVL6180xDev, CONFIG_GPIO_INTERRUPT_LEVEL_HIGH);
 800a1fa:	2102      	movs	r1, #2
 800a1fc:	2052      	movs	r0, #82	; 0x52
 800a1fe:	f7fe fc89 	bl	8008b14 <VL6180x_RangeConfigInterrupt>

    /* leave device peak up all new register in group */
    VL6180x_SetGroupParamHold(theVL6180xDev, 0);
 800a202:	2100      	movs	r1, #0
 800a204:	2052      	movs	r0, #82	; 0x52
 800a206:	f7fd fe79 	bl	8007efc <VL6180x_SetGroupParamHold>

    /* clear any interrupt that should ensure a new edge get generated even if we missed it */
    VL6180x_RangeClearInterrupt(theVL6180xDev);
 800a20a:	2101      	movs	r1, #1
 800a20c:	2052      	movs	r0, #82	; 0x52
 800a20e:	f7fe fa5a 	bl	80086c6 <VL6180x_ClearInterrupt>
}
 800a212:	bf00      	nop
 800a214:	bd80      	pop	{r7, pc}
 800a216:	bf00      	nop
 800a218:	0800bdf8 	.word	0x0800bdf8

0800a21c <AlarmWindowThreshUseCase>:
//=================================================================================
void AlarmWindowThreshUseCase(void){
 800a21c:	b580      	push	{r7, lr}
 800a21e:	af00      	add	r7, sp, #0

    AlarmShowMode("A-0o");
 800a220:	480d      	ldr	r0, [pc, #52]	; (800a258 <AlarmWindowThreshUseCase+0x3c>)
 800a222:	f7ff ffa1 	bl	800a168 <AlarmShowMode>

    /* make sure from now on all register in group are not fetched by device */
    VL6180x_SetGroupParamHold(theVL6180xDev, 1);
 800a226:	2101      	movs	r1, #1
 800a228:	2052      	movs	r0, #82	; 0x52
 800a22a:	f7fd fe67 	bl	8007efc <VL6180x_SetGroupParamHold>

    /* get interrupt whenever  out of  100mm  250mm  range */
    VL6180x_RangeSetThresholds(theVL6180xDev, 100, 200, 0 );
 800a22e:	2300      	movs	r3, #0
 800a230:	22c8      	movs	r2, #200	; 0xc8
 800a232:	2164      	movs	r1, #100	; 0x64
 800a234:	2052      	movs	r0, #82	; 0x52
 800a236:	f7fe f9d3 	bl	80085e0 <VL6180x_RangeSetThresholds>

    /* set range interrupt reporting out of window  */
    VL6180x_RangeConfigInterrupt(theVL6180xDev, CONFIG_GPIO_INTERRUPT_OUT_OF_WINDOW);
 800a23a:	2103      	movs	r1, #3
 800a23c:	2052      	movs	r0, #82	; 0x52
 800a23e:	f7fe fc69 	bl	8008b14 <VL6180x_RangeConfigInterrupt>

    /* leave device peak up all new register in group */
    VL6180x_SetGroupParamHold(theVL6180xDev, 0);
 800a242:	2100      	movs	r1, #0
 800a244:	2052      	movs	r0, #82	; 0x52
 800a246:	f7fd fe59 	bl	8007efc <VL6180x_SetGroupParamHold>

    /* clear any interrupt that should ensure a new edge get generated even if we missed it */
    VL6180x_RangeClearInterrupt(theVL6180xDev);
 800a24a:	2101      	movs	r1, #1
 800a24c:	2052      	movs	r0, #82	; 0x52
 800a24e:	f7fe fa3a 	bl	80086c6 <VL6180x_ClearInterrupt>
}
 800a252:	bf00      	nop
 800a254:	bd80      	pop	{r7, pc}
 800a256:	bf00      	nop
 800a258:	0800be00 	.word	0x0800be00

0800a25c <AlarmUpdateUseCase>:
//=================================================================================
void AlarmUpdateUseCase(void)
{
 800a25c:	b580      	push	{r7, lr}
 800a25e:	af00      	add	r7, sp, #0
    State.CurAlrm =(State.CurAlrm%3);
 800a260:	4b12      	ldr	r3, [pc, #72]	; (800a2ac <AlarmUpdateUseCase+0x50>)
 800a262:	791a      	ldrb	r2, [r3, #4]
 800a264:	4b12      	ldr	r3, [pc, #72]	; (800a2b0 <AlarmUpdateUseCase+0x54>)
 800a266:	fba3 1302 	umull	r1, r3, r3, r2
 800a26a:	0859      	lsrs	r1, r3, #1
 800a26c:	460b      	mov	r3, r1
 800a26e:	005b      	lsls	r3, r3, #1
 800a270:	440b      	add	r3, r1
 800a272:	1ad3      	subs	r3, r2, r3
 800a274:	b2da      	uxtb	r2, r3
 800a276:	4b0d      	ldr	r3, [pc, #52]	; (800a2ac <AlarmUpdateUseCase+0x50>)
 800a278:	711a      	strb	r2, [r3, #4]

    switch ( State.CurAlrm) {
 800a27a:	4b0c      	ldr	r3, [pc, #48]	; (800a2ac <AlarmUpdateUseCase+0x50>)
 800a27c:	791b      	ldrb	r3, [r3, #4]
 800a27e:	2b02      	cmp	r3, #2
 800a280:	d00c      	beq.n	800a29c <AlarmUpdateUseCase+0x40>
 800a282:	2b02      	cmp	r3, #2
 800a284:	dc0c      	bgt.n	800a2a0 <AlarmUpdateUseCase+0x44>
 800a286:	2b00      	cmp	r3, #0
 800a288:	d002      	beq.n	800a290 <AlarmUpdateUseCase+0x34>
 800a28a:	2b01      	cmp	r3, #1
 800a28c:	d003      	beq.n	800a296 <AlarmUpdateUseCase+0x3a>
 800a28e:	e007      	b.n	800a2a0 <AlarmUpdateUseCase+0x44>
    case 0: /* low thresh */
        AlarmLowThreshUseCase();
 800a290:	f7ff ff84 	bl	800a19c <AlarmLowThreshUseCase>
        break;
 800a294:	e004      	b.n	800a2a0 <AlarmUpdateUseCase+0x44>
    case 1: /* high thresh */
        AlarmHighThreshUseCase();;
 800a296:	f7ff ffa1 	bl	800a1dc <AlarmHighThreshUseCase>
        break;
 800a29a:	e001      	b.n	800a2a0 <AlarmUpdateUseCase+0x44>
    case 2: /* out of window */
        AlarmWindowThreshUseCase();
 800a29c:	f7ff ffbe 	bl	800a21c <AlarmWindowThreshUseCase>
    }
    VL6180x_RangeClearInterrupt(theVL6180xDev); /* clear any active interrupt it will ensure we get a new active edge is raised */
 800a2a0:	2101      	movs	r1, #1
 800a2a2:	2052      	movs	r0, #82	; 0x52
 800a2a4:	f7fe fa0f 	bl	80086c6 <VL6180x_ClearInterrupt>
}
 800a2a8:	bf00      	nop
 800a2aa:	bd80      	pop	{r7, pc}
 800a2ac:	20000250 	.word	0x20000250
 800a2b0:	aaaaaaab 	.word	0xaaaaaaab

0800a2b4 <AlarmStop>:
//=================================================================================

void AlarmStop(void){
 800a2b4:	b580      	push	{r7, lr}
 800a2b6:	af00      	add	r7, sp, #0
    VL6180x_RangeSetSystemMode(theVL6180xDev, MODE_CONTINUOUS|MODE_START_STOP);
 800a2b8:	2103      	movs	r1, #3
 800a2ba:	2052      	movs	r0, #82	; 0x52
 800a2bc:	f7fe fccc 	bl	8008c58 <VL6180x_RangeSetSystemMode>
    /* Wait some time for last potential measure to stop ?
     * TODO can we poll check something to avoid that delay? */
    HAL_Delay(100);
 800a2c0:	2064      	movs	r0, #100	; 0x64
 800a2c2:	f7f6 fe67 	bl	8000f94 <HAL_Delay>
    /* Clear any left pending interrupt
     * these is not mandatory or a left uncleared status can mess-up next intr mode change and status check  without a prior intr clear */
    VL6180x_ClearAllInterrupt(theVL6180xDev);
 800a2c6:	2107      	movs	r1, #7
 800a2c8:	2052      	movs	r0, #82	; 0x52
 800a2ca:	f7fe f9fc 	bl	80086c6 <VL6180x_ClearInterrupt>
     * clear interrupt
     * kick of a measure
     * poll for measure ready
     * all that can take up to arround 2x max convergence time typically set to 50ms  */

}
 800a2ce:	bf00      	nop
 800a2d0:	bd80      	pop	{r7, pc}
	...

0800a2d4 <AlarmInit>:

//=================================================================================
/**
 * Initiate alarm (interrupt mode on distance threshold)
 */
void AlarmInit(void){
 800a2d4:	b580      	push	{r7, lr}
 800a2d6:	b082      	sub	sp, #8
 800a2d8:	af00      	add	r7, sp, #0
    State.mode = AlrmRun;
 800a2da:	4b16      	ldr	r3, [pc, #88]	; (800a334 <AlarmInit+0x60>)
 800a2dc:	2206      	movs	r2, #6
 800a2de:	705a      	strb	r2, [r3, #1]
    TimeStarted=g_TickCnt;
 800a2e0:	4b15      	ldr	r3, [pc, #84]	; (800a338 <AlarmInit+0x64>)
 800a2e2:	681b      	ldr	r3, [r3, #0]
 800a2e4:	4a15      	ldr	r2, [pc, #84]	; (800a33c <AlarmInit+0x68>)
 800a2e6:	6013      	str	r3, [r2, #0]
    uint16_t InterMeasPeriod=50; /* 10 ms is the minimal */
 800a2e8:	2332      	movs	r3, #50	; 0x32
 800a2ea:	80fb      	strh	r3, [r7, #6]
    /* We assume device is stopped  */

    VL6180x_Prepare(theVL6180xDev);
 800a2ec:	2052      	movs	r0, #82	; 0x52
 800a2ee:	f7fd fe1f 	bl	8007f30 <VL6180x_Prepare>
    /* Increase convergence time to the max (this is because proximity config of API is used) */
    VL6180x_RangeSetMaxConvergenceTime(theVL6180xDev, 63);
 800a2f2:	213f      	movs	r1, #63	; 0x3f
 800a2f4:	2052      	movs	r0, #82	; 0x52
 800a2f6:	f7fe fc49 	bl	8008b8c <VL6180x_RangeSetMaxConvergenceTime>
    /* set max upscale so we can work up to some  50cm */
    VL6180x_UpscaleSetScaling(theVL6180xDev, 3);
 800a2fa:	2103      	movs	r1, #3
 800a2fc:	2052      	movs	r0, #82	; 0x52
 800a2fe:	f7fe faed 	bl	80088dc <VL6180x_UpscaleSetScaling>

    /* set inter measurement period (that is in fact inter measure time)
     * note that when low refresh rate  is need time like 100ms is best to keep power low  */
    VL6180x_RangeSetInterMeasPeriod(theVL6180xDev, InterMeasPeriod);
 800a302:	88fb      	ldrh	r3, [r7, #6]
 800a304:	4619      	mov	r1, r3
 800a306:	2052      	movs	r0, #82	; 0x52
 800a308:	f7fe fc6a 	bl	8008be0 <VL6180x_RangeSetInterMeasPeriod>
    /* if fast reaction is required then set a time of 0 (will set minimal possible) */
    /* VL6180x_RangeSetInterMeasPeriod(theVL6180xDev, 0); */

    /* setup gpio1 pin to range interrupt output with high polarity (rising edge) */
    VL6180x_SetupGPIO1(theVL6180xDev, GPIOx_SELECT_GPIO_INTERRUPT_OUTPUT, INTR_POL_HIGH);
 800a30c:	2201      	movs	r2, #1
 800a30e:	2108      	movs	r1, #8
 800a310:	2052      	movs	r0, #82	; 0x52
 800a312:	f7fe fbeb 	bl	8008aec <VL6180x_SetupGPIO1>
    /* set threshold for current used case and update the display */
    AlarmUpdateUseCase();
 800a316:	f7ff ffa1 	bl	800a25c <AlarmUpdateUseCase>
    /* enable interrupt at CPU level */
    //XNUCLEO6180XA1_EnableInterrupt();
    /*Clear any pending device interrupt even if already active it should force a new edge so we can pick up*/
    VL6180x_ClearAllInterrupt(theVL6180xDev);
 800a31a:	2107      	movs	r1, #7
 800a31c:	2052      	movs	r0, #82	; 0x52
 800a31e:	f7fe f9d2 	bl	80086c6 <VL6180x_ClearInterrupt>

    /* start continuous mode */
    VL6180x_RangeSetSystemMode(theVL6180xDev, MODE_START_STOP|MODE_CONTINUOUS);
 800a322:	2103      	movs	r1, #3
 800a324:	2052      	movs	r0, #82	; 0x52
 800a326:	f7fe fc97 	bl	8008c58 <VL6180x_RangeSetSystemMode>
    /* from now vl6180x is running on it's own and will interrupt us when condition is met
     * the interrupt set a flag peek-up in AlarmState run loop*/
}
 800a32a:	bf00      	nop
 800a32c:	3708      	adds	r7, #8
 800a32e:	46bd      	mov	sp, r7
 800a330:	bd80      	pop	{r7, pc}
 800a332:	bf00      	nop
 800a334:	20000250 	.word	0x20000250
 800a338:	20000204 	.word	0x20000204
 800a33c:	20000258 	.word	0x20000258

0800a340 <AlarmState>:
 *
 * We only here look at the volatile interrupt flags set that from isr
 * the isr manage to clear interrupt at cpu level
 * we Here clear and re-arm/clear interrupt at the the device level and do the UI and display
 */
void AlarmState(void){
 800a340:	b580      	push	{r7, lr}
 800a342:	b084      	sub	sp, #16
 800a344:	af00      	add	r7, sp, #0
    IntrStatus_t IntStatus;
    int status;

    if (IntrFired != 0) {
 800a346:	4b54      	ldr	r3, [pc, #336]	; (800a498 <AlarmState+0x158>)
 800a348:	681b      	ldr	r3, [r3, #0]
 800a34a:	2b00      	cmp	r3, #0
 800a34c:	d03d      	beq.n	800a3ca <AlarmState+0x8a>
    /* Interrupt did fired Get interrupt  causes */
        status = VL6180x_RangeGetInterruptStatus(theVL6180xDev, &IntStatus.val);
 800a34e:	1d3b      	adds	r3, r7, #4
 800a350:	4619      	mov	r1, r3
 800a352:	2052      	movs	r0, #82	; 0x52
 800a354:	f7fe f99e 	bl	8008694 <VL6180x_RangeGetInterruptStatus>
 800a358:	60b8      	str	r0, [r7, #8]
        if (status) {
 800a35a:	68bb      	ldr	r3, [r7, #8]
 800a35c:	2b00      	cmp	r3, #0
 800a35e:	d003      	beq.n	800a368 <AlarmState+0x28>
            AbortErr("Al 1");
 800a360:	484e      	ldr	r0, [pc, #312]	; (800a49c <AlarmState+0x15c>)
 800a362:	f7ff fddd 	bl	8009f20 <AbortErr>
            goto done;
 800a366:	e092      	b.n	800a48e <AlarmState+0x14e>
        }
        switch( IntStatus.status.Range ) {
 800a368:	793b      	ldrb	r3, [r7, #4]
 800a36a:	f3c3 0302 	ubfx	r3, r3, #0, #3
 800a36e:	b2db      	uxtb	r3, r3
 800a370:	3b01      	subs	r3, #1
 800a372:	2b03      	cmp	r3, #3
 800a374:	d81a      	bhi.n	800a3ac <AlarmState+0x6c>
 800a376:	a201      	add	r2, pc, #4	; (adr r2, 800a37c <AlarmState+0x3c>)
 800a378:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a37c:	0800a38d 	.word	0x0800a38d
 800a380:	0800a395 	.word	0x0800a395
 800a384:	0800a39d 	.word	0x0800a39d
 800a388:	0800a3a5 	.word	0x0800a3a5
        case RES_INT_STAT_GPIO_LOW_LEVEL_THRESHOLD :
          term_printf("L---");
 800a38c:	4844      	ldr	r0, [pc, #272]	; (800a4a0 <AlarmState+0x160>)
 800a38e:	f7fb fff9 	bl	8006384 <term_printf>
            break;
 800a392:	e00b      	b.n	800a3ac <AlarmState+0x6c>
        case RES_INT_STAT_GPIO_HIGH_LEVEL_THRESHOLD :
        	term_printf("H---");
 800a394:	4843      	ldr	r0, [pc, #268]	; (800a4a4 <AlarmState+0x164>)
 800a396:	f7fb fff5 	bl	8006384 <term_printf>
            break;
 800a39a:	e007      	b.n	800a3ac <AlarmState+0x6c>
        case RES_INT_STAT_GPIO_OUT_OF_WINDOW :
            term_printf("O---");
 800a39c:	4842      	ldr	r0, [pc, #264]	; (800a4a8 <AlarmState+0x168>)
 800a39e:	f7fb fff1 	bl	8006384 <term_printf>
            break;
 800a3a2:	e003      	b.n	800a3ac <AlarmState+0x6c>
        case RES_INT_STAT_GPIO_NEW_SAMPLE_READY:
        	term_printf("n---");
 800a3a4:	4841      	ldr	r0, [pc, #260]	; (800a4ac <AlarmState+0x16c>)
 800a3a6:	f7fb ffed 	bl	8006384 <term_printf>
            break;
 800a3aa:	bf00      	nop
        }
        VL6180x_RangeClearInterrupt(theVL6180xDev); /* clear it */
 800a3ac:	2101      	movs	r1, #1
 800a3ae:	2052      	movs	r0, #82	; 0x52
 800a3b0:	f7fe f989 	bl	80086c6 <VL6180x_ClearInterrupt>
        IntrFired = 0;
 800a3b4:	4b38      	ldr	r3, [pc, #224]	; (800a498 <AlarmState+0x158>)
 800a3b6:	2200      	movs	r2, #0
 800a3b8:	601a      	str	r2, [r3, #0]
        TimeStarted=g_TickCnt;
 800a3ba:	4b3d      	ldr	r3, [pc, #244]	; (800a4b0 <AlarmState+0x170>)
 800a3bc:	681b      	ldr	r3, [r3, #0]
 800a3be:	4a3d      	ldr	r2, [pc, #244]	; (800a4b4 <AlarmState+0x174>)
 800a3c0:	6013      	str	r3, [r2, #0]
        State.AlrmFired = 1;
 800a3c2:	4b3d      	ldr	r3, [pc, #244]	; (800a4b8 <AlarmState+0x178>)
 800a3c4:	2201      	movs	r2, #1
 800a3c6:	715a      	strb	r2, [r3, #5]
 800a3c8:	e015      	b.n	800a3f6 <AlarmState+0xb6>
    }
    else{
        int flush=0;
 800a3ca:	2300      	movs	r3, #0
 800a3cc:	60fb      	str	r3, [r7, #12]
        //sanity check we are not in a state where i/o is active without an edge
        if( g_TickCnt-TimeStarted> 5000 ){
 800a3ce:	4b38      	ldr	r3, [pc, #224]	; (800a4b0 <AlarmState+0x170>)
 800a3d0:	681a      	ldr	r2, [r3, #0]
 800a3d2:	4b38      	ldr	r3, [pc, #224]	; (800a4b4 <AlarmState+0x174>)
 800a3d4:	681b      	ldr	r3, [r3, #0]
 800a3d6:	1ad3      	subs	r3, r2, r3
 800a3d8:	f241 3288 	movw	r2, #5000	; 0x1388
 800a3dc:	4293      	cmp	r3, r2
 800a3de:	d90a      	bls.n	800a3f6 <AlarmState+0xb6>
            if( flush )
 800a3e0:	68fb      	ldr	r3, [r7, #12]
 800a3e2:	2b00      	cmp	r3, #0
 800a3e4:	d003      	beq.n	800a3ee <AlarmState+0xae>
                VL6180x_RangeClearInterrupt(theVL6180xDev); /* clear it */
 800a3e6:	2101      	movs	r1, #1
 800a3e8:	2052      	movs	r0, #82	; 0x52
 800a3ea:	f7fe f96c 	bl	80086c6 <VL6180x_ClearInterrupt>
            TimeStarted=g_TickCnt;
 800a3ee:	4b30      	ldr	r3, [pc, #192]	; (800a4b0 <AlarmState+0x170>)
 800a3f0:	681b      	ldr	r3, [r3, #0]
 800a3f2:	4a30      	ldr	r2, [pc, #192]	; (800a4b4 <AlarmState+0x174>)
 800a3f4:	6013      	str	r3, [r2, #0]
        }
    }
    if( State.AlrmFired ){
 800a3f6:	4b30      	ldr	r3, [pc, #192]	; (800a4b8 <AlarmState+0x178>)
 800a3f8:	795b      	ldrb	r3, [r3, #5]
 800a3fa:	2b00      	cmp	r3, #0
 800a3fc:	d00a      	beq.n	800a414 <AlarmState+0xd4>
        /* After an interrupt fire keep the display message for some minimal time
         * over wise it could not be visible at all */
        if( g_TickCnt-TimeStarted > AlarmKeepDispTime )
 800a3fe:	4b2c      	ldr	r3, [pc, #176]	; (800a4b0 <AlarmState+0x170>)
 800a400:	681a      	ldr	r2, [r3, #0]
 800a402:	4b2c      	ldr	r3, [pc, #176]	; (800a4b4 <AlarmState+0x174>)
 800a404:	681b      	ldr	r3, [r3, #0]
 800a406:	1ad3      	subs	r3, r2, r3
 800a408:	2bfa      	cmp	r3, #250	; 0xfa
 800a40a:	d91a      	bls.n	800a442 <AlarmState+0x102>
            State.AlrmFired = 0;
 800a40c:	4b2a      	ldr	r3, [pc, #168]	; (800a4b8 <AlarmState+0x178>)
 800a40e:	2200      	movs	r2, #0
 800a410:	715a      	strb	r2, [r3, #5]
 800a412:	e016      	b.n	800a442 <AlarmState+0x102>
    }
    else{
        switch( State.CurAlrm ){
 800a414:	4b28      	ldr	r3, [pc, #160]	; (800a4b8 <AlarmState+0x178>)
 800a416:	791b      	ldrb	r3, [r3, #4]
 800a418:	2b02      	cmp	r3, #2
 800a41a:	d00e      	beq.n	800a43a <AlarmState+0xfa>
 800a41c:	2b02      	cmp	r3, #2
 800a41e:	dc10      	bgt.n	800a442 <AlarmState+0x102>
 800a420:	2b00      	cmp	r3, #0
 800a422:	d002      	beq.n	800a42a <AlarmState+0xea>
 800a424:	2b01      	cmp	r3, #1
 800a426:	d004      	beq.n	800a432 <AlarmState+0xf2>
 800a428:	e00b      	b.n	800a442 <AlarmState+0x102>
            case 0 :
            	term_printf("alarm = Low\n\r");
 800a42a:	4824      	ldr	r0, [pc, #144]	; (800a4bc <AlarmState+0x17c>)
 800a42c:	f7fb ffaa 	bl	8006384 <term_printf>
                break;
 800a430:	e007      	b.n	800a442 <AlarmState+0x102>
            case 1 :
               	term_printf("alarm = High\n\r");
 800a432:	4823      	ldr	r0, [pc, #140]	; (800a4c0 <AlarmState+0x180>)
 800a434:	f7fb ffa6 	bl	8006384 <term_printf>
                break;
 800a438:	e003      	b.n	800a442 <AlarmState+0x102>
            case 2:
             	term_printf("alarm = Window\n\r");
 800a43a:	4822      	ldr	r0, [pc, #136]	; (800a4c4 <AlarmState+0x184>)
 800a43c:	f7fb ffa2 	bl	8006384 <term_printf>
                break;
 800a440:	bf00      	nop
        }
    }
    /* keep On refreshing display at every idle loop */
    DISP_ExecLoopBody();
 800a442:	f7ff fcaf 	bl	8009da4 <DISP_ExecLoopBody>

    if( !BSP_GetPushButton() ){
 800a446:	f7ff fd21 	bl	8009e8c <BSP_GetPushButton>
 800a44a:	4603      	mov	r3, r0
 800a44c:	2b00      	cmp	r3, #0
 800a44e:	d11d      	bne.n	800a48c <AlarmState+0x14c>
        // when button get presses wait it get release (keep doing display)
        status = PusbButton_WaitUnPress();
 800a450:	f7ff fe5e 	bl	800a110 <PusbButton_WaitUnPress>
 800a454:	60b8      	str	r0, [r7, #8]
        if( status ){
 800a456:	68bb      	ldr	r3, [r7, #8]
 800a458:	2b00      	cmp	r3, #0
 800a45a:	d005      	beq.n	800a468 <AlarmState+0x128>
            // BP stay pressed very long time switch back to range/als
            AlarmStop();
 800a45c:	f7ff ff2a 	bl	800a2b4 <AlarmStop>
            State.mode=FromSwitch;
 800a460:	4b15      	ldr	r3, [pc, #84]	; (800a4b8 <AlarmState+0x178>)
 800a462:	2207      	movs	r2, #7
 800a464:	705a      	strb	r2, [r3, #1]
        }
    }

done:
    ;
}
 800a466:	e012      	b.n	800a48e <AlarmState+0x14e>
            State.CurAlrm=(State.CurAlrm+1)%3;
 800a468:	4b13      	ldr	r3, [pc, #76]	; (800a4b8 <AlarmState+0x178>)
 800a46a:	791b      	ldrb	r3, [r3, #4]
 800a46c:	1c5a      	adds	r2, r3, #1
 800a46e:	4b16      	ldr	r3, [pc, #88]	; (800a4c8 <AlarmState+0x188>)
 800a470:	fb83 3102 	smull	r3, r1, r3, r2
 800a474:	17d3      	asrs	r3, r2, #31
 800a476:	1ac9      	subs	r1, r1, r3
 800a478:	460b      	mov	r3, r1
 800a47a:	005b      	lsls	r3, r3, #1
 800a47c:	440b      	add	r3, r1
 800a47e:	1ad1      	subs	r1, r2, r3
 800a480:	b2ca      	uxtb	r2, r1
 800a482:	4b0d      	ldr	r3, [pc, #52]	; (800a4b8 <AlarmState+0x178>)
 800a484:	711a      	strb	r2, [r3, #4]
            AlarmUpdateUseCase();
 800a486:	f7ff fee9 	bl	800a25c <AlarmUpdateUseCase>
}
 800a48a:	e000      	b.n	800a48e <AlarmState+0x14e>
done:
 800a48c:	bf00      	nop
}
 800a48e:	bf00      	nop
 800a490:	3710      	adds	r7, #16
 800a492:	46bd      	mov	sp, r7
 800a494:	bd80      	pop	{r7, pc}
 800a496:	bf00      	nop
 800a498:	200001e8 	.word	0x200001e8
 800a49c:	0800be08 	.word	0x0800be08
 800a4a0:	0800be10 	.word	0x0800be10
 800a4a4:	0800be18 	.word	0x0800be18
 800a4a8:	0800be20 	.word	0x0800be20
 800a4ac:	0800be28 	.word	0x0800be28
 800a4b0:	20000204 	.word	0x20000204
 800a4b4:	20000258 	.word	0x20000258
 800a4b8:	20000250 	.word	0x20000250
 800a4bc:	0800be30 	.word	0x0800be30
 800a4c0:	0800be40 	.word	0x0800be40
 800a4c4:	0800be50 	.word	0x0800be50
 800a4c8:	55555556 	.word	0x55555556

0800a4cc <GoToAlaramState>:

//=================================================================================
void GoToAlaramState(void) {
 800a4cc:	b580      	push	{r7, lr}
 800a4ce:	af00      	add	r7, sp, #0
    AlarmInit();
 800a4d0:	f7ff ff00 	bl	800a2d4 <AlarmInit>
}
 800a4d4:	bf00      	nop
 800a4d6:	bd80      	pop	{r7, pc}

0800a4d8 <RangeState>:
//=================================================================================
/**
 * Ranging mode idle loop
 */
int RangeState(void) {
 800a4d8:	b580      	push	{r7, lr}
 800a4da:	b084      	sub	sp, #16
 800a4dc:	af00      	add	r7, sp, #0
    int status;
    uint16_t hlimit;
    uint8_t scaling;

    scaling = VL6180x_UpscaleGetScaling(theVL6180xDev);
 800a4de:	2052      	movs	r0, #82	; 0x52
 800a4e0:	f7fe fa7c 	bl	80089dc <VL6180x_UpscaleGetScaling>
 800a4e4:	4603      	mov	r3, r0
 800a4e6:	73fb      	strb	r3, [r7, #15]
    status = VL6180x_RangePollMeasurement(theVL6180xDev, &Range); /* these invoke dipslay for  polling */
 800a4e8:	4992      	ldr	r1, [pc, #584]	; (800a734 <RangeState+0x25c>)
 800a4ea:	2052      	movs	r0, #82	; 0x52
 800a4ec:	f7fd ff46 	bl	800837c <VL6180x_RangePollMeasurement>
 800a4f0:	60b8      	str	r0, [r7, #8]
    if (status) {
 800a4f2:	68bb      	ldr	r3, [r7, #8]
 800a4f4:	2b00      	cmp	r3, #0
 800a4f6:	d003      	beq.n	800a500 <RangeState+0x28>
        AbortErr("Er r");
 800a4f8:	488f      	ldr	r0, [pc, #572]	; (800a738 <RangeState+0x260>)
 800a4fa:	f7ff fd11 	bl	8009f20 <AbortErr>
        return;
 800a4fe:	e174      	b.n	800a7ea <RangeState+0x312>
    }

    hlimit = VL6180x_GetUpperLimit(theVL6180xDev);
 800a500:	2052      	movs	r0, #82	; 0x52
 800a502:	f7fd fc89 	bl	8007e18 <VL6180x_GetUpperLimit>
 800a506:	4603      	mov	r3, r0
 800a508:	80fb      	strh	r3, [r7, #6]
    if (Range.range_mm >= (hlimit * AutoThreshHigh) / 100 && scaling < 3 && State.AutoScale) {
 800a50a:	4b8a      	ldr	r3, [pc, #552]	; (800a734 <RangeState+0x25c>)
 800a50c:	6819      	ldr	r1, [r3, #0]
 800a50e:	88fa      	ldrh	r2, [r7, #6]
 800a510:	4613      	mov	r3, r2
 800a512:	009b      	lsls	r3, r3, #2
 800a514:	4413      	add	r3, r2
 800a516:	011b      	lsls	r3, r3, #4
 800a518:	4a88      	ldr	r2, [pc, #544]	; (800a73c <RangeState+0x264>)
 800a51a:	fb82 0203 	smull	r0, r2, r2, r3
 800a51e:	1152      	asrs	r2, r2, #5
 800a520:	17db      	asrs	r3, r3, #31
 800a522:	1ad3      	subs	r3, r2, r3
 800a524:	4299      	cmp	r1, r3
 800a526:	db10      	blt.n	800a54a <RangeState+0x72>
 800a528:	7bfb      	ldrb	r3, [r7, #15]
 800a52a:	2b02      	cmp	r3, #2
 800a52c:	d80d      	bhi.n	800a54a <RangeState+0x72>
 800a52e:	4b84      	ldr	r3, [pc, #528]	; (800a740 <RangeState+0x268>)
 800a530:	781b      	ldrb	r3, [r3, #0]
 800a532:	f003 0302 	and.w	r3, r3, #2
 800a536:	b2db      	uxtb	r3, r3
 800a538:	2b00      	cmp	r3, #0
 800a53a:	d006      	beq.n	800a54a <RangeState+0x72>
        VL6180x_UpscaleSetScaling(theVL6180xDev, scaling + 1);
 800a53c:	7bfb      	ldrb	r3, [r7, #15]
 800a53e:	3301      	adds	r3, #1
 800a540:	b2db      	uxtb	r3, r3
 800a542:	4619      	mov	r1, r3
 800a544:	2052      	movs	r0, #82	; 0x52
 800a546:	f7fe f9c9 	bl	80088dc <VL6180x_UpscaleSetScaling>
    }
    if (Range.range_mm < (hlimit * AutoThreshLow) / 100 && scaling > 1 && State.AutoScale) {
 800a54a:	4b7a      	ldr	r3, [pc, #488]	; (800a734 <RangeState+0x25c>)
 800a54c:	6819      	ldr	r1, [r3, #0]
 800a54e:	88fa      	ldrh	r2, [r7, #6]
 800a550:	4613      	mov	r3, r2
 800a552:	015b      	lsls	r3, r3, #5
 800a554:	4413      	add	r3, r2
 800a556:	4a79      	ldr	r2, [pc, #484]	; (800a73c <RangeState+0x264>)
 800a558:	fb82 0203 	smull	r0, r2, r2, r3
 800a55c:	1152      	asrs	r2, r2, #5
 800a55e:	17db      	asrs	r3, r3, #31
 800a560:	1ad3      	subs	r3, r2, r3
 800a562:	4299      	cmp	r1, r3
 800a564:	da10      	bge.n	800a588 <RangeState+0xb0>
 800a566:	7bfb      	ldrb	r3, [r7, #15]
 800a568:	2b01      	cmp	r3, #1
 800a56a:	d90d      	bls.n	800a588 <RangeState+0xb0>
 800a56c:	4b74      	ldr	r3, [pc, #464]	; (800a740 <RangeState+0x268>)
 800a56e:	781b      	ldrb	r3, [r3, #0]
 800a570:	f003 0302 	and.w	r3, r3, #2
 800a574:	b2db      	uxtb	r3, r3
 800a576:	2b00      	cmp	r3, #0
 800a578:	d006      	beq.n	800a588 <RangeState+0xb0>
        VL6180x_UpscaleSetScaling(theVL6180xDev, scaling - 1);
 800a57a:	7bfb      	ldrb	r3, [r7, #15]
 800a57c:	3b01      	subs	r3, #1
 800a57e:	b2db      	uxtb	r3, r3
 800a580:	4619      	mov	r1, r3
 800a582:	2052      	movs	r0, #82	; 0x52
 800a584:	f7fe f9aa 	bl	80088dc <VL6180x_UpscaleSetScaling>
    }

    if (Range.errorStatus) {
 800a588:	4b6a      	ldr	r3, [pc, #424]	; (800a734 <RangeState+0x25c>)
 800a58a:	689b      	ldr	r3, [r3, #8]
 800a58c:	2b00      	cmp	r3, #0
 800a58e:	d05a      	beq.n	800a646 <RangeState+0x16e>
        /* no valid ranging*/
        if (State.OutofRAnge) {
 800a590:	4b6b      	ldr	r3, [pc, #428]	; (800a740 <RangeState+0x268>)
 800a592:	781b      	ldrb	r3, [r3, #0]
 800a594:	f003 0301 	and.w	r3, r3, #1
 800a598:	b2db      	uxtb	r3, r3
 800a59a:	2b00      	cmp	r3, #0
 800a59c:	d02f      	beq.n	800a5fe <RangeState+0x126>
#if VL6180x_HAVE_DMAX_RANGING
            if ((int)g_TickCnt - (int)TimeStarted >= ErrRangeDispTime &&  (int)g_TickCnt - (int)TimeStarted <  ErrRangeDispTime + DMaxDispTime ){
 800a59e:	4b69      	ldr	r3, [pc, #420]	; (800a744 <RangeState+0x26c>)
 800a5a0:	681b      	ldr	r3, [r3, #0]
 800a5a2:	461a      	mov	r2, r3
 800a5a4:	4b68      	ldr	r3, [pc, #416]	; (800a748 <RangeState+0x270>)
 800a5a6:	681b      	ldr	r3, [r3, #0]
 800a5a8:	1ad3      	subs	r3, r2, r3
 800a5aa:	2b00      	cmp	r3, #0
 800a5ac:	db0e      	blt.n	800a5cc <RangeState+0xf4>
 800a5ae:	4b65      	ldr	r3, [pc, #404]	; (800a744 <RangeState+0x26c>)
 800a5b0:	681b      	ldr	r3, [r3, #0]
 800a5b2:	461a      	mov	r2, r3
 800a5b4:	4b64      	ldr	r3, [pc, #400]	; (800a748 <RangeState+0x270>)
 800a5b6:	681b      	ldr	r3, [r3, #0]
 800a5b8:	1ad3      	subs	r3, r2, r3
 800a5ba:	2b00      	cmp	r3, #0
 800a5bc:	da06      	bge.n	800a5cc <RangeState+0xf4>
                    term_printf("d%d", (int)Range.DMax);
 800a5be:	4b5d      	ldr	r3, [pc, #372]	; (800a734 <RangeState+0x25c>)
 800a5c0:	69db      	ldr	r3, [r3, #28]
 800a5c2:	4619      	mov	r1, r3
 800a5c4:	4861      	ldr	r0, [pc, #388]	; (800a74c <RangeState+0x274>)
 800a5c6:	f7fb fedd 	bl	8006384 <term_printf>
 800a5ca:	e081      	b.n	800a6d0 <RangeState+0x1f8>
                    //SetDisplayString(buffer);
            }
            else

#endif
            if((int)g_TickCnt - (int)TimeStarted < ErrRangeDispTime  )
 800a5cc:	4b5d      	ldr	r3, [pc, #372]	; (800a744 <RangeState+0x26c>)
 800a5ce:	681b      	ldr	r3, [r3, #0]
 800a5d0:	461a      	mov	r2, r3
 800a5d2:	4b5d      	ldr	r3, [pc, #372]	; (800a748 <RangeState+0x270>)
 800a5d4:	681b      	ldr	r3, [r3, #0]
 800a5d6:	1ad3      	subs	r3, r2, r3
 800a5d8:	2b00      	cmp	r3, #0
 800a5da:	da06      	bge.n	800a5ea <RangeState+0x112>
            {

                term_printf("rE%d\n\r", (int) Range.errorStatus);
 800a5dc:	4b55      	ldr	r3, [pc, #340]	; (800a734 <RangeState+0x25c>)
 800a5de:	689b      	ldr	r3, [r3, #8]
 800a5e0:	4619      	mov	r1, r3
 800a5e2:	485b      	ldr	r0, [pc, #364]	; (800a750 <RangeState+0x278>)
 800a5e4:	f7fb fece 	bl	8006384 <term_printf>
 800a5e8:	e072      	b.n	800a6d0 <RangeState+0x1f8>
               // SetDisplayString(buffer);
            }
            else{
                State.OutofRAnge=0; /* back to out of range display */
 800a5ea:	4a55      	ldr	r2, [pc, #340]	; (800a740 <RangeState+0x268>)
 800a5ec:	7813      	ldrb	r3, [r2, #0]
 800a5ee:	f36f 0300 	bfc	r3, #0, #1
 800a5f2:	7013      	strb	r3, [r2, #0]
                TimeStarted=g_TickCnt;
 800a5f4:	4b53      	ldr	r3, [pc, #332]	; (800a744 <RangeState+0x26c>)
 800a5f6:	681b      	ldr	r3, [r3, #0]
 800a5f8:	4a53      	ldr	r2, [pc, #332]	; (800a748 <RangeState+0x270>)
 800a5fa:	6013      	str	r3, [r2, #0]
 800a5fc:	e068      	b.n	800a6d0 <RangeState+0x1f8>
            }
        }
        else {
            int FilterEn;
#if VL6180x_WRAP_AROUND_FILTER_SUPPORT
            FilterEn = VL6180x_FilterGetState(theVL6180xDev);
 800a5fe:	2052      	movs	r0, #82	; 0x52
 800a600:	f7fd ff9c 	bl	800853c <VL6180x_FilterGetState>
 800a604:	6038      	str	r0, [r7, #0]
            if (FilterEn && VL6180x_RangeIsFilteredMeasurement(&Range) ){
 800a606:	683b      	ldr	r3, [r7, #0]
 800a608:	2b00      	cmp	r3, #0
 800a60a:	d007      	beq.n	800a61c <RangeState+0x144>
 800a60c:	4b49      	ldr	r3, [pc, #292]	; (800a734 <RangeState+0x25c>)
 800a60e:	689b      	ldr	r3, [r3, #8]
 800a610:	2b10      	cmp	r3, #16
 800a612:	d103      	bne.n	800a61c <RangeState+0x144>
                SetDisplayString("F---");
 800a614:	484f      	ldr	r0, [pc, #316]	; (800a754 <RangeState+0x27c>)
 800a616:	f7ff fbe9 	bl	8009dec <SetDisplayString>
 800a61a:	e002      	b.n	800a622 <RangeState+0x14a>
            }
            else
                SetDisplayString("r---");
 800a61c:	484e      	ldr	r0, [pc, #312]	; (800a758 <RangeState+0x280>)
 800a61e:	f7ff fbe5 	bl	8009dec <SetDisplayString>
#else
            SetDisplayString("r---");
#endif
            if( g_TickCnt - TimeStarted > OutORangeDispfTime ) {
 800a622:	4b48      	ldr	r3, [pc, #288]	; (800a744 <RangeState+0x26c>)
 800a624:	681a      	ldr	r2, [r3, #0]
 800a626:	4b48      	ldr	r3, [pc, #288]	; (800a748 <RangeState+0x270>)
 800a628:	681b      	ldr	r3, [r3, #0]
 800a62a:	1ad3      	subs	r3, r2, r3
 800a62c:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 800a630:	d94e      	bls.n	800a6d0 <RangeState+0x1f8>
                State.OutofRAnge = 1;
 800a632:	4a43      	ldr	r2, [pc, #268]	; (800a740 <RangeState+0x268>)
 800a634:	7813      	ldrb	r3, [r2, #0]
 800a636:	f043 0301 	orr.w	r3, r3, #1
 800a63a:	7013      	strb	r3, [r2, #0]
                TimeStarted = g_TickCnt;
 800a63c:	4b41      	ldr	r3, [pc, #260]	; (800a744 <RangeState+0x26c>)
 800a63e:	681b      	ldr	r3, [r3, #0]
 800a640:	4a41      	ldr	r2, [pc, #260]	; (800a748 <RangeState+0x270>)
 800a642:	6013      	str	r3, [r2, #0]
 800a644:	e044      	b.n	800a6d0 <RangeState+0x1f8>
            }
        }
    }
    else {
        State.OutofRAnge = 0;
 800a646:	4a3e      	ldr	r2, [pc, #248]	; (800a740 <RangeState+0x268>)
 800a648:	7813      	ldrb	r3, [r2, #0]
 800a64a:	f36f 0300 	bfc	r3, #0, #1
 800a64e:	7013      	strb	r3, [r2, #0]
        TimeStarted = g_TickCnt;
 800a650:	4b3c      	ldr	r3, [pc, #240]	; (800a744 <RangeState+0x26c>)
 800a652:	681b      	ldr	r3, [r3, #0]
 800a654:	4a3c      	ldr	r2, [pc, #240]	; (800a748 <RangeState+0x270>)
 800a656:	6013      	str	r3, [r2, #0]
        range = (range * Alpha + Range.range_mm * ((1 << 16) - Alpha)) >> 16;
 800a658:	4b40      	ldr	r3, [pc, #256]	; (800a75c <RangeState+0x284>)
 800a65a:	881b      	ldrh	r3, [r3, #0]
 800a65c:	461a      	mov	r2, r3
 800a65e:	4b40      	ldr	r3, [pc, #256]	; (800a760 <RangeState+0x288>)
 800a660:	681b      	ldr	r3, [r3, #0]
 800a662:	fb03 f202 	mul.w	r2, r3, r2
 800a666:	4b33      	ldr	r3, [pc, #204]	; (800a734 <RangeState+0x25c>)
 800a668:	681b      	ldr	r3, [r3, #0]
 800a66a:	493d      	ldr	r1, [pc, #244]	; (800a760 <RangeState+0x288>)
 800a66c:	6809      	ldr	r1, [r1, #0]
 800a66e:	f5c1 3180 	rsb	r1, r1, #65536	; 0x10000
 800a672:	fb01 f303 	mul.w	r3, r1, r3
 800a676:	4413      	add	r3, r2
 800a678:	141b      	asrs	r3, r3, #16
 800a67a:	b29a      	uxth	r2, r3
 800a67c:	4b37      	ldr	r3, [pc, #220]	; (800a75c <RangeState+0x284>)
 800a67e:	801a      	strh	r2, [r3, #0]
    	term_printf("range:%d\n\r", (int) range);
 800a680:	4b36      	ldr	r3, [pc, #216]	; (800a75c <RangeState+0x284>)
 800a682:	881b      	ldrh	r3, [r3, #0]
 800a684:	4619      	mov	r1, r3
 800a686:	4837      	ldr	r0, [pc, #220]	; (800a764 <RangeState+0x28c>)
 800a688:	f7fb fe7c 	bl	8006384 <term_printf>
    	sprintf(buffer,"r%d",(int)range);
 800a68c:	4b33      	ldr	r3, [pc, #204]	; (800a75c <RangeState+0x284>)
 800a68e:	881b      	ldrh	r3, [r3, #0]
 800a690:	461a      	mov	r2, r3
 800a692:	4935      	ldr	r1, [pc, #212]	; (800a768 <RangeState+0x290>)
 800a694:	4835      	ldr	r0, [pc, #212]	; (800a76c <RangeState+0x294>)
 800a696:	f000 fa35 	bl	800ab04 <siprintf>
        if (State.AutoScale) {
 800a69a:	4b29      	ldr	r3, [pc, #164]	; (800a740 <RangeState+0x268>)
 800a69c:	781b      	ldrb	r3, [r3, #0]
 800a69e:	f003 0302 	and.w	r3, r3, #2
 800a6a2:	b2db      	uxtb	r3, r3
 800a6a4:	2b00      	cmp	r3, #0
 800a6a6:	d010      	beq.n	800a6ca <RangeState+0x1f2>
            if (scaling == 1) {
 800a6a8:	7bfb      	ldrb	r3, [r7, #15]
 800a6aa:	2b01      	cmp	r3, #1
 800a6ac:	d103      	bne.n	800a6b6 <RangeState+0x1de>
                buffer[0] = '_';
 800a6ae:	4b2f      	ldr	r3, [pc, #188]	; (800a76c <RangeState+0x294>)
 800a6b0:	225f      	movs	r2, #95	; 0x5f
 800a6b2:	701a      	strb	r2, [r3, #0]
 800a6b4:	e009      	b.n	800a6ca <RangeState+0x1f2>
            }
            else
                if (scaling == 2)
 800a6b6:	7bfb      	ldrb	r3, [r7, #15]
 800a6b8:	2b02      	cmp	r3, #2
 800a6ba:	d103      	bne.n	800a6c4 <RangeState+0x1ec>
                    buffer[0] = '=';
 800a6bc:	4b2b      	ldr	r3, [pc, #172]	; (800a76c <RangeState+0x294>)
 800a6be:	223d      	movs	r2, #61	; 0x3d
 800a6c0:	701a      	strb	r2, [r3, #0]
 800a6c2:	e002      	b.n	800a6ca <RangeState+0x1f2>
                else
                    buffer[0] = '~';
 800a6c4:	4b29      	ldr	r3, [pc, #164]	; (800a76c <RangeState+0x294>)
 800a6c6:	227e      	movs	r2, #126	; 0x7e
 800a6c8:	701a      	strb	r2, [r3, #0]
        }

        SetDisplayString(buffer);
 800a6ca:	4828      	ldr	r0, [pc, #160]	; (800a76c <RangeState+0x294>)
 800a6cc:	f7ff fb8e 	bl	8009dec <SetDisplayString>
    }

#define max_scale 3
    if (!BSP_GetPushButton()) {
 800a6d0:	f7ff fbdc 	bl	8009e8c <BSP_GetPushButton>
 800a6d4:	4603      	mov	r3, r0
 800a6d6:	2b00      	cmp	r3, #0
 800a6d8:	f040 8084 	bne.w	800a7e4 <RangeState+0x30c>
        TimeStarted = g_TickCnt;
 800a6dc:	4b19      	ldr	r3, [pc, #100]	; (800a744 <RangeState+0x26c>)
 800a6de:	681b      	ldr	r3, [r3, #0]
 800a6e0:	4a19      	ldr	r2, [pc, #100]	; (800a748 <RangeState+0x270>)
 800a6e2:	6013      	str	r3, [r2, #0]
        status = PusbButton_WaitUnPress();
 800a6e4:	f7ff fd14 	bl	800a110 <PusbButton_WaitUnPress>
 800a6e8:	60b8      	str	r0, [r7, #8]
        if (status) {
 800a6ea:	68bb      	ldr	r3, [r7, #8]
 800a6ec:	2b00      	cmp	r3, #0
 800a6ee:	d002      	beq.n	800a6f6 <RangeState+0x21e>
            GoToAlaramState();
 800a6f0:	f7ff feec 	bl	800a4cc <GoToAlaramState>
            return;
 800a6f4:	e079      	b.n	800a7ea <RangeState+0x312>
        }
        State.ScaleSwapCnt++;
 800a6f6:	4b12      	ldr	r3, [pc, #72]	; (800a740 <RangeState+0x268>)
 800a6f8:	f993 3002 	ldrsb.w	r3, [r3, #2]
 800a6fc:	b2db      	uxtb	r3, r3
 800a6fe:	3301      	adds	r3, #1
 800a700:	b2db      	uxtb	r3, r3
 800a702:	b25a      	sxtb	r2, r3
 800a704:	4b0e      	ldr	r3, [pc, #56]	; (800a740 <RangeState+0x268>)
 800a706:	709a      	strb	r2, [r3, #2]
        if (State.ScaleSwapCnt % (max_scale + 1) == max_scale) {
 800a708:	4b0d      	ldr	r3, [pc, #52]	; (800a740 <RangeState+0x268>)
 800a70a:	f993 3002 	ldrsb.w	r3, [r3, #2]
 800a70e:	425a      	negs	r2, r3
 800a710:	f003 0303 	and.w	r3, r3, #3
 800a714:	f002 0203 	and.w	r2, r2, #3
 800a718:	bf58      	it	pl
 800a71a:	4253      	negpl	r3, r2
 800a71c:	b25b      	sxtb	r3, r3
 800a71e:	2b03      	cmp	r3, #3
 800a720:	d126      	bne.n	800a770 <RangeState+0x298>
            State.AutoScale = 1;
 800a722:	4a07      	ldr	r2, [pc, #28]	; (800a740 <RangeState+0x268>)
 800a724:	7813      	ldrb	r3, [r2, #0]
 800a726:	f043 0302 	orr.w	r3, r3, #2
 800a72a:	7013      	strb	r3, [r2, #0]
            scaling = max_scale;
 800a72c:	2303      	movs	r3, #3
 800a72e:	73fb      	strb	r3, [r7, #15]
 800a730:	e03b      	b.n	800a7aa <RangeState+0x2d2>
 800a732:	bf00      	nop
 800a734:	200002e8 	.word	0x200002e8
 800a738:	0800be64 	.word	0x0800be64
 800a73c:	51eb851f 	.word	0x51eb851f
 800a740:	20000250 	.word	0x20000250
 800a744:	20000204 	.word	0x20000204
 800a748:	20000258 	.word	0x20000258
 800a74c:	0800be6c 	.word	0x0800be6c
 800a750:	0800be70 	.word	0x0800be70
 800a754:	0800be78 	.word	0x0800be78
 800a758:	0800be80 	.word	0x0800be80
 800a75c:	20000310 	.word	0x20000310
 800a760:	20000114 	.word	0x20000114
 800a764:	0800be88 	.word	0x0800be88
 800a768:	0800be94 	.word	0x0800be94
 800a76c:	2000025c 	.word	0x2000025c
#if ALLOW_DISABLE_WAF_FROM_BLUE_BUTTON
            /* togle filtering every time we roll over all scaling(pass by autoscale) */
            if (State.AutoScale)
                State.FilterEn = !State.FilterEn;
#endif
            State.AutoScale = 0;
 800a770:	4a20      	ldr	r2, [pc, #128]	; (800a7f4 <RangeState+0x31c>)
 800a772:	7813      	ldrb	r3, [r2, #0]
 800a774:	f36f 0341 	bfc	r3, #1, #1
 800a778:	7013      	strb	r3, [r2, #0]
            scaling = State.InitScale + (State.ScaleSwapCnt % max_scale);
 800a77a:	4b1e      	ldr	r3, [pc, #120]	; (800a7f4 <RangeState+0x31c>)
 800a77c:	78d8      	ldrb	r0, [r3, #3]
 800a77e:	4b1d      	ldr	r3, [pc, #116]	; (800a7f4 <RangeState+0x31c>)
 800a780:	f993 2002 	ldrsb.w	r2, [r3, #2]
 800a784:	4b1c      	ldr	r3, [pc, #112]	; (800a7f8 <RangeState+0x320>)
 800a786:	fb83 3102 	smull	r3, r1, r3, r2
 800a78a:	17d3      	asrs	r3, r2, #31
 800a78c:	1ac9      	subs	r1, r1, r3
 800a78e:	460b      	mov	r3, r1
 800a790:	005b      	lsls	r3, r3, #1
 800a792:	440b      	add	r3, r1
 800a794:	1ad3      	subs	r3, r2, r3
 800a796:	b25b      	sxtb	r3, r3
 800a798:	b2db      	uxtb	r3, r3
 800a79a:	4403      	add	r3, r0
 800a79c:	73fb      	strb	r3, [r7, #15]
            if (scaling > max_scale)
 800a79e:	7bfb      	ldrb	r3, [r7, #15]
 800a7a0:	2b03      	cmp	r3, #3
 800a7a2:	d902      	bls.n	800a7aa <RangeState+0x2d2>
                scaling = scaling - (max_scale);
 800a7a4:	7bfb      	ldrb	r3, [r7, #15]
 800a7a6:	3b03      	subs	r3, #3
 800a7a8:	73fb      	strb	r3, [r7, #15]
        }

        status = VL6180x_UpscaleSetScaling(theVL6180xDev, scaling);
 800a7aa:	7bfb      	ldrb	r3, [r7, #15]
 800a7ac:	4619      	mov	r1, r3
 800a7ae:	2052      	movs	r0, #82	; 0x52
 800a7b0:	f7fe f894 	bl	80088dc <VL6180x_UpscaleSetScaling>
 800a7b4:	60b8      	str	r0, [r7, #8]
        if (status<0) {
 800a7b6:	68bb      	ldr	r3, [r7, #8]
 800a7b8:	2b00      	cmp	r3, #0
 800a7ba:	da06      	bge.n	800a7ca <RangeState+0x2f2>
            AbortErr("ErUp");
 800a7bc:	480f      	ldr	r0, [pc, #60]	; (800a7fc <RangeState+0x324>)
 800a7be:	f7ff fbaf 	bl	8009f20 <AbortErr>
            State.mode = InitErr;
 800a7c2:	4b0c      	ldr	r3, [pc, #48]	; (800a7f4 <RangeState+0x31c>)
 800a7c4:	2202      	movs	r2, #2
 800a7c6:	705a      	strb	r2, [r3, #1]
 800a7c8:	e00c      	b.n	800a7e4 <RangeState+0x30c>
        }
        else {
            /* do not check status may fail when filter support not active */
            VL6180x_FilterSetState(theVL6180xDev, State.FilterEn);
 800a7ca:	4b0a      	ldr	r3, [pc, #40]	; (800a7f4 <RangeState+0x31c>)
 800a7cc:	781b      	ldrb	r3, [r3, #0]
 800a7ce:	f343 0380 	sbfx	r3, r3, #2, #1
 800a7d2:	b25b      	sxtb	r3, r3
 800a7d4:	4619      	mov	r1, r3
 800a7d6:	2052      	movs	r0, #82	; 0x52
 800a7d8:	f7fd fe9c 	bl	8008514 <VL6180x_FilterSetState>
            DoScalingSwap(scaling);
 800a7dc:	7bfb      	ldrb	r3, [r7, #15]
 800a7de:	4618      	mov	r0, r3
 800a7e0:	f7ff fc3a 	bl	800a058 <DoScalingSwap>
        }
    }
    return range;
 800a7e4:	4b06      	ldr	r3, [pc, #24]	; (800a800 <RangeState+0x328>)
 800a7e6:	881b      	ldrh	r3, [r3, #0]
 800a7e8:	e7ff      	b.n	800a7ea <RangeState+0x312>
}
 800a7ea:	4618      	mov	r0, r3
 800a7ec:	3710      	adds	r7, #16
 800a7ee:	46bd      	mov	sp, r7
 800a7f0:	bd80      	pop	{r7, pc}
 800a7f2:	bf00      	nop
 800a7f4:	20000250 	.word	0x20000250
 800a7f8:	55555556 	.word	0x55555556
 800a7fc:	0800be98 	.word	0x0800be98
 800a800:	20000310 	.word	0x20000310

0800a804 <XNUCLEO6180XA1_Init>:
{
}
//====================================================================
// Init XNUCLEO6180XA1 Expander
//====================================================================
void XNUCLEO6180XA1_Init(I2C_HandleTypeDef *hi2c1) {
 800a804:	b580      	push	{r7, lr}
 800a806:	b084      	sub	sp, #16
 800a808:	af00      	add	r7, sp, #0
 800a80a:	6078      	str	r0, [r7, #4]

    uint8_t ExpanderID[2];
    uint16_t PadDir;

    i2c1_ReadRegBuffer(EXPANDER_I2C_ADDRESS,0, ExpanderID,2);
 800a80c:	f107 020c 	add.w	r2, r7, #12
 800a810:	2302      	movs	r3, #2
 800a812:	2100      	movs	r1, #0
 800a814:	2084      	movs	r0, #132	; 0x84
 800a816:	f7fb fb7b 	bl	8005f10 <i2c1_ReadRegBuffer>

    PadDir=~V2_DISP_SEL;	    // expander config
 800a81a:	f24f 73ff 	movw	r3, #63487	; 0xf7ff
 800a81e:	817b      	strh	r3, [r7, #10]
    i2c1_WriteRegBuffer(EXPANDER_I2C_ADDRESS, GPDR,  (uint8_t*)&PadDir, 2);
 800a820:	f107 020a 	add.w	r2, r7, #10
 800a824:	2302      	movs	r3, #2
 800a826:	2114      	movs	r1, #20
 800a828:	2084      	movs	r0, #132	; 0x84
 800a82a:	f7fb fba3 	bl	8005f74 <i2c1_WriteRegBuffer>
    _V2_DisplayOff();
 800a82e:	f000 f8f7 	bl	800aa20 <_V2_DisplayOff>

}
 800a832:	bf00      	nop
 800a834:	3710      	adds	r7, #16
 800a836:	46bd      	mov	sp, r7
 800a838:	bd80      	pop	{r7, pc}
	...

0800a83c <_V2_SetChipEn>:
/**
 *
 * @param No    0= top , 1= Left, 2=Bottom 3=Right
 * @param state
 */
static void _V2_SetChipEn( int No, int state ){
 800a83c:	b580      	push	{r7, lr}
 800a83e:	b084      	sub	sp, #16
 800a840:	af00      	add	r7, sp, #0
 800a842:	6078      	str	r0, [r7, #4]
 800a844:	6039      	str	r1, [r7, #0]

	int mask = (No==3) ? V2_CHIPEN_R : ((No==2) ? V2_CHIPEN_B : ((No==1) ? V2_CHIPEN_L : V2_CHIPEN));
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	2b03      	cmp	r3, #3
 800a84a:	d00e      	beq.n	800a86a <_V2_SetChipEn+0x2e>
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	2b02      	cmp	r3, #2
 800a850:	d008      	beq.n	800a864 <_V2_SetChipEn+0x28>
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	2b01      	cmp	r3, #1
 800a856:	d102      	bne.n	800a85e <_V2_SetChipEn+0x22>
 800a858:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800a85c:	e007      	b.n	800a86e <_V2_SetChipEn+0x32>
 800a85e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a862:	e004      	b.n	800a86e <_V2_SetChipEn+0x32>
 800a864:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a868:	e001      	b.n	800a86e <_V2_SetChipEn+0x32>
 800a86a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a86e:	60fb      	str	r3, [r7, #12]
    if( state)
 800a870:	683b      	ldr	r3, [r7, #0]
 800a872:	2b00      	cmp	r3, #0
 800a874:	d00a      	beq.n	800a88c <_V2_SetChipEn+0x50>
        _V2PadVal|=mask ;
 800a876:	68fb      	ldr	r3, [r7, #12]
 800a878:	b21a      	sxth	r2, r3
 800a87a:	4b0f      	ldr	r3, [pc, #60]	; (800a8b8 <_V2_SetChipEn+0x7c>)
 800a87c:	881b      	ldrh	r3, [r3, #0]
 800a87e:	b21b      	sxth	r3, r3
 800a880:	4313      	orrs	r3, r2
 800a882:	b21b      	sxth	r3, r3
 800a884:	b29a      	uxth	r2, r3
 800a886:	4b0c      	ldr	r3, [pc, #48]	; (800a8b8 <_V2_SetChipEn+0x7c>)
 800a888:	801a      	strh	r2, [r3, #0]
 800a88a:	e00b      	b.n	800a8a4 <_V2_SetChipEn+0x68>
    else
        _V2PadVal&=~mask;
 800a88c:	68fb      	ldr	r3, [r7, #12]
 800a88e:	b21b      	sxth	r3, r3
 800a890:	43db      	mvns	r3, r3
 800a892:	b21a      	sxth	r2, r3
 800a894:	4b08      	ldr	r3, [pc, #32]	; (800a8b8 <_V2_SetChipEn+0x7c>)
 800a896:	881b      	ldrh	r3, [r3, #0]
 800a898:	b21b      	sxth	r3, r3
 800a89a:	4013      	ands	r3, r2
 800a89c:	b21b      	sxth	r3, r3
 800a89e:	b29a      	uxth	r2, r3
 800a8a0:	4b05      	ldr	r3, [pc, #20]	; (800a8b8 <_V2_SetChipEn+0x7c>)
 800a8a2:	801a      	strh	r2, [r3, #0]

    i2c1_WriteRegBuffer(EXPANDER_I2C_ADDRESS, GPSR, (uint8_t*)&_V2PadVal, 2); // Set Pin State Register
 800a8a4:	2302      	movs	r3, #2
 800a8a6:	4a04      	ldr	r2, [pc, #16]	; (800a8b8 <_V2_SetChipEn+0x7c>)
 800a8a8:	2112      	movs	r1, #18
 800a8aa:	2084      	movs	r0, #132	; 0x84
 800a8ac:	f7fb fb62 	bl	8005f74 <i2c1_WriteRegBuffer>

}
 800a8b0:	bf00      	nop
 800a8b2:	3710      	adds	r7, #16
 800a8b4:	46bd      	mov	sp, r7
 800a8b6:	bd80      	pop	{r7, pc}
 800a8b8:	200006b8 	.word	0x200006b8

0800a8bc <XNUCLEO6180XA1_Reset>:
//====================================================================
void XNUCLEO6180XA1_Reset(int state)
{
 800a8bc:	b580      	push	{r7, lr}
 800a8be:	b082      	sub	sp, #8
 800a8c0:	af00      	add	r7, sp, #0
 800a8c2:	6078      	str	r0, [r7, #4]
        _V2_SetChipEn(0, state);
 800a8c4:	6879      	ldr	r1, [r7, #4]
 800a8c6:	2000      	movs	r0, #0
 800a8c8:	f7ff ffb8 	bl	800a83c <_V2_SetChipEn>
}
 800a8cc:	bf00      	nop
 800a8ce:	3708      	adds	r7, #8
 800a8d0:	46bd      	mov	sp, r7
 800a8d2:	bd80      	pop	{r7, pc}

0800a8d4 <XNUCLEO6180XA1_GetSwitch>:
        return 0;
}
//====================================================================
// Get Switch Button (red one) to choose between 'ALS' and 'range'
//====================================================================
int XNUCLEO6180XA1_GetSwitch(void){
 800a8d4:	b580      	push	{r7, lr}
 800a8d6:	b082      	sub	sp, #8
 800a8d8:	af00      	add	r7, sp, #0
    GPIO_PinState state ;
    state= _V2_GetSwicth() ? GPIO_PIN_SET : GPIO_PIN_RESET ;
 800a8da:	f000 f80d 	bl	800a8f8 <_V2_GetSwicth>
 800a8de:	4603      	mov	r3, r0
 800a8e0:	2b00      	cmp	r3, #0
 800a8e2:	bf14      	ite	ne
 800a8e4:	2301      	movne	r3, #1
 800a8e6:	2300      	moveq	r3, #0
 800a8e8:	b2db      	uxtb	r3, r3
 800a8ea:	71fb      	strb	r3, [r7, #7]
    return state;
 800a8ec:	79fb      	ldrb	r3, [r7, #7]
}
 800a8ee:	4618      	mov	r0, r3
 800a8f0:	3708      	adds	r7, #8
 800a8f2:	46bd      	mov	sp, r7
 800a8f4:	bd80      	pop	{r7, pc}
	...

0800a8f8 <_V2_GetSwicth>:
//====================================================================
int _V2_GetSwicth(){
 800a8f8:	b580      	push	{r7, lr}
 800a8fa:	b082      	sub	sp, #8
 800a8fc:	af00      	add	r7, sp, #0
    int status;
    uint16_t Value;
    status = i2c1_ReadRegBuffer(EXPANDER_I2C_ADDRESS,GPMR, (uint8_t*)&Value,2);
 800a8fe:	1cba      	adds	r2, r7, #2
 800a900:	2302      	movs	r3, #2
 800a902:	2110      	movs	r1, #16
 800a904:	2084      	movs	r0, #132	; 0x84
 800a906:	f7fb fb03 	bl	8005f10 <i2c1_ReadRegBuffer>
 800a90a:	6078      	str	r0, [r7, #4]
    if(status ==0 ){
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	2b00      	cmp	r3, #0
 800a910:	d105      	bne.n	800a91e <_V2_GetSwicth+0x26>
        Value&=V2_DISP_SEL;
 800a912:	887b      	ldrh	r3, [r7, #2]
 800a914:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a918:	b29b      	uxth	r3, r3
 800a91a:	807b      	strh	r3, [r7, #2]
 800a91c:	e006      	b.n	800a92c <_V2_GetSwicth+0x34>
    }
    else{
        _err++;
 800a91e:	4b06      	ldr	r3, [pc, #24]	; (800a938 <_V2_GetSwicth+0x40>)
 800a920:	681b      	ldr	r3, [r3, #0]
 800a922:	3301      	adds	r3, #1
 800a924:	4a04      	ldr	r2, [pc, #16]	; (800a938 <_V2_GetSwicth+0x40>)
 800a926:	6013      	str	r3, [r2, #0]
        Value=0;
 800a928:	2300      	movs	r3, #0
 800a92a:	807b      	strh	r3, [r7, #2]
    }
    return Value;
 800a92c:	887b      	ldrh	r3, [r7, #2]
}
 800a92e:	4618      	mov	r0, r3
 800a930:	3708      	adds	r7, #8
 800a932:	46bd      	mov	sp, r7
 800a934:	bd80      	pop	{r7, pc}
 800a936:	bf00      	nop
 800a938:	200001ec 	.word	0x200001ec

0800a93c <XNUCLEO6180XA1_DisplayString>:

//====================================================================
// Display string on 7 segments
//====================================================================
void XNUCLEO6180XA1_DisplayString(const char *str, int SegDelayMs){
 800a93c:	b580      	push	{r7, lr}
 800a93e:	b084      	sub	sp, #16
 800a940:	af00      	add	r7, sp, #0
 800a942:	6078      	str	r0, [r7, #4]
 800a944:	6039      	str	r1, [r7, #0]
    int i;
    const char *pc;

    for( i=0, pc=str; i<4 && *pc!=0 ; i++, pc++){
 800a946:	2300      	movs	r3, #0
 800a948:	60fb      	str	r3, [r7, #12]
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	60bb      	str	r3, [r7, #8]
 800a94e:	e016      	b.n	800a97e <XNUCLEO6180XA1_DisplayString+0x42>
        _V2_Set7Segment( ascii_to_display_lut[(uint8_t)*pc], i);
 800a950:	68bb      	ldr	r3, [r7, #8]
 800a952:	781b      	ldrb	r3, [r3, #0]
 800a954:	461a      	mov	r2, r3
 800a956:	4b12      	ldr	r3, [pc, #72]	; (800a9a0 <XNUCLEO6180XA1_DisplayString+0x64>)
 800a958:	5c9b      	ldrb	r3, [r3, r2]
 800a95a:	68f9      	ldr	r1, [r7, #12]
 800a95c:	4618      	mov	r0, r3
 800a95e:	f000 f821 	bl	800a9a4 <_V2_Set7Segment>
        if( *(pc+1)== '.'){
 800a962:	68bb      	ldr	r3, [r7, #8]
 800a964:	3301      	adds	r3, #1
 800a966:	781b      	ldrb	r3, [r3, #0]
 800a968:	2b2e      	cmp	r3, #46	; 0x2e
 800a96a:	d102      	bne.n	800a972 <XNUCLEO6180XA1_DisplayString+0x36>
            pc++;
 800a96c:	68bb      	ldr	r3, [r7, #8]
 800a96e:	3301      	adds	r3, #1
 800a970:	60bb      	str	r3, [r7, #8]
    for( i=0, pc=str; i<4 && *pc!=0 ; i++, pc++){
 800a972:	68fb      	ldr	r3, [r7, #12]
 800a974:	3301      	adds	r3, #1
 800a976:	60fb      	str	r3, [r7, #12]
 800a978:	68bb      	ldr	r3, [r7, #8]
 800a97a:	3301      	adds	r3, #1
 800a97c:	60bb      	str	r3, [r7, #8]
 800a97e:	68fb      	ldr	r3, [r7, #12]
 800a980:	2b03      	cmp	r3, #3
 800a982:	dc03      	bgt.n	800a98c <XNUCLEO6180XA1_DisplayString+0x50>
 800a984:	68bb      	ldr	r3, [r7, #8]
 800a986:	781b      	ldrb	r3, [r3, #0]
 800a988:	2b00      	cmp	r3, #0
 800a98a:	d1e1      	bne.n	800a950 <XNUCLEO6180XA1_DisplayString+0x14>
        }
    }
    XNUCLEO6180XA1_WaitMilliSec(SegDelayMs);
 800a98c:	6838      	ldr	r0, [r7, #0]
 800a98e:	f7ff fa57 	bl	8009e40 <XNUCLEO6180XA1_WaitMilliSec>
    _V2_DisplayOff();
 800a992:	f000 f845 	bl	800aa20 <_V2_DisplayOff>
 }
 800a996:	bf00      	nop
 800a998:	3710      	adds	r7, #16
 800a99a:	46bd      	mov	sp, r7
 800a99c:	bd80      	pop	{r7, pc}
 800a99e:	bf00      	nop
 800a9a0:	0800bea0 	.word	0x0800bea0

0800a9a4 <_V2_Set7Segment>:
//====================================================================
// Update 7 segment display
//====================================================================
static  void _V2_Set7Segment( int Leds, int digit ){
 800a9a4:	b580      	push	{r7, lr}
 800a9a6:	b082      	sub	sp, #8
 800a9a8:	af00      	add	r7, sp, #0
 800a9aa:	6078      	str	r0, [r7, #4]
 800a9ac:	6039      	str	r1, [r7, #0]
    _V2PadVal |= 0x7F; /* clear 7 seg bits */
 800a9ae:	4b1b      	ldr	r3, [pc, #108]	; (800aa1c <_V2_Set7Segment+0x78>)
 800a9b0:	881b      	ldrh	r3, [r3, #0]
 800a9b2:	f043 037f 	orr.w	r3, r3, #127	; 0x7f
 800a9b6:	b29a      	uxth	r2, r3
 800a9b8:	4b18      	ldr	r3, [pc, #96]	; (800aa1c <_V2_Set7Segment+0x78>)
 800a9ba:	801a      	strh	r2, [r3, #0]
    _V2PadVal |= V2_D1|V2_D2|V2_D3|V2_D4; /* all segment off */
 800a9bc:	4b17      	ldr	r3, [pc, #92]	; (800aa1c <_V2_Set7Segment+0x78>)
 800a9be:	881b      	ldrh	r3, [r3, #0]
 800a9c0:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800a9c4:	b29a      	uxth	r2, r3
 800a9c6:	4b15      	ldr	r3, [pc, #84]	; (800aa1c <_V2_Set7Segment+0x78>)
 800a9c8:	801a      	strh	r2, [r3, #0]
    _V2PadVal &= ~(V2_D1<<digit);         /* digit on */
 800a9ca:	2280      	movs	r2, #128	; 0x80
 800a9cc:	683b      	ldr	r3, [r7, #0]
 800a9ce:	fa02 f303 	lsl.w	r3, r2, r3
 800a9d2:	b21b      	sxth	r3, r3
 800a9d4:	43db      	mvns	r3, r3
 800a9d6:	b21a      	sxth	r2, r3
 800a9d8:	4b10      	ldr	r3, [pc, #64]	; (800aa1c <_V2_Set7Segment+0x78>)
 800a9da:	881b      	ldrh	r3, [r3, #0]
 800a9dc:	b21b      	sxth	r3, r3
 800a9de:	4013      	ands	r3, r2
 800a9e0:	b21b      	sxth	r3, r3
 800a9e2:	b29a      	uxth	r2, r3
 800a9e4:	4b0d      	ldr	r3, [pc, #52]	; (800aa1c <_V2_Set7Segment+0x78>)
 800a9e6:	801a      	strh	r2, [r3, #0]
    _V2PadVal &= ~(Leds&0x7F);
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	b29b      	uxth	r3, r3
 800a9ec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a9f0:	b29b      	uxth	r3, r3
 800a9f2:	43db      	mvns	r3, r3
 800a9f4:	b29b      	uxth	r3, r3
 800a9f6:	b21a      	sxth	r2, r3
 800a9f8:	4b08      	ldr	r3, [pc, #32]	; (800aa1c <_V2_Set7Segment+0x78>)
 800a9fa:	881b      	ldrh	r3, [r3, #0]
 800a9fc:	b21b      	sxth	r3, r3
 800a9fe:	4013      	ands	r3, r2
 800aa00:	b21b      	sxth	r3, r3
 800aa02:	b29a      	uxth	r2, r3
 800aa04:	4b05      	ldr	r3, [pc, #20]	; (800aa1c <_V2_Set7Segment+0x78>)
 800aa06:	801a      	strh	r2, [r3, #0]

    i2c1_WriteRegBuffer(EXPANDER_I2C_ADDRESS, GPSR, (uint8_t*)&_V2PadVal, 2);
 800aa08:	2302      	movs	r3, #2
 800aa0a:	4a04      	ldr	r2, [pc, #16]	; (800aa1c <_V2_Set7Segment+0x78>)
 800aa0c:	2112      	movs	r1, #18
 800aa0e:	2084      	movs	r0, #132	; 0x84
 800aa10:	f7fb fab0 	bl	8005f74 <i2c1_WriteRegBuffer>
}
 800aa14:	bf00      	nop
 800aa16:	3708      	adds	r7, #8
 800aa18:	46bd      	mov	sp, r7
 800aa1a:	bd80      	pop	{r7, pc}
 800aa1c:	200006b8 	.word	0x200006b8

0800aa20 <_V2_DisplayOff>:

//====================================================================
// Clear 7 segments
//====================================================================
static void _V2_DisplayOff() {
 800aa20:	b580      	push	{r7, lr}
 800aa22:	af00      	add	r7, sp, #0
    _V2PadVal |= (V2_D1|V2_D2|V2_D3| V2_D4); /* segment en off */
 800aa24:	4b07      	ldr	r3, [pc, #28]	; (800aa44 <_V2_DisplayOff+0x24>)
 800aa26:	881b      	ldrh	r3, [r3, #0]
 800aa28:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800aa2c:	b29a      	uxth	r2, r3
 800aa2e:	4b05      	ldr	r3, [pc, #20]	; (800aa44 <_V2_DisplayOff+0x24>)
 800aa30:	801a      	strh	r2, [r3, #0]
    i2c1_WriteRegBuffer(EXPANDER_I2C_ADDRESS, GPSR, (uint8_t*)&_V2PadVal, 2);
 800aa32:	2302      	movs	r3, #2
 800aa34:	4a03      	ldr	r2, [pc, #12]	; (800aa44 <_V2_DisplayOff+0x24>)
 800aa36:	2112      	movs	r1, #18
 800aa38:	2084      	movs	r0, #132	; 0x84
 800aa3a:	f7fb fa9b 	bl	8005f74 <i2c1_WriteRegBuffer>
}
 800aa3e:	bf00      	nop
 800aa40:	bd80      	pop	{r7, pc}
 800aa42:	bf00      	nop
 800aa44:	200006b8 	.word	0x200006b8

0800aa48 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800aa48:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800aa4a:	e003      	b.n	800aa54 <LoopCopyDataInit>

0800aa4c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 800aa4c:	4b0b      	ldr	r3, [pc, #44]	; (800aa7c <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800aa4e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 800aa50:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800aa52:	3104      	adds	r1, #4

0800aa54 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 800aa54:	480a      	ldr	r0, [pc, #40]	; (800aa80 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800aa56:	4b0b      	ldr	r3, [pc, #44]	; (800aa84 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 800aa58:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800aa5a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 800aa5c:	d3f6      	bcc.n	800aa4c <CopyDataInit>
  ldr r2, =_sbss
 800aa5e:	4a0a      	ldr	r2, [pc, #40]	; (800aa88 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 800aa60:	e002      	b.n	800aa68 <LoopFillZerobss>

0800aa62 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800aa62:	2300      	movs	r3, #0
  str r3, [r2], #4
 800aa64:	f842 3b04 	str.w	r3, [r2], #4

0800aa68 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 800aa68:	4b08      	ldr	r3, [pc, #32]	; (800aa8c <LoopFillZerobss+0x24>)
  cmp r2, r3
 800aa6a:	429a      	cmp	r2, r3
  bcc FillZerobss
 800aa6c:	d3f9      	bcc.n	800aa62 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800aa6e:	f7fc fec1 	bl	80077f4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800aa72:	f000 f815 	bl	800aaa0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800aa76:	f7fc f91b 	bl	8006cb0 <main>
  bx lr
 800aa7a:	4770      	bx	lr
  ldr r3, =_sidata
 800aa7c:	0800bfdc 	.word	0x0800bfdc
  ldr r0, =_sdata
 800aa80:	20000000 	.word	0x20000000
  ldr r3, =_edata
 800aa84:	2000017c 	.word	0x2000017c
  ldr r2, =_sbss
 800aa88:	2000017c 	.word	0x2000017c
  ldr r3, = _ebss
 800aa8c:	200006bc 	.word	0x200006bc

0800aa90 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800aa90:	e7fe      	b.n	800aa90 <ADC1_2_IRQHandler>
	...

0800aa94 <__errno>:
 800aa94:	4b01      	ldr	r3, [pc, #4]	; (800aa9c <__errno+0x8>)
 800aa96:	6818      	ldr	r0, [r3, #0]
 800aa98:	4770      	bx	lr
 800aa9a:	bf00      	nop
 800aa9c:	20000118 	.word	0x20000118

0800aaa0 <__libc_init_array>:
 800aaa0:	b570      	push	{r4, r5, r6, lr}
 800aaa2:	2600      	movs	r6, #0
 800aaa4:	4d0c      	ldr	r5, [pc, #48]	; (800aad8 <__libc_init_array+0x38>)
 800aaa6:	4c0d      	ldr	r4, [pc, #52]	; (800aadc <__libc_init_array+0x3c>)
 800aaa8:	1b64      	subs	r4, r4, r5
 800aaaa:	10a4      	asrs	r4, r4, #2
 800aaac:	42a6      	cmp	r6, r4
 800aaae:	d109      	bne.n	800aac4 <__libc_init_array+0x24>
 800aab0:	f000 fca6 	bl	800b400 <_init>
 800aab4:	2600      	movs	r6, #0
 800aab6:	4d0a      	ldr	r5, [pc, #40]	; (800aae0 <__libc_init_array+0x40>)
 800aab8:	4c0a      	ldr	r4, [pc, #40]	; (800aae4 <__libc_init_array+0x44>)
 800aaba:	1b64      	subs	r4, r4, r5
 800aabc:	10a4      	asrs	r4, r4, #2
 800aabe:	42a6      	cmp	r6, r4
 800aac0:	d105      	bne.n	800aace <__libc_init_array+0x2e>
 800aac2:	bd70      	pop	{r4, r5, r6, pc}
 800aac4:	f855 3b04 	ldr.w	r3, [r5], #4
 800aac8:	4798      	blx	r3
 800aaca:	3601      	adds	r6, #1
 800aacc:	e7ee      	b.n	800aaac <__libc_init_array+0xc>
 800aace:	f855 3b04 	ldr.w	r3, [r5], #4
 800aad2:	4798      	blx	r3
 800aad4:	3601      	adds	r6, #1
 800aad6:	e7f2      	b.n	800aabe <__libc_init_array+0x1e>
 800aad8:	0800bfd4 	.word	0x0800bfd4
 800aadc:	0800bfd4 	.word	0x0800bfd4
 800aae0:	0800bfd4 	.word	0x0800bfd4
 800aae4:	0800bfd8 	.word	0x0800bfd8

0800aae8 <memcpy>:
 800aae8:	440a      	add	r2, r1
 800aaea:	4291      	cmp	r1, r2
 800aaec:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800aaf0:	d100      	bne.n	800aaf4 <memcpy+0xc>
 800aaf2:	4770      	bx	lr
 800aaf4:	b510      	push	{r4, lr}
 800aaf6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800aafa:	4291      	cmp	r1, r2
 800aafc:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ab00:	d1f9      	bne.n	800aaf6 <memcpy+0xe>
 800ab02:	bd10      	pop	{r4, pc}

0800ab04 <siprintf>:
 800ab04:	b40e      	push	{r1, r2, r3}
 800ab06:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800ab0a:	b500      	push	{lr}
 800ab0c:	b09c      	sub	sp, #112	; 0x70
 800ab0e:	ab1d      	add	r3, sp, #116	; 0x74
 800ab10:	9002      	str	r0, [sp, #8]
 800ab12:	9006      	str	r0, [sp, #24]
 800ab14:	9107      	str	r1, [sp, #28]
 800ab16:	9104      	str	r1, [sp, #16]
 800ab18:	4808      	ldr	r0, [pc, #32]	; (800ab3c <siprintf+0x38>)
 800ab1a:	4909      	ldr	r1, [pc, #36]	; (800ab40 <siprintf+0x3c>)
 800ab1c:	f853 2b04 	ldr.w	r2, [r3], #4
 800ab20:	9105      	str	r1, [sp, #20]
 800ab22:	6800      	ldr	r0, [r0, #0]
 800ab24:	a902      	add	r1, sp, #8
 800ab26:	9301      	str	r3, [sp, #4]
 800ab28:	f000 f87a 	bl	800ac20 <_svfiprintf_r>
 800ab2c:	2200      	movs	r2, #0
 800ab2e:	9b02      	ldr	r3, [sp, #8]
 800ab30:	701a      	strb	r2, [r3, #0]
 800ab32:	b01c      	add	sp, #112	; 0x70
 800ab34:	f85d eb04 	ldr.w	lr, [sp], #4
 800ab38:	b003      	add	sp, #12
 800ab3a:	4770      	bx	lr
 800ab3c:	20000118 	.word	0x20000118
 800ab40:	ffff0208 	.word	0xffff0208

0800ab44 <strncpy>:
 800ab44:	4603      	mov	r3, r0
 800ab46:	b510      	push	{r4, lr}
 800ab48:	3901      	subs	r1, #1
 800ab4a:	b132      	cbz	r2, 800ab5a <strncpy+0x16>
 800ab4c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800ab50:	3a01      	subs	r2, #1
 800ab52:	f803 4b01 	strb.w	r4, [r3], #1
 800ab56:	2c00      	cmp	r4, #0
 800ab58:	d1f7      	bne.n	800ab4a <strncpy+0x6>
 800ab5a:	2100      	movs	r1, #0
 800ab5c:	441a      	add	r2, r3
 800ab5e:	4293      	cmp	r3, r2
 800ab60:	d100      	bne.n	800ab64 <strncpy+0x20>
 800ab62:	bd10      	pop	{r4, pc}
 800ab64:	f803 1b01 	strb.w	r1, [r3], #1
 800ab68:	e7f9      	b.n	800ab5e <strncpy+0x1a>

0800ab6a <__ssputs_r>:
 800ab6a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ab6e:	688e      	ldr	r6, [r1, #8]
 800ab70:	4682      	mov	sl, r0
 800ab72:	429e      	cmp	r6, r3
 800ab74:	460c      	mov	r4, r1
 800ab76:	4690      	mov	r8, r2
 800ab78:	461f      	mov	r7, r3
 800ab7a:	d838      	bhi.n	800abee <__ssputs_r+0x84>
 800ab7c:	898a      	ldrh	r2, [r1, #12]
 800ab7e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800ab82:	d032      	beq.n	800abea <__ssputs_r+0x80>
 800ab84:	6825      	ldr	r5, [r4, #0]
 800ab86:	6909      	ldr	r1, [r1, #16]
 800ab88:	3301      	adds	r3, #1
 800ab8a:	eba5 0901 	sub.w	r9, r5, r1
 800ab8e:	6965      	ldr	r5, [r4, #20]
 800ab90:	444b      	add	r3, r9
 800ab92:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ab96:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ab9a:	106d      	asrs	r5, r5, #1
 800ab9c:	429d      	cmp	r5, r3
 800ab9e:	bf38      	it	cc
 800aba0:	461d      	movcc	r5, r3
 800aba2:	0553      	lsls	r3, r2, #21
 800aba4:	d531      	bpl.n	800ac0a <__ssputs_r+0xa0>
 800aba6:	4629      	mov	r1, r5
 800aba8:	f000 fb60 	bl	800b26c <_malloc_r>
 800abac:	4606      	mov	r6, r0
 800abae:	b950      	cbnz	r0, 800abc6 <__ssputs_r+0x5c>
 800abb0:	230c      	movs	r3, #12
 800abb2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800abb6:	f8ca 3000 	str.w	r3, [sl]
 800abba:	89a3      	ldrh	r3, [r4, #12]
 800abbc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800abc0:	81a3      	strh	r3, [r4, #12]
 800abc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800abc6:	464a      	mov	r2, r9
 800abc8:	6921      	ldr	r1, [r4, #16]
 800abca:	f7ff ff8d 	bl	800aae8 <memcpy>
 800abce:	89a3      	ldrh	r3, [r4, #12]
 800abd0:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800abd4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800abd8:	81a3      	strh	r3, [r4, #12]
 800abda:	6126      	str	r6, [r4, #16]
 800abdc:	444e      	add	r6, r9
 800abde:	6026      	str	r6, [r4, #0]
 800abe0:	463e      	mov	r6, r7
 800abe2:	6165      	str	r5, [r4, #20]
 800abe4:	eba5 0509 	sub.w	r5, r5, r9
 800abe8:	60a5      	str	r5, [r4, #8]
 800abea:	42be      	cmp	r6, r7
 800abec:	d900      	bls.n	800abf0 <__ssputs_r+0x86>
 800abee:	463e      	mov	r6, r7
 800abf0:	4632      	mov	r2, r6
 800abf2:	4641      	mov	r1, r8
 800abf4:	6820      	ldr	r0, [r4, #0]
 800abf6:	f000 fab7 	bl	800b168 <memmove>
 800abfa:	68a3      	ldr	r3, [r4, #8]
 800abfc:	2000      	movs	r0, #0
 800abfe:	1b9b      	subs	r3, r3, r6
 800ac00:	60a3      	str	r3, [r4, #8]
 800ac02:	6823      	ldr	r3, [r4, #0]
 800ac04:	4433      	add	r3, r6
 800ac06:	6023      	str	r3, [r4, #0]
 800ac08:	e7db      	b.n	800abc2 <__ssputs_r+0x58>
 800ac0a:	462a      	mov	r2, r5
 800ac0c:	f000 fba2 	bl	800b354 <_realloc_r>
 800ac10:	4606      	mov	r6, r0
 800ac12:	2800      	cmp	r0, #0
 800ac14:	d1e1      	bne.n	800abda <__ssputs_r+0x70>
 800ac16:	4650      	mov	r0, sl
 800ac18:	6921      	ldr	r1, [r4, #16]
 800ac1a:	f000 fabf 	bl	800b19c <_free_r>
 800ac1e:	e7c7      	b.n	800abb0 <__ssputs_r+0x46>

0800ac20 <_svfiprintf_r>:
 800ac20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac24:	4698      	mov	r8, r3
 800ac26:	898b      	ldrh	r3, [r1, #12]
 800ac28:	4607      	mov	r7, r0
 800ac2a:	061b      	lsls	r3, r3, #24
 800ac2c:	460d      	mov	r5, r1
 800ac2e:	4614      	mov	r4, r2
 800ac30:	b09d      	sub	sp, #116	; 0x74
 800ac32:	d50e      	bpl.n	800ac52 <_svfiprintf_r+0x32>
 800ac34:	690b      	ldr	r3, [r1, #16]
 800ac36:	b963      	cbnz	r3, 800ac52 <_svfiprintf_r+0x32>
 800ac38:	2140      	movs	r1, #64	; 0x40
 800ac3a:	f000 fb17 	bl	800b26c <_malloc_r>
 800ac3e:	6028      	str	r0, [r5, #0]
 800ac40:	6128      	str	r0, [r5, #16]
 800ac42:	b920      	cbnz	r0, 800ac4e <_svfiprintf_r+0x2e>
 800ac44:	230c      	movs	r3, #12
 800ac46:	603b      	str	r3, [r7, #0]
 800ac48:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ac4c:	e0d1      	b.n	800adf2 <_svfiprintf_r+0x1d2>
 800ac4e:	2340      	movs	r3, #64	; 0x40
 800ac50:	616b      	str	r3, [r5, #20]
 800ac52:	2300      	movs	r3, #0
 800ac54:	9309      	str	r3, [sp, #36]	; 0x24
 800ac56:	2320      	movs	r3, #32
 800ac58:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ac5c:	2330      	movs	r3, #48	; 0x30
 800ac5e:	f04f 0901 	mov.w	r9, #1
 800ac62:	f8cd 800c 	str.w	r8, [sp, #12]
 800ac66:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800ae0c <_svfiprintf_r+0x1ec>
 800ac6a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ac6e:	4623      	mov	r3, r4
 800ac70:	469a      	mov	sl, r3
 800ac72:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ac76:	b10a      	cbz	r2, 800ac7c <_svfiprintf_r+0x5c>
 800ac78:	2a25      	cmp	r2, #37	; 0x25
 800ac7a:	d1f9      	bne.n	800ac70 <_svfiprintf_r+0x50>
 800ac7c:	ebba 0b04 	subs.w	fp, sl, r4
 800ac80:	d00b      	beq.n	800ac9a <_svfiprintf_r+0x7a>
 800ac82:	465b      	mov	r3, fp
 800ac84:	4622      	mov	r2, r4
 800ac86:	4629      	mov	r1, r5
 800ac88:	4638      	mov	r0, r7
 800ac8a:	f7ff ff6e 	bl	800ab6a <__ssputs_r>
 800ac8e:	3001      	adds	r0, #1
 800ac90:	f000 80aa 	beq.w	800ade8 <_svfiprintf_r+0x1c8>
 800ac94:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ac96:	445a      	add	r2, fp
 800ac98:	9209      	str	r2, [sp, #36]	; 0x24
 800ac9a:	f89a 3000 	ldrb.w	r3, [sl]
 800ac9e:	2b00      	cmp	r3, #0
 800aca0:	f000 80a2 	beq.w	800ade8 <_svfiprintf_r+0x1c8>
 800aca4:	2300      	movs	r3, #0
 800aca6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800acaa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800acae:	f10a 0a01 	add.w	sl, sl, #1
 800acb2:	9304      	str	r3, [sp, #16]
 800acb4:	9307      	str	r3, [sp, #28]
 800acb6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800acba:	931a      	str	r3, [sp, #104]	; 0x68
 800acbc:	4654      	mov	r4, sl
 800acbe:	2205      	movs	r2, #5
 800acc0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800acc4:	4851      	ldr	r0, [pc, #324]	; (800ae0c <_svfiprintf_r+0x1ec>)
 800acc6:	f000 fa41 	bl	800b14c <memchr>
 800acca:	9a04      	ldr	r2, [sp, #16]
 800accc:	b9d8      	cbnz	r0, 800ad06 <_svfiprintf_r+0xe6>
 800acce:	06d0      	lsls	r0, r2, #27
 800acd0:	bf44      	itt	mi
 800acd2:	2320      	movmi	r3, #32
 800acd4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800acd8:	0711      	lsls	r1, r2, #28
 800acda:	bf44      	itt	mi
 800acdc:	232b      	movmi	r3, #43	; 0x2b
 800acde:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ace2:	f89a 3000 	ldrb.w	r3, [sl]
 800ace6:	2b2a      	cmp	r3, #42	; 0x2a
 800ace8:	d015      	beq.n	800ad16 <_svfiprintf_r+0xf6>
 800acea:	4654      	mov	r4, sl
 800acec:	2000      	movs	r0, #0
 800acee:	f04f 0c0a 	mov.w	ip, #10
 800acf2:	9a07      	ldr	r2, [sp, #28]
 800acf4:	4621      	mov	r1, r4
 800acf6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800acfa:	3b30      	subs	r3, #48	; 0x30
 800acfc:	2b09      	cmp	r3, #9
 800acfe:	d94e      	bls.n	800ad9e <_svfiprintf_r+0x17e>
 800ad00:	b1b0      	cbz	r0, 800ad30 <_svfiprintf_r+0x110>
 800ad02:	9207      	str	r2, [sp, #28]
 800ad04:	e014      	b.n	800ad30 <_svfiprintf_r+0x110>
 800ad06:	eba0 0308 	sub.w	r3, r0, r8
 800ad0a:	fa09 f303 	lsl.w	r3, r9, r3
 800ad0e:	4313      	orrs	r3, r2
 800ad10:	46a2      	mov	sl, r4
 800ad12:	9304      	str	r3, [sp, #16]
 800ad14:	e7d2      	b.n	800acbc <_svfiprintf_r+0x9c>
 800ad16:	9b03      	ldr	r3, [sp, #12]
 800ad18:	1d19      	adds	r1, r3, #4
 800ad1a:	681b      	ldr	r3, [r3, #0]
 800ad1c:	9103      	str	r1, [sp, #12]
 800ad1e:	2b00      	cmp	r3, #0
 800ad20:	bfbb      	ittet	lt
 800ad22:	425b      	neglt	r3, r3
 800ad24:	f042 0202 	orrlt.w	r2, r2, #2
 800ad28:	9307      	strge	r3, [sp, #28]
 800ad2a:	9307      	strlt	r3, [sp, #28]
 800ad2c:	bfb8      	it	lt
 800ad2e:	9204      	strlt	r2, [sp, #16]
 800ad30:	7823      	ldrb	r3, [r4, #0]
 800ad32:	2b2e      	cmp	r3, #46	; 0x2e
 800ad34:	d10c      	bne.n	800ad50 <_svfiprintf_r+0x130>
 800ad36:	7863      	ldrb	r3, [r4, #1]
 800ad38:	2b2a      	cmp	r3, #42	; 0x2a
 800ad3a:	d135      	bne.n	800ada8 <_svfiprintf_r+0x188>
 800ad3c:	9b03      	ldr	r3, [sp, #12]
 800ad3e:	3402      	adds	r4, #2
 800ad40:	1d1a      	adds	r2, r3, #4
 800ad42:	681b      	ldr	r3, [r3, #0]
 800ad44:	9203      	str	r2, [sp, #12]
 800ad46:	2b00      	cmp	r3, #0
 800ad48:	bfb8      	it	lt
 800ad4a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800ad4e:	9305      	str	r3, [sp, #20]
 800ad50:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 800ae10 <_svfiprintf_r+0x1f0>
 800ad54:	2203      	movs	r2, #3
 800ad56:	4650      	mov	r0, sl
 800ad58:	7821      	ldrb	r1, [r4, #0]
 800ad5a:	f000 f9f7 	bl	800b14c <memchr>
 800ad5e:	b140      	cbz	r0, 800ad72 <_svfiprintf_r+0x152>
 800ad60:	2340      	movs	r3, #64	; 0x40
 800ad62:	eba0 000a 	sub.w	r0, r0, sl
 800ad66:	fa03 f000 	lsl.w	r0, r3, r0
 800ad6a:	9b04      	ldr	r3, [sp, #16]
 800ad6c:	3401      	adds	r4, #1
 800ad6e:	4303      	orrs	r3, r0
 800ad70:	9304      	str	r3, [sp, #16]
 800ad72:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ad76:	2206      	movs	r2, #6
 800ad78:	4826      	ldr	r0, [pc, #152]	; (800ae14 <_svfiprintf_r+0x1f4>)
 800ad7a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ad7e:	f000 f9e5 	bl	800b14c <memchr>
 800ad82:	2800      	cmp	r0, #0
 800ad84:	d038      	beq.n	800adf8 <_svfiprintf_r+0x1d8>
 800ad86:	4b24      	ldr	r3, [pc, #144]	; (800ae18 <_svfiprintf_r+0x1f8>)
 800ad88:	bb1b      	cbnz	r3, 800add2 <_svfiprintf_r+0x1b2>
 800ad8a:	9b03      	ldr	r3, [sp, #12]
 800ad8c:	3307      	adds	r3, #7
 800ad8e:	f023 0307 	bic.w	r3, r3, #7
 800ad92:	3308      	adds	r3, #8
 800ad94:	9303      	str	r3, [sp, #12]
 800ad96:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ad98:	4433      	add	r3, r6
 800ad9a:	9309      	str	r3, [sp, #36]	; 0x24
 800ad9c:	e767      	b.n	800ac6e <_svfiprintf_r+0x4e>
 800ad9e:	460c      	mov	r4, r1
 800ada0:	2001      	movs	r0, #1
 800ada2:	fb0c 3202 	mla	r2, ip, r2, r3
 800ada6:	e7a5      	b.n	800acf4 <_svfiprintf_r+0xd4>
 800ada8:	2300      	movs	r3, #0
 800adaa:	f04f 0c0a 	mov.w	ip, #10
 800adae:	4619      	mov	r1, r3
 800adb0:	3401      	adds	r4, #1
 800adb2:	9305      	str	r3, [sp, #20]
 800adb4:	4620      	mov	r0, r4
 800adb6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800adba:	3a30      	subs	r2, #48	; 0x30
 800adbc:	2a09      	cmp	r2, #9
 800adbe:	d903      	bls.n	800adc8 <_svfiprintf_r+0x1a8>
 800adc0:	2b00      	cmp	r3, #0
 800adc2:	d0c5      	beq.n	800ad50 <_svfiprintf_r+0x130>
 800adc4:	9105      	str	r1, [sp, #20]
 800adc6:	e7c3      	b.n	800ad50 <_svfiprintf_r+0x130>
 800adc8:	4604      	mov	r4, r0
 800adca:	2301      	movs	r3, #1
 800adcc:	fb0c 2101 	mla	r1, ip, r1, r2
 800add0:	e7f0      	b.n	800adb4 <_svfiprintf_r+0x194>
 800add2:	ab03      	add	r3, sp, #12
 800add4:	9300      	str	r3, [sp, #0]
 800add6:	462a      	mov	r2, r5
 800add8:	4638      	mov	r0, r7
 800adda:	4b10      	ldr	r3, [pc, #64]	; (800ae1c <_svfiprintf_r+0x1fc>)
 800addc:	a904      	add	r1, sp, #16
 800adde:	f3af 8000 	nop.w
 800ade2:	1c42      	adds	r2, r0, #1
 800ade4:	4606      	mov	r6, r0
 800ade6:	d1d6      	bne.n	800ad96 <_svfiprintf_r+0x176>
 800ade8:	89ab      	ldrh	r3, [r5, #12]
 800adea:	065b      	lsls	r3, r3, #25
 800adec:	f53f af2c 	bmi.w	800ac48 <_svfiprintf_r+0x28>
 800adf0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800adf2:	b01d      	add	sp, #116	; 0x74
 800adf4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800adf8:	ab03      	add	r3, sp, #12
 800adfa:	9300      	str	r3, [sp, #0]
 800adfc:	462a      	mov	r2, r5
 800adfe:	4638      	mov	r0, r7
 800ae00:	4b06      	ldr	r3, [pc, #24]	; (800ae1c <_svfiprintf_r+0x1fc>)
 800ae02:	a904      	add	r1, sp, #16
 800ae04:	f000 f87c 	bl	800af00 <_printf_i>
 800ae08:	e7eb      	b.n	800ade2 <_svfiprintf_r+0x1c2>
 800ae0a:	bf00      	nop
 800ae0c:	0800bfa0 	.word	0x0800bfa0
 800ae10:	0800bfa6 	.word	0x0800bfa6
 800ae14:	0800bfaa 	.word	0x0800bfaa
 800ae18:	00000000 	.word	0x00000000
 800ae1c:	0800ab6b 	.word	0x0800ab6b

0800ae20 <_printf_common>:
 800ae20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ae24:	4616      	mov	r6, r2
 800ae26:	4699      	mov	r9, r3
 800ae28:	688a      	ldr	r2, [r1, #8]
 800ae2a:	690b      	ldr	r3, [r1, #16]
 800ae2c:	4607      	mov	r7, r0
 800ae2e:	4293      	cmp	r3, r2
 800ae30:	bfb8      	it	lt
 800ae32:	4613      	movlt	r3, r2
 800ae34:	6033      	str	r3, [r6, #0]
 800ae36:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ae3a:	460c      	mov	r4, r1
 800ae3c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ae40:	b10a      	cbz	r2, 800ae46 <_printf_common+0x26>
 800ae42:	3301      	adds	r3, #1
 800ae44:	6033      	str	r3, [r6, #0]
 800ae46:	6823      	ldr	r3, [r4, #0]
 800ae48:	0699      	lsls	r1, r3, #26
 800ae4a:	bf42      	ittt	mi
 800ae4c:	6833      	ldrmi	r3, [r6, #0]
 800ae4e:	3302      	addmi	r3, #2
 800ae50:	6033      	strmi	r3, [r6, #0]
 800ae52:	6825      	ldr	r5, [r4, #0]
 800ae54:	f015 0506 	ands.w	r5, r5, #6
 800ae58:	d106      	bne.n	800ae68 <_printf_common+0x48>
 800ae5a:	f104 0a19 	add.w	sl, r4, #25
 800ae5e:	68e3      	ldr	r3, [r4, #12]
 800ae60:	6832      	ldr	r2, [r6, #0]
 800ae62:	1a9b      	subs	r3, r3, r2
 800ae64:	42ab      	cmp	r3, r5
 800ae66:	dc28      	bgt.n	800aeba <_printf_common+0x9a>
 800ae68:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800ae6c:	1e13      	subs	r3, r2, #0
 800ae6e:	6822      	ldr	r2, [r4, #0]
 800ae70:	bf18      	it	ne
 800ae72:	2301      	movne	r3, #1
 800ae74:	0692      	lsls	r2, r2, #26
 800ae76:	d42d      	bmi.n	800aed4 <_printf_common+0xb4>
 800ae78:	4649      	mov	r1, r9
 800ae7a:	4638      	mov	r0, r7
 800ae7c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ae80:	47c0      	blx	r8
 800ae82:	3001      	adds	r0, #1
 800ae84:	d020      	beq.n	800aec8 <_printf_common+0xa8>
 800ae86:	6823      	ldr	r3, [r4, #0]
 800ae88:	68e5      	ldr	r5, [r4, #12]
 800ae8a:	f003 0306 	and.w	r3, r3, #6
 800ae8e:	2b04      	cmp	r3, #4
 800ae90:	bf18      	it	ne
 800ae92:	2500      	movne	r5, #0
 800ae94:	6832      	ldr	r2, [r6, #0]
 800ae96:	f04f 0600 	mov.w	r6, #0
 800ae9a:	68a3      	ldr	r3, [r4, #8]
 800ae9c:	bf08      	it	eq
 800ae9e:	1aad      	subeq	r5, r5, r2
 800aea0:	6922      	ldr	r2, [r4, #16]
 800aea2:	bf08      	it	eq
 800aea4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800aea8:	4293      	cmp	r3, r2
 800aeaa:	bfc4      	itt	gt
 800aeac:	1a9b      	subgt	r3, r3, r2
 800aeae:	18ed      	addgt	r5, r5, r3
 800aeb0:	341a      	adds	r4, #26
 800aeb2:	42b5      	cmp	r5, r6
 800aeb4:	d11a      	bne.n	800aeec <_printf_common+0xcc>
 800aeb6:	2000      	movs	r0, #0
 800aeb8:	e008      	b.n	800aecc <_printf_common+0xac>
 800aeba:	2301      	movs	r3, #1
 800aebc:	4652      	mov	r2, sl
 800aebe:	4649      	mov	r1, r9
 800aec0:	4638      	mov	r0, r7
 800aec2:	47c0      	blx	r8
 800aec4:	3001      	adds	r0, #1
 800aec6:	d103      	bne.n	800aed0 <_printf_common+0xb0>
 800aec8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800aecc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aed0:	3501      	adds	r5, #1
 800aed2:	e7c4      	b.n	800ae5e <_printf_common+0x3e>
 800aed4:	2030      	movs	r0, #48	; 0x30
 800aed6:	18e1      	adds	r1, r4, r3
 800aed8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800aedc:	1c5a      	adds	r2, r3, #1
 800aede:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800aee2:	4422      	add	r2, r4
 800aee4:	3302      	adds	r3, #2
 800aee6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800aeea:	e7c5      	b.n	800ae78 <_printf_common+0x58>
 800aeec:	2301      	movs	r3, #1
 800aeee:	4622      	mov	r2, r4
 800aef0:	4649      	mov	r1, r9
 800aef2:	4638      	mov	r0, r7
 800aef4:	47c0      	blx	r8
 800aef6:	3001      	adds	r0, #1
 800aef8:	d0e6      	beq.n	800aec8 <_printf_common+0xa8>
 800aefa:	3601      	adds	r6, #1
 800aefc:	e7d9      	b.n	800aeb2 <_printf_common+0x92>
	...

0800af00 <_printf_i>:
 800af00:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800af04:	7e0f      	ldrb	r7, [r1, #24]
 800af06:	4691      	mov	r9, r2
 800af08:	2f78      	cmp	r7, #120	; 0x78
 800af0a:	4680      	mov	r8, r0
 800af0c:	460c      	mov	r4, r1
 800af0e:	469a      	mov	sl, r3
 800af10:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800af12:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800af16:	d807      	bhi.n	800af28 <_printf_i+0x28>
 800af18:	2f62      	cmp	r7, #98	; 0x62
 800af1a:	d80a      	bhi.n	800af32 <_printf_i+0x32>
 800af1c:	2f00      	cmp	r7, #0
 800af1e:	f000 80d9 	beq.w	800b0d4 <_printf_i+0x1d4>
 800af22:	2f58      	cmp	r7, #88	; 0x58
 800af24:	f000 80a4 	beq.w	800b070 <_printf_i+0x170>
 800af28:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800af2c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800af30:	e03a      	b.n	800afa8 <_printf_i+0xa8>
 800af32:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800af36:	2b15      	cmp	r3, #21
 800af38:	d8f6      	bhi.n	800af28 <_printf_i+0x28>
 800af3a:	a101      	add	r1, pc, #4	; (adr r1, 800af40 <_printf_i+0x40>)
 800af3c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800af40:	0800af99 	.word	0x0800af99
 800af44:	0800afad 	.word	0x0800afad
 800af48:	0800af29 	.word	0x0800af29
 800af4c:	0800af29 	.word	0x0800af29
 800af50:	0800af29 	.word	0x0800af29
 800af54:	0800af29 	.word	0x0800af29
 800af58:	0800afad 	.word	0x0800afad
 800af5c:	0800af29 	.word	0x0800af29
 800af60:	0800af29 	.word	0x0800af29
 800af64:	0800af29 	.word	0x0800af29
 800af68:	0800af29 	.word	0x0800af29
 800af6c:	0800b0bb 	.word	0x0800b0bb
 800af70:	0800afdd 	.word	0x0800afdd
 800af74:	0800b09d 	.word	0x0800b09d
 800af78:	0800af29 	.word	0x0800af29
 800af7c:	0800af29 	.word	0x0800af29
 800af80:	0800b0dd 	.word	0x0800b0dd
 800af84:	0800af29 	.word	0x0800af29
 800af88:	0800afdd 	.word	0x0800afdd
 800af8c:	0800af29 	.word	0x0800af29
 800af90:	0800af29 	.word	0x0800af29
 800af94:	0800b0a5 	.word	0x0800b0a5
 800af98:	682b      	ldr	r3, [r5, #0]
 800af9a:	1d1a      	adds	r2, r3, #4
 800af9c:	681b      	ldr	r3, [r3, #0]
 800af9e:	602a      	str	r2, [r5, #0]
 800afa0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800afa4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800afa8:	2301      	movs	r3, #1
 800afaa:	e0a4      	b.n	800b0f6 <_printf_i+0x1f6>
 800afac:	6820      	ldr	r0, [r4, #0]
 800afae:	6829      	ldr	r1, [r5, #0]
 800afb0:	0606      	lsls	r6, r0, #24
 800afb2:	f101 0304 	add.w	r3, r1, #4
 800afb6:	d50a      	bpl.n	800afce <_printf_i+0xce>
 800afb8:	680e      	ldr	r6, [r1, #0]
 800afba:	602b      	str	r3, [r5, #0]
 800afbc:	2e00      	cmp	r6, #0
 800afbe:	da03      	bge.n	800afc8 <_printf_i+0xc8>
 800afc0:	232d      	movs	r3, #45	; 0x2d
 800afc2:	4276      	negs	r6, r6
 800afc4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800afc8:	230a      	movs	r3, #10
 800afca:	485e      	ldr	r0, [pc, #376]	; (800b144 <_printf_i+0x244>)
 800afcc:	e019      	b.n	800b002 <_printf_i+0x102>
 800afce:	680e      	ldr	r6, [r1, #0]
 800afd0:	f010 0f40 	tst.w	r0, #64	; 0x40
 800afd4:	602b      	str	r3, [r5, #0]
 800afd6:	bf18      	it	ne
 800afd8:	b236      	sxthne	r6, r6
 800afda:	e7ef      	b.n	800afbc <_printf_i+0xbc>
 800afdc:	682b      	ldr	r3, [r5, #0]
 800afde:	6820      	ldr	r0, [r4, #0]
 800afe0:	1d19      	adds	r1, r3, #4
 800afe2:	6029      	str	r1, [r5, #0]
 800afe4:	0601      	lsls	r1, r0, #24
 800afe6:	d501      	bpl.n	800afec <_printf_i+0xec>
 800afe8:	681e      	ldr	r6, [r3, #0]
 800afea:	e002      	b.n	800aff2 <_printf_i+0xf2>
 800afec:	0646      	lsls	r6, r0, #25
 800afee:	d5fb      	bpl.n	800afe8 <_printf_i+0xe8>
 800aff0:	881e      	ldrh	r6, [r3, #0]
 800aff2:	2f6f      	cmp	r7, #111	; 0x6f
 800aff4:	bf0c      	ite	eq
 800aff6:	2308      	moveq	r3, #8
 800aff8:	230a      	movne	r3, #10
 800affa:	4852      	ldr	r0, [pc, #328]	; (800b144 <_printf_i+0x244>)
 800affc:	2100      	movs	r1, #0
 800affe:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b002:	6865      	ldr	r5, [r4, #4]
 800b004:	2d00      	cmp	r5, #0
 800b006:	bfa8      	it	ge
 800b008:	6821      	ldrge	r1, [r4, #0]
 800b00a:	60a5      	str	r5, [r4, #8]
 800b00c:	bfa4      	itt	ge
 800b00e:	f021 0104 	bicge.w	r1, r1, #4
 800b012:	6021      	strge	r1, [r4, #0]
 800b014:	b90e      	cbnz	r6, 800b01a <_printf_i+0x11a>
 800b016:	2d00      	cmp	r5, #0
 800b018:	d04d      	beq.n	800b0b6 <_printf_i+0x1b6>
 800b01a:	4615      	mov	r5, r2
 800b01c:	fbb6 f1f3 	udiv	r1, r6, r3
 800b020:	fb03 6711 	mls	r7, r3, r1, r6
 800b024:	5dc7      	ldrb	r7, [r0, r7]
 800b026:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800b02a:	4637      	mov	r7, r6
 800b02c:	42bb      	cmp	r3, r7
 800b02e:	460e      	mov	r6, r1
 800b030:	d9f4      	bls.n	800b01c <_printf_i+0x11c>
 800b032:	2b08      	cmp	r3, #8
 800b034:	d10b      	bne.n	800b04e <_printf_i+0x14e>
 800b036:	6823      	ldr	r3, [r4, #0]
 800b038:	07de      	lsls	r6, r3, #31
 800b03a:	d508      	bpl.n	800b04e <_printf_i+0x14e>
 800b03c:	6923      	ldr	r3, [r4, #16]
 800b03e:	6861      	ldr	r1, [r4, #4]
 800b040:	4299      	cmp	r1, r3
 800b042:	bfde      	ittt	le
 800b044:	2330      	movle	r3, #48	; 0x30
 800b046:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b04a:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800b04e:	1b52      	subs	r2, r2, r5
 800b050:	6122      	str	r2, [r4, #16]
 800b052:	464b      	mov	r3, r9
 800b054:	4621      	mov	r1, r4
 800b056:	4640      	mov	r0, r8
 800b058:	f8cd a000 	str.w	sl, [sp]
 800b05c:	aa03      	add	r2, sp, #12
 800b05e:	f7ff fedf 	bl	800ae20 <_printf_common>
 800b062:	3001      	adds	r0, #1
 800b064:	d14c      	bne.n	800b100 <_printf_i+0x200>
 800b066:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b06a:	b004      	add	sp, #16
 800b06c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b070:	4834      	ldr	r0, [pc, #208]	; (800b144 <_printf_i+0x244>)
 800b072:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800b076:	6829      	ldr	r1, [r5, #0]
 800b078:	6823      	ldr	r3, [r4, #0]
 800b07a:	f851 6b04 	ldr.w	r6, [r1], #4
 800b07e:	6029      	str	r1, [r5, #0]
 800b080:	061d      	lsls	r5, r3, #24
 800b082:	d514      	bpl.n	800b0ae <_printf_i+0x1ae>
 800b084:	07df      	lsls	r7, r3, #31
 800b086:	bf44      	itt	mi
 800b088:	f043 0320 	orrmi.w	r3, r3, #32
 800b08c:	6023      	strmi	r3, [r4, #0]
 800b08e:	b91e      	cbnz	r6, 800b098 <_printf_i+0x198>
 800b090:	6823      	ldr	r3, [r4, #0]
 800b092:	f023 0320 	bic.w	r3, r3, #32
 800b096:	6023      	str	r3, [r4, #0]
 800b098:	2310      	movs	r3, #16
 800b09a:	e7af      	b.n	800affc <_printf_i+0xfc>
 800b09c:	6823      	ldr	r3, [r4, #0]
 800b09e:	f043 0320 	orr.w	r3, r3, #32
 800b0a2:	6023      	str	r3, [r4, #0]
 800b0a4:	2378      	movs	r3, #120	; 0x78
 800b0a6:	4828      	ldr	r0, [pc, #160]	; (800b148 <_printf_i+0x248>)
 800b0a8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b0ac:	e7e3      	b.n	800b076 <_printf_i+0x176>
 800b0ae:	0659      	lsls	r1, r3, #25
 800b0b0:	bf48      	it	mi
 800b0b2:	b2b6      	uxthmi	r6, r6
 800b0b4:	e7e6      	b.n	800b084 <_printf_i+0x184>
 800b0b6:	4615      	mov	r5, r2
 800b0b8:	e7bb      	b.n	800b032 <_printf_i+0x132>
 800b0ba:	682b      	ldr	r3, [r5, #0]
 800b0bc:	6826      	ldr	r6, [r4, #0]
 800b0be:	1d18      	adds	r0, r3, #4
 800b0c0:	6961      	ldr	r1, [r4, #20]
 800b0c2:	6028      	str	r0, [r5, #0]
 800b0c4:	0635      	lsls	r5, r6, #24
 800b0c6:	681b      	ldr	r3, [r3, #0]
 800b0c8:	d501      	bpl.n	800b0ce <_printf_i+0x1ce>
 800b0ca:	6019      	str	r1, [r3, #0]
 800b0cc:	e002      	b.n	800b0d4 <_printf_i+0x1d4>
 800b0ce:	0670      	lsls	r0, r6, #25
 800b0d0:	d5fb      	bpl.n	800b0ca <_printf_i+0x1ca>
 800b0d2:	8019      	strh	r1, [r3, #0]
 800b0d4:	2300      	movs	r3, #0
 800b0d6:	4615      	mov	r5, r2
 800b0d8:	6123      	str	r3, [r4, #16]
 800b0da:	e7ba      	b.n	800b052 <_printf_i+0x152>
 800b0dc:	682b      	ldr	r3, [r5, #0]
 800b0de:	2100      	movs	r1, #0
 800b0e0:	1d1a      	adds	r2, r3, #4
 800b0e2:	602a      	str	r2, [r5, #0]
 800b0e4:	681d      	ldr	r5, [r3, #0]
 800b0e6:	6862      	ldr	r2, [r4, #4]
 800b0e8:	4628      	mov	r0, r5
 800b0ea:	f000 f82f 	bl	800b14c <memchr>
 800b0ee:	b108      	cbz	r0, 800b0f4 <_printf_i+0x1f4>
 800b0f0:	1b40      	subs	r0, r0, r5
 800b0f2:	6060      	str	r0, [r4, #4]
 800b0f4:	6863      	ldr	r3, [r4, #4]
 800b0f6:	6123      	str	r3, [r4, #16]
 800b0f8:	2300      	movs	r3, #0
 800b0fa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b0fe:	e7a8      	b.n	800b052 <_printf_i+0x152>
 800b100:	462a      	mov	r2, r5
 800b102:	4649      	mov	r1, r9
 800b104:	4640      	mov	r0, r8
 800b106:	6923      	ldr	r3, [r4, #16]
 800b108:	47d0      	blx	sl
 800b10a:	3001      	adds	r0, #1
 800b10c:	d0ab      	beq.n	800b066 <_printf_i+0x166>
 800b10e:	6823      	ldr	r3, [r4, #0]
 800b110:	079b      	lsls	r3, r3, #30
 800b112:	d413      	bmi.n	800b13c <_printf_i+0x23c>
 800b114:	68e0      	ldr	r0, [r4, #12]
 800b116:	9b03      	ldr	r3, [sp, #12]
 800b118:	4298      	cmp	r0, r3
 800b11a:	bfb8      	it	lt
 800b11c:	4618      	movlt	r0, r3
 800b11e:	e7a4      	b.n	800b06a <_printf_i+0x16a>
 800b120:	2301      	movs	r3, #1
 800b122:	4632      	mov	r2, r6
 800b124:	4649      	mov	r1, r9
 800b126:	4640      	mov	r0, r8
 800b128:	47d0      	blx	sl
 800b12a:	3001      	adds	r0, #1
 800b12c:	d09b      	beq.n	800b066 <_printf_i+0x166>
 800b12e:	3501      	adds	r5, #1
 800b130:	68e3      	ldr	r3, [r4, #12]
 800b132:	9903      	ldr	r1, [sp, #12]
 800b134:	1a5b      	subs	r3, r3, r1
 800b136:	42ab      	cmp	r3, r5
 800b138:	dcf2      	bgt.n	800b120 <_printf_i+0x220>
 800b13a:	e7eb      	b.n	800b114 <_printf_i+0x214>
 800b13c:	2500      	movs	r5, #0
 800b13e:	f104 0619 	add.w	r6, r4, #25
 800b142:	e7f5      	b.n	800b130 <_printf_i+0x230>
 800b144:	0800bfb1 	.word	0x0800bfb1
 800b148:	0800bfc2 	.word	0x0800bfc2

0800b14c <memchr>:
 800b14c:	4603      	mov	r3, r0
 800b14e:	b510      	push	{r4, lr}
 800b150:	b2c9      	uxtb	r1, r1
 800b152:	4402      	add	r2, r0
 800b154:	4293      	cmp	r3, r2
 800b156:	4618      	mov	r0, r3
 800b158:	d101      	bne.n	800b15e <memchr+0x12>
 800b15a:	2000      	movs	r0, #0
 800b15c:	e003      	b.n	800b166 <memchr+0x1a>
 800b15e:	7804      	ldrb	r4, [r0, #0]
 800b160:	3301      	adds	r3, #1
 800b162:	428c      	cmp	r4, r1
 800b164:	d1f6      	bne.n	800b154 <memchr+0x8>
 800b166:	bd10      	pop	{r4, pc}

0800b168 <memmove>:
 800b168:	4288      	cmp	r0, r1
 800b16a:	b510      	push	{r4, lr}
 800b16c:	eb01 0402 	add.w	r4, r1, r2
 800b170:	d902      	bls.n	800b178 <memmove+0x10>
 800b172:	4284      	cmp	r4, r0
 800b174:	4623      	mov	r3, r4
 800b176:	d807      	bhi.n	800b188 <memmove+0x20>
 800b178:	1e43      	subs	r3, r0, #1
 800b17a:	42a1      	cmp	r1, r4
 800b17c:	d008      	beq.n	800b190 <memmove+0x28>
 800b17e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b182:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b186:	e7f8      	b.n	800b17a <memmove+0x12>
 800b188:	4601      	mov	r1, r0
 800b18a:	4402      	add	r2, r0
 800b18c:	428a      	cmp	r2, r1
 800b18e:	d100      	bne.n	800b192 <memmove+0x2a>
 800b190:	bd10      	pop	{r4, pc}
 800b192:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b196:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b19a:	e7f7      	b.n	800b18c <memmove+0x24>

0800b19c <_free_r>:
 800b19c:	b538      	push	{r3, r4, r5, lr}
 800b19e:	4605      	mov	r5, r0
 800b1a0:	2900      	cmp	r1, #0
 800b1a2:	d040      	beq.n	800b226 <_free_r+0x8a>
 800b1a4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b1a8:	1f0c      	subs	r4, r1, #4
 800b1aa:	2b00      	cmp	r3, #0
 800b1ac:	bfb8      	it	lt
 800b1ae:	18e4      	addlt	r4, r4, r3
 800b1b0:	f000 f910 	bl	800b3d4 <__malloc_lock>
 800b1b4:	4a1c      	ldr	r2, [pc, #112]	; (800b228 <_free_r+0x8c>)
 800b1b6:	6813      	ldr	r3, [r2, #0]
 800b1b8:	b933      	cbnz	r3, 800b1c8 <_free_r+0x2c>
 800b1ba:	6063      	str	r3, [r4, #4]
 800b1bc:	6014      	str	r4, [r2, #0]
 800b1be:	4628      	mov	r0, r5
 800b1c0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b1c4:	f000 b90c 	b.w	800b3e0 <__malloc_unlock>
 800b1c8:	42a3      	cmp	r3, r4
 800b1ca:	d908      	bls.n	800b1de <_free_r+0x42>
 800b1cc:	6820      	ldr	r0, [r4, #0]
 800b1ce:	1821      	adds	r1, r4, r0
 800b1d0:	428b      	cmp	r3, r1
 800b1d2:	bf01      	itttt	eq
 800b1d4:	6819      	ldreq	r1, [r3, #0]
 800b1d6:	685b      	ldreq	r3, [r3, #4]
 800b1d8:	1809      	addeq	r1, r1, r0
 800b1da:	6021      	streq	r1, [r4, #0]
 800b1dc:	e7ed      	b.n	800b1ba <_free_r+0x1e>
 800b1de:	461a      	mov	r2, r3
 800b1e0:	685b      	ldr	r3, [r3, #4]
 800b1e2:	b10b      	cbz	r3, 800b1e8 <_free_r+0x4c>
 800b1e4:	42a3      	cmp	r3, r4
 800b1e6:	d9fa      	bls.n	800b1de <_free_r+0x42>
 800b1e8:	6811      	ldr	r1, [r2, #0]
 800b1ea:	1850      	adds	r0, r2, r1
 800b1ec:	42a0      	cmp	r0, r4
 800b1ee:	d10b      	bne.n	800b208 <_free_r+0x6c>
 800b1f0:	6820      	ldr	r0, [r4, #0]
 800b1f2:	4401      	add	r1, r0
 800b1f4:	1850      	adds	r0, r2, r1
 800b1f6:	4283      	cmp	r3, r0
 800b1f8:	6011      	str	r1, [r2, #0]
 800b1fa:	d1e0      	bne.n	800b1be <_free_r+0x22>
 800b1fc:	6818      	ldr	r0, [r3, #0]
 800b1fe:	685b      	ldr	r3, [r3, #4]
 800b200:	4401      	add	r1, r0
 800b202:	6011      	str	r1, [r2, #0]
 800b204:	6053      	str	r3, [r2, #4]
 800b206:	e7da      	b.n	800b1be <_free_r+0x22>
 800b208:	d902      	bls.n	800b210 <_free_r+0x74>
 800b20a:	230c      	movs	r3, #12
 800b20c:	602b      	str	r3, [r5, #0]
 800b20e:	e7d6      	b.n	800b1be <_free_r+0x22>
 800b210:	6820      	ldr	r0, [r4, #0]
 800b212:	1821      	adds	r1, r4, r0
 800b214:	428b      	cmp	r3, r1
 800b216:	bf01      	itttt	eq
 800b218:	6819      	ldreq	r1, [r3, #0]
 800b21a:	685b      	ldreq	r3, [r3, #4]
 800b21c:	1809      	addeq	r1, r1, r0
 800b21e:	6021      	streq	r1, [r4, #0]
 800b220:	6063      	str	r3, [r4, #4]
 800b222:	6054      	str	r4, [r2, #4]
 800b224:	e7cb      	b.n	800b1be <_free_r+0x22>
 800b226:	bd38      	pop	{r3, r4, r5, pc}
 800b228:	200001f0 	.word	0x200001f0

0800b22c <sbrk_aligned>:
 800b22c:	b570      	push	{r4, r5, r6, lr}
 800b22e:	4e0e      	ldr	r6, [pc, #56]	; (800b268 <sbrk_aligned+0x3c>)
 800b230:	460c      	mov	r4, r1
 800b232:	6831      	ldr	r1, [r6, #0]
 800b234:	4605      	mov	r5, r0
 800b236:	b911      	cbnz	r1, 800b23e <sbrk_aligned+0x12>
 800b238:	f000 f8bc 	bl	800b3b4 <_sbrk_r>
 800b23c:	6030      	str	r0, [r6, #0]
 800b23e:	4621      	mov	r1, r4
 800b240:	4628      	mov	r0, r5
 800b242:	f000 f8b7 	bl	800b3b4 <_sbrk_r>
 800b246:	1c43      	adds	r3, r0, #1
 800b248:	d00a      	beq.n	800b260 <sbrk_aligned+0x34>
 800b24a:	1cc4      	adds	r4, r0, #3
 800b24c:	f024 0403 	bic.w	r4, r4, #3
 800b250:	42a0      	cmp	r0, r4
 800b252:	d007      	beq.n	800b264 <sbrk_aligned+0x38>
 800b254:	1a21      	subs	r1, r4, r0
 800b256:	4628      	mov	r0, r5
 800b258:	f000 f8ac 	bl	800b3b4 <_sbrk_r>
 800b25c:	3001      	adds	r0, #1
 800b25e:	d101      	bne.n	800b264 <sbrk_aligned+0x38>
 800b260:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800b264:	4620      	mov	r0, r4
 800b266:	bd70      	pop	{r4, r5, r6, pc}
 800b268:	200001f4 	.word	0x200001f4

0800b26c <_malloc_r>:
 800b26c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b270:	1ccd      	adds	r5, r1, #3
 800b272:	f025 0503 	bic.w	r5, r5, #3
 800b276:	3508      	adds	r5, #8
 800b278:	2d0c      	cmp	r5, #12
 800b27a:	bf38      	it	cc
 800b27c:	250c      	movcc	r5, #12
 800b27e:	2d00      	cmp	r5, #0
 800b280:	4607      	mov	r7, r0
 800b282:	db01      	blt.n	800b288 <_malloc_r+0x1c>
 800b284:	42a9      	cmp	r1, r5
 800b286:	d905      	bls.n	800b294 <_malloc_r+0x28>
 800b288:	230c      	movs	r3, #12
 800b28a:	2600      	movs	r6, #0
 800b28c:	603b      	str	r3, [r7, #0]
 800b28e:	4630      	mov	r0, r6
 800b290:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b294:	4e2e      	ldr	r6, [pc, #184]	; (800b350 <_malloc_r+0xe4>)
 800b296:	f000 f89d 	bl	800b3d4 <__malloc_lock>
 800b29a:	6833      	ldr	r3, [r6, #0]
 800b29c:	461c      	mov	r4, r3
 800b29e:	bb34      	cbnz	r4, 800b2ee <_malloc_r+0x82>
 800b2a0:	4629      	mov	r1, r5
 800b2a2:	4638      	mov	r0, r7
 800b2a4:	f7ff ffc2 	bl	800b22c <sbrk_aligned>
 800b2a8:	1c43      	adds	r3, r0, #1
 800b2aa:	4604      	mov	r4, r0
 800b2ac:	d14d      	bne.n	800b34a <_malloc_r+0xde>
 800b2ae:	6834      	ldr	r4, [r6, #0]
 800b2b0:	4626      	mov	r6, r4
 800b2b2:	2e00      	cmp	r6, #0
 800b2b4:	d140      	bne.n	800b338 <_malloc_r+0xcc>
 800b2b6:	6823      	ldr	r3, [r4, #0]
 800b2b8:	4631      	mov	r1, r6
 800b2ba:	4638      	mov	r0, r7
 800b2bc:	eb04 0803 	add.w	r8, r4, r3
 800b2c0:	f000 f878 	bl	800b3b4 <_sbrk_r>
 800b2c4:	4580      	cmp	r8, r0
 800b2c6:	d13a      	bne.n	800b33e <_malloc_r+0xd2>
 800b2c8:	6821      	ldr	r1, [r4, #0]
 800b2ca:	3503      	adds	r5, #3
 800b2cc:	1a6d      	subs	r5, r5, r1
 800b2ce:	f025 0503 	bic.w	r5, r5, #3
 800b2d2:	3508      	adds	r5, #8
 800b2d4:	2d0c      	cmp	r5, #12
 800b2d6:	bf38      	it	cc
 800b2d8:	250c      	movcc	r5, #12
 800b2da:	4638      	mov	r0, r7
 800b2dc:	4629      	mov	r1, r5
 800b2de:	f7ff ffa5 	bl	800b22c <sbrk_aligned>
 800b2e2:	3001      	adds	r0, #1
 800b2e4:	d02b      	beq.n	800b33e <_malloc_r+0xd2>
 800b2e6:	6823      	ldr	r3, [r4, #0]
 800b2e8:	442b      	add	r3, r5
 800b2ea:	6023      	str	r3, [r4, #0]
 800b2ec:	e00e      	b.n	800b30c <_malloc_r+0xa0>
 800b2ee:	6822      	ldr	r2, [r4, #0]
 800b2f0:	1b52      	subs	r2, r2, r5
 800b2f2:	d41e      	bmi.n	800b332 <_malloc_r+0xc6>
 800b2f4:	2a0b      	cmp	r2, #11
 800b2f6:	d916      	bls.n	800b326 <_malloc_r+0xba>
 800b2f8:	1961      	adds	r1, r4, r5
 800b2fa:	42a3      	cmp	r3, r4
 800b2fc:	6025      	str	r5, [r4, #0]
 800b2fe:	bf18      	it	ne
 800b300:	6059      	strne	r1, [r3, #4]
 800b302:	6863      	ldr	r3, [r4, #4]
 800b304:	bf08      	it	eq
 800b306:	6031      	streq	r1, [r6, #0]
 800b308:	5162      	str	r2, [r4, r5]
 800b30a:	604b      	str	r3, [r1, #4]
 800b30c:	4638      	mov	r0, r7
 800b30e:	f104 060b 	add.w	r6, r4, #11
 800b312:	f000 f865 	bl	800b3e0 <__malloc_unlock>
 800b316:	f026 0607 	bic.w	r6, r6, #7
 800b31a:	1d23      	adds	r3, r4, #4
 800b31c:	1af2      	subs	r2, r6, r3
 800b31e:	d0b6      	beq.n	800b28e <_malloc_r+0x22>
 800b320:	1b9b      	subs	r3, r3, r6
 800b322:	50a3      	str	r3, [r4, r2]
 800b324:	e7b3      	b.n	800b28e <_malloc_r+0x22>
 800b326:	6862      	ldr	r2, [r4, #4]
 800b328:	42a3      	cmp	r3, r4
 800b32a:	bf0c      	ite	eq
 800b32c:	6032      	streq	r2, [r6, #0]
 800b32e:	605a      	strne	r2, [r3, #4]
 800b330:	e7ec      	b.n	800b30c <_malloc_r+0xa0>
 800b332:	4623      	mov	r3, r4
 800b334:	6864      	ldr	r4, [r4, #4]
 800b336:	e7b2      	b.n	800b29e <_malloc_r+0x32>
 800b338:	4634      	mov	r4, r6
 800b33a:	6876      	ldr	r6, [r6, #4]
 800b33c:	e7b9      	b.n	800b2b2 <_malloc_r+0x46>
 800b33e:	230c      	movs	r3, #12
 800b340:	4638      	mov	r0, r7
 800b342:	603b      	str	r3, [r7, #0]
 800b344:	f000 f84c 	bl	800b3e0 <__malloc_unlock>
 800b348:	e7a1      	b.n	800b28e <_malloc_r+0x22>
 800b34a:	6025      	str	r5, [r4, #0]
 800b34c:	e7de      	b.n	800b30c <_malloc_r+0xa0>
 800b34e:	bf00      	nop
 800b350:	200001f0 	.word	0x200001f0

0800b354 <_realloc_r>:
 800b354:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b358:	4680      	mov	r8, r0
 800b35a:	4614      	mov	r4, r2
 800b35c:	460e      	mov	r6, r1
 800b35e:	b921      	cbnz	r1, 800b36a <_realloc_r+0x16>
 800b360:	4611      	mov	r1, r2
 800b362:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b366:	f7ff bf81 	b.w	800b26c <_malloc_r>
 800b36a:	b92a      	cbnz	r2, 800b378 <_realloc_r+0x24>
 800b36c:	f7ff ff16 	bl	800b19c <_free_r>
 800b370:	4625      	mov	r5, r4
 800b372:	4628      	mov	r0, r5
 800b374:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b378:	f000 f838 	bl	800b3ec <_malloc_usable_size_r>
 800b37c:	4284      	cmp	r4, r0
 800b37e:	4607      	mov	r7, r0
 800b380:	d802      	bhi.n	800b388 <_realloc_r+0x34>
 800b382:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b386:	d812      	bhi.n	800b3ae <_realloc_r+0x5a>
 800b388:	4621      	mov	r1, r4
 800b38a:	4640      	mov	r0, r8
 800b38c:	f7ff ff6e 	bl	800b26c <_malloc_r>
 800b390:	4605      	mov	r5, r0
 800b392:	2800      	cmp	r0, #0
 800b394:	d0ed      	beq.n	800b372 <_realloc_r+0x1e>
 800b396:	42bc      	cmp	r4, r7
 800b398:	4622      	mov	r2, r4
 800b39a:	4631      	mov	r1, r6
 800b39c:	bf28      	it	cs
 800b39e:	463a      	movcs	r2, r7
 800b3a0:	f7ff fba2 	bl	800aae8 <memcpy>
 800b3a4:	4631      	mov	r1, r6
 800b3a6:	4640      	mov	r0, r8
 800b3a8:	f7ff fef8 	bl	800b19c <_free_r>
 800b3ac:	e7e1      	b.n	800b372 <_realloc_r+0x1e>
 800b3ae:	4635      	mov	r5, r6
 800b3b0:	e7df      	b.n	800b372 <_realloc_r+0x1e>
	...

0800b3b4 <_sbrk_r>:
 800b3b4:	b538      	push	{r3, r4, r5, lr}
 800b3b6:	2300      	movs	r3, #0
 800b3b8:	4d05      	ldr	r5, [pc, #20]	; (800b3d0 <_sbrk_r+0x1c>)
 800b3ba:	4604      	mov	r4, r0
 800b3bc:	4608      	mov	r0, r1
 800b3be:	602b      	str	r3, [r5, #0]
 800b3c0:	f7fc f9ae 	bl	8007720 <_sbrk>
 800b3c4:	1c43      	adds	r3, r0, #1
 800b3c6:	d102      	bne.n	800b3ce <_sbrk_r+0x1a>
 800b3c8:	682b      	ldr	r3, [r5, #0]
 800b3ca:	b103      	cbz	r3, 800b3ce <_sbrk_r+0x1a>
 800b3cc:	6023      	str	r3, [r4, #0]
 800b3ce:	bd38      	pop	{r3, r4, r5, pc}
 800b3d0:	200001f8 	.word	0x200001f8

0800b3d4 <__malloc_lock>:
 800b3d4:	4801      	ldr	r0, [pc, #4]	; (800b3dc <__malloc_lock+0x8>)
 800b3d6:	f000 b811 	b.w	800b3fc <__retarget_lock_acquire_recursive>
 800b3da:	bf00      	nop
 800b3dc:	200001fc 	.word	0x200001fc

0800b3e0 <__malloc_unlock>:
 800b3e0:	4801      	ldr	r0, [pc, #4]	; (800b3e8 <__malloc_unlock+0x8>)
 800b3e2:	f000 b80c 	b.w	800b3fe <__retarget_lock_release_recursive>
 800b3e6:	bf00      	nop
 800b3e8:	200001fc 	.word	0x200001fc

0800b3ec <_malloc_usable_size_r>:
 800b3ec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b3f0:	1f18      	subs	r0, r3, #4
 800b3f2:	2b00      	cmp	r3, #0
 800b3f4:	bfbc      	itt	lt
 800b3f6:	580b      	ldrlt	r3, [r1, r0]
 800b3f8:	18c0      	addlt	r0, r0, r3
 800b3fa:	4770      	bx	lr

0800b3fc <__retarget_lock_acquire_recursive>:
 800b3fc:	4770      	bx	lr

0800b3fe <__retarget_lock_release_recursive>:
 800b3fe:	4770      	bx	lr

0800b400 <_init>:
 800b400:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b402:	bf00      	nop
 800b404:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b406:	bc08      	pop	{r3}
 800b408:	469e      	mov	lr, r3
 800b40a:	4770      	bx	lr

0800b40c <_fini>:
 800b40c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b40e:	bf00      	nop
 800b410:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b412:	bc08      	pop	{r3}
 800b414:	469e      	mov	lr, r3
 800b416:	4770      	bx	lr
